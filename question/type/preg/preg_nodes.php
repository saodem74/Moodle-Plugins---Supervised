<?php
/**
 * Defines generic node classes, generated by parser.
 * The will be usually aggregated in engine-specific classes.
 * These classes are used primarily to store data, so their variable memebers are public
 *
 * @copyright &copy; 2010 Sychev Oleg, Kolesov Dmitriy
 * @author Sychev Oleg, Volgograd State Technical University
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
 * @package questions
 */

/**
 * Class for plain lexems (that are not complete nodes), so they could contain position information too.
 */
class preg_lexem {
    //Subtype of lexem
    public $subtype;
    //Indexes of first and last characters for the lexem, they are equal if it's one-character lexem
    public $indfirst = -1;
    public $indlast = -1;

    public function __construct($subtype, $indfirst, $indlast) {
        $this->subtype = $subtype;
        $this->indfirst = $indfirst;
        $this->indlast = $indlast;
    }
}

/**
 * Class for plain subpattern lexems.
 */
class preg_lexem_subpatt extends preg_lexem {
    //Number of subpattern
    public $number;

    public function __construct($subtype, $indfirst, $indlast, $number) {
        parent::__construct($subtype, $indfirst, $indlast);
        $this->number = $number;
    }
}

/**
 * The interface for objects that are passed to preg_leaf::match(), preg_leaf::consumes(), preg_leaf::next_character() as $matcherstateobj.
 */
interface qtype_preg_matcher_state {

    /**
     * Returns index of the first character matched for the given subpattern.
     */
    public function index_first($subpattern = 0);

    /**
     * Returns length of the given subpattern.
     */
    public function length($subpattern = 0);

    /**
     * Returns whether the given subpattern is captured.
     */
    public function is_subpattern_captured($subpattern);
}

/**
 * Generic node class
 */
abstract class preg_node {

    //////Class constants used to define type
    //Abstract node class, not representing real things
    const TYPE_ABSTRACT = 'abstract';
    //Character or character class
    const TYPE_LEAF_CHARSET = 'leaf_charset';
    //Meta-character or escape sequence matching with a set of characters that couldn't be enumerated
    const TYPE_LEAF_META = 'leaf_meta';
    //Simple assert: ^ $ or escape-sequence
    const TYPE_LEAF_ASSERT = 'leaf_assert';
    //Back reference to subpattern
    const TYPE_LEAF_BACKREF = 'leaf_backref';
    //Recursive match
    const TYPE_LEAF_RECURSION = 'leaf_recursion';
    //Option set
    const TYPE_LEAF_OPTIONS = 'leaf_options';
    //Combination of few leaf
    const TYPE_LEAF_COMBO = 'leaf_combo';

    //Finite quantifier
    const TYPE_NODE_FINITE_QUANT = 'node_finite_quant';
    //Infinite quantifier
    const TYPE_NODE_INFINITE_QUANT = 'node_infinite_quant';
    //Concatenation
    const TYPE_NODE_CONCAT = 'node_concat';
    //Alternative
    const TYPE_NODE_ALT = 'node_alt';
    //Assert with expression within
    const TYPE_NODE_ASSERT = 'node_assert';
    //Subpattern
    const TYPE_NODE_SUBPATT = 'node_subpatt';
    //Conditional subpattern
    const TYPE_NODE_COND_SUBPATT = 'node_cond_subpatt';
    //error node
    const TYPE_NODE_ERROR = 'node_error';

    //Member variables, common to all subclasses
    //Type, one of the class  - must return constants defined in this class
    public $type;
    //Subtype, defined by child class
    public $subtype;
    //Error data for the subtype
    public $error = false;
    //Indexes of first and last characters for the node, they are equal if it's one-character node
    public $indfirst = -1;
    public $indlast = -1;

    public function __construct() {
        $this->type = self::TYPE_ABSTRACT;
    }

    /**
    * Return class name without 'preg_' prefix
    * Interface string for the node name should be exactly same (and start from upper-case character)
    * if class not overloading ui_nodename function
    */
    abstract public function name();


    //May be overloaded by childs to change name using data from $this->pregnode
    public function ui_nodename() {
        return get_string($this->name(), 'qtype_preg');
    }

}

/**
* Generic leaf node class
*
*/
abstract class preg_leaf extends preg_node {

    //Is matching case insensitive?
    public $caseinsensitive = false;
    //Is leaf negative?
    public $negative = false;
    //Assertions, merged into this node (preg_leaf_assert objects)
    public $mergedassertions = array();

    /**
     * Returns number of characters consumed by this leaf: 0 in case of an assertion or eps-leaf, 1 in case of a single character, n in case of a backreferense
     * @param matcherstateobj an object which implements qtype_preg_matcher_state interface.
     */
    public function consumes($matcherstateobj = null) {
        return 1;
    }

    /**
     * Returns true if character(s) starting from $str[$pos] matches with leaf, false otherwise
     * Contains universal code to deal with merged assertions. Overload match_inner to define you leaf type matching
     * @param str the string being matched
     * @param pos position of character in the string, if leaf is no-consuming than position before this character analyzed
     * @param length an integer variable to store the length of the match
     * @param cs case sensitivity of the match
     * @param matcherstateobj an object which implements qtype_preg_matcher_state interface.
     */
    public function match($str, $pos, &$length, $cs, $matcherstateobj = null)
    {
        $result = true;
        //Check merged assertions
        foreach($this->mergedassertions as $assert) {
            $result = $result && $assert->match($str, $pos, $length, $cs);
        }
        //Now check this leaf
        if ($result) {
            $result = $this->match_inner($str, $pos, $length, $cs, $matcherstateobj);
        }

        return $result;
    }

    /**
     * Returns true if character(s) starting from $str[$pos] matches with leaf, false otherwise
     * Implements details of particular leaf matching
     * @param str the string being matched
     * @param pos position of character in the string, if leaf is no-consuming than position before this character analyzed
     * @param length an integer variable to store the length of the match
     * @param cs case sensitivity of the match
     * @param matcherstateobj an object which implements qtype_preg_matcher_state interface.
     */
    abstract protected function match_inner($str, $pos, &$length, $cs, $matcherstateobj = null);

    /*
    * Returns a character suitable for both this leaf and merged assertions and previous character
    * @param str string already matched
    * @param pos position of the last matched character in the string
    * @param length number of characters matched in case of partial backreference match
    * @param matcherstateobj an object which implements qtype_preg_matcher_state interface.
    */
    abstract public function next_character($str, $pos, $length = 0, $matcherstateobj = null);

    /**
    * function gives leaf in human readable form
    * @return human readable form of leaf
    */
    abstract public function tohr();

    /**
    * When clonning a leaf we want a copy of the merged assertions
    */
    public function __clone() {
        foreach ($this->mergedassertions as $i => $mergedassertion) {
            $this->mergedassertions[$i] = clone $mergedassertion;
        }
    }
}

/**
*Character or charcter class
*/
class preg_leaf_charset extends preg_leaf {
    public function __construct() {
        $this->type = preg_node::TYPE_LEAF_CHARSET;
        $this->ranges = array();
        //$this->flags = array(array());
        $this->israngecalculated = true;//empty ranges for empty leaf is correct!
    }
    public $flags;//simple flags in disjunctive normal form
    /*
    *simple ranges, range is pair of integer, ranges is 3d array of integer
    *or 2d array of pair (DNF of pair)
    */
    protected $ranges;
    protected $asserts;//array of assert flag (assert impossible to calculate as range), each asserts[i] is array of 0/1/2 asserts as flag; for ranges[i]
    public $negative;
    //true if charset is DNF range matrix, false if charset is DNF of flags
    public $israngecalculated;

    public function name() {
        return 'leaf_charset';
    }
    protected function calc_ranges() {
        $this->israngecalculated = true;
        die('implement range calulate before use it!');
    }
    protected function match_inner($str, $pos, &$length, $cs, $matcherstateobj = null) {
        $result = false;
        if ($this->flags === null) {
            return false;
        }
        foreach ($this->flags as $variant) {
            if (count($variant) > 0) {
                $varres = true;
                foreach ($variant as $flag) {
                    $varres &= $flag->match($str, $pos, $cs);
                }
            }
            if ($varres) {
                $result = true;
                break;
            }
        }
        if ($this->negative) {
            $result = !$result;
        }
        ($result === true) ? $length = 1 : $length = 0;
        return $result;
    }
    public function next_character($str, $pos, $length = 0, $matcherstateobj = null) { //may be rename to character?
        // TODO: use qtype_preg_unicode::get_ranges() and qtype_preg_unicode::intersect_ranges().
        if ($this->flags[0][0]->type === preg_charset_flag::SET) {
            if ($this->negative) {
                $ranges = qtype_preg_unicode::get_ranges($this->flags[0][0]->set->string());
                foreach ($ranges as $range) {
                    $leftborder = $range[0];
                    if ($leftborder < qtype_preg_unicode::ord(' ')) {
                        $leftborder = qtype_preg_unicode::ord(' ');
                    }
                    for ($i = $leftborder; $i < $range[1]; $i++) {
                        $char = new qtype_preg_string(qtype_preg_unicode::code2utf8($i));
                        if ($this->match($char, 0, $l, true)) {
                            return $char;
                        }
                    }
                }

            } else {
                return new qtype_preg_string($this->flags[0][0]->set[0]);
            }
        } else {
            for ($i = ord('a'); $i < 256; $i++) {
                $c = new qtype_preg_string(qtype_preg_unicode::code2utf8($i));
                if ($this->match($c, 0, $l, true)) {
                    return $c;
                }
            }
            for ($i = ord(' '); $i < ord('a'); $i++) {
                $c = new qtype_preg_string(qtype_preg_unicode::code2utf8($i));
                if ($this->match($c, 0, $l, true)) {
                    return $c;
                }
            }
        }
    }
    /**
    *function check that other charset included in this
    *it's meaning that any character matching with other match with this
    *@param other charset for checking including
    *@return true if included, false otherwise
    */
    public function is_include(preg_leaf_charset $other) {
        for ($i=32; $i<126; $i++) {
            $c=chr($i);
            if (!$this->match($c, 0, $l, true) && $other->match($c, 0, $l, true)) {//matching with other and not matching with this mean - not included!
                return false;
            }
        }
        return true;
    }
    public function is_part_ident(preg_leaf_charset $other) {
        $flag1=false;
        $flag2=false;
        for ($i=32; $i<126; $i++) {
            $c=chr($i);
            if ($this->match($c, 0, $l, true) && $other->match($c, 0, $l, true)) {//matching with other and not matching with this mean - not included!
                $flag1=true;
            }
            if (!$this->match($c, 0, $l, true) && $other->match($c, 0, $l, true) || $this->match($c, 0, $l, true) && !$other->match($c, 0, $l, true)) {//matching with other and not matching with this mean - not included!
                $flag2=true;
            }
        }
        return $flag1 && $flag2;
    }

    public function tohr() {
        $result = '';
        foreach ($this->flags as $ind1 => $extflag) {
            $cur = '';
            foreach ($extflag as $ind2 => $inflag) {
                $cur .= $inflag->tohr();
                if ($ind2 != count($extflag) - 1) {
                    $cur .= '&&';
                }
            }
            $result .= $cur;
            if ($ind1 != count($this->flags) - 1) {
                $result .= ' || ';
            }
        }
        return $result;
    }
    public function add_flag_dis(preg_charset_flag $flag) {
        echo 'implement add_flag before use!';
    }
    public function add_flag_con(preg_charset_flag $flag) {
        echo 'implement add_flag before use!';
    }
    public function push_negative() {
        if (!$this->negative) {
            return;
        }
        if ($this->flags===null) {
            return;
        }
        if (is_array($this->flags) && isset($this->flags[0]) && is_array($this->flags[0]) && isset($this->flags[0][0])) {
            if (is_array($this->flags) && isset($this->flags[1]) && is_array($this->flags[1])) {
                $this->flags[0] = $this->flags[1];
            }
        }
        $result = $this->flags[0];
        foreach ($this->flags as $i=>$disjunct) {
            if ($i!=0) {
                $result2 = array();
                foreach ($result as $resflag) {
                    foreach ($disjunct as $disflag) {
                        if (is_array($resflag)) {
                            $tmp = $resflag;
                        } else {
                            $tmp = array($resflag);
                        }
                        $tmp[] = $disflag;
                        $result2[] = $tmp;
                    }
                }
                $result = $result2;
            }
        }
        foreach ($this->flags as $i=>$disjunct) {
            foreach ($this->flags[$i] as $j=>$flag) {
                $this->flags[$i][$j] = clone $this->flags[$i][$j];
                $this->flags[$i][$j]->negative = !$this->flags[$i][$j]->negative;
            }
        }
        $this->reduce_dnf();
    }
    //return intersection
    public function intersect(preg_leaf_charset $other) {
        if ($this->negative) {
            $this->push_negative();
        }
        if ($other->negative) {
            $other->push_negative();
        }
        foreach ($this->flags as $disjunct1) {
            foreach ($other->flags as $disjunct2) {
                $resflags[] = array_merge($disjunct1, $disjunct2);
            }
        }
        $result = new preg_leaf_charset;
        $result->flags = $resflags;
        $result->israngecalculated = false;
        $result->reduce_dnf();
        return $result;
    }
    public function reduce_dnf() {
        if ($this->flags===null) {
            return;
        }
        $working = false;
        foreach ($this->flags as $key=>$disjunct) {
            foreach ($this->flags[$key] as $index=>$flag) {
                if (is_array($this->flags) && isset($this->flags[$key]) && is_array($this->flags[$key]) && isset($this->flags[$key][$index])) {
                    if ($flag->type===preg_charset_flag::SET && !$flag->negative) {
                        foreach ($disjunct as $flag2) {
                            $this->flags[$key][$index] = $this->flags[$key][$index]->intersect($flag2);
                            if ($this->flags[$key][$index]===null) {
                                $this->flags[$key]=null;
                                break;
                            }
                        }
                        $this->flags[$key] = array($this->flags[$key][$index]);
                    } else if ($flag->type===preg_charset_flag::SET || $flag->type===preg_charset_flag::FLAG) {//negative set or flag
                        foreach ($disjunct as $i=>$flag2) {
                            if (is_array($this->flags) && isset($this->flags[$key]) && is_array($this->flags[$key]) && isset($this->flags[$key][$i])) {
                                $intersected = $this->flags[$key][$index]->intersect($flag2);
                                if ($intersected===null) {
                                    $this->flags[$key]=null;
                                    break;
                                } else if ($intersected!==false) {
                                    $this->flags[$key][$index] = $intersected;
                                    if ($i!=$index) {
                                        $working=true;
                                        $this->flags[$key][$i] = null;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        $dnf = null;
        foreach ($this->flags as $disjunct) {
            if ($disjunct!==null) {
                $disj = null;
                foreach ($disjunct as $flag) {
                    if ($flag!==null) {
                        $disj[] = $flag;
                    }
                }
                if ($disj!==null) {
                    $dnf[] = $disj;
                }
            }
        }
        $this->flags = $dnf;
        if ($working) {
            $this->reduce_dnf();
        }
    }
    public function substract(preg_leaf_charset $other) {
        $other->negative = !$other->negative;
        return $this->intersect($other);
    }
    /**
     * Returns number of characters consumed by this leaf: 0 in case of an assertion or eps-leaf, 1 in case of a single character, n in case of a backreferense
     * @param matcherstateobj an object which implements qtype_preg_matcher_state interface.
     */
    public function consumes($matcherstateobj = null) {
        return 1;
    }

    public function __clone() {
        parent::__clone();
        if ($this->flags !== null) {
            foreach ($this->flags as $ind1 => $extflag) {
                $cur = array();
                foreach ($extflag as $ind2 => $inflag) {
                    $cur[$ind2] = clone $inflag;
                }
                $this->flags[$ind1] = $cur;
            }
        }
    }
}

/**
*one requirement to character
*/
class preg_charset_flag {

    // Charset types.
    const SET                    = 'enumerable_characters';
    const FLAG                   = 'functionally_calculated_characters';
    const UPROP                  = 'unicode_property';
    const CIRCUMFLEX             = 'circumflex';
    const DOLLAR                 = 'dollar';

    // Flag types.
    const DIGIT                  = 'digit';      // \d AND [:digit:]
    const XDIGIT                 = 'xdigit';     // [:xdigit:]
    const SPACE                  = 'space';      // \s AND [:space:]
    const WORDCHAR               = 'wordchar';   // \w AND [:word:]
    const ALNUM                  = 'alnum';      // [:alnum:]
    const ALPHA                  = 'alpha';      // [:alpha:]
    const ASCII                  = 'ascii';      // [:ascii:]
    const CNTRL                  = 'cntrl';      // [:ctrl:]
    const GRAPH                  = 'graph';      // [:graph:]
    const LOWER                  = 'lower';      // [:lower:]
    const UPPER                  = 'upper';      // [:upper:]
    const PRIN                   = 'print';      // [:print:] PRIN, because PRINT is php keyword
    const PUNCT                  = 'punct';      // [:punct:]
    const HSPACE                 = 'hspace';     // \h
    const VSPACE                 = 'vspace';     // \v
    const UPROPCC                = 'Cc';         // Control
    const UPROPCF                = 'Cf';         // Format
    const UPROPCN                = 'Cn';         // Unassigned
    const UPROPCO                = 'Co';         // Private use
    const UPROPCS                = 'Cs';         // Surrogate
    const UPROPC                 = 'C';          // Other
    const UPROPLL                = 'Ll';         // Lower case letter
    const UPROPLM                = 'Lm';         // Modifier letter
    const UPROPLO                = 'Lo';         // Other letter
    const UPROPLT                = 'Lt';         // Title case letter
    const UPROPLU                = 'Lu';         // Upper case letter
    const UPROPL                 = 'L';          // Letter
    const UPROPMC                = 'Mc';         // Spacing mark
    const UPROPME                = 'Me';         // Enclosing mark
    const UPROPMN                = 'Mn';         // Non-spacing mark
    const UPROPM                 = 'M';          // Mark
    const UPROPND                = 'Nd';         // Decimal number
    const UPROPNL                = 'Nl';         // Letter number
    const UPROPNO                = 'No';         // Other number
    const UPROPN                 = 'N';          // Number
    const UPROPPC                = 'Pc';         // Connector punctuation
    const UPROPPD                = 'Pd';         // Dash punctuation
    const UPROPPE                = 'Pe';         // Close punctuation
    const UPROPPF                = 'Pf';         // Final punctuation
    const UPROPPI                = 'Pi';         // Initial punctuation
    const UPROPPO                = 'Po';         // Other punctuation
    const UPROPPS                = 'Ps';         // Open punctuation
    const UPROPP                 = 'P';          // Punctuation
    const UPROPSC                = 'Sc';         // Currency symbol
    const UPROPSK                = 'Sk';         // Modifier symbol
    const UPROPSM                = 'Sm';         // Mathematical symbol
    const UPROPSO                = 'So';         // Other symbol
    const UPROPS                 = 'S';          // Symbol
    const UPROPZL                = 'Zl';         // Line separator
    const UPROPZP                = 'Zp';         // Paragraph separator
    const UPROPZS                = 'Zs';         // Space separator
    const UPROPZ                 = 'Z';          // Separator
    const ARABIC                 = 'Arabic';
    const ARMENIAN               = 'Armenian';
    const AVESTAN                = 'Avestan';
    const BALINESE               = 'Balinese';
    const BAMUM                  = 'Bamum';
    const BENGALI                = 'Bengali';
    const BOPOMOFO               = 'Bopomofo';
    const BRAILLE                = 'Braille';
    const BUGINESE               = 'Buginese';
    const BUHID                  = 'Buhid';
    const CANADIAN_ABORIGINAL    = 'Canadian_Aboriginal';
    const CARIAN                 = 'Carian';
    const CHAM                   = 'Cham';
    const CHEROKEE               = 'Cherokee';
    const COMMON                 = 'Common';
    const COPTIC                 = 'Coptic';
    const CUNEIFORM              = 'Cuneiform';
    const CYPRIOT                = 'Cypriot';
    const CYRILLIC               = 'Cyrillic';
    const DESERET                = 'Deseret';
    const DEVANAGARI             = 'Devanagari';
    const EGYPTIAN_HIEROGLYPHS   = 'Egyptian_Hieroglyphs';
    const ETHIOPIC               = 'Ethiopic';
    const GEORGIAN               = 'Georgian';
    const GLAGOLITIC             = 'Glagolitic';
    const GOTHIC                 = 'Gothic';
    const GREEK                  = 'Greek';
    const GUJARATI               = 'Gujarati';
    const GURMUKHI               = 'Gurmukhi';
    const HAN                    = 'Han';
    const HANGUL                 = 'Hangul';
    const HANUNOO                = 'Hanunoo';
    const HEBREW                 = 'Hebrew';
    const HIRAGANA               = 'Hiragana';
    const IMPERIAL_ARAMAIC       = 'Imperial_Aramaic';
    const INHERITED              = 'Inherited';
    const INSCRIPTIONAL_PAHLAVI  = 'Inscriptional_Pahlavi';
    const INSCRIPTIONAL_PARTHIAN = 'Inscriptional_Parthian';
    const JAVANESE               = 'Javanese';
    const KAITHI                 = 'Kaithi';
    const KANNADA                = 'Kannada';
    const KATAKANA               = 'Katakana';
    const KAYAH_LI               = 'Kayah_Li';
    const KHAROSHTHI             = 'Kharoshthi';
    const KHMER                  = 'Khmer';
    const LAO                    = 'Lao';
    const LATIN                  = 'Latin';
    const LEPCHA                 = 'Lepcha';
    const LIMBU                  = 'Limbu';
    const LINEAR_B               = 'Linear_B';
    const LISU                   = 'Lisu';
    const LYCIAN                 = 'Lycian';
    const LYDIAN                 = 'Lydian';
    const MALAYALAM              = 'Malayalam';
    const MEETEI_MAYEK           = 'Meetei_Mayek';
    const MONGOLIAN              = 'Mongolian';
    const MYANMAR                = 'Myanmar';
    const NEW_TAI_LUE            = 'New_Tai_Lue';
    const NKO                    = 'Nko';
    const OGHAM                  = 'Ogham';
    const OLD_ITALIC             = 'Old_Italic';
    const OLD_PERSIAN            = 'Old_Persian';
    const OLD_SOUTH_ARABIAN      = 'Old_South_Arabian';
    const OLD_TURKIC             = 'Old_Turkic';
    const OL_CHIKI               = 'Ol_Chiki';
    const ORIYA                  = 'Oriya';
    const OSMANYA                = 'Osmanya';
    const PHAGS_PA               = 'Phags_Pa';
    const PHOENICIAN             = 'Phoenician';
    const REJANG                 = 'Rejang';
    const RUNIC                  = 'Runic';
    const SAMARITAN              = 'Samaritan';
    const SAURASHTRA             = 'Saurashtra';
    const SHAVIAN                = 'Shavian';
    const SINHALA                = 'Sinhala';
    const SUNDANESE              = 'Sundanese';
    const SYLOTI_NAGRI           = 'Syloti_Nagri';
    const SYRIAC                 = 'Syriac';
    const TAGALOG                = 'Tagalog';
    const TAGBANWA               = 'Tagbanwa';
    const TAI_LE                 = 'Tai_Le';
    const TAI_THAM               = 'Tai_Tham';
    const TAI_VIET               = 'Tai_Viet';
    const TAMIL                  = 'Tamil';
    const TELUGU                 = 'Telugu';
    const THAANA                 = 'Thaana';
    const THAI                   = 'Thai';
    const TIBETAN                = 'Tibetan';
    const TIFINAGH               = 'Tifinagh';
    const UGARITIC               = 'Ugaritic';
    const VAI                    = 'Vai';
    const YI                     = 'Yi';

    /** Is this flag negative. */
    public $negative;
    /** Type of this flag, can be either SET or FLAG or UPROP or CIRCUMFLEX or DOLLAR. */
    public $type;
    /** Characters which match this flag if this is SET, see the constants above. */
    public $set;
    /* Name of the qtype_preg_unicode function which verifies this flag, see the constants above. */
    public $flag;
    /* Name of the qtype_preg_unicode function which verifies this flag, see the constants above. */
    public $uniprop;

    static protected $flagtypes;
    static protected $intersection;

    public function __clone() {
        $this->negative = $this->negative;
        $this->type = $this->type;

        if ($this->set !== null) {
            $this->set = clone $this->set;
        } else {
            $this->set = $this->set;
        }
        $this->flag = $this->flag;
        $this->uniprop = $this->uniprop;
    }

    public function set_circumflex() {
        $this->type = self::CIRCUMFLEX;
    }

    public function set_dollar() {
        $this->type = self::DOLLAR;
    }

    public function set_set($set) {
        $this->type = self::SET;
        $this->set = $set;
    }

    public function set_flag($flag) {
        $this->type = self::FLAG;
        $this->flag = $flag;
    }

    public function set_uprop($prop) {
        $this->type = self::UPROP;
        $this->uniprop = $prop;        //'/\\p{'.$prop.'}/';
    }

    public function is_null_length() {
        return $this->type === self::CIRCUMFLEX || $this->type === self::DOLLAR;
    }

    public function match($str, $pos, $cs = true) {
        if ($pos < 0 || $pos >= $str->length()) {
            return false;    // String index out of borders.
        }
        switch ($this->type) {
            case self::CIRCUMFLEX:
                $result = ($pos === 0);
                break;
            case self::DOLLAR:
                $result = ($pos === $str->length() - 1);
                break;
            case self::SET:
                $charsetcopy = clone $this->set;
                $strcopy = clone $str;
                if (!$cs) {
                    $charsetcopy->tolower();
                    $strcopy->tolower();
                }
                $result = ($charsetcopy->contains($strcopy[$pos]) !== false);
                break;
            case self::FLAG:
                $result = (bool)call_user_func_array('qtype_preg_unicode::is_' . $this->flag, array($str[$pos]));
                break;
            case self::UPROP:
                $result = (bool)call_user_func_array('preg_match', array($this->uniprop, $str[$pos]));
                break;
        }
        if ($this->negative) {
            $result = !$result;
        }
        return $result;
    }
    /**
     * Intersect this flag with other, if possible.
     * @param other other flag to intersect with.
     * @return result of the intersection as preg_charset flag, if intersection is possible, null if intersection is empty and false if intersection is impossible.
    */
    public function intersect(preg_charset_flag $other) {
        if ($this->type === preg_charset_flag::FLAG && $other->type === preg_charset_flag::FLAG) {
            foreach (self::$flagtypes as $index => $flagtype) {
                if ($flagtype === $this->flag) {
                    $selfindex = $index;
                    if ($this->negative) {
                        $selfindex += 13;
                    }
                    break;
                }
            }
            foreach (self::$flagtypes as $index => $flagtype) {
                if ($flagtype === $other->flag) {
                    $otherindex = $index;
                    if ($other->negative) {
                        $otherindex += 13;
                    }
                    break;
                }
            }
            $result = self::$intersection[26 * $selfindex + $otherindex];
            if ($result === false || $result === null) {
                return $result;
            } else if ($result === 'set') {
                return false;
            } else {
                $res = new preg_charset_flag;
                if ($result[0] === '-') {
                    $res->set_flag(qtype_preg_unicode::substr($result, 1));
                    $res->negative = true;
                } else {
                    $res->set_flag($result);
                }
                return $res;
            }
        } else if ($this->type === preg_charset_flag::FLAG && $other->type === preg_charset_flag::SET) {
            if ($other->negative) {
                return false;
            }
            $res = new preg_charset_flag;
            $str = new qtype_preg_string('');
            for ($i = 0; $i < $other->set->length(); $i++) {
                if ($this->match($other->set, $i)) {
                    $str->concatenate($other->set[$i]);
                }
            }
            if ($str->length() === 0) {
                return null;
            }
            $res->set_set($str);
            return $res;
        } else if ($this->type === preg_charset_flag::SET && $other->type === preg_charset_flag::FLAG) {
            return $other->intersect($this);
        } else if ($this->type === preg_charset_flag::SET && $other->type === preg_charset_flag::SET) {
            if ($this->negative && $other->negative) {
                $res = new preg_charset_flag;
                $str = clone $this->set;
                $str->concatenate($other->set);
                $resstr = new qtype_preg_string('');
                for ($i = 0; $i < $str->length(); $i++) {
                    if (qtype_preg_unicode::strpos($str, $str[$i]) == $i) {
                        $resstr->concatenate($str[$i]);
                    }
                }
                $res->negative = true;
                if ($resstr->length() === 0) {
                    return null;
                }
                $res->set_set($resstr);
            } else if ($this->negative && !$other->negative) {
                $res = new preg_charset_flag;
                $str = new qtype_preg_string('');
                for ($i = 0; $i < $other->set->length(); $i++) {
                    if ($this->match($other->set, $i)) {
                        $str->concatenate($other->set[$i]);
                    }
                }
                if ($str->length() === 0) {
                    return null;
                }
                $res->set_set($str);
                return $res;
            } else {
                $res = new preg_charset_flag;
                $str = new qtype_preg_string('');
                for ($i = 0; $i < $this->set->length(); $i++) {
                    if ($other->match($this->set, $i)) {
                        $str->concatenate($this->set[$i]);
                    }
                }
                if ($str->length() === 0) {
                    return null;
                }
                $res->set_set($str);
                return $res;
            }
            return $res;
        } else {
            return false;
        }
    }
    /**
     * Substract this flag with other, if possible.
     * @param other other flag for substraction.
     * @return result of substraction as preg_charset flag, if substraction is possible, null if substraction is empty and false if substraction is impossible
     */
    public function substract(preg_charset_flag $other) {
        $copy = clone $other;
        return $this->intersect($copy);
    }

    /**
     * Returns char code range for this flag.
     * @return range as array[2] of integer or array of ranges (for set) as array[size][2] of integer
     */
    public function get_range() {
        die('implement get_range before use i1!');
    }



    public function __construct() {
        if (is_array(self::$flagtypes)) {
            return;
        }

        self::$flagtypes = array(self::DIGIT, self::XDIGIT, self::SPACE, self::WORDCHAR, self::ALNUM, self::ALPHA, self::ASCII, self::CNTRL, self::GRAPH, self::LOWER, self::UPPER, self::PRIN, self::PUNCT);

        self::$intersection = array(

        //               digit,         xdigit,         space,         wordchar,         alnum,          alpha,         ascii,        cntrl,         graph,           lower,         upper,         print,          punct,         ndigit,              nxdigit,              nspace,            nwordchar,            nalnum,              nalpha,              nascii,           ncntrl,            ngraph,            nlower,               nupper,             nprint,           npunct
        /*digit*/        self::DIGIT,   self::DIGIT,    null,          self::DIGIT,      self::DIGIT,    null,          'set',        null,          self::DIGIT,     null,          null,          self::DIGIT,    null,          null,                null,                 self::DIGIT,       null,                 null,                self::DIGIT,         false,            self::DIGIT,       null,              self::DIGIT,          self::DIGIT,        null,             self::DIGIT,
        /*xdigit*/       self::DIGIT,   self::XDIGIT,   null,          self::XDIGIT,     self::XDIGIT,   'set',         'set',        null,          self::XDIGIT,    'set',         'set',         self::XDIGIT,   null,          'set',               null,                 self::XDIGIT,      null,                 null,                self::DIGIT,         false,            self::XDIGIT,      null,              false,                false,              null,             self::XDIGIT,
        /*space*/        null,          null,           self::SPACE,   null,             null,           null,          'set',        null,          null,            null,          null,          self::SPACE,    null,          self::SPACE,         self::SPACE,          null,              self::SPACE,          self::SPACE,         self::SPACE,         false,            self::SPACE,       self::SPACE,       self::SPACE,          self::SPACE,        null,             self::SPACE,
        /*wordchar*/     self::DIGIT,   self::XDIGIT,   null,          self::WORDCHAR,   self::ALNUM,    self::ALPHA,   'set',        null,          self::WORDCHAR,  self::LOWER,   self::UPPER,   self::WORDCHAR, null,          self::ALNUM,         false,                self::WORDCHAR,    null,                 'set',               false,               false,            self::WORDCHAR,    null,              false,                false,              null,             self::WORDCHAR,
        /*alnum*/        self::DIGIT,   self::XDIGIT,   null,          self::ALNUM,      self::ALNUM,    self::ALPHA,   'set',        null,          self::ALNUM,     self::LOWER,   self::UPPER,   self::ALNUM,    null,          self::ALPHA,         false,                self::ALNUM,       null,                 null,                self::DIGIT,         false,            self::ALNUM,       null,              false,                false,              null,             self::ALNUM,
        /*alpha*/        null,          false,          null,          self::ALPHA,      self::ALPHA,    self::ALPHA,   'set',        null,          self::ALPHA,     self::LOWER,   self::UPPER,   self::ALPHA,    null,          self::ALPHA,         false,                self::ALPHA,       null,                 null,                null,                false,            self::ALPHA,       null,              self::UPPER,          self::LOWER,        null,             self::ALPHA,
        /*ascii*/        'set',         'set',          'set',         'set',            'set',          'set',         self::ASCII,  'set',         'set',           'set',         'set',         'set',          'set',         'set',               'set',                'set',             'set',                'set',               'set',               null,             'set',             'set',             'set',                'set',              'set',            'set',
        /*cntrl*/        null,          null,           null,          null,             null,           null,          'set',        self::CNTRL,   false,           null,          null,          false,          null,          self::CNTRL,         self::CNTRL,          self::CNTRL,       self::CNTRL,          self::CNTRL,         self::CNTRL,         false,            null,              false,             self::CNTRL,          self::CNTRL,        false,            false,
        /*graph*/        self::DIGIT,   self::XDIGIT,   null,          self::WORDCHAR,   self::ALNUM,    self::ALPHA,   'set',        false,         self::GRAPH,     self::LOWER,   self::UPPER,   self::PRIN,     false,         false,               false,                false,             false,                false,               false,               false,            false,             null,              false,                false,              false,            false,
        /*lower*/        null,          null,           null,          self::LOWER,      self::LOWER,    self::LOWER,   'set',        null,          self::LOWER,     self::LOWER,   null,          self::LOWER,    null,          self::LOWER,         false,                self::LOWER,       null,                 null,                null,                false,            self::LOWER,       null,              null,                 self::LOWER,        null,             self::LOWER,
        /*upper*/        null,          null,           null,          self::UPPER,      self::UPPER,    self::UPPER,   'set',        null,          self::UPPER,     null,          self::UPPER,   self::UPPER,    null,          self::UPPER,         false,                self::UPPER,       null,                 null,                null,                false,            self::UPPER,       null,              self::UPPER,          null,               null,             self::UPPER,
        /*print*/        self::DIGIT,   self::XDIGIT,   self::SPACE,   self::WORDCHAR,   self::ALNUM,    self::ALPHA,   'set',        false,         self::GRAPH,     self::LOWER,   self::UPPER,   self::PRIN,     self::PUNCT,   false,               false,                false,             false,                false,               false,               false,            false,             false,             false,                false,              null,             false,
        /*punct*/        null,          null,           null,          null,             null,           null,          'set',        false,         null,            null,          null,          self::PUNCT,    self::PUNCT,   self::PUNCT,         self::PUNCT,          self::PUNCT,       self::PUNCT,          self::PUNCT,         self::PUNCT,         false,            false,             self::PUNCT,       self::PUNCT,          self::PUNCT,        null,             null,
        /*ndigit*/       null,          'set',          self::SPACE,   self::ALNUM,      self::ALPHA,    self::ALPHA,   'set',        self::CNTRL,   false,           self::LOWER,   self::UPPER,   false,          self::PUNCT,   '-'.self::DIGIT,     '-'.self::XDIGIT,     false,             '-'.self::WORDCHAR,   '-'.self::ALNUM,     '-'.self::ALNUM,     false,            false,             '-'.self::GRAPH,   false,                false,              '-'.self::PRIN,   false,
        /*nxdigit*/      null,          null,           self::SPACE,   false,            false,          false,         'set',        self::CNTRL,   false,           self::LOWER,   false,         false,          self::PUNCT,   '-'.self::XDIGIT,    '-'.self::XDIGIT,     false,             '-'.self::WORDCHAR,   '-'.self::ALNUM,     '-'.self::ALNUM,     false,            false,             '-'.self::GRAPH,   false,                false,              '-'.self::PRIN,   false,
        /*nspace*/       self::DIGIT,   self::XDIGIT,   null,          self::WORDCHAR,   self::ALNUM,    self::ALPHA,   'set',        self::CNTRL,   false,           self::LOWER,   self::UPPER,   false,          self::PUNCT,   false,               false,                '-'.self::SPACE,   false,                false,               false,               false,            false,             false,             false,                false,              '-'.self::PRIN,   false,
        /*nwordchar*/    null,          null,           self::SPACE,   null,             null,           null,          'set',        self::CNTRL,   false,           null,          null,          false,          self::PUNCT,   '-'.self::WORDCHAR,  '-'.self::WORDCHAR,   false,             '-'.self::WORDCHAR,   '-'.self::WORDCHAR,  '-'.self::WORDCHAR,  false,            false,             '-'.self::GRAPH,   '-'.self::WORDCHAR,   '-'.self::WORDCHAR, '-'.self::PRIN,   false,
        /*nalnum*/       null,          null,           self::SPACE,   'set',            null,           null,          'set',        self::CNTRL,   false,           null,          null,          false,          self::PUNCT,   '-'.self::ALNUM,     '-'.self::ALNUM,      false,             '-'.self::WORDCHAR,   '-'.self::ALNUM,     '-'.self::ALNUM,     false,            false,             '-'.self::GRAPH,   '-'.self::ALNUM,      '-'.self::ALNUM,    '-'.self::PRIN,   false,
        /*nalpha*/       self::DIGIT,   self::DIGIT,    self::SPACE,   false,            self::DIGIT,    null,          'set',        self::CNTRL,   false,           null,          null,          false,          self::PUNCT,   '-'.self::ALNUM,     '-'.self::ALNUM,      false,             '-'.self::WORDCHAR,   '-'.self::ALNUM,     '-'.self::ALPHA,     false,            false,             '-'.self::GRAPH,   '-'.self::ALPHA,      '-'.self::ALPHA,    '-'.self::PRIN,   false,
        /*nascii*/       false,         false,          false,         false,            false,          false,         null,         false,         false,           false,         false,         false,          false,         false,               false,                false,             false,                false,               false,               '-'.self::ASCII,  false,             false,             false,                false,              false,            false,
        /*ncntrl*/       self::DIGIT,   self::XDIGIT,   self::SPACE,   self::WORDCHAR,   self::ALNUM,    self::ALPHA,   'set',        null,          false,           self::LOWER,   self::UPPER,   false,          false,         false,               false,                false,             false,                false,               false,               false,            '-'.self::CNTRL,   false,             false,                false,              false,            false,
        /*ngraph*/       null,          null,           self::SPACE,   null,             null,           null,          'set',        false,         null,            null,          null,          false,          self::PUNCT,   '-'.self::GRAPH,     '-'.self::GRAPH,      false,             '-'.self::GRAPH,      '-'.self::GRAPH,     '-'.self::GRAPH,     false,            false,             '-'.self::GRAPH,   '-'.self::GRAPH,      '-'.self::GRAPH,    '-'.self::PRIN,   false,
        /*nlower*/       self::DIGIT,   false,          self::SPACE,   false,            false,          self::UPPER,   'set',        self::CNTRL,   false,           null,          self::UPPER,   false,          self::PUNCT,   false,               false,                false,             '-'.self::WORDCHAR,   '-'.self::ALNUM,     '-'.self::ALPHA,     false,            false,             '-'.self::GRAPH,   '-'.self::LOWER,      '-'.self::ALPHA,    '-'.self::PRIN,   false,
        /*nupper*/       self::DIGIT,   false,          self::SPACE,   false,            false,          self::LOWER,   'set',        self::CNTRL,   false,           self::LOWER,   null,          false,          self::PUNCT,   false,               false,                false,             '-'.self::WORDCHAR,   '-'.self::ALNUM,     '-'.self::ALPHA,     false,            false,             '-'.self::GRAPH,   '-'.self::ALPHA,      '-'.self::UPPER,    '-'.self::PRIN,   false,
        /*nprint*/       null,          null,           null,          null,             null,           null,          'set',        false,         false,           null,          null,          null,           null,          '-'.self::PRIN,      '-'.self::PRIN,       '-'.self::PRIN,    '-'.self::PRIN,       '-'.self::PRIN,      '-'.self::PRIN,      false,            false,             '-'.self::PRIN,    '-'.self::PRIN,       '-'.self::PRIN,     '-'.self::PRIN,   '-'.self::PRIN,
        /*npunct*/       self::DIGIT,   self::XDIGIT,   self::SPACE,   self::WORDCHAR,   self::ALNUM,    self::ALPHA,   'set',        false,         false,           self::LOWER,   self::UPPER,   false,          null,          false,               false,                false,             false,                false,               false,               false,            false,             false,             false,                false,              '-'.self::PRIN,   '-'.self::PUNCT

       );
    }

    public function tohr() {
        $result = '';
        switch ($this->type) {
        case self::CIRCUMFLEX:
            $result = '^';
            break;
        case self::DOLLAR:
            $result = '$';
            break;
        case self::SET:
            $result = $this->set;
            break;
        case self::FLAG:
            $result = $this->flag;
            break;
        case self::UPROP:
            $result = 'todo';
            break;
        default:
            return '';
        }
        if ($this->negative) {
            $result = '!' . $result;
        }
        return $result;
    }
}

/**
* Meta-character or escape sequence defining character set that couldn't be enumerated
*/
class preg_leaf_meta extends preg_leaf {

    //Leaf with empty in alternative (something|)
    const SUBTYPE_EMPTY = 'empty_leaf_meta';
    //Service subtype - end of regex, but not end of string
    const SUBTYPE_ENDREG = 'endreg_leaf_meta';

    public function __construct() {
        $this->type = preg_node::TYPE_LEAF_META;
    }
    public function name() {
        return 'leaf_meta';
    }

    //TODO - ui_nodename()

    public function consumes($matcherstateobj = null) {
        return 0;
    }

    public function next_character($str, $pos, $length = 0, $matcherstateobj = null) {
        return new qtype_preg_string('');
    }

    protected function match_inner($str, $pos, &$length, $cs, $matcherstateobj = null) {
        $length = 0;
        return true;
    }

    public function tohr() {
        switch ($this->subtype) {
            case preg_leaf_meta::SUBTYPE_ENDREG:
                return 'metaENDREG';
            case preg_leaf_meta::SUBTYPE_EMPTY:
                return 'metaEPS';
            default:
                return '';
        }
    }
}

/**
* Meta-character or escape sequence defining character set that couldn't be enumerated
*/
class preg_leaf_assert extends preg_leaf {

    //^
    const SUBTYPE_CIRCUMFLEX = 'circumflex_leaf_assert';
    //$
    const SUBTYPE_DOLLAR = 'dollar_leaf_assert';
    // \b
    const SUBTYPE_WORDBREAK = 'wordbreak_leaf_assert';
    // \A
    const SUBTYPE_ESC_A = 'esc_a_leaf_assert';
    // \z
    const SUBTYPE_ESC_Z = 'esc_z_leaf_assert';
    // \G
    const SUBTYPE_ESC_G = 'esc_g_leaf_assert';

    //Reference to the matcher object to be able to query it for captured subpattern
    //Filled only to ESC_G subtype if it would be implemented in the future
    public $matcher;

    public function __construct() {
        $this->type = preg_node::TYPE_LEAF_ASSERT;
    }

    public function consumes($matcherstateobj = null) {
        return 0;
    }

    public function name() {
        return 'leaf_assert';
    }

    //TODO - ui_nodename()
    protected function match_inner($str, $pos, &$length, $cs, $matcherstateobj = null) {
        $length = 0;
        switch ($this->subtype) {
            case preg_leaf_assert::SUBTYPE_ESC_A:    // Because may be one line only is response.
            case preg_leaf_assert::SUBTYPE_ESC_G:    // There are no repetitive matching for now, so \G is equvivalent to \A.
            case preg_leaf_assert::SUBTYPE_CIRCUMFLEX:
                $result = ($pos === 0);
                break;
            case preg_leaf_assert::SUBTYPE_ESC_Z:    // Because may be one line only is response
            case preg_leaf_assert::SUBTYPE_DOLLAR:
                $result = ($pos === $str->length());
                break;
            case preg_leaf_assert::SUBTYPE_WORDBREAK:
                $start = $pos === 0 && ($str[0] === '_' || qtype_preg_unicode::is_alnum($str[0]));
                $end = $pos === $str->length() && ($str[$pos - 1] === '_' || qtype_preg_unicode::is_alnum($str[$pos - 1]));
                $wW = $Ww = false;
                if ($pos > 0 && $pos < $str->length()) {
                    $wW = ($str[$pos - 1] === '_' || qtype_preg_unicode::is_alnum($str[$pos - 1])) && !($str[$pos] === '_' || qtype_preg_unicode::is_alnum($str[$pos]));
                    $Ww = !($str[$pos - 1] === '_' || qtype_preg_unicode::is_alnum($str[$pos - 1])) && ($str[$pos] === '_' || qtype_preg_unicode::is_alnum($str[$pos]));
                }
                $result = ($start || $end || $wW || $Ww);
                break;
            default:
                $result = false;
        }
        if ($this->negative) {
            $result = !$result;
        }
        return $result;
    }
    public function next_character($str, $pos, $length = 0, $matcherstateobj = null) {
        switch ($this->subtype) {
            case preg_leaf_assert::SUBTYPE_ESC_A://because may be one line only is response
            case preg_leaf_assert::SUBTYPE_CIRCUMFLEX:
                if ($this->negative) {
                    return 'notstringstart';
                } else {
                    return 'stringstart';
                }
                break;
            case preg_leaf_assert::SUBTYPE_ESC_Z://because may be one line only is response
            case preg_leaf_assert::SUBTYPE_DOLLAR:
                if ($this->negative) {
                    return ' notstringend';
                } else {
                    return '';
                }
                break;
            case preg_leaf_assert::SUBTYPE_WORDBREAK:
                if ($this->negative) {
                    return 'notwordchar';
                } else {
                    return 'wordchar';
                }
                break;
        }
    }
    public function tohr() {
        switch ($this->subtype) {
            case preg_leaf_assert::SUBTYPE_ESC_A://because may be one line only is response
            case preg_leaf_assert::SUBTYPE_CIRCUMFLEX:
                $type = '^';
                break;
            case preg_leaf_assert::SUBTYPE_ESC_Z://because may be one line only is response
            case preg_leaf_assert::SUBTYPE_DOLLAR:
                $type = '$';
                break;
            case preg_leaf_assert::SUBTYPE_WORDBREAK:
                $type = '\\b';
                break;
        }
        if ($this->negative) {
            return '!assert' . $type;
        } else {
            return 'assert' . $type;
        }
    }
}

class preg_leaf_backref extends preg_leaf {
    public $number;
    //Reference to the matcher object to be able to query it for captured subpattern
    public $matcher;

    public function __construct() {
        $this->type = preg_node::TYPE_LEAF_BACKREF;
    }

    public function consumes($matcherstateobj = null) {
        if (!$matcherstateobj->is_subpattern_captured($this->number)) {
            return qtype_preg_matching_results::UNKNOWN_CHARACTERS_LEFT;
        }
        return $matcherstateobj->length($this->number);
    }

    protected function match_inner($str, $pos, &$length, $cs, $matcherstateobj = null) {
        $length = 0;
        $subpattlen = $matcherstateobj->length($this->number);
        $start = $matcherstateobj->index_first($this->number);
        $end = $start + $subpattlen - 1;

        if (!$matcherstateobj->is_subpattern_captured($this->number) || ($subpattlen > 0 && $pos >= $str->length())) {
            return false;
        } else if ($subpattlen === 0) {
            return true;
        }

        $strcopy = clone $str;
        if (!$cs) {
            $strcopy->tolower();
        }
        $matchlen = 0;
        $result = true;
        // Check char by char.
        for ($i = $start; $result && $i <= $end && $matchlen + $pos < $str->length(); $i++) {
            $result = $result && ($strcopy[$i] === $strcopy[$pos + $matchlen]);
            if ($result) {
                $matchlen++;
            }
        }
        // If the string has not enough characters.
        if ($pos + $subpattlen - 1 >= $str->length()) {
            $result = false;
        }
        $length = $matchlen;
        return $result;
    }

    public function name() {
        return 'leaf_backref';
    }

    public function next_character($str, $pos, $length = 0, $matcherstateobj = null) {
        // TODO: check for assertions in case of $length == 0
        if (!$matcherstateobj->is_subpattern_captured($this->number)) {
            return new qtype_preg_string('');
        }
        $start = $matcherstateobj->index_first($this->number);
        $end = $start + $matcherstateobj->length($this->number);
        if ($end > $str->length()) {
            return new qtype_preg_string('');
        }
        return $str->substr($start + $length, $end - $start - $length);
    }

    public function tohr() {
        return 'backref #' . $this->number;
    }
}

class preg_leaf_option extends preg_leaf {
    public $posopt;
    public $negopt;

    public function __construct() {
        $this->type = preg_node::TYPE_LEAF_OPTIONS;
    }
    protected function match_inner($str, $pos, &$length, $cs, $matcherstateobj = null) {
        die ('TODO: implements abstract function match for preg_leaf_option class before use it!');
    }
    public function name() {
        return 'leaf_option';
    }
    public function next_character($str, $pos, $length = 0, $matcherstateobj = null) {
        die ('TODO: implements abstract function character for preg_leaf_option class before use it!');
    }
    public function tohr() {
        return '(?'.$this->posopt.'-'.$this->negopt;
    }
}

    //TODO - ui_nodename()
class preg_leaf_recursion extends preg_leaf {

    public $number;

    public function __construct() {
        $this->type = preg_node::TYPE_LEAF_RECURSION;
    }
    protected function match_inner($str, $pos, &$length, $cs, $matcherstateobj = null) {
        die ('TODO: implements abstract function match for preg_leaf_recursion class before use it!');
    }
    public function name() {
        return 'leaf_recursion';
    }
    public function next_character($str, $pos, $length = 0, $matcherstateobj = null){
        die ('TODO: implements abstract function character for preg_leaf_recursion class before use it!');
    }
    public function tohr() {
        return 'recursion';
    }
}


/**
* Operator node
*/
abstract class preg_operator extends preg_node {

    //An array of operands
    public $operands = array();

    /**
    * When clonning an operator we want a copy of the whole subtree, not the references to the operands
    */
    public function __clone() {
        foreach ($this->operands as $i => $operand) {
            $this->operands[$i] = clone $operand;
        }
    }
}


/**
* Finite quantifier node with left and right border
* Unary
* Possible errors: left border is greater than right one
*/
class preg_node_finite_quant extends preg_operator {

    //Is quantifier lazy?
    public $lazy;
    //Is quantifier greed?
    public $greed;
    //Is quantifier possessive?
    public $possessive;
    //Smallest possible repetition number
    public $leftborder;
    //Biggest possible repetition number
    public $rightborder;

    public function __construct() {
        $this->type = preg_node::TYPE_NODE_FINITE_QUANT;
    }

    public function name() {
        return 'node_finite_quant';
    }

    //TODO - ui_nodename()
}

/**
* Infinite quantifier node with left border only
* Unary
*/
class preg_node_infinite_quant extends preg_operator {

    //Is quantifier lazy?
    public $lazy;
    //Is quantifier greed?
    public $greed;
    //Is quantifier possessive?
    public $possessive;
    //Smallest possible repetition number
    public $leftborder;

    public function __construct() {
        $this->type = preg_node::TYPE_NODE_INFINITE_QUANT;
    }

    public function name() {
        return 'node_infinite_quant';
    }

    //TODO - ui_nodename()
}

/**
* Concatenation operator
* Binary
*/
class preg_node_concat extends preg_operator {
    public function __construct() {
        $this->type = preg_node::TYPE_NODE_CONCAT;
    }

    public function name() {
        return 'node_concat';
    }

}

/**
* Alternative operator
* Binary
*/
class preg_node_alt extends preg_operator {

    public function __construct() {
        $this->type = preg_node::TYPE_NODE_ALT;
    }

    public function name() {
        return 'node_alt';
    }

}

/**
* Assert with expression within
* Unary
*/
class preg_node_assert extends preg_operator {

    //Positive lookahead assert
    const SUBTYPE_PLA = 'pla_node_assert';
    //Negative lookahead assert
    const SUBTYPE_NLA = 'nla_node_assert';
    //Positive lookbehind assert
    const SUBTYPE_PLB = 'plb_node_assert';
    //Negative lookbehind assert
    const SUBTYPE_NLB = 'nlb_node_assert';

    public function __construct() {
        $this->type = preg_node::TYPE_NODE_ASSERT;
    }

    public function name() {
        return 'node_assert';
    }
    public function tohr() {
        return 'node assert';
    }

    //TODO - ui_nodename()
}

/**
* Subpattern
* Unary
*/
class preg_node_subpatt extends preg_operator {

    //Subpattern
    const SUBTYPE_SUBPATT = 'subpatt_node_subpatt';
    //Once-only subpattern
    const SUBTYPE_ONCEONLY = 'onceonly_node_subpatt';

    //Subpattern number
    public $number = 0;
    //Subpattern match (if supported)
    public $match = null;

    public function __construct() {
        $this->type = preg_node::TYPE_NODE_SUBPATT;
    }

    public function name() {
        return 'node_subpatt';
    }

    //TODO - ui_nodename()
}

/**
* Conditional subpattern
* Unary, binary or ternary, first operand is assert expression (if any),  second - yes-pattern, third - no-pattern
* Possible errors: there is no backreference with such number in expression
*/
class preg_node_cond_subpatt extends preg_operator {

    //Subtypes define a type of condition for subpatern
    //Positive lookahead assert
    const SUBTYPE_PLA = 'pla_node_cond_subpatt';
    //Negative lookahead assert
    const SUBTYPE_NLA = 'nla_node_cond_subpatt';
    //Positive lookbehind assert
    const SUBTYPE_PLB = 'plb_node_cond_subpatt';
    //Negative lookbehind assert
    const SUBTYPE_NLB = 'nlb_node_cond_subpatt';
    //Backreference
    const SUBTYPE_BACKREF = 'backref_node_cond_subpatt';
    //Recursive
    const SUBTYPE_RECURSIVE = 'recursive_node_cond_subpatt';

    //Subpattern number
    public $number = 0;
    //Subpattern match (if supported)
    public $match = null;
    //Is condition satisfied?
    public $condbranch = null;
    //Backreference number
    public $backrefnumber = -1;

    public function __construct() {
        $this->type = preg_node::TYPE_NODE_COND_SUBPATT;
    }

    public function name() {
        return 'node_cond_subpatt';
    }

    //TODO - ui_nodename()
}
class preg_node_error extends preg_node {

    //Subtypes define a type of error
    //Unknown parse error
    const SUBTYPE_UNKNOWN_ERROR = 'unknown_error_node_error';
    //Too much top-level alternatives in conditional subpattern
    const SUBTYPE_CONDSUBPATT_TOO_MUCH_ALTER = 'consubpatt_too_much_alter_node_error';
    //Close paren without opening  xxx)
    const SUBTYPE_WRONG_CLOSE_PAREN = 'wrong_close_paren_node_error';
    //Ending of a lexem without beginning  xxx(?#}})
    const SUBTYPE_WRONG_CLOSE_LEXEM = 'wrong_close_lexem_node_error';
    //Open paren without closing  (xxx
    const SUBTYPE_WRONG_OPEN_PAREN = 'wrong_open_paren_node_error';
    //Beginning of a lexem without ending  (?#{{)xxx
    const SUBTYPE_WRONG_OPEN_LEXEM = 'wrong_open_lexem_node_error';
    //Empty parens
    const SUBTYPE_EMPTY_PARENS = 'empty_parens_node_error';
    //Empty lexem
    const SUBTYPE_EMPTY_LEXEM = 'empty_lexem_node_error';
    //Quantifier at start of expression  - NOTE - currently incompatible with PCRE which treat it as character
    const SUBTYPE_QUANTIFIER_WITHOUT_PARAMETER = 'quantifier_without_parameter_node_error';
    //Unclosed square brackets in character class
    const SUBTYPE_UNCLOSED_CHARCLASS = 'unclosed_charclass_node_error';
    //Set and unset same modifier at ther same time
    const SUBTYPE_SET_UNSET_MODIFIER = 'set_and_unset_same_modifier_at_the_same_time_node_error';

    //Error strings name in qtype_preg.php lang file
    public static $errstrs = array( preg_node_error::SUBTYPE_UNKNOWN_ERROR => 'incorrectregex', preg_node_error::SUBTYPE_CONDSUBPATT_TOO_MUCH_ALTER => 'threealtincondsubpatt',
                                    preg_node_error::SUBTYPE_WRONG_CLOSE_PAREN => 'unopenedparen', preg_node_error::SUBTYPE_WRONG_CLOSE_LEXEM => 'unopenedlexem',
                                    preg_node_error::SUBTYPE_WRONG_OPEN_PAREN => 'unclosedparen', preg_node_error::SUBTYPE_WRONG_OPEN_LEXEM => 'unclosedlexem',
                                    preg_node_error::SUBTYPE_EMPTY_PARENS => 'emptyparens', preg_node_error::SUBTYPE_EMPTY_LEXEM => 'emptylexem',
                                    preg_node_error::SUBTYPE_QUANTIFIER_WITHOUT_PARAMETER => 'quantifieratstart', preg_node_error::SUBTYPE_UNCLOSED_CHARCLASS => 'unclosedsqbrackets',
                                    preg_node_error::SUBTYPE_SET_UNSET_MODIFIER =>'setunsetmod');

    //Arrays of indexes in regex string describing error to highlight to the user (and include in message) - first and last
    public $firstindxs;
    public $lastindxs;
    //Additional info
    public $addinfo;

    public function name() {
        return 'node_error';
    }

    public function __construct() {
        $this->type = preg_node::TYPE_NODE_ERROR;
        $this->firstindxs = array();
        $this->lastindxs = array();
        $this->addinfo = null;
    }

    /*
    * Returns an user interface error string for the error, represented by node
    */
    public function error_string() {
        $a = new stdClass;
        $a->indfirst = $this->firstindxs[0];
        $a->indlast = $this->lastindxs[0];
        $a->addinfo = $this->addinfo;
        return get_string(preg_node_error::$errstrs[$this->subtype], 'qtype_preg', $a);
    }
}


?>
