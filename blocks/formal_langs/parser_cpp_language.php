<?php
/* Driver template for the PHP_block_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class block_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof block_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof block_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof block_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof block_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class block_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 3 "langs_src/parser_cpp_language.y"

require_once($CFG->dirroot.'/blocks/formal_langs/descriptions/descriptionrule.php');
#line 102 "langs_src/parser_cpp_language.php"

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 107 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 6 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 145 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const LOGICALAND                     =  3;
    const BINARYAND                      =  4;
    const BINARYOR                       =  5;
    const LOGICALOR                      =  6;
    const AMPERSAND                      =  7;
    const BINARYXOR                      =  8;
    const NOTEQUAL                       =  9;
    const EQUAL                          = 10;
    const UINDIRECTION                   = 11;
    const UADRESS                        = 12;
    const NAMESPACE_RESOLVE              = 13;
    const UMINUS                         = 14;
    const UPLUS                          = 15;
    const UBRACKET                       = 16;
    const TYPEUNARY                      = 17;
    const MACROPARAMETERPRIORITY         = 18;
    const NAMESPACEKWD                   = 19;
    const IDENTIFIER                     = 20;
    const LEFTFIGUREBRACKET              = 21;
    const RIGHTFIGUREBRACKET             = 22;
    const SEMICOLON                      = 23;
    const CLASSKWD                       = 24;
    const STRUCTKWD                      = 25;
    const UNIONKWD                       = 26;
    const COLON                          = 27;
    const PUBLICKWD                      = 28;
    const PROTECTEDKWD                   = 29;
    const PRIVATEKWD                     = 30;
    const SIGNALSKWD                     = 31;
    const SLOTSKWD                       = 32;
    const ENUMKWD                        = 33;
    const COMMA                          = 34;
    const ASSIGN                         = 35;
    const LEFTROUNDBRACKET               = 36;
    const RIGHTROUNDBRACKET              = 37;
    const BINARYNOT                      = 38;
    const CUSTOMTYPENAME                 = 39;
    const TEMPLATEKWD                    = 40;
    const LESSER                         = 41;
    const GREATER                        = 42;
    const TYPENAMEKWD                    = 43;
    const OPERATOROVERLOADDECLARATION    = 44;
    const CONSTKWD                       = 45;
    const PREPROCESSOR_ENDIF             = 46;
    const PREPROCESSOR_ELIF              = 47;
    const PREPROCESSOR_ELSE              = 48;
    const PREPROCESSOR_IFDEF             = 49;
    const PREPROCESSOR_IF                = 50;
    const PREPROCESSOR_DEFINE            = 51;
    const PREPROCESSOR_INCLUDE           = 52;
    const WHILEKWD                       = 53;
    const DOKWD                          = 54;
    const FORKWD                         = 55;
    const RETURNKWD                      = 56;
    const CONTINUEKWD                    = 57;
    const GOTOKWD                        = 58;
    const TRYKWD                         = 59;
    const CATCHKWD                       = 60;
    const ELLIPSIS                       = 61;
    const SWITCHKWD                      = 62;
    const CASEKWD                        = 63;
    const DEFAULTKWD                     = 64;
    const IFKWD                          = 65;
    const TYPEDEF                        = 66;
    const BREAKKWD                       = 67;
    const NEWKWD                         = 68;
    const DELETE                         = 69;
    const LEFTSQUAREBRACKET              = 70;
    const RIGHTSQUAREBRACKET             = 71;
    const STATICKWD                      = 72;
    const EXTERNKWD                      = 73;
    const REGISTERKWD                    = 74;
    const VOLATILEKWD                    = 75;
    const FRIENDKWD                      = 76;
    const BINARYXOR_ASSIGN               = 77;
    const BINARYOR_ASSIGN                = 78;
    const BINARYAND_ASSIGN               = 79;
    const RIGHTSHIFT_ASSIGN              = 80;
    const LEFTSHIFT_ASSIGN               = 81;
    const MODULO_ASSIGN                  = 82;
    const DIVISION_ASSIGN                = 83;
    const MULTIPLY_ASSIGN                = 84;
    const PLUS_ASSIGN                    = 85;
    const MINUS_ASSIGN                   = 86;
    const NOT_EQUAL                      = 87;
    const LESSER_OR_EQUAL                = 88;
    const GREATER_OR_EQUAL               = 89;
    const LEFTSHIFT                      = 90;
    const RIGHTSHIFT                     = 91;
    const MINUS                          = 92;
    const PLUS                           = 93;
    const MODULOSIGN                     = 94;
    const DIVISION                       = 95;
    const MULTIPLY                       = 96;
    const LOGICALNOT                     = 97;
    const DECREMENT                      = 98;
    const INCREMENT                      = 99;
    const DOT                            = 100;
    const RIGHTARROW                     = 101;
    const CONST_CAST                     = 102;
    const STATIC_CAST                    = 103;
    const DYNAMIC_CAST                   = 104;
    const REINTERPRET_CAST               = 105;
    const NUMERIC                        = 106;
    const CHARACTER                      = 107;
    const STRING                         = 108;
    const PREPROCESSOR_STRINGIFY         = 109;
    const PREPROCESSOR_CONCAT            = 110;
    const SIZEOF                         = 111;
    const TYPENAME                       = 112;
    const VOID                           = 113;
    const FLOAT                          = 114;
    const DOUBLE                         = 115;
    const LONG                           = 116;
    const CHAR                           = 117;
    const SIGNED                         = 118;
    const UNSIGNED                       = 119;
    const INT                            = 120;
    const SHORT                          = 121;
    const YY_NO_ACTION = 731;
    const YY_ACCEPT_ACTION = 730;
    const YY_ERROR_ACTION = 729;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 4204;
static public $yy_action = array(
 /*     0 */    88,  240,  367,  368,  370,  162,  358,  148,  149,  454,
 /*    10 */   261,  430,  249,  215,    8,  288,  285,  380,  375,  374,
 /*    20 */   117,  300,  295,  297,   58,  222,  133,  447,  324,   39,
 /*    30 */   432,   83,  342,  226,  344,  380,  375,  374,  101,    7,
 /*    40 */   231,  423,  170,  431,  475,  283,  219,   24,  225,   31,
 /*    50 */   209,  195,  206,   75,   74,  218,   78,   77,  279,   94,
 /*    60 */   239,   57,   43,  254,  241,  458,  459,  337,  470,  469,
 /*    70 */   404,  139,  235,  153,  183,  165,  161,  339,  201,  185,
 /*    80 */   395,   90,  145,  232,   58,   99,  100,  212,  293,   87,
 /*    90 */    89,   84,   85,   61,  537,  229,  262,  267,  270,  400,
 /*   100 */   403,  405,  269,   88,  271,  240,  367,  368,  370,  162,
 /*   110 */   358,  148,  149,  454,  261,  249,  215,    8,  286,  285,
 /*   120 */   380,  375,  374,  341,  300,  295,  297,  109,  182,  133,
 /*   130 */   118,   37,   39,  274,   83,  425,  226,  453,  179,  298,
 /*   140 */   402,  101,  231,  292,  294,  170,  431,  475,  283,  219,
 /*   150 */    24,  225,   31,  209,  195,  206,   34,   82,  218,  680,
 /*   160 */   538,  279,   94,  239,   57,   43,   59,  537,  458,  459,
 /*   170 */   337,  470,  469,  142,  241,  153,  183,  165,  161,  339,
 /*   180 */   201,  185,  395,   90,  145,  232,  199,  361,   99,  100,
 /*   190 */   406,  228,   87,   89,   84,   85,   60,  538,  229,  262,
 /*   200 */   267,  270,  400,  403,  405,  269,   88,  271,  240,  367,
 /*   210 */   368,  370,  162,  358,  148,  149,  454,  261,  249,  215,
 /*   220 */     8,  205,  285,  380,  375,  374,  400,  403,  405,  269,
 /*   230 */    58,  271,  133,  474,  680,   39,    1,   83,  387,  226,
 /*   240 */   227,   73,   71,  231,  101,  428,   12,    9,  170,  431,
 /*   250 */   475,  283,  219,   24,  225,   31,  209,  195,  206,  306,
 /*   260 */    91,  218,   93,  415,  279,   94,  239,   57,   43,  680,
 /*   270 */    58,  458,  459,  337,  470,  469,  157,  183,  165,  161,
 /*   280 */   339,  201,  185,  395,   90,  145,  232,  245,   70,   72,
 /*   290 */   379,   99,  100,  119,  231,   87,   89,   84,   85,  125,
 /*   300 */     1,  229,  262,  267,  270,  400,  403,  405,  269,   88,
 /*   310 */   271,  240,  367,  368,  370,  162,  358,  148,  149,  454,
 /*   320 */   261,  249,  215,    8,  335,  285,  380,  375,  374,   79,
 /*   330 */    80,   81,  233,  234,  362,  133,  144,  232,   39,  378,
 /*   340 */    83,  325,  226,  344,  680,  369,  259,  101,   92,  231,
 /*   350 */   364,  170,  431,  475,  283,  219,   24,  225,   31,  209,
 /*   360 */   195,  206,  331,   58,  218,  412,   25,  279,   94,  239,
 /*   370 */    57,   43,  386,   58,  458,  459,  337,  470,  469,  347,
 /*   380 */   139,  235,  153,  183,  165,  161,  339,  201,  185,  395,
 /*   390 */    90,  145,  232,   58,   99,  100,   28,  231,   87,   89,
 /*   400 */    84,   85,  135,  112,  229,  262,  267,  270,  400,  403,
 /*   410 */   405,  269,   88,  271,  240,  367,  368,  370,  162,  358,
 /*   420 */   148,  149,  454,  261,  249,  215,    8,  322,  285,  380,
 /*   430 */   375,  374,  341,  275,  289,  233,  234,   36,  133,  146,
 /*   440 */   232,   39,  246,   83,  419,  226,  178,  434,  224,  277,
 /*   450 */   101,  299,  231,  360,  170,  431,  475,  283,  219,   24,
 /*   460 */   225,   31,  209,  195,  206,   58,  248,  218,  471,  388,
 /*   470 */   279,   94,  239,   57,   43,  120,  236,  458,  459,  337,
 /*   480 */   470,  469,  462,  139,  450,  153,  183,  165,  161,  339,
 /*   490 */   201,  185,  395,   90,  145,  232,  182,   99,  100,  426,
 /*   500 */   429,   87,   89,   84,   85,  128,  264,  229,  262,  267,
 /*   510 */   270,  400,  403,  405,  269,   88,  271,  240,  367,  368,
 /*   520 */   370,  162,  358,  148,  149,  454,  261,  249,  215,    8,
 /*   530 */   320,  285,  380,  375,  374,  186,  357,  302,  389,  356,
 /*   540 */   276,  133,  241,  116,   39,   41,   83,  184,  226,  250,
 /*   550 */   136,  188,  287,  101,  251,  231,   58,  170,  431,  475,
 /*   560 */   283,  219,   24,  225,   31,  209,  195,  206,  252,  392,
 /*   570 */   218,  412,   10,  279,   94,  239,   57,   43,  120,  236,
 /*   580 */   458,  459,  337,  470,  469,  442,  139,  241,  153,  183,
 /*   590 */   165,  161,  339,  201,  185,  395,   90,  145,  232,  204,
 /*   600 */    99,  100,  417,    5,   87,   89,   84,   85,   12,    9,
 /*   610 */   229,  262,  267,  270,  400,  403,  405,  269,   88,  271,
 /*   620 */   240,  367,  368,  370,  162,  358,  148,  149,  454,  261,
 /*   630 */   249,  215,    8,  305,  285,  380,  375,  374,  114,  275,
 /*   640 */    58,   42,  394,  211,  133,  255,  324,   39,  216,   83,
 /*   650 */    58,  226,   58,   27,  230,  252,  101,  138,  231,  383,
 /*   660 */   170,  431,  475,  283,  219,   24,  225,   31,  209,  195,
 /*   670 */   206,   62,  394,  218,  122,  310,  279,   94,  239,   57,
 /*   680 */    43,  221,  241,  458,  459,  337,  470,  469,  208,  139,
 /*   690 */   241,  153,  183,  165,  161,  339,  201,  185,  395,   90,
 /*   700 */   145,  232,   49,   99,  100,  436,  224,   87,   89,   84,
 /*   710 */    85,  172,  418,  229,  262,  267,  270,  400,  403,  405,
 /*   720 */   269,   88,  271,  240,  367,  368,  370,  162,  358,  148,
 /*   730 */   149,  454,  261,  249,  215,    8,  280,  285,  380,  375,
 /*   740 */   374,  134,  213,  131,  137,  329,  252,  133,  253,  207,
 /*   750 */    39,  207,   83,  278,  226,  112,  468,  377,  311,  101,
 /*   760 */   365,  231,  422,  170,  431,  475,  283,  219,   24,  225,
 /*   770 */    31,  209,  195,  206,  427,  304,  218,  129,  237,  279,
 /*   780 */    94,  239,   57,   43,  452,  207,  458,  459,  337,  470,
 /*   790 */   469,  472,  139,  110,  153,  183,  165,  161,  339,  201,
 /*   800 */   185,  395,   90,  145,  232,  318,   99,  100,  317,    6,
 /*   810 */    87,   89,   84,   85,   58,   26,  229,  262,  267,  270,
 /*   820 */   400,  403,  405,  269,   88,  271,  240,  367,  368,  370,
 /*   830 */   162,  358,  148,  149,  454,  261,  249,  215,    8,  382,
 /*   840 */   285,  380,  375,  374,  124,  275,  359,   13,  456,  366,
 /*   850 */   133,   40,  207,   39,  242,   83,  313,  226,  316,   29,
 /*   860 */   420,  187,  101,  327,  231,   95,  170,  431,  475,  283,
 /*   870 */   219,   24,  225,   31,  209,  195,  206,  338,  319,  218,
 /*   880 */   363,  413,  279,   94,  239,   57,   43,  257,  247,  458,
 /*   890 */   459,  337,  470,  469,  460,  139,  457,  153,  183,  165,
 /*   900 */   161,  339,  201,  185,  395,   90,  145,  232,  105,   99,
 /*   910 */   100,  336,  411,   87,   89,   84,   85,  407,  445,  229,
 /*   920 */   262,  267,  270,  400,  403,  405,  269,   88,  271,  240,
 /*   930 */   367,  368,  370,  162,  358,  148,  149,  454,  261,  249,
 /*   940 */   215,    8,  433,  285,  380,  375,  374,  246,   61,   97,
 /*   950 */    33,  390,  455,  133,   59,  414,   39,   98,   83,   35,
 /*   960 */   226,  409,  130,   60,  421,  101,    4,  231,  391,  170,
 /*   970 */   431,  475,  283,  219,   24,  225,   31,  209,  195,  206,
 /*   980 */   381,  401,  218,  392,  326,  279,   94,  239,   57,   43,
 /*   990 */   191,  444,  458,  459,  337,  470,  469,  461,  139,  202,
 /*  1000 */   153,  183,  165,  161,  339,  201,  185,  395,   90,  145,
 /*  1010 */   232,  312,   99,  100,   38,  198,   87,   89,   84,   85,
 /*  1020 */   126,  258,  229,  262,  267,  270,  400,  403,  405,  269,
 /*  1030 */    88,  271,  240,  367,  368,  370,  162,  358,  148,  149,
 /*  1040 */   454,  261,  249,  215,    8,  281,  285,  380,  375,  374,
 /*  1050 */   290,  393,  451,  435,  373,  189,  133,  443,  443,   39,
 /*  1060 */   443,   83,  443,  226,  443,  443,  443,  443,  101,  443,
 /*  1070 */   231,  443,  170,  431,  475,  283,  219,   24,  225,   31,
 /*  1080 */   209,  195,  206,  443,  443,  218,  443,  443,  279,   94,
 /*  1090 */   239,   57,   43,  443,  443,  458,  459,  337,  470,  469,
 /*  1100 */   446,  139,  443,  153,  183,  165,  161,  339,  201,  185,
 /*  1110 */   395,   90,  145,  232,  443,   99,  100,  443,  443,   87,
 /*  1120 */    89,   84,   85,  443,  443,  229,  262,  267,  270,  400,
 /*  1130 */   403,  405,  269,   88,  271,  240,  367,  368,  370,  162,
 /*  1140 */   358,  148,  149,  454,  261,  249,  215,    8,  332,  285,
 /*  1150 */   380,  375,  374,  443,  443,  443,  443,  443,  443,  133,
 /*  1160 */   443,  443,   39,  443,   83,  443,  226,  443,  443,  443,
 /*  1170 */   443,  101,  443,  231,  443,  170,  431,  475,  283,  219,
 /*  1180 */    24,  225,   31,  209,  195,  206,  443,  443,  218,  443,
 /*  1190 */   443,  279,   94,  239,   57,   43,  443,  443,  458,  459,
 /*  1200 */   337,  470,  469,  464,  139,  443,  153,  183,  165,  161,
 /*  1210 */   339,  201,  185,  395,   90,  145,  232,  443,   99,  100,
 /*  1220 */   443,  443,   87,   89,   84,   85,  443,  443,  229,  262,
 /*  1230 */   267,  270,  400,  403,  405,  269,   88,  271,  240,  367,
 /*  1240 */   368,  370,  162,  358,  148,  149,  454,  261,  249,  215,
 /*  1250 */     8,  443,  285,  380,  375,  374,  443,  443,  443,  443,
 /*  1260 */   443,  443,  133,  443,  443,   39,  443,   83,  443,  226,
 /*  1270 */   443,  443,  443,  443,  101,  443,  231,  443,  170,  431,
 /*  1280 */   475,  283,  219,   24,  225,   31,  209,  195,  206,  443,
 /*  1290 */   443,  218,  443,  443,  279,   94,  239,   57,   43,  443,
 /*  1300 */   443,  458,  459,  337,  470,  469,  399,  139,  443,  153,
 /*  1310 */   183,  165,  161,  339,  201,  185,  395,   90,  145,  232,
 /*  1320 */   443,   99,  100,  443,  231,   87,   89,   84,   85,  443,
 /*  1330 */   443,  229,  262,  267,  270,  400,  403,  405,  269,   88,
 /*  1340 */   271,  240,  367,  368,  370,  162,  358,  148,  149,  454,
 /*  1350 */   261,  249,  215,    8,  443,  285,  380,  375,  374,  181,
 /*  1360 */   161,  339,  201,  185,  395,   90,  145,  232,   39,  443,
 /*  1370 */    86,  443,  226,  443,  438,  440,  443,  101,  443,  231,
 /*  1380 */   443,  443,  443,  439,  283,  219,   24,  225,   31,  209,
 /*  1390 */   195,  206,  424,  437,  218,  443,  443,  279,   94,  239,
 /*  1400 */    57,   43,  443,  443,  458,  459,  337,  470,  469,  467,
 /*  1410 */   139,  443,  153,  183,  165,  161,  339,  201,  185,  395,
 /*  1420 */    90,  145,  232,  443,   99,  100,  231,  443,   87,   89,
 /*  1430 */    84,   85,  443,  443,  229,  262,  267,  270,  400,  403,
 /*  1440 */   405,  269,  443,  271,  240,  367,  368,  370,  162,  358,
 /*  1450 */   148,  149,  454,  261,  384,  309,  443,  385,  127,  443,
 /*  1460 */    76,  376,  164,  339,  201,  185,  395,   90,  145,  232,
 /*  1470 */   231,  102,  443,  438,  440,  106,  158,  443,  443,  443,
 /*  1480 */   354,  443,  439,  443,   11,  210,  111,  328,  323,  194,
 /*  1490 */   315,  115,  437,  443,  443,  284,  443,  443,  330,  273,
 /*  1500 */   449,  139,   96,  153,  183,  165,  161,  339,  201,  185,
 /*  1510 */   395,   90,  145,  232,  343,  355,  241,  301,  309,   88,
 /*  1520 */   385,  127,  443,   76,  376,    3,  303,  291,  121,  443,
 /*  1530 */   443,  443,  402,  231,  102,  443,  443,  443,  106,  158,
 /*  1540 */   443,  443,  443,  354,  443,  443,  443,   11,   39,  132,
 /*  1550 */    86,  443,  194,  315,  115,  443,  443,  101,  284,  231,
 /*  1560 */   443,  330,  273,  449,  139,   96,  153,  183,  165,  161,
 /*  1570 */   339,  201,  185,  395,   90,  145,  232,  343,  355,  241,
 /*  1580 */    57,   43,  443,  443,  458,  459,  337,  470,  469,  441,
 /*  1590 */   139,  443,  153,  183,  165,  161,  339,  201,  185,  395,
 /*  1600 */    90,  145,  232,  231,   99,  100,  443,  443,   87,   89,
 /*  1610 */    84,   85,  443,  443,  229,  262,  267,  270,  400,  403,
 /*  1620 */   405,  269,   88,  271,  240,  367,  368,  370,  162,  358,
 /*  1630 */   148,  149,  454,  261,  143,  402,  153,  183,  165,  161,
 /*  1640 */   339,  201,  185,  395,   90,  145,  232,  443,  443,  443,
 /*  1650 */   443,   39,  473,   86,  380,  375,  374,  443,  231,  443,
 /*  1660 */   101,  443,  443,  443,  443,  443,  443,  443,  256,  443,
 /*  1670 */   443,  443,  443,  443,  443,  101,  443,  443,  443,  443,
 /*  1680 */   443,  443,  443,   57,   43,  443,  443,  458,  459,  337,
 /*  1690 */   470,  469,  174,  165,  161,  339,  201,  185,  395,   90,
 /*  1700 */   145,  232,  458,  459,  337,  470,  469,   99,  100,  443,
 /*  1710 */   443,   87,   89,   84,   85,  443,  443,  229,  262,  267,
 /*  1720 */   270,  400,  403,  405,  269,   88,  271,  240,  367,  368,
 /*  1730 */   370,  162,  358,  148,  149,  454,  261,  231,  402,  443,
 /*  1740 */   443,  321,  240,  367,  368,  370,  162,  358,  148,  149,
 /*  1750 */   454,  261,  443,  443,   39,  443,   86,  443,  443,  443,
 /*  1760 */   443,  443,  443,  101,  443,  231,  443,  463,  139,  443,
 /*  1770 */   153,  183,  165,  161,  339,  201,  185,  395,   90,  145,
 /*  1780 */   232,  443,  443,  443,  443,  443,   57,   43,  443,  443,
 /*  1790 */   458,  459,  337,  470,  469,  466,  139,  443,  153,  183,
 /*  1800 */   165,  161,  339,  201,  185,  395,   90,  145,  232,  443,
 /*  1810 */    99,  100,  443,  443,   87,   89,   84,   85,  443,  443,
 /*  1820 */   229,  262,  267,  270,  400,  403,  405,  269,   88,  271,
 /*  1830 */   240,  367,  368,  370,  162,  358,  148,  149,  454,  261,
 /*  1840 */   223,  402,  443,  443,  443,  158,  443,  443,  443,  354,
 /*  1850 */   443,  190,  408,  443,  443,  443,  443,   39,  443,   86,
 /*  1860 */   443,  443,  443,  443,  443,  443,  101,  443,  231,  443,
 /*  1870 */   443,  443,   69,  443,   66,   65,   63,   68,  443,   64,
 /*  1880 */   443,  443,  334,  343,  355,  241,  443,  443,  443,   57,
 /*  1890 */    43,  443,  443,  458,  459,  337,  470,  469,  465,  139,
 /*  1900 */   443,  153,  183,  165,  161,  339,  201,  185,  395,   90,
 /*  1910 */   145,  232,  443,   99,  100,  443,  443,   87,   89,   84,
 /*  1920 */    85,  443,  443,  229,  262,  267,  270,  400,  403,  405,
 /*  1930 */   269,  443,  271,  240,  367,  368,  370,  162,  358,  148,
 /*  1940 */   149,  454,  261,  301,  309,   88,  385,  127,  101,   76,
 /*  1950 */   376,  443,  282,  291,  121,  443,   67,  443,  402,  231,
 /*  1960 */   102,  443,  443,  443,  106,  158,  443,  443,  443,  354,
 /*  1970 */   443,  443,  443,   11,   39,  443,   86,  443,  194,  315,
 /*  1980 */   115,  443,  443,  101,  284,  443,  443,  330,  273,  449,
 /*  1990 */   139,   96,  153,  183,  165,  161,  339,  201,  185,  395,
 /*  2000 */    90,  145,  232,  343,  355,  241,   57,   43,  443,  443,
 /*  2010 */   458,  459,  337,  470,  469,  240,  367,  368,  370,  162,
 /*  2020 */   358,  148,  149,  454,  261,  443,  443,  443,  443,  443,
 /*  2030 */    99,  100,  231,  443,   87,   89,   84,   85,  443,  443,
 /*  2040 */   229,  262,  267,  270,  400,  403,  405,  269,  443,  271,
 /*  2050 */   240,  367,  368,  370,  162,  358,  148,  149,  454,  261,
 /*  2060 */   730,   23,  308,  309,  443,  385,  127,  443,   76,  376,
 /*  2070 */   233,  234,  349,   90,  145,  232,  443,  443,  231,  102,
 /*  2080 */   443,  443,  443,  106,  158,  443,  443,  443,  354,  443,
 /*  2090 */   443,  443,   11,  443,  443,  443,  231,  194,  315,  115,
 /*  2100 */   443,  443,  443,  284,  443,  443,  330,  273,  449,  139,
 /*  2110 */    96,  153,  183,  165,  161,  339,  201,  185,  395,   90,
 /*  2120 */   145,  232,  343,  355,  241,   16,  308,  309,  443,  385,
 /*  2130 */   127,  443,   76,  376,  233,  234,  353,   90,  145,  232,
 /*  2140 */   443,  443,  231,  102,  443,  443,  443,  106,  158,  443,
 /*  2150 */   443,  443,  354,  443,  443,  443,   11,  443,  443,  272,
 /*  2160 */   443,  194,  315,  115,  158,  443,  443,  284,  354,  443,
 /*  2170 */   330,  273,  449,  139,   96,  153,  183,  165,  161,  339,
 /*  2180 */   201,  185,  395,   90,  145,  232,  343,  355,  241,  443,
 /*  2190 */    15,  308,  309,  443,  385,  127,  443,   76,  376,  443,
 /*  2200 */   443,  443,  343,  355,  241,  443,  443,  231,  102,  443,
 /*  2210 */   443,  443,  106,  158,  443,  443,  443,  354,  443,  443,
 /*  2220 */   443,   11,  443,  443,  443,  231,  194,  315,  115,  443,
 /*  2230 */   443,  443,  284,  443,  443,  330,  273,  449,  139,   96,
 /*  2240 */   153,  183,  165,  161,  339,  201,  185,  395,   90,  145,
 /*  2250 */   232,  343,  355,  241,   17,  308,  309,  443,  385,  127,
 /*  2260 */   443,   76,  376,  233,  234,  351,   90,  145,  232,  443,
 /*  2270 */   443,  231,  102,  443,  443,  443,  106,  158,  443,  443,
 /*  2280 */   443,  354,  443,  443,  443,   11,  443,  443,  443,  443,
 /*  2290 */   194,  315,  115,  443,  443,  443,  284,  443,  443,  330,
 /*  2300 */   273,  449,  139,   96,  153,  183,  165,  161,  339,  201,
 /*  2310 */   185,  395,   90,  145,  232,  343,  355,  241,  443,   18,
 /*  2320 */   308,  309,  443,  385,  127,  443,   76,  376,  443,  443,
 /*  2330 */   443,  443,  443,  443,  443,  443,  231,  102,  443,  443,
 /*  2340 */   443,  106,  158,  443,  443,  443,  354,  443,  443,  443,
 /*  2350 */    11,  443,  443,  443,  231,  194,  315,  115,  443,  443,
 /*  2360 */   443,  284,  443,  443,  330,  273,  449,  139,   96,  153,
 /*  2370 */   183,  165,  161,  339,  201,  185,  395,   90,  145,  232,
 /*  2380 */   343,  355,  241,   14,  308,  309,  443,  385,  127,  443,
 /*  2390 */    76,  376,  233,  234,  396,   90,  145,  232,  443,  443,
 /*  2400 */   231,  102,  443,  443,  443,  106,  158,  443,  443,  443,
 /*  2410 */   354,  443,  443,  443,   11,  443,  443,  443,  443,  194,
 /*  2420 */   315,  115,  443,  443,  443,  284,  443,  443,  330,  273,
 /*  2430 */   449,  139,   96,  153,  183,  165,  161,  339,  201,  185,
 /*  2440 */   395,   90,  145,  232,  343,  355,  241,  443,   22,  308,
 /*  2450 */   309,  443,  385,  127,  443,   76,  376,  443,  443,  443,
 /*  2460 */   443,  443,  443,  443,  443,  231,  102,  443,  443,  443,
 /*  2470 */   106,  158,  443,  443,  443,  354,  443,  443,  443,   11,
 /*  2480 */   443,  443,  443,  231,  194,  315,  115,  443,  443,  443,
 /*  2490 */   284,  443,  443,  330,  273,  449,  139,   96,  153,  183,
 /*  2500 */   165,  161,  339,  201,  185,  395,   90,  145,  232,  343,
 /*  2510 */   355,  241,    2,  308,  309,  443,  385,  127,  443,   76,
 /*  2520 */   376,  233,  234,  372,   90,  145,  232,  443,  443,  231,
 /*  2530 */   102,  443,  443,  443,  106,  158,  443,  443,  443,  354,
 /*  2540 */   443,  443,  443,   11,  443,  443,  443,  443,  194,  315,
 /*  2550 */   115,  443,  443,  443,  284,  443,  443,  330,  273,  449,
 /*  2560 */   139,   96,  153,  183,  165,  161,  339,  201,  185,  395,
 /*  2570 */    90,  145,  232,  343,  355,  241,  443,   21,  308,  309,
 /*  2580 */   443,  385,  127,  443,   76,  376,  443,  443,  443,  443,
 /*  2590 */   443,  443,  443,  443,  231,  102,  443,  443,  443,  106,
 /*  2600 */   158,  443,  443,  443,  354,  443,  443,  443,   11,  443,
 /*  2610 */   443,  443,  231,  194,  315,  115,  443,  443,  443,  284,
 /*  2620 */   443,  443,  330,  273,  449,  139,   96,  153,  183,  165,
 /*  2630 */   161,  339,  201,  185,  395,   90,  145,  232,  343,  355,
 /*  2640 */   241,   20,  308,  309,  443,  385,  127,  443,   76,  376,
 /*  2650 */   233,  234,  371,   90,  145,  232,  443,  443,  231,  102,
 /*  2660 */   443,  443,  443,  106,  158,  443,  443,  443,  354,  443,
 /*  2670 */   443,  443,   11,  443,  443,  443,  443,  194,  315,  115,
 /*  2680 */   443,  443,  443,  284,  443,  443,  330,  273,  449,  139,
 /*  2690 */    96,  153,  183,  165,  161,  339,  201,  185,  395,   90,
 /*  2700 */   145,  232,  343,  355,  241,  443,   19,  308,  309,  443,
 /*  2710 */   385,  127,  443,   76,  376,  443,  443,  443,  443,  443,
 /*  2720 */   443,  443,  443,  231,  102,  443,  443,  443,  106,  158,
 /*  2730 */   443,  443,  443,  354,  443,  443,  443,   11,  443,  443,
 /*  2740 */   443,  231,  194,  315,  115,  443,  443,  443,  284,  443,
 /*  2750 */   443,  330,  273,  449,  139,   96,  153,  183,  165,  161,
 /*  2760 */   339,  201,  185,  395,   90,  145,  232,  343,  355,  241,
 /*  2770 */   443,  384,  309,  443,  385,  127,  443,   76,  376,  233,
 /*  2780 */   234,  397,   90,  145,  232,  443,  443,  231,  102,  443,
 /*  2790 */   443,  443,  106,  158,  443,  443,  443,  354,  443,  443,
 /*  2800 */   443,   11,  443,  443,  443,  231,  194,  315,  115,  443,
 /*  2810 */   443,  443,  284,  443,  443,  330,  273,  449,  139,   96,
 /*  2820 */   153,  183,  165,  161,  339,  201,  185,  395,   90,  145,
 /*  2830 */   232,  343,  355,  241,  333,  443,  385,  127,  443,  123,
 /*  2840 */   376,  159,  339,  201,  185,  395,   90,  145,  232,  231,
 /*  2850 */   104,  443,  443,  443,  113,  158,  443,  443,  443,  354,
 /*  2860 */   443,  443,  443,   30,  443,  443,  231,  443,  194,  315,
 /*  2870 */   115,  443,  443,  443,  284,  443,  443,  330,  273,  449,
 /*  2880 */   139,   96,  153,  183,  165,  161,  339,  201,  185,  395,
 /*  2890 */    90,  145,  232,  343,  355,  241,  314,   48,  385,  127,
 /*  2900 */   443,  123,  376,  398,  201,  185,  395,   90,  145,  232,
 /*  2910 */   443,  231,  104,  443,  443,  443,  113,  158,  443,  443,
 /*  2920 */   443,  354,  443,  443,  443,  346,  352,  345,  340,  231,
 /*  2930 */   194,  315,  115,  443,  443,  443,  284,  443,  443,  330,
 /*  2940 */   273,  449,  139,   96,  153,  183,  165,  161,  339,  201,
 /*  2950 */   185,  395,   90,  145,  232,  343,  355,  241,  220,  443,
 /*  2960 */   385,  127,  443,  123,  376,  443,  348,  201,  185,  395,
 /*  2970 */    90,  145,  232,  231,  104,  443,  443,  443,  113,  158,
 /*  2980 */   443,  443,  443,  354,  443,  443,  443,  443,  443,  443,
 /*  2990 */   231,  443,  194,  315,  115,  443,  443,  443,  284,  443,
 /*  3000 */   443,  330,  273,  449,  139,   96,  153,  183,  165,  161,
 /*  3010 */   339,  201,  185,  395,   90,  145,  232,  343,  355,  241,
 /*  3020 */   307,  443,  385,  127,  443,  123,  376,  350,  201,  185,
 /*  3030 */   395,   90,  145,  232,  443,  231,  104,  443,  443,  443,
 /*  3040 */   113,  158,  443,  443,  443,  354,  443,  443,  238,  443,
 /*  3050 */   443,  443,  443,  158,  194,  315,  115,  354,  443,  443,
 /*  3060 */   284,  443,  443,  330,  273,  449,  139,   96,  153,  183,
 /*  3070 */   165,  161,  339,  201,  185,  395,   90,  145,  232,  343,
 /*  3080 */   355,  241,  296,  443,  385,  127,  443,  123,  376,  443,
 /*  3090 */   443,  343,  355,  241,  443,  443,  443,  231,  104,  443,
 /*  3100 */   443,  443,  113,  158,  443,  443,  443,  354,  443,  443,
 /*  3110 */   443,  443,  443,  443,  443,  443,  194,  315,  115,  443,
 /*  3120 */   443,  443,  284,  443,  443,  330,  273,  449,  139,   96,
 /*  3130 */   153,  183,  165,  161,  339,  201,  185,  395,   90,  145,
 /*  3140 */   232,  343,  355,  241,  231,  104,  443,  443,  223,  113,
 /*  3150 */   158,  443,  443,  158,  354,  443,  443,  354,  443,  443,
 /*  3160 */   410,  443,  443,  243,  443,  443,  443,  443,  214,  443,
 /*  3170 */   443,  443,  443,  443,  449,  139,   96,  153,  183,  165,
 /*  3180 */   161,  339,  201,  185,  395,   90,  145,  232,  343,  355,
 /*  3190 */   241,  343,  355,  241,  443,  443,  231,  104,  443,  443,
 /*  3200 */   443,  113,  158,  268,  443,  443,  354,  443,  158,  443,
 /*  3210 */   443,  443,  354,  448,  443,  167,  266,  443,  158,  443,
 /*  3220 */   443,  158,  354,  443,  443,  354,  449,  139,   96,  153,
 /*  3230 */   183,  165,  161,  339,  201,  185,  395,   90,  145,  232,
 /*  3240 */   343,  355,  241,  443,  231,  104,  343,  355,  241,  113,
 /*  3250 */   158,  443,  443,  443,  354,  443,  343,  355,  241,  343,
 /*  3260 */   355,  241,  443,  203,  163,  443,  443,  443,  354,  443,
 /*  3270 */   443,  443,  443,  443,  449,  139,   96,  153,  183,  165,
 /*  3280 */   161,  339,  201,  185,  395,   90,  145,  232,  343,  355,
 /*  3290 */   241,  231,  104,  443,  443,  443,  113,  158,  443,  443,
 /*  3300 */   443,  354,  343,  355,  241,  443,  263,  443,  443,  443,
 /*  3310 */   171,  158,  443,  443,  443,  354,  443,  443,  443,  443,
 /*  3320 */   443,  449,  139,   96,  153,  183,  165,  161,  339,  201,
 /*  3330 */   185,  395,   90,  145,  232,  343,  355,  241,  231,  103,
 /*  3340 */   443,  443,  443,  113,  158,  443,  443,  443,  354,  343,
 /*  3350 */   355,  241,  443,  443,  443,  260,  443,  168,  443,  443,
 /*  3360 */   158,  443,  443,  443,  354,  443,  443,  443,  449,  139,
 /*  3370 */    96,  153,  183,  165,  161,  339,  201,  185,  395,   90,
 /*  3380 */   145,  232,  343,  355,  241,  443,  231,  104,  443,  443,
 /*  3390 */   443,  113,  158,  443,  443,  443,  354,  443,  343,  355,
 /*  3400 */   241,  443,  443,  443,  443,  200,  443,  443,  443,  443,
 /*  3410 */   443,  443,  443,  443,  443,  443,  449,  139,   96,  153,
 /*  3420 */   183,  165,  161,  339,  201,  185,  395,   90,  145,  232,
 /*  3430 */   343,  355,  241,  231,  104,  443,  443,  443,  113,  158,
 /*  3440 */   443,  443,  443,  354,  443,  443,  443,  443,  443,  443,
 /*  3450 */   443,  443,  168,  443,  443,  443,  443,  443,  443,  443,
 /*  3460 */   443,  443,  443,  449,  139,   96,  153,  183,  165,  161,
 /*  3470 */   339,  201,  185,  395,   90,  145,  232,  343,  355,  241,
 /*  3480 */   231,  104,  443,  443,  443,  113,  158,  443,  443,  443,
 /*  3490 */   354,  443,  443,  443,  443,  443,  443,  443,  443,  192,
 /*  3500 */   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
 /*  3510 */   449,  139,   96,  153,  183,  165,  161,  339,  201,  185,
 /*  3520 */   395,   90,  145,  232,  343,  355,  241,  443,  231,  104,
 /*  3530 */   443,  443,  443,  113,  158,  443,  443,  443,  354,  443,
 /*  3540 */   443,  443,  443,  443,  443,  443,  443,  177,  443,  443,
 /*  3550 */   443,  443,  443,  443,  443,  443,  443,  443,  449,  139,
 /*  3560 */    96,  153,  183,  165,  161,  339,  201,  185,  395,   90,
 /*  3570 */   145,  232,  343,  355,  241,  231,  104,  443,  443,  443,
 /*  3580 */   113,  158,  443,  443,  443,  354,  443,  443,  443,  443,
 /*  3590 */   443,  443,  443,  443,  196,  443,  443,  443,  443,  443,
 /*  3600 */   443,  443,  443,  443,  443,  449,  139,   96,  153,  183,
 /*  3610 */   165,  161,  339,  201,  185,  395,   90,  145,  232,  343,
 /*  3620 */   355,  241,  231,  104,  443,  443,  443,  113,  158,  443,
 /*  3630 */   443,  443,  354,  443,  443,  443,  443,  443,  443,  443,
 /*  3640 */   443,  166,  443,  443,  443,  443,  443,  443,  443,  443,
 /*  3650 */   443,  443,  449,  139,   96,  153,  183,  165,  161,  339,
 /*  3660 */   201,  185,  395,   90,  145,  232,  343,  355,  241,  443,
 /*  3670 */   231,  104,  443,  443,  443,  113,  158,  443,  443,  443,
 /*  3680 */   354,  443,  443,  443,  443,  443,  443,  443,  443,  173,
 /*  3690 */   416,  443,  443,  443,  443,  443,  443,  443,  101,  443,
 /*  3700 */   449,  139,   96,  153,  183,  165,  161,  339,  201,  185,
 /*  3710 */   395,   90,  145,  232,  343,  355,  241,  231,  104,  443,
 /*  3720 */   443,  160,  113,  158,  443,  443,  443,  354,  443,  443,
 /*  3730 */   443,  443,  443,  443,  443,  443,  175,   32,  443,  443,
 /*  3740 */   443,  443,  443,  443,  443,  412,  443,  449,  139,   96,
 /*  3750 */   153,  183,  165,  161,  339,  201,  185,  395,   90,  145,
 /*  3760 */   232,  343,  355,  241,   88,  240,  367,  368,  370,  162,
 /*  3770 */   358,  148,  149,  454,  261,  443,  443,  402,  443,  443,
 /*  3780 */   443,  443,  443,  443,  443,   88,  443,  443,  443,  443,
 /*  3790 */   443,  443,  443,   39,  443,   86,  217,  443,  402,  443,
 /*  3800 */   443,  443,  443,  443,  231,  443,   88,  400,  403,  405,
 /*  3810 */   269,  443,  271,  275,   39,  443,   86,  443,  443,  402,
 /*  3820 */   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
 /*  3830 */   443,  443,  443,  443,  443,   39,  443,   86,  193,  165,
 /*  3840 */   161,  339,  201,  185,  395,   90,  145,  232,  244,   99,
 /*  3850 */   100,  443,  443,   87,   89,   84,   85,  443,  443,  229,
 /*  3860 */   262,  267,  270,  400,  403,  405,  269,  443,  271,  443,
 /*  3870 */    99,  100,  443,  443,   87,   89,   84,   85,  443,  443,
 /*  3880 */   229,  262,  267,  270,  400,  403,  405,  269,  443,  271,
 /*  3890 */   231,   99,  100,  443,  443,   87,   89,   84,   85,  443,
 /*  3900 */   443,  229,  262,  267,  270,  400,  403,  405,  269,   69,
 /*  3910 */   271,   66,   65,   63,   68,  231,   64,  443,  443,  443,
 /*  3920 */   443,  140,  443,  153,  183,  165,  161,  339,  201,  185,
 /*  3930 */   395,   90,  145,  232,  265,  231,  443,  443,  443,  443,
 /*  3940 */   443,   50,  443,  443,  443,  443,  443,  443,  156,  183,
 /*  3950 */   165,  161,  339,  201,  185,  395,   90,  145,  232,  101,
 /*  3960 */   443,  231,  443,  443,  443,  443,  141,  443,  153,  183,
 /*  3970 */   165,  161,  339,  201,  185,  395,   90,  145,  232,  231,
 /*  3980 */   443,  443,  443,   56,   44,   55,   45,   46,   54,   47,
 /*  3990 */    52,   53,   51,   67,  155,  183,  165,  161,  339,  201,
 /*  4000 */   185,  395,   90,  145,  232,  231,  443,  443,  402,  443,
 /*  4010 */   443,  443,  154,  183,  165,  161,  339,  201,  185,  395,
 /*  4020 */    90,  145,  232,  231,   34,  443,  240,  367,  368,  370,
 /*  4030 */   162,  358,  148,  149,  454,  261,  443,  231,  152,  183,
 /*  4040 */   165,  161,  339,  201,  185,  395,   90,  145,  232,  443,
 /*  4050 */   443,  443,  443,  443,  443,  443,  147,  183,  165,  161,
 /*  4060 */   339,  201,  185,  395,   90,  145,  232,  231,  180,  443,
 /*  4070 */   151,  183,  165,  161,  339,  201,  185,  395,   90,  145,
 /*  4080 */   232,  443,  443,  231,   34,  443,  443,  443,  443,  443,
 /*  4090 */   229,  262,  267,  270,  400,  403,  405,  269,  231,  271,
 /*  4100 */   443,  169,  165,  161,  339,  201,  185,  395,   90,  145,
 /*  4110 */   232,  180,  443,  443,  443,  443,  443,  176,  165,  161,
 /*  4120 */   339,  201,  185,  395,   90,  145,  232,   34,  443,  443,
 /*  4130 */   443,  443,  381,  197,  161,  339,  201,  185,  395,   90,
 /*  4140 */   145,  232,  108,  443,  443,  443,  107,  150,  443,  443,
 /*  4150 */   443,  354,  443,  443,  400,  403,  405,  269,  443,  271,
 /*  4160 */   275,  443,  443,  443,  443,  443,  443,  443,  443,  443,
 /*  4170 */   443,  443,  443,   96,  443,  443,  443,  443,  443,  443,
 /*  4180 */   443,  443,  443,  443,  443,  343,  355,  241,  443,  443,
 /*  4190 */   443,  443,  443,  443,  443,  443,  443,  400,  403,  405,
 /*  4200 */   269,  443,  271,  275,
    );
    static public $yy_lookahead = array(
 /*     0 */     7,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*    10 */   121,   20,   19,   20,   21,   22,   23,   24,   25,   26,
 /*    20 */   143,   28,   29,   30,   34,   60,   33,   37,  151,   36,
 /*    30 */    39,   38,   96,   40,    7,   24,   25,   26,   45,   21,
 /*    40 */   141,   23,   49,   50,   51,   52,   53,   54,   55,   56,
 /*    50 */    57,   58,   59,   90,   91,   62,   92,   93,   65,   66,
 /*    60 */    67,   68,   69,   36,  187,   72,   73,   74,   75,   76,
 /*    70 */   171,  172,   45,  174,  175,  176,  177,  178,  179,  180,
 /*    80 */   181,  182,  183,  184,   34,   92,   93,   37,   27,   96,
 /*    90 */    97,   98,   99,   35,   36,  102,  103,  104,  105,  106,
 /*   100 */   107,  108,  109,    7,  111,  112,  113,  114,  115,  116,
 /*   110 */   117,  118,  119,  120,  121,   19,   20,   21,   22,   23,
 /*   120 */    24,   25,   26,   96,   28,   29,   30,   34,  141,   33,
 /*   130 */   143,   36,   36,  116,   38,   42,   40,  120,  151,   27,
 /*   140 */    20,   45,  141,   31,   32,   49,   50,   51,   52,   53,
 /*   150 */    54,   55,   56,   57,   58,   59,   36,   36,   62,   35,
 /*   160 */    36,   65,   66,   67,   68,   69,   35,   36,   72,   73,
 /*   170 */    74,   75,   76,  172,  187,  174,  175,  176,  177,  178,
 /*   180 */   179,  180,  181,  182,  183,  184,  116,  117,   92,   93,
 /*   190 */   120,  121,   96,   97,   98,   99,   35,   36,  102,  103,
 /*   200 */   104,  105,  106,  107,  108,  109,    7,  111,  112,  113,
 /*   210 */   114,  115,  116,  117,  118,  119,  120,  121,   19,   20,
 /*   220 */    21,   20,   23,   24,   25,   26,  106,  107,  108,  109,
 /*   230 */    34,  111,   33,   37,  110,   36,   21,   38,   23,   40,
 /*   240 */    39,   41,   42,  141,   45,   46,   47,   48,   49,   50,
 /*   250 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   23,
 /*   260 */    34,   62,   41,   37,   65,   66,   67,   68,   69,   35,
 /*   270 */    34,   72,   73,   74,   75,   76,  174,  175,  176,  177,
 /*   280 */   178,  179,  180,  181,  182,  183,  184,   20,   88,   89,
 /*   290 */    23,   92,   93,   35,  141,   96,   97,   98,   99,   20,
 /*   300 */    21,  102,  103,  104,  105,  106,  107,  108,  109,    7,
 /*   310 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   320 */   121,   19,   20,   21,   22,   23,   24,   25,   26,   94,
 /*   330 */    95,   96,  179,  180,  120,   33,  183,  184,   36,   23,
 /*   340 */    38,   20,   40,    7,  110,  115,  116,   45,   36,  141,
 /*   350 */   120,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   360 */    58,   59,   23,   34,   62,   44,   37,   65,   66,   67,
 /*   370 */    68,   69,   23,   34,   72,   73,   74,   75,   76,  171,
 /*   380 */   172,   45,  174,  175,  176,  177,  178,  179,  180,  181,
 /*   390 */   182,  183,  184,   34,   92,   93,   37,  141,   96,   97,
 /*   400 */    98,   99,   20,   21,  102,  103,  104,  105,  106,  107,
 /*   410 */   108,  109,    7,  111,  112,  113,  114,  115,  116,  117,
 /*   420 */   118,  119,  120,  121,   19,   20,   21,   22,   23,   24,
 /*   430 */    25,   26,   96,  112,   22,  179,  180,   36,   33,  183,
 /*   440 */   184,   36,   20,   38,   22,   40,  148,  149,  150,  116,
 /*   450 */    45,   23,  141,  120,   49,   50,   51,   52,   53,   54,
 /*   460 */    55,   56,   57,   58,   59,   34,   20,   62,   37,   23,
 /*   470 */    65,   66,   67,   68,   69,   63,   64,   72,   73,   74,
 /*   480 */    75,   76,  171,  172,   20,  174,  175,  176,  177,  178,
 /*   490 */   179,  180,  181,  182,  183,  184,  141,   92,   93,  158,
 /*   500 */   159,   96,   97,   98,   99,   37,  151,  102,  103,  104,
 /*   510 */   105,  106,  107,  108,  109,    7,  111,  112,  113,  114,
 /*   520 */   115,  116,  117,  118,  119,  120,  121,   19,   20,   21,
 /*   530 */    22,   23,   24,   25,   26,  116,  117,   22,   22,  120,
 /*   540 */   121,   33,  187,  143,   36,   23,   38,   20,   40,   20,
 /*   550 */    34,  151,   23,   45,  141,  141,   34,   49,   50,   51,
 /*   560 */    52,   53,   54,   55,   56,   57,   58,   59,  110,   20,
 /*   570 */    62,   44,   27,   65,   66,   67,   68,   69,   63,   64,
 /*   580 */    72,   73,   74,   75,   76,  171,  172,  187,  174,  175,
 /*   590 */   176,  177,  178,  179,  180,  181,  182,  183,  184,   20,
 /*   600 */    92,   93,   23,   21,   96,   97,   98,   99,   47,   48,
 /*   610 */   102,  103,  104,  105,  106,  107,  108,  109,    7,  111,
 /*   620 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*   630 */    19,   20,   21,   22,   23,   24,   25,   26,  143,  112,
 /*   640 */    34,   23,   20,   37,   33,   96,  151,   36,   53,   38,
 /*   650 */    34,   40,   34,   37,  151,  110,   45,   20,  141,  127,
 /*   660 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*   670 */    59,   35,   20,   62,  167,  168,   65,   66,   67,   68,
 /*   680 */    69,   36,  187,   72,   73,   74,   75,   76,  171,  172,
 /*   690 */   187,  174,  175,  176,  177,  178,  179,  180,  181,  182,
 /*   700 */   183,  184,   71,   92,   93,  149,  150,   96,   97,   98,
 /*   710 */    99,  139,  140,  102,  103,  104,  105,  106,  107,  108,
 /*   720 */   109,    7,  111,  112,  113,  114,  115,  116,  117,  118,
 /*   730 */   119,  120,  121,   19,   20,   21,   22,   23,   24,   25,
 /*   740 */    26,  144,   37,  144,  163,  164,  110,   33,   96,  152,
 /*   750 */    36,  152,   38,   20,   40,   21,   71,   23,   23,   45,
 /*   760 */    13,  141,   45,   49,   50,   51,   52,   53,   54,   55,
 /*   770 */    56,   57,   58,   59,   46,   23,   62,  144,   20,   65,
 /*   780 */    66,   67,   68,   69,  120,  152,   72,   73,   74,   75,
 /*   790 */    76,  171,  172,   21,  174,  175,  176,  177,  178,  179,
 /*   800 */   180,  181,  182,  183,  184,   23,   92,   93,   23,   21,
 /*   810 */    96,   97,   98,   99,   34,    2,  102,  103,  104,  105,
 /*   820 */   106,  107,  108,  109,    7,  111,  112,  113,  114,  115,
 /*   830 */   116,  117,  118,  119,  120,  121,   19,   20,   21,   22,
 /*   840 */    23,   24,   25,   26,  144,  112,  120,   27,   42,   13,
 /*   850 */    33,   36,  152,   36,  112,   38,   23,   40,   27,   36,
 /*   860 */    23,  141,   45,  145,  141,   41,   49,   50,   51,   52,
 /*   870 */    53,   54,   55,   56,   57,   58,   59,   42,   23,   62,
 /*   880 */   120,  145,   65,   66,   67,   68,   69,   36,  137,   72,
 /*   890 */    73,   74,   75,   76,  171,  172,   42,  174,  175,  176,
 /*   900 */   177,  178,  179,  180,  181,  182,  183,  184,   41,   92,
 /*   910 */    93,  145,  145,   96,   97,   98,   99,  120,   37,  102,
 /*   920 */   103,  104,  105,  106,  107,  108,  109,    7,  111,  112,
 /*   930 */   113,  114,  115,  116,  117,  118,  119,  120,  121,   19,
 /*   940 */    20,   21,   22,   23,   24,   25,   26,   20,   35,   41,
 /*   950 */    36,  140,  120,   33,   35,  145,   36,   41,   38,   36,
 /*   960 */    40,   20,   37,   35,  145,   45,   21,  141,   20,   49,
 /*   970 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   980 */   132,   20,   62,   20,  168,   65,   66,   67,   68,   69,
 /*   990 */   138,   37,   72,   73,   74,   75,   76,  171,  172,  130,
 /*  1000 */   174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  1010 */   184,  164,   92,   93,   36,  130,   96,   97,   98,   99,
 /*  1020 */    37,   39,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1030 */     7,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  1040 */   120,  121,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  1050 */   145,   20,   42,   20,  145,  138,   33,  188,  188,   36,
 /*  1060 */   188,   38,  188,   40,  188,  188,  188,  188,   45,  188,
 /*  1070 */   141,  188,   49,   50,   51,   52,   53,   54,   55,   56,
 /*  1080 */    57,   58,   59,  188,  188,   62,  188,  188,   65,   66,
 /*  1090 */    67,   68,   69,  188,  188,   72,   73,   74,   75,   76,
 /*  1100 */   171,  172,  188,  174,  175,  176,  177,  178,  179,  180,
 /*  1110 */   181,  182,  183,  184,  188,   92,   93,  188,  188,   96,
 /*  1120 */    97,   98,   99,  188,  188,  102,  103,  104,  105,  106,
 /*  1130 */   107,  108,  109,    7,  111,  112,  113,  114,  115,  116,
 /*  1140 */   117,  118,  119,  120,  121,   19,   20,   21,   22,   23,
 /*  1150 */    24,   25,   26,  188,  188,  188,  188,  188,  188,   33,
 /*  1160 */   188,  188,   36,  188,   38,  188,   40,  188,  188,  188,
 /*  1170 */   188,   45,  188,  141,  188,   49,   50,   51,   52,   53,
 /*  1180 */    54,   55,   56,   57,   58,   59,  188,  188,   62,  188,
 /*  1190 */   188,   65,   66,   67,   68,   69,  188,  188,   72,   73,
 /*  1200 */    74,   75,   76,  171,  172,  188,  174,  175,  176,  177,
 /*  1210 */   178,  179,  180,  181,  182,  183,  184,  188,   92,   93,
 /*  1220 */   188,  188,   96,   97,   98,   99,  188,  188,  102,  103,
 /*  1230 */   104,  105,  106,  107,  108,  109,    7,  111,  112,  113,
 /*  1240 */   114,  115,  116,  117,  118,  119,  120,  121,   19,   20,
 /*  1250 */    21,  188,   23,   24,   25,   26,  188,  188,  188,  188,
 /*  1260 */   188,  188,   33,  188,  188,   36,  188,   38,  188,   40,
 /*  1270 */   188,  188,  188,  188,   45,  188,  141,  188,   49,   50,
 /*  1280 */    51,   52,   53,   54,   55,   56,   57,   58,   59,  188,
 /*  1290 */   188,   62,  188,  188,   65,   66,   67,   68,   69,  188,
 /*  1300 */   188,   72,   73,   74,   75,   76,  171,  172,  188,  174,
 /*  1310 */   175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
 /*  1320 */   188,   92,   93,  188,  141,   96,   97,   98,   99,  188,
 /*  1330 */   188,  102,  103,  104,  105,  106,  107,  108,  109,    7,
 /*  1340 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  1350 */   121,   19,   20,   21,  188,   23,   24,   25,   26,  176,
 /*  1360 */   177,  178,  179,  180,  181,  182,  183,  184,   36,  188,
 /*  1370 */    38,  188,   40,  188,   24,   25,  188,   45,  188,  141,
 /*  1380 */   188,  188,  188,   33,   52,   53,   54,   55,   56,   57,
 /*  1390 */    58,   59,   42,   43,   62,  188,  188,   65,   66,   67,
 /*  1400 */    68,   69,  188,  188,   72,   73,   74,   75,   76,  171,
 /*  1410 */   172,  188,  174,  175,  176,  177,  178,  179,  180,  181,
 /*  1420 */   182,  183,  184,  188,   92,   93,  141,  188,   96,   97,
 /*  1430 */    98,   99,  188,  188,  102,  103,  104,  105,  106,  107,
 /*  1440 */   108,  109,  188,  111,  112,  113,  114,  115,  116,  117,
 /*  1450 */   118,  119,  120,  121,  125,  126,  188,  128,  129,  188,
 /*  1460 */   131,  132,  177,  178,  179,  180,  181,  182,  183,  184,
 /*  1470 */   141,  142,  188,   24,   25,  146,  147,  188,  188,  188,
 /*  1480 */   151,  188,   33,  188,  155,  156,  157,  158,  159,  160,
 /*  1490 */   161,  162,   43,  188,  188,  166,  188,  188,  169,  170,
 /*  1500 */   171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
 /*  1510 */   181,  182,  183,  184,  185,  186,  187,  125,  126,    7,
 /*  1520 */   128,  129,  188,  131,  132,  133,  134,  135,  136,  188,
 /*  1530 */   188,  188,   20,  141,  142,  188,  188,  188,  146,  147,
 /*  1540 */   188,  188,  188,  151,  188,  188,  188,  155,   36,   37,
 /*  1550 */    38,  188,  160,  161,  162,  188,  188,   45,  166,  141,
 /*  1560 */   188,  169,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  1570 */   178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
 /*  1580 */    68,   69,  188,  188,   72,   73,   74,   75,   76,  171,
 /*  1590 */   172,  188,  174,  175,  176,  177,  178,  179,  180,  181,
 /*  1600 */   182,  183,  184,  141,   92,   93,  188,  188,   96,   97,
 /*  1610 */    98,   99,  188,  188,  102,  103,  104,  105,  106,  107,
 /*  1620 */   108,  109,    7,  111,  112,  113,  114,  115,  116,  117,
 /*  1630 */   118,  119,  120,  121,  172,   20,  174,  175,  176,  177,
 /*  1640 */   178,  179,  180,  181,  182,  183,  184,  188,  188,  188,
 /*  1650 */   188,   36,   37,   38,   24,   25,   26,  188,  141,  188,
 /*  1660 */    45,  188,  188,  188,  188,  188,  188,  188,   38,  188,
 /*  1670 */   188,  188,  188,  188,  188,   45,  188,  188,  188,  188,
 /*  1680 */   188,  188,  188,   68,   69,  188,  188,   72,   73,   74,
 /*  1690 */    75,   76,  175,  176,  177,  178,  179,  180,  181,  182,
 /*  1700 */   183,  184,   72,   73,   74,   75,   76,   92,   93,  188,
 /*  1710 */   188,   96,   97,   98,   99,  188,  188,  102,  103,  104,
 /*  1720 */   105,  106,  107,  108,  109,    7,  111,  112,  113,  114,
 /*  1730 */   115,  116,  117,  118,  119,  120,  121,  141,   20,  188,
 /*  1740 */   188,   23,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  1750 */   120,  121,  188,  188,   36,  188,   38,  188,  188,  188,
 /*  1760 */   188,  188,  188,   45,  188,  141,  188,  171,  172,  188,
 /*  1770 */   174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  1780 */   184,  188,  188,  188,  188,  188,   68,   69,  188,  188,
 /*  1790 */    72,   73,   74,   75,   76,  171,  172,  188,  174,  175,
 /*  1800 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  188,
 /*  1810 */    92,   93,  188,  188,   96,   97,   98,   99,  188,  188,
 /*  1820 */   102,  103,  104,  105,  106,  107,  108,  109,    7,  111,
 /*  1830 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  1840 */   142,   20,  188,  188,  188,  147,  188,  188,  188,  151,
 /*  1850 */   188,  153,  154,  188,  188,  188,  188,   36,  188,   38,
 /*  1860 */   188,  188,  188,  188,  188,  188,   45,  188,  141,  188,
 /*  1870 */   188,  188,    3,  188,    5,    6,    7,    8,  188,   10,
 /*  1880 */   188,  188,   61,  185,  186,  187,  188,  188,  188,   68,
 /*  1890 */    69,  188,  188,   72,   73,   74,   75,   76,  171,  172,
 /*  1900 */   188,  174,  175,  176,  177,  178,  179,  180,  181,  182,
 /*  1910 */   183,  184,  188,   92,   93,  188,  188,   96,   97,   98,
 /*  1920 */    99,  188,  188,  102,  103,  104,  105,  106,  107,  108,
 /*  1930 */   109,  188,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  1940 */   119,  120,  121,  125,  126,    7,  128,  129,   45,  131,
 /*  1950 */   132,  188,  134,  135,  136,  188,   87,  188,   20,  141,
 /*  1960 */   142,  188,  188,  188,  146,  147,  188,  188,  188,  151,
 /*  1970 */   188,  188,  188,  155,   36,  188,   38,  188,  160,  161,
 /*  1980 */   162,  188,  188,   45,  166,  188,  188,  169,  170,  171,
 /*  1990 */   172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
 /*  2000 */   182,  183,  184,  185,  186,  187,   68,   69,  188,  188,
 /*  2010 */    72,   73,   74,   75,   76,  112,  113,  114,  115,  116,
 /*  2020 */   117,  118,  119,  120,  121,  188,  188,  188,  188,  188,
 /*  2030 */    92,   93,  141,  188,   96,   97,   98,   99,  188,  188,
 /*  2040 */   102,  103,  104,  105,  106,  107,  108,  109,  188,  111,
 /*  2050 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  2060 */   123,  124,  125,  126,  188,  128,  129,  188,  131,  132,
 /*  2070 */   179,  180,  181,  182,  183,  184,  188,  188,  141,  142,
 /*  2080 */   188,  188,  188,  146,  147,  188,  188,  188,  151,  188,
 /*  2090 */   188,  188,  155,  188,  188,  188,  141,  160,  161,  162,
 /*  2100 */   188,  188,  188,  166,  188,  188,  169,  170,  171,  172,
 /*  2110 */   173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
 /*  2120 */   183,  184,  185,  186,  187,  124,  125,  126,  188,  128,
 /*  2130 */   129,  188,  131,  132,  179,  180,  181,  182,  183,  184,
 /*  2140 */   188,  188,  141,  142,  188,  188,  188,  146,  147,  188,
 /*  2150 */   188,  188,  151,  188,  188,  188,  155,  188,  188,  142,
 /*  2160 */   188,  160,  161,  162,  147,  188,  188,  166,  151,  188,
 /*  2170 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  2180 */   179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  2190 */   124,  125,  126,  188,  128,  129,  188,  131,  132,  188,
 /*  2200 */   188,  188,  185,  186,  187,  188,  188,  141,  142,  188,
 /*  2210 */   188,  188,  146,  147,  188,  188,  188,  151,  188,  188,
 /*  2220 */   188,  155,  188,  188,  188,  141,  160,  161,  162,  188,
 /*  2230 */   188,  188,  166,  188,  188,  169,  170,  171,  172,  173,
 /*  2240 */   174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  2250 */   184,  185,  186,  187,  124,  125,  126,  188,  128,  129,
 /*  2260 */   188,  131,  132,  179,  180,  181,  182,  183,  184,  188,
 /*  2270 */   188,  141,  142,  188,  188,  188,  146,  147,  188,  188,
 /*  2280 */   188,  151,  188,  188,  188,  155,  188,  188,  188,  188,
 /*  2290 */   160,  161,  162,  188,  188,  188,  166,  188,  188,  169,
 /*  2300 */   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
 /*  2310 */   180,  181,  182,  183,  184,  185,  186,  187,  188,  124,
 /*  2320 */   125,  126,  188,  128,  129,  188,  131,  132,  188,  188,
 /*  2330 */   188,  188,  188,  188,  188,  188,  141,  142,  188,  188,
 /*  2340 */   188,  146,  147,  188,  188,  188,  151,  188,  188,  188,
 /*  2350 */   155,  188,  188,  188,  141,  160,  161,  162,  188,  188,
 /*  2360 */   188,  166,  188,  188,  169,  170,  171,  172,  173,  174,
 /*  2370 */   175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
 /*  2380 */   185,  186,  187,  124,  125,  126,  188,  128,  129,  188,
 /*  2390 */   131,  132,  179,  180,  181,  182,  183,  184,  188,  188,
 /*  2400 */   141,  142,  188,  188,  188,  146,  147,  188,  188,  188,
 /*  2410 */   151,  188,  188,  188,  155,  188,  188,  188,  188,  160,
 /*  2420 */   161,  162,  188,  188,  188,  166,  188,  188,  169,  170,
 /*  2430 */   171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
 /*  2440 */   181,  182,  183,  184,  185,  186,  187,  188,  124,  125,
 /*  2450 */   126,  188,  128,  129,  188,  131,  132,  188,  188,  188,
 /*  2460 */   188,  188,  188,  188,  188,  141,  142,  188,  188,  188,
 /*  2470 */   146,  147,  188,  188,  188,  151,  188,  188,  188,  155,
 /*  2480 */   188,  188,  188,  141,  160,  161,  162,  188,  188,  188,
 /*  2490 */   166,  188,  188,  169,  170,  171,  172,  173,  174,  175,
 /*  2500 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
 /*  2510 */   186,  187,  124,  125,  126,  188,  128,  129,  188,  131,
 /*  2520 */   132,  179,  180,  181,  182,  183,  184,  188,  188,  141,
 /*  2530 */   142,  188,  188,  188,  146,  147,  188,  188,  188,  151,
 /*  2540 */   188,  188,  188,  155,  188,  188,  188,  188,  160,  161,
 /*  2550 */   162,  188,  188,  188,  166,  188,  188,  169,  170,  171,
 /*  2560 */   172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
 /*  2570 */   182,  183,  184,  185,  186,  187,  188,  124,  125,  126,
 /*  2580 */   188,  128,  129,  188,  131,  132,  188,  188,  188,  188,
 /*  2590 */   188,  188,  188,  188,  141,  142,  188,  188,  188,  146,
 /*  2600 */   147,  188,  188,  188,  151,  188,  188,  188,  155,  188,
 /*  2610 */   188,  188,  141,  160,  161,  162,  188,  188,  188,  166,
 /*  2620 */   188,  188,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  2630 */   177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
 /*  2640 */   187,  124,  125,  126,  188,  128,  129,  188,  131,  132,
 /*  2650 */   179,  180,  181,  182,  183,  184,  188,  188,  141,  142,
 /*  2660 */   188,  188,  188,  146,  147,  188,  188,  188,  151,  188,
 /*  2670 */   188,  188,  155,  188,  188,  188,  188,  160,  161,  162,
 /*  2680 */   188,  188,  188,  166,  188,  188,  169,  170,  171,  172,
 /*  2690 */   173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
 /*  2700 */   183,  184,  185,  186,  187,  188,  124,  125,  126,  188,
 /*  2710 */   128,  129,  188,  131,  132,  188,  188,  188,  188,  188,
 /*  2720 */   188,  188,  188,  141,  142,  188,  188,  188,  146,  147,
 /*  2730 */   188,  188,  188,  151,  188,  188,  188,  155,  188,  188,
 /*  2740 */   188,  141,  160,  161,  162,  188,  188,  188,  166,  188,
 /*  2750 */   188,  169,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  2760 */   178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
 /*  2770 */   188,  125,  126,  188,  128,  129,  188,  131,  132,  179,
 /*  2780 */   180,  181,  182,  183,  184,  188,  188,  141,  142,  188,
 /*  2790 */   188,  188,  146,  147,  188,  188,  188,  151,  188,  188,
 /*  2800 */   188,  155,  188,  188,  188,  141,  160,  161,  162,  188,
 /*  2810 */   188,  188,  166,  188,  188,  169,  170,  171,  172,  173,
 /*  2820 */   174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  2830 */   184,  185,  186,  187,  126,  188,  128,  129,  188,  131,
 /*  2840 */   132,  177,  178,  179,  180,  181,  182,  183,  184,  141,
 /*  2850 */   142,  188,  188,  188,  146,  147,  188,  188,  188,  151,
 /*  2860 */   188,  188,  188,   36,  188,  188,  141,  188,  160,  161,
 /*  2870 */   162,  188,  188,  188,  166,  188,  188,  169,  170,  171,
 /*  2880 */   172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
 /*  2890 */   182,  183,  184,  185,  186,  187,  126,   70,  128,  129,
 /*  2900 */   188,  131,  132,  178,  179,  180,  181,  182,  183,  184,
 /*  2910 */   188,  141,  142,  188,  188,  188,  146,  147,  188,  188,
 /*  2920 */   188,  151,  188,  188,  188,   98,   99,  100,  101,  141,
 /*  2930 */   160,  161,  162,  188,  188,  188,  166,  188,  188,  169,
 /*  2940 */   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
 /*  2950 */   180,  181,  182,  183,  184,  185,  186,  187,  126,  188,
 /*  2960 */   128,  129,  188,  131,  132,  188,  178,  179,  180,  181,
 /*  2970 */   182,  183,  184,  141,  142,  188,  188,  188,  146,  147,
 /*  2980 */   188,  188,  188,  151,  188,  188,  188,  188,  188,  188,
 /*  2990 */   141,  188,  160,  161,  162,  188,  188,  188,  166,  188,
 /*  3000 */   188,  169,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  3010 */   178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
 /*  3020 */   126,  188,  128,  129,  188,  131,  132,  178,  179,  180,
 /*  3030 */   181,  182,  183,  184,  188,  141,  142,  188,  188,  188,
 /*  3040 */   146,  147,  188,  188,  188,  151,  188,  188,  142,  188,
 /*  3050 */   188,  188,  188,  147,  160,  161,  162,  151,  188,  188,
 /*  3060 */   166,  188,  188,  169,  170,  171,  172,  173,  174,  175,
 /*  3070 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
 /*  3080 */   186,  187,  126,  188,  128,  129,  188,  131,  132,  188,
 /*  3090 */   188,  185,  186,  187,  188,  188,  188,  141,  142,  188,
 /*  3100 */   188,  188,  146,  147,  188,  188,  188,  151,  188,  188,
 /*  3110 */   188,  188,  188,  188,  188,  188,  160,  161,  162,  188,
 /*  3120 */   188,  188,  166,  188,  188,  169,  170,  171,  172,  173,
 /*  3130 */   174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  3140 */   184,  185,  186,  187,  141,  142,  188,  188,  142,  146,
 /*  3150 */   147,  188,  188,  147,  151,  188,  188,  151,  188,  188,
 /*  3160 */   154,  188,  188,  160,  188,  188,  188,  188,  165,  188,
 /*  3170 */   188,  188,  188,  188,  171,  172,  173,  174,  175,  176,
 /*  3180 */   177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
 /*  3190 */   187,  185,  186,  187,  188,  188,  141,  142,  188,  188,
 /*  3200 */   188,  146,  147,  142,  188,  188,  151,  188,  147,  188,
 /*  3210 */   188,  188,  151,  142,  188,  160,  142,  188,  147,  188,
 /*  3220 */   188,  147,  151,  188,  188,  151,  171,  172,  173,  174,
 /*  3230 */   175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
 /*  3240 */   185,  186,  187,  188,  141,  142,  185,  186,  187,  146,
 /*  3250 */   147,  188,  188,  188,  151,  188,  185,  186,  187,  185,
 /*  3260 */   186,  187,  188,  160,  147,  188,  188,  188,  151,  188,
 /*  3270 */   188,  188,  188,  188,  171,  172,  173,  174,  175,  176,
 /*  3280 */   177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
 /*  3290 */   187,  141,  142,  188,  188,  188,  146,  147,  188,  188,
 /*  3300 */   188,  151,  185,  186,  187,  188,  142,  188,  188,  188,
 /*  3310 */   160,  147,  188,  188,  188,  151,  188,  188,  188,  188,
 /*  3320 */   188,  171,  172,  173,  174,  175,  176,  177,  178,  179,
 /*  3330 */   180,  181,  182,  183,  184,  185,  186,  187,  141,  142,
 /*  3340 */   188,  188,  188,  146,  147,  188,  188,  188,  151,  185,
 /*  3350 */   186,  187,  188,  188,  188,  142,  188,  160,  188,  188,
 /*  3360 */   147,  188,  188,  188,  151,  188,  188,  188,  171,  172,
 /*  3370 */   173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
 /*  3380 */   183,  184,  185,  186,  187,  188,  141,  142,  188,  188,
 /*  3390 */   188,  146,  147,  188,  188,  188,  151,  188,  185,  186,
 /*  3400 */   187,  188,  188,  188,  188,  160,  188,  188,  188,  188,
 /*  3410 */   188,  188,  188,  188,  188,  188,  171,  172,  173,  174,
 /*  3420 */   175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
 /*  3430 */   185,  186,  187,  141,  142,  188,  188,  188,  146,  147,
 /*  3440 */   188,  188,  188,  151,  188,  188,  188,  188,  188,  188,
 /*  3450 */   188,  188,  160,  188,  188,  188,  188,  188,  188,  188,
 /*  3460 */   188,  188,  188,  171,  172,  173,  174,  175,  176,  177,
 /*  3470 */   178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
 /*  3480 */   141,  142,  188,  188,  188,  146,  147,  188,  188,  188,
 /*  3490 */   151,  188,  188,  188,  188,  188,  188,  188,  188,  160,
 /*  3500 */   188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
 /*  3510 */   171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
 /*  3520 */   181,  182,  183,  184,  185,  186,  187,  188,  141,  142,
 /*  3530 */   188,  188,  188,  146,  147,  188,  188,  188,  151,  188,
 /*  3540 */   188,  188,  188,  188,  188,  188,  188,  160,  188,  188,
 /*  3550 */   188,  188,  188,  188,  188,  188,  188,  188,  171,  172,
 /*  3560 */   173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
 /*  3570 */   183,  184,  185,  186,  187,  141,  142,  188,  188,  188,
 /*  3580 */   146,  147,  188,  188,  188,  151,  188,  188,  188,  188,
 /*  3590 */   188,  188,  188,  188,  160,  188,  188,  188,  188,  188,
 /*  3600 */   188,  188,  188,  188,  188,  171,  172,  173,  174,  175,
 /*  3610 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
 /*  3620 */   186,  187,  141,  142,  188,  188,  188,  146,  147,  188,
 /*  3630 */   188,  188,  151,  188,  188,  188,  188,  188,  188,  188,
 /*  3640 */   188,  160,  188,  188,  188,  188,  188,  188,  188,  188,
 /*  3650 */   188,  188,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  3660 */   179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  3670 */   141,  142,  188,  188,  188,  146,  147,  188,  188,  188,
 /*  3680 */   151,  188,  188,  188,  188,  188,  188,  188,  188,  160,
 /*  3690 */    37,  188,  188,  188,  188,  188,  188,  188,   45,  188,
 /*  3700 */   171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
 /*  3710 */   181,  182,  183,  184,  185,  186,  187,  141,  142,  188,
 /*  3720 */   188,   20,  146,  147,  188,  188,  188,  151,  188,  188,
 /*  3730 */   188,  188,  188,  188,  188,  188,  160,   36,  188,  188,
 /*  3740 */   188,  188,  188,  188,  188,   44,  188,  171,  172,  173,
 /*  3750 */   174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  3760 */   184,  185,  186,  187,    7,  112,  113,  114,  115,  116,
 /*  3770 */   117,  118,  119,  120,  121,  188,  188,   20,  188,  188,
 /*  3780 */   188,  188,  188,  188,  188,    7,  188,  188,  188,  188,
 /*  3790 */   188,  188,  188,   36,  188,   38,   39,  188,   20,  188,
 /*  3800 */   188,  188,  188,  188,  141,  188,    7,  106,  107,  108,
 /*  3810 */   109,  188,  111,  112,   36,  188,   38,  188,  188,   20,
 /*  3820 */   188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
 /*  3830 */   188,  188,  188,  188,  188,   36,  188,   38,  175,  176,
 /*  3840 */   177,  178,  179,  180,  181,  182,  183,  184,   70,   92,
 /*  3850 */    93,  188,  188,   96,   97,   98,   99,  188,  188,  102,
 /*  3860 */   103,  104,  105,  106,  107,  108,  109,  188,  111,  188,
 /*  3870 */    92,   93,  188,  188,   96,   97,   98,   99,  188,  188,
 /*  3880 */   102,  103,  104,  105,  106,  107,  108,  109,  188,  111,
 /*  3890 */   141,   92,   93,  188,  188,   96,   97,   98,   99,  188,
 /*  3900 */   188,  102,  103,  104,  105,  106,  107,  108,  109,    3,
 /*  3910 */   111,    5,    6,    7,    8,  141,   10,  188,  188,  188,
 /*  3920 */   188,  172,  188,  174,  175,  176,  177,  178,  179,  180,
 /*  3930 */   181,  182,  183,  184,   20,  141,  188,  188,  188,  188,
 /*  3940 */   188,   35,  188,  188,  188,  188,  188,  188,  174,  175,
 /*  3950 */   176,  177,  178,  179,  180,  181,  182,  183,  184,   45,
 /*  3960 */   188,  141,  188,  188,  188,  188,  172,  188,  174,  175,
 /*  3970 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  141,
 /*  3980 */   188,  188,  188,   77,   78,   79,   80,   81,   82,   83,
 /*  3990 */    84,   85,   86,   87,  174,  175,  176,  177,  178,  179,
 /*  4000 */   180,  181,  182,  183,  184,  141,  188,  188,   20,  188,
 /*  4010 */   188,  188,  174,  175,  176,  177,  178,  179,  180,  181,
 /*  4020 */   182,  183,  184,  141,   36,  188,  112,  113,  114,  115,
 /*  4030 */   116,  117,  118,  119,  120,  121,  188,  141,  174,  175,
 /*  4040 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  188,
 /*  4050 */   188,  188,  188,  188,  188,  188,  174,  175,  176,  177,
 /*  4060 */   178,  179,  180,  181,  182,  183,  184,  141,   20,  188,
 /*  4070 */   174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  4080 */   184,  188,  188,  141,   36,   37,  188,  188,  188,  188,
 /*  4090 */   102,  103,  104,  105,  106,  107,  108,  109,  141,  111,
 /*  4100 */   188,  175,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  4110 */   184,   20,  188,  188,  188,  188,  188,  175,  176,  177,
 /*  4120 */   178,  179,  180,  181,  182,  183,  184,   36,  188,  188,
 /*  4130 */   188,  188,  132,  176,  177,  178,  179,  180,  181,  182,
 /*  4140 */   183,  184,  142,  188,  188,  188,  146,  147,  188,  188,
 /*  4150 */   188,  151,  188,  188,  106,  107,  108,  109,  188,  111,
 /*  4160 */   112,  188,  188,  188,  188,  188,  188,  188,  188,  188,
 /*  4170 */   188,  188,  188,  173,  188,  188,  188,  188,  188,  188,
 /*  4180 */   188,  188,  188,  188,  188,  185,  186,  187,  188,  188,
 /*  4190 */   188,  188,  188,  188,  188,  188,  188,  106,  107,  108,
 /*  4200 */   109,  188,  111,  112,
);
    const YY_SHIFT_USE_DFLT = -112;
    const YY_SHIFT_MAX = 279;
    static public $yy_shift_ofst = array(
 /*     0 */  1229,   96,  199,   -7,  714,  302,  508,  611, 1229, 1229,
 /*    10 */  1229, 1229, 1229, 1229,  405,  817,  920, 1126, 1023, 1229,
 /*    20 */  1229, 1229, 1229, 1229, 1332, 1332, 1332, 1332, 1332, 1821,
 /*    30 */  1615, 1718, 1512, 1938, 1938, 1938, 1938, 1938, 1938, 1938,
 /*    40 */  1938, 1938, 1938, 3778, 3799, 3799, 3799, 3799, 3799, 3799,
 /*    50 */  3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799,
 /*    60 */  3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799,
 /*    70 */  3799, 3799, 3799, 3799, 3799, 3799, 1630, 3799, 3799, 3799,
 /*    80 */  3799, 3799, 3653, 3757, 3799, 3799, 3799, 3799, 3799, 3799,
 /*    90 */  3799, 1903, 3914, 1903, 1903, 1903, 1903, 1903, 1903, 3988,
 /*   100 */  3988, -111, 3701, 4048, 4091, 1350,  527,  321,  321, 1449,
 /*   110 */   515,  561,  422,  733,  121,  -35,  121,  121,  121,  120,
 /*   120 */   120,  112,  412,   11,   18,  215,   18,  279,   18,   18,
 /*   130 */    18,   18,   18,  382,   18,  734,  927,  -35,  945, 3906,
 /*   140 */  1869, 1869, 1869, 1869, 2827, 2827, 2827,  200,  419,   70,
 /*   150 */    27,  200,  200,  200,  200,  200,  200,  200,  336,  235,
 /*   160 */   124,  235,  230,  336,  235,  -36,  196,   50,  -10,  -37,
 /*   170 */    -9,  616,  516,  606,  -37,  618,  -37,  431,   93,  131,
 /*   180 */   234,  -36,  636,  -37,  161,  652,  333,  545,   58,  579,
 /*   190 */   226,  267,  339,  -37,  236,  201,  329,  -36,  529,   17,
 /*   200 */   359,  549,  446,  522,  837,  833,  788,  717,  685,  735,
 /*   210 */   728,  772,  752,  582,  705,  831,  815,  645,  401,   95,
 /*   220 */   595,  468,  823,  941, 1033,  923,  867,  855,  797,  916,
 /*   230 */   913,  458,  978,  963,  622,  -64,  820,  785,  758,  782,
 /*   240 */   747,  742,  836,  780,  631,  316,  258,   61,  349,  637,
 /*   250 */   428,  458,  961,  948,  925, 1031,  982,  983,  851,  760,
 /*   260 */   835,  832,  908,  881,  919,  954,  854,  824, 1010,  464,
 /*   270 */   221,  312,  806,  813,  664,  747,  726,  214,  928,  914,
);
    const YY_REDUCE_USE_DFLT = -124;
    const YY_REDUCE_MAX = 138;
    static public $yy_reduce_ofst = array(
 /*     0 */  1937, 1392, 1329, 1818, 2066, 2130, 2195, 2001, 2259, 2324,
 /*    10 */  2517, 2388, 2453, 2582, 2646, 2646, 2646, 2646, 2646, 2646,
 /*    20 */  2646, 2646, 2646, 2646, 2832, 2770, 2894, 2708, 2956, 3003,
 /*    30 */  3481, 3339, 3292, 3434, 3292, 3576, 3529, 3245, 3387, 3197,
 /*    40 */  3055, 3150, 3103,  620, 1238,  826,  723, 1032,  517,  208,
 /*    50 */  1418,  414, 1624, 1727, 1596,  311, 1135, -101,  929,    1,
 /*    60 */  1462, 3749, 3794, 3896, 3864, 3882,  102, 3820, 3838, 3774,
 /*    70 */  3926, 1517, 3663, 3942, 3957, 1183, 4000, 1285, 2664, 2725,
 /*    80 */  2788, 2849, 1698, 1891, 2084, 1955, 1891, 2213, 2600, 2471,
 /*    90 */  2342, 3006, 3164, 3061, 2906, 2017, 3071, 3074, 3213,  153,
 /*   100 */   256, 3117,  -13,  355,  355,  298,  400, -123,  495,  556,
 /*   110 */   507,  341,  572,  503,  633,  581,  599,  597,  700,  413,
 /*   120 */   720,  751,  816,  848,  819,  869,  905,  885,  736,  718,
 /*   130 */   766,  810,  767,  917,  909,  852,  811,  847,  532,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 1 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 2 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 3 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 4 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 5 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 6 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 7 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 8 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 9 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 10 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 11 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 12 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 13 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 14 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 15 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 16 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 17 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 18 */ array(7, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 19 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 20 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 21 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 22 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 23 */ array(7, 19, 20, 21, 23, 24, 25, 26, 33, 36, 38, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 24 */ array(7, 19, 20, 21, 23, 24, 25, 26, 36, 38, 40, 45, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 25 */ array(7, 19, 20, 21, 23, 24, 25, 26, 36, 38, 40, 45, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 26 */ array(7, 19, 20, 21, 23, 24, 25, 26, 36, 38, 40, 45, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 27 */ array(7, 19, 20, 21, 23, 24, 25, 26, 36, 38, 40, 45, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 28 */ array(7, 19, 20, 21, 23, 24, 25, 26, 36, 38, 40, 45, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 29 */ array(7, 20, 36, 38, 45, 61, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 30 */ array(7, 20, 36, 37, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 31 */ array(7, 20, 23, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 32 */ array(7, 20, 36, 37, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 33 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 34 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 35 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 36 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 37 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 38 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 39 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 40 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 41 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 42 */ array(7, 20, 36, 38, 45, 68, 69, 72, 73, 74, 75, 76, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 43 */ array(7, 20, 36, 38, 70, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 44 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 45 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 46 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 47 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 48 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 49 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 50 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 51 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 52 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 53 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 54 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 55 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 56 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 57 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 58 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 59 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 60 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 61 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 62 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 63 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 64 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 65 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 66 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 67 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 68 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 69 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 70 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 71 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 72 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 73 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 74 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 75 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 76 */ array(24, 25, 26, 38, 45, 72, 73, 74, 75, 76, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 77 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 78 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 79 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 80 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 81 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 82 */ array(37, 45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 83 */ array(7, 20, 36, 38, 39, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 84 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 85 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 86 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 87 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 88 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 89 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 90 */ array(7, 20, 36, 38, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 91 */ array(45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 92 */ array(20, 45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 93 */ array(45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 94 */ array(45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 95 */ array(45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 96 */ array(45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 97 */ array(45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 98 */ array(45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 99 */ array(20, 36, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 100 */ array(20, 36, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 101 */ array(112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 102 */ array(20, 36, 44, 106, 107, 108, 109, 111, 112, ),
        /* 103 */ array(20, 36, 37, 106, 107, 108, 109, 111, 112, ),
        /* 104 */ array(20, 36, 106, 107, 108, 109, 111, 112, ),
        /* 105 */ array(24, 25, 33, 42, 43, ),
        /* 106 */ array(20, 44, 112, ),
        /* 107 */ array(20, 44, 112, ),
        /* 108 */ array(20, 44, 112, ),
        /* 109 */ array(24, 25, 33, 43, ),
        /* 110 */ array(22, 63, 64, ),
        /* 111 */ array(47, 48, ),
        /* 112 */ array(20, 22, ),
        /* 113 */ array(20, 112, ),
        /* 114 */ array(36, ),
        /* 115 */ array(60, ),
        /* 116 */ array(36, ),
        /* 117 */ array(36, ),
        /* 118 */ array(36, ),
        /* 119 */ array(20, 36, 106, 107, 108, 109, 111, ),
        /* 120 */ array(20, 36, 106, 107, 108, 109, 111, ),
        /* 121 */ array(27, 31, 32, ),
        /* 122 */ array(22, 63, 64, ),
        /* 123 */ array(24, 25, 26, ),
        /* 124 */ array(21, 23, ),
        /* 125 */ array(21, 23, ),
        /* 126 */ array(21, 23, ),
        /* 127 */ array(20, 21, ),
        /* 128 */ array(21, 23, ),
        /* 129 */ array(21, 23, ),
        /* 130 */ array(21, 23, ),
        /* 131 */ array(21, 23, ),
        /* 132 */ array(21, 23, ),
        /* 133 */ array(20, 21, ),
        /* 134 */ array(21, 23, ),
        /* 135 */ array(21, 23, ),
        /* 136 */ array(20, ),
        /* 137 */ array(60, ),
        /* 138 */ array(21, ),
        /* 139 */ array(3, 5, 6, 7, 8, 10, 35, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, ),
        /* 140 */ array(3, 5, 6, 7, 8, 10, 87, ),
        /* 141 */ array(3, 5, 6, 7, 8, 10, 87, ),
        /* 142 */ array(3, 5, 6, 7, 8, 10, 87, ),
        /* 143 */ array(3, 5, 6, 7, 8, 10, 87, ),
        /* 144 */ array(36, 70, 98, 99, 100, 101, ),
        /* 145 */ array(36, 70, 98, 99, 100, 101, ),
        /* 146 */ array(36, 70, 98, 99, 100, 101, ),
        /* 147 */ array(41, 42, 88, 89, ),
        /* 148 */ array(116, 117, 120, 121, ),
        /* 149 */ array(116, 117, 120, 121, ),
        /* 150 */ array(7, 36, 45, 96, ),
        /* 151 */ array(41, 42, 88, 89, ),
        /* 152 */ array(41, 42, 88, 89, ),
        /* 153 */ array(41, 42, 88, 89, ),
        /* 154 */ array(41, 42, 88, 89, ),
        /* 155 */ array(41, 42, 88, 89, ),
        /* 156 */ array(41, 42, 88, 89, ),
        /* 157 */ array(41, 42, 88, 89, ),
        /* 158 */ array(7, 45, 96, ),
        /* 159 */ array(94, 95, 96, ),
        /* 160 */ array(35, 36, 110, ),
        /* 161 */ array(94, 95, 96, ),
        /* 162 */ array(115, 116, 120, ),
        /* 163 */ array(7, 45, 96, ),
        /* 164 */ array(94, 95, 96, ),
        /* 165 */ array(92, 93, ),
        /* 166 */ array(34, 37, ),
        /* 167 */ array(34, 37, ),
        /* 168 */ array(34, 37, ),
        /* 169 */ array(90, 91, ),
        /* 170 */ array(20, 39, ),
        /* 171 */ array(34, 37, ),
        /* 172 */ array(22, 34, ),
        /* 173 */ array(34, 37, ),
        /* 174 */ array(90, 91, ),
        /* 175 */ array(23, 34, ),
        /* 176 */ array(90, 91, ),
        /* 177 */ array(34, 37, ),
        /* 178 */ array(34, 42, ),
        /* 179 */ array(35, 36, ),
        /* 180 */ array(35, 110, ),
        /* 181 */ array(92, 93, ),
        /* 182 */ array(35, 110, ),
        /* 183 */ array(90, 91, ),
        /* 184 */ array(35, 36, ),
        /* 185 */ array(20, 96, ),
        /* 186 */ array(116, 120, ),
        /* 187 */ array(27, 110, ),
        /* 188 */ array(35, 36, ),
        /* 189 */ array(20, 23, ),
        /* 190 */ array(34, 37, ),
        /* 191 */ array(20, 23, ),
        /* 192 */ array(23, 34, ),
        /* 193 */ array(90, 91, ),
        /* 194 */ array(23, 34, ),
        /* 195 */ array(20, 39, ),
        /* 196 */ array(34, 37, ),
        /* 197 */ array(92, 93, ),
        /* 198 */ array(20, 23, ),
        /* 199 */ array(116, 120, ),
        /* 200 */ array(34, 37, ),
        /* 201 */ array(20, 96, ),
        /* 202 */ array(20, 23, ),
        /* 203 */ array(23, 34, ),
        /* 204 */ array(23, ),
        /* 205 */ array(23, ),
        /* 206 */ array(21, ),
        /* 207 */ array(45, ),
        /* 208 */ array(71, ),
        /* 209 */ array(23, ),
        /* 210 */ array(46, ),
        /* 211 */ array(21, ),
        /* 212 */ array(23, ),
        /* 213 */ array(21, ),
        /* 214 */ array(37, ),
        /* 215 */ array(27, ),
        /* 216 */ array(36, ),
        /* 217 */ array(36, ),
        /* 218 */ array(36, ),
        /* 219 */ array(36, ),
        /* 220 */ array(53, ),
        /* 221 */ array(37, ),
        /* 222 */ array(36, ),
        /* 223 */ array(20, ),
        /* 224 */ array(20, ),
        /* 225 */ array(36, ),
        /* 226 */ array(41, ),
        /* 227 */ array(23, ),
        /* 228 */ array(120, ),
        /* 229 */ array(41, ),
        /* 230 */ array(35, ),
        /* 231 */ array(110, ),
        /* 232 */ array(36, ),
        /* 233 */ array(20, ),
        /* 234 */ array(20, ),
        /* 235 */ array(96, ),
        /* 236 */ array(27, ),
        /* 237 */ array(23, ),
        /* 238 */ array(20, ),
        /* 239 */ array(23, ),
        /* 240 */ array(13, ),
        /* 241 */ array(112, ),
        /* 242 */ array(13, ),
        /* 243 */ array(34, ),
        /* 244 */ array(71, ),
        /* 245 */ array(23, ),
        /* 246 */ array(35, ),
        /* 247 */ array(27, ),
        /* 248 */ array(23, ),
        /* 249 */ array(20, ),
        /* 250 */ array(23, ),
        /* 251 */ array(110, ),
        /* 252 */ array(20, ),
        /* 253 */ array(20, ),
        /* 254 */ array(37, ),
        /* 255 */ array(20, ),
        /* 256 */ array(39, ),
        /* 257 */ array(37, ),
        /* 258 */ array(36, ),
        /* 259 */ array(120, ),
        /* 260 */ array(42, ),
        /* 261 */ array(120, ),
        /* 262 */ array(41, ),
        /* 263 */ array(37, ),
        /* 264 */ array(35, ),
        /* 265 */ array(37, ),
        /* 266 */ array(42, ),
        /* 267 */ array(41, ),
        /* 268 */ array(42, ),
        /* 269 */ array(20, ),
        /* 270 */ array(41, ),
        /* 271 */ array(36, ),
        /* 272 */ array(42, ),
        /* 273 */ array(2, ),
        /* 274 */ array(120, ),
        /* 275 */ array(13, ),
        /* 276 */ array(120, ),
        /* 277 */ array(120, ),
        /* 278 */ array(35, ),
        /* 279 */ array(36, ),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
        /* 398 */ array(),
        /* 399 */ array(),
        /* 400 */ array(),
        /* 401 */ array(),
        /* 402 */ array(),
        /* 403 */ array(),
        /* 404 */ array(),
        /* 405 */ array(),
        /* 406 */ array(),
        /* 407 */ array(),
        /* 408 */ array(),
        /* 409 */ array(),
        /* 410 */ array(),
        /* 411 */ array(),
        /* 412 */ array(),
        /* 413 */ array(),
        /* 414 */ array(),
        /* 415 */ array(),
        /* 416 */ array(),
        /* 417 */ array(),
        /* 418 */ array(),
        /* 419 */ array(),
        /* 420 */ array(),
        /* 421 */ array(),
        /* 422 */ array(),
        /* 423 */ array(),
        /* 424 */ array(),
        /* 425 */ array(),
        /* 426 */ array(),
        /* 427 */ array(),
        /* 428 */ array(),
        /* 429 */ array(),
        /* 430 */ array(),
        /* 431 */ array(),
        /* 432 */ array(),
        /* 433 */ array(),
        /* 434 */ array(),
        /* 435 */ array(),
        /* 436 */ array(),
        /* 437 */ array(),
        /* 438 */ array(),
        /* 439 */ array(),
        /* 440 */ array(),
        /* 441 */ array(),
        /* 442 */ array(),
        /* 443 */ array(),
        /* 444 */ array(),
        /* 445 */ array(),
        /* 446 */ array(),
        /* 447 */ array(),
        /* 448 */ array(),
        /* 449 */ array(),
        /* 450 */ array(),
        /* 451 */ array(),
        /* 452 */ array(),
        /* 453 */ array(),
        /* 454 */ array(),
        /* 455 */ array(),
        /* 456 */ array(),
        /* 457 */ array(),
        /* 458 */ array(),
        /* 459 */ array(),
        /* 460 */ array(),
        /* 461 */ array(),
        /* 462 */ array(),
        /* 463 */ array(),
        /* 464 */ array(),
        /* 465 */ array(),
        /* 466 */ array(),
        /* 467 */ array(),
        /* 468 */ array(),
        /* 469 */ array(),
        /* 470 */ array(),
        /* 471 */ array(),
        /* 472 */ array(),
        /* 473 */ array(),
        /* 474 */ array(),
        /* 475 */ array(),
);
    static public $yy_default = array(
 /*     0 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*    10 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  588,
 /*    20 */   587,  554,  555,  476,  729,  729,  729,  729,  729,  729,
 /*    30 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*    40 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*    50 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*    60 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*    70 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*    80 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*    90 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*   100 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*   110 */   729,  550,  729,  729,  729,  729,  729,  729,  729,  729,
 /*   120 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
 /*   130 */   729,  729,  729,  729,  729,  729,  729,  572,  729,  627,
 /*   140 */   605,  600,  601,  604,  659,  663,  660,  630,  729,  729,
 /*   150 */   690,  632,  634,  635,  631,  633,  629,  628,  690,  644,
 /*   160 */   602,  646,  723,  689,  645,  643,  729,  729,  729,  636,
 /*   170 */   729,  729,  729,  729,  638,  729,  639,  729,  729,  603,
 /*   180 */   602,  641,  729,  640,  606,  729,  724,  729,  607,  729,
 /*   190 */   729,  729,  729,  637,  729,  729,  729,  642,  729,  725,
 /*   200 */   729,  729,  729,  729,  729,  729,  729,  540,  729,  729,
 /*   210 */   729,  729,  729,  729,  729,  680,  729,  729,  729,  729,
 /*   220 */   729,  729,  729,  729,  729,  729,  729,  729,  722,  729,
 /*   230 */   607,  672,  729,  729,  729,  729,  729,  729,  729,  729,
 /*   240 */   700,  729,  697,  579,  729,  729,  515,  729,  729,  729,
 /*   250 */   729,  516,  729,  729,  729,  729,  729,  729,  729,  726,
 /*   260 */   729,  720,  729,  729,  603,  729,  729,  729,  729,  729,
 /*   270 */   729,  729,  729,  590,  728,  729,  721,  727,  606,  729,
 /*   280 */   480,  574,  496,  561,  582,  581,  493,  487,  494,  584,
 /*   290 */   523,  497,  504,  500,  505,  502,  562,  503,  499,  486,
 /*   300 */   501,  498,  583,  495,  563,  535,  596,  591,  478,  560,
 /*   310 */   585,  567,  575,  568,  592,  571,  570,  594,  595,  569,
 /*   320 */   573,  566,  593,  553,  537,  538,  586,  520,  551,  576,
 /*   330 */   589,  565,  578,  564,  580,  577,  521,  613,  675,  650,
 /*   340 */   674,  691,  692,  694,  693,  673,  671,  598,  648,  658,
 /*   350 */   649,  661,  670,  662,  695,  696,  709,  706,  705,  712,
 /*   360 */   715,  707,  718,  717,  714,  699,  698,  701,  702,  704,
 /*   370 */   703,  657,  656,  519,  492,  491,  489,  506,  509,  507,
 /*   380 */   490,  488,  481,  479,  477,  482,  483,  485,  484,  511,
 /*   390 */   513,  652,  664,  651,  665,  653,  655,  654,  647,  616,
 /*   400 */   679,  685,  680,  681,  597,  682,  710,  713,  544,  546,
 /*   410 */   545,  522,  539,  524,  518,  543,  542,  508,  514,  512,
 /*   420 */   510,  517,  541,  536,  525,  526,  549,  548,  547,  552,
 /*   430 */   556,  558,  557,  534,  528,  529,  527,  530,  531,  533,
 /*   440 */   532,  626,  625,  688,  687,  686,  608,  683,  610,  609,
 /*   450 */   684,  678,  719,  716,  708,  711,  677,  676,  611,  612,
 /*   460 */   620,  619,  618,  621,  622,  624,  623,  617,  667,  615,
 /*   470 */   614,  666,  599,  669,  668,  559,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 189;
    const YYSTACKDEPTH = 100;
    const block_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 476;
    const YYNRULE = 253;
    const YYERRORSYMBOL = 122;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'LOGICALAND',  
  'BINARYAND',     'BINARYOR',      'LOGICALOR',     'AMPERSAND',   
  'BINARYXOR',     'NOTEQUAL',      'EQUAL',         'UINDIRECTION',
  'UADRESS',       'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',       
  'UBRACKET',      'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',
  'IDENTIFIER',    'LEFTFIGUREBRACKET',  'RIGHTFIGUREBRACKET',  'SEMICOLON',   
  'CLASSKWD',      'STRUCTKWD',     'UNIONKWD',      'COLON',       
  'PUBLICKWD',     'PROTECTEDKWD',  'PRIVATEKWD',    'SIGNALSKWD',  
  'SLOTSKWD',      'ENUMKWD',       'COMMA',         'ASSIGN',      
  'LEFTROUNDBRACKET',  'RIGHTROUNDBRACKET',  'BINARYNOT',     'CUSTOMTYPENAME',
  'TEMPLATEKWD',   'LESSER',        'GREATER',       'TYPENAMEKWD', 
  'OPERATOROVERLOADDECLARATION',  'CONSTKWD',      'PREPROCESSOR_ENDIF',  'PREPROCESSOR_ELIF',
  'PREPROCESSOR_ELSE',  'PREPROCESSOR_IFDEF',  'PREPROCESSOR_IF',  'PREPROCESSOR_DEFINE',
  'PREPROCESSOR_INCLUDE',  'WHILEKWD',      'DOKWD',         'FORKWD',      
  'RETURNKWD',     'CONTINUEKWD',   'GOTOKWD',       'TRYKWD',      
  'CATCHKWD',      'ELLIPSIS',      'SWITCHKWD',     'CASEKWD',     
  'DEFAULTKWD',    'IFKWD',         'TYPEDEF',       'BREAKKWD',    
  'NEWKWD',        'DELETE',        'LEFTSQUAREBRACKET',  'RIGHTSQUAREBRACKET',
  'STATICKWD',     'EXTERNKWD',     'REGISTERKWD',   'VOLATILEKWD', 
  'FRIENDKWD',     'BINARYXOR_ASSIGN',  'BINARYOR_ASSIGN',  'BINARYAND_ASSIGN',
  'RIGHTSHIFT_ASSIGN',  'LEFTSHIFT_ASSIGN',  'MODULO_ASSIGN',  'DIVISION_ASSIGN',
  'MULTIPLY_ASSIGN',  'PLUS_ASSIGN',   'MINUS_ASSIGN',  'NOT_EQUAL',   
  'LESSER_OR_EQUAL',  'GREATER_OR_EQUAL',  'LEFTSHIFT',     'RIGHTSHIFT',  
  'MINUS',         'PLUS',          'MODULOSIGN',    'DIVISION',    
  'MULTIPLY',      'LOGICALNOT',    'DECREMENT',     'INCREMENT',   
  'DOT',           'RIGHTARROW',    'CONST_CAST',    'STATIC_CAST', 
  'DYNAMIC_CAST',  'REINTERPRET_CAST',  'NUMERIC',       'CHARACTER',   
  'STRING',        'PREPROCESSOR_STRINGIFY',  'PREPROCESSOR_CONCAT',  'SIZEOF',      
  'TYPENAME',      'VOID',          'FLOAT',         'DOUBLE',      
  'LONG',          'CHAR',          'SIGNED',        'UNSIGNED',    
  'INT',           'SHORT',         'error',         'program',     
  'stmt_list',     'stmt_or_defined_macro',  'stmt',          'namespace_body',
  'class_or_union_or_struct',  'type_meta_specifier_with_template_def',  'structure_body',  'template_def',
  'type_meta_specifier',  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',  'visibility_spec_full',
  'visibility_spec',  'signal_slots',  'enum_body',     'enum_value_list',
  'enum_value',    'expr_atom',     'type',          'possible_function_name',
  'formal_args_list_with_or_without_const',  'function_body',  'type_with_qualifier',  'non_const_type',
  'template_spec_list',  'template_spec',  'template_typename',  'primitive_or_complex_type',
  'formal_args_list',  'arg_list',      'arg',           'preprocessor_cond',
  'preprocessor_else_clauses',  'preprocessor_elif_list',  'preprocessor_else',  'preprocessor_elif',
  'expr_prec_11',  'try_catch',     'try',           'catch_list',  
  'catch',         'expr_prec_11_or_ellipsis',  'switch_stmt',   'switch_case_list',
  'case',          'if_then_else',  'if_then',       'expr_prec_10',
  'expr_prec_9',   'varqualifier',  'expr_prec_8',   'expr_prec_7', 
  'expr_prec_6',   'expr_prec_5',   'expr_prec_4',   'try_value_access',
  'try_pointer_access',  'expr_prec_3',   'typecast',      'expr_prec_2', 
  'cpp_style_cast',  'builtintype',   'user_defined_type',  'namespace_resolve',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "stmt ::= NAMESPACEKWD IDENTIFIER namespace_body",
 /*   4 */ "namespace_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*   5 */ "namespace_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*   6 */ "stmt ::= class_or_union_or_struct",
 /*   7 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body IDENTIFIER SEMICOLON",
 /*   8 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body SEMICOLON",
 /*   9 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER SEMICOLON",
 /*  10 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  11 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  12 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  13 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  14 */ "type_meta_specifier ::= CLASSKWD",
 /*  15 */ "type_meta_specifier ::= STRUCTKWD",
 /*  16 */ "type_meta_specifier ::= UNIONKWD",
 /*  17 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  18 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  19 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  20 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  21 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  22 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  23 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  24 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  25 */ "visibility_spec ::= PUBLICKWD",
 /*  26 */ "visibility_spec ::= PROTECTEDKWD",
 /*  27 */ "visibility_spec ::= PRIVATEKWD",
 /*  28 */ "signal_slots ::= SIGNALSKWD",
 /*  29 */ "signal_slots ::= SLOTSKWD",
 /*  30 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER SEMICOLON",
 /*  31 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body SEMICOLON",
 /*  32 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  33 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body IDENTIFIER SEMICOLON",
 /*  34 */ "stmt_or_defined_macro ::= ENUMKWD enum_body IDENTIFIER SEMICOLON",
 /*  35 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  36 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  37 */ "enum_value_list ::= enum_value_list COMMA enum_value",
 /*  38 */ "enum_value_list ::= enum_value",
 /*  39 */ "enum_value ::= IDENTIFIER",
 /*  40 */ "enum_value ::= IDENTIFIER ASSIGN expr_atom",
 /*  41 */ "stmt_or_defined_macro ::= type possible_function_name formal_args_list_with_or_without_const function_body",
 /*  42 */ "stmt_or_defined_macro ::= type_with_qualifier possible_function_name formal_args_list_with_or_without_const function_body",
 /*  43 */ "stmt_or_defined_macro ::= template_def type_with_qualifier possible_function_name formal_args_list_with_or_without_const function_body",
 /*  44 */ "stmt_or_defined_macro ::= template_def type possible_function_name formal_args_list_with_or_without_const function_body",
 /*  45 */ "stmt_or_defined_macro ::= template_def non_const_type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  46 */ "stmt_or_defined_macro ::= type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  47 */ "stmt_or_defined_macro ::= template_def BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  48 */ "stmt_or_defined_macro ::= BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  49 */ "template_def ::= TEMPLATEKWD LESSER GREATER",
 /*  50 */ "template_def ::= TEMPLATEKWD LESSER template_spec_list GREATER",
 /*  51 */ "template_spec_list ::= template_spec_list COMMA template_spec",
 /*  52 */ "template_spec_list ::= template_spec",
 /*  53 */ "template_spec ::= template_typename IDENTIFIER",
 /*  54 */ "template_typename ::= TYPENAMEKWD",
 /*  55 */ "template_typename ::= CLASSKWD",
 /*  56 */ "template_typename ::= STRUCTKWD",
 /*  57 */ "template_typename ::= ENUMKWD",
 /*  58 */ "function_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  59 */ "function_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  60 */ "function_body ::= SEMICOLON",
 /*  61 */ "possible_function_name ::= primitive_or_complex_type",
 /*  62 */ "possible_function_name ::= IDENTIFIER",
 /*  63 */ "possible_function_name ::= OPERATOROVERLOADDECLARATION",
 /*  64 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  65 */ "formal_args_list_with_or_without_const ::= formal_args_list CONSTKWD",
 /*  66 */ "formal_args_list ::= LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /*  67 */ "formal_args_list ::= LEFTROUNDBRACKET arg_list RIGHTROUNDBRACKET",
 /*  68 */ "arg_list ::= arg",
 /*  69 */ "arg_list ::= arg_list COMMA arg",
 /*  70 */ "arg ::= type IDENTIFIER",
 /*  71 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list PREPROCESSOR_ENDIF",
 /*  72 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses PREPROCESSOR_ENDIF",
 /*  73 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  74 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  75 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  76 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  77 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  78 */ "preprocessor_elif ::= PREPROCESSOR_ELIF stmt_list",
 /*  79 */ "preprocessor_else ::= PREPROCESSOR_ELSE stmt_list",
 /*  80 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF IDENTIFIER",
 /*  81 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF CUSTOMTYPENAME",
 /*  82 */ "preprocessor_cond ::= PREPROCESSOR_IF",
 /*  83 */ "stmt_or_defined_macro ::= PREPROCESSOR_DEFINE",
 /*  84 */ "stmt_or_defined_macro ::= stmt",
 /*  85 */ "stmt ::= PREPROCESSOR_INCLUDE",
 /*  86 */ "stmt ::= WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  87 */ "stmt ::= DOKWD stmt WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET SEMICOLON",
 /*  88 */ "stmt ::= FORKWD LEFTROUNDBRACKET expr_prec_11 SEMICOLON expr_prec_11 SEMICOLON expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  89 */ "stmt ::= RETURNKWD expr_prec_11 SEMICOLON",
 /*  90 */ "stmt ::= RETURNKWD SEMICOLON",
 /*  91 */ "stmt ::= CONTINUEKWD SEMICOLON",
 /*  92 */ "stmt ::= GOTOKWD IDENTIFIER SEMICOLON",
 /*  93 */ "stmt ::= GOTOKWD CUSTOMTYPENAME SEMICOLON",
 /*  94 */ "stmt ::= IDENTIFIER COLON",
 /*  95 */ "stmt ::= try_catch",
 /*  96 */ "try_catch ::= try catch_list",
 /*  97 */ "try ::= TRYKWD LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  98 */ "try ::= TRYKWD LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  99 */ "catch_list ::= catch_list catch",
 /* 100 */ "catch_list ::= catch",
 /* 101 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 102 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 103 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 104 */ "expr_prec_11_or_ellipsis ::= ELLIPSIS",
 /* 105 */ "stmt ::= SEMICOLON",
 /* 106 */ "stmt ::= switch_stmt",
 /* 107 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 108 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET switch_case_list RIGHTFIGUREBRACKET",
 /* 109 */ "switch_case_list ::= case",
 /* 110 */ "switch_case_list ::= switch_case_list case",
 /* 111 */ "case ::= CASEKWD expr_atom COLON stmt_list",
 /* 112 */ "case ::= DEFAULTKWD COLON stmt_list",
 /* 113 */ "stmt ::= if_then_else",
 /* 114 */ "if_then_else ::= if_then",
 /* 115 */ "if_then_else ::= if_then ELSEKWD stmt",
 /* 116 */ "if_then ::= IFKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 117 */ "stmt ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 118 */ "stmt ::= TYPEDEF type IDENTIFIER SEMICOLON",
 /* 119 */ "stmt ::= BREAKKWD SEMICOLON",
 /* 120 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 121 */ "expr_prec_11 ::= NEWKWD expr_prec_10",
 /* 122 */ "expr_prec_11 ::= DELETE LEFTSQUAREBRACKET RIGHTSQUAREBRACKET expr_prec_10",
 /* 123 */ "expr_prec_11 ::= DELETE expr_prec_10",
 /* 124 */ "expr_prec_11 ::= type expr_atom ASSIGN expr_prec_9",
 /* 125 */ "expr_prec_11 ::= type primitive_or_complex_type ASSIGN expr_prec_9",
 /* 126 */ "expr_prec_11 ::= type IDENTIFIER",
 /* 127 */ "expr_prec_11 ::= type primitive_or_complex_type",
 /* 128 */ "expr_prec_11 ::= type_with_qualifier IDENTIFIER ASSIGN expr_prec_9",
 /* 129 */ "expr_prec_11 ::= type_with_qualifier primitive_or_complex_type ASSIGN expr_prec_9",
 /* 130 */ "expr_prec_11 ::= type_with_qualifier IDENTIFIER",
 /* 131 */ "expr_prec_11 ::= type_with_qualifier primitive_or_complex_type",
 /* 132 */ "expr_prec_11 ::= expr_prec_11 COMMA expr_prec_10",
 /* 133 */ "expr_prec_11 ::= expr_prec_10",
 /* 134 */ "type_with_qualifier ::= varqualifier type",
 /* 135 */ "varqualifier ::= STATICKWD",
 /* 136 */ "varqualifier ::= EXTERNKWD",
 /* 137 */ "varqualifier ::= REGISTERKWD",
 /* 138 */ "varqualifier ::= VOLATILEKWD",
 /* 139 */ "varqualifier ::= FRIENDKWD",
 /* 140 */ "expr_prec_10 ::= expr_prec_9 BINARYXOR_ASSIGN expr_prec_10",
 /* 141 */ "expr_prec_10 ::= expr_prec_9 BINARYOR_ASSIGN expr_prec_10",
 /* 142 */ "expr_prec_10 ::= expr_prec_9 BINARYAND_ASSIGN expr_prec_10",
 /* 143 */ "expr_prec_10 ::= expr_prec_9 RIGHTSHIFT_ASSIGN expr_prec_10",
 /* 144 */ "expr_prec_10 ::= expr_prec_9 LEFTSHIFT_ASSIGN expr_prec_10",
 /* 145 */ "expr_prec_10 ::= expr_prec_9 MODULO_ASSIGN expr_prec_10",
 /* 146 */ "expr_prec_10 ::= expr_prec_9 DIVISION_ASSIGN expr_prec_10",
 /* 147 */ "expr_prec_10 ::= expr_prec_9 MULTIPLY_ASSIGN expr_prec_10",
 /* 148 */ "expr_prec_10 ::= expr_prec_9 PLUS_ASSIGN expr_prec_10",
 /* 149 */ "expr_prec_10 ::= expr_prec_9 MINUS_ASSIGN expr_prec_10",
 /* 150 */ "expr_prec_10 ::= expr_prec_9 ASSIGN expr_prec_10",
 /* 151 */ "expr_prec_10 ::= expr_prec_9",
 /* 152 */ "expr_prec_9 ::= expr_prec_9 BINARYOR expr_prec_8",
 /* 153 */ "expr_prec_9 ::= expr_prec_9 LOGICALAND expr_prec_8",
 /* 154 */ "expr_prec_9 ::= expr_prec_9 LOGICALOR expr_prec_8",
 /* 155 */ "expr_prec_9 ::= expr_prec_9 BINARYXOR expr_prec_8",
 /* 156 */ "expr_prec_9 ::= expr_prec_9 AMPERSAND expr_prec_8",
 /* 157 */ "expr_prec_9 ::= expr_prec_9 NOT_EQUAL expr_prec_8",
 /* 158 */ "expr_prec_9 ::= expr_prec_9 EQUAL expr_prec_8",
 /* 159 */ "expr_prec_9 ::= expr_prec_8",
 /* 160 */ "expr_prec_8 ::= expr_prec_8 LESSER_OR_EQUAL expr_prec_7",
 /* 161 */ "expr_prec_8 ::= expr_prec_8 GREATER_OR_EQUAL expr_prec_7",
 /* 162 */ "expr_prec_8 ::= expr_prec_8 GREATER expr_prec_7",
 /* 163 */ "expr_prec_8 ::= expr_prec_8 LESSER expr_prec_7",
 /* 164 */ "expr_prec_8 ::= expr_prec_7",
 /* 165 */ "expr_prec_7 ::= expr_prec_7 LEFTSHIFT expr_prec_6",
 /* 166 */ "expr_prec_7 ::= expr_prec_7 RIGHTSHIFT expr_prec_6",
 /* 167 */ "expr_prec_7 ::= expr_prec_6",
 /* 168 */ "expr_prec_6 ::= expr_prec_6 MINUS expr_prec_5",
 /* 169 */ "expr_prec_6 ::= expr_prec_6 PLUS expr_prec_5",
 /* 170 */ "expr_prec_6 ::= expr_prec_5",
 /* 171 */ "expr_prec_5 ::= expr_prec_5 MODULOSIGN expr_prec_4",
 /* 172 */ "expr_prec_5 ::= expr_prec_5 DIVISION expr_prec_4",
 /* 173 */ "expr_prec_5 ::= expr_prec_5 MULTIPLY expr_prec_4",
 /* 174 */ "expr_prec_5 ::= expr_prec_4",
 /* 175 */ "expr_prec_4 ::= try_value_access MULTIPLY IDENTIFIER",
 /* 176 */ "expr_prec_4 ::= try_pointer_access MULTIPLY IDENTIFIER",
 /* 177 */ "expr_prec_4 ::= expr_prec_3",
 /* 178 */ "expr_prec_3 ::= AMPERSAND expr_prec_3",
 /* 179 */ "expr_prec_3 ::= MULTIPLY expr_prec_3",
 /* 180 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 181 */ "expr_prec_3 ::= LOGICALNOT expr_prec_3",
 /* 182 */ "expr_prec_3 ::= BINARYNOT expr_prec_3",
 /* 183 */ "expr_prec_3 ::= MINUS expr_prec_2",
 /* 184 */ "expr_prec_3 ::= PLUS expr_prec_2",
 /* 185 */ "expr_prec_3 ::= DECREMENT expr_prec_3",
 /* 186 */ "expr_prec_3 ::= INCREMENT expr_prec_3",
 /* 187 */ "expr_prec_3 ::= expr_prec_2",
 /* 188 */ "expr_prec_2 ::= try_value_access IDENTIFIER",
 /* 189 */ "expr_prec_2 ::= try_pointer_access IDENTIFIER",
 /* 190 */ "expr_prec_2 ::= cpp_style_cast LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 191 */ "expr_prec_2 ::= expr_prec_2 LEFTSQUAREBRACKET expr_prec_10 RIGHTSQUAREBRACKET",
 /* 192 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 193 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /* 194 */ "expr_prec_2 ::= expr_prec_2 INCREMENT",
 /* 195 */ "expr_prec_2 ::= expr_prec_2 DECREMENT",
 /* 196 */ "expr_prec_2 ::= expr_atom",
 /* 197 */ "try_value_access ::= expr_prec_2 DOT",
 /* 198 */ "try_pointer_access ::= expr_prec_2 RIGHTARROW",
 /* 199 */ "cpp_style_cast ::= CONST_CAST LESSER type GREATER",
 /* 200 */ "cpp_style_cast ::= STATIC_CAST LESSER type GREATER",
 /* 201 */ "cpp_style_cast ::= DYNAMIC_CAST LESSER type GREATER",
 /* 202 */ "cpp_style_cast ::= REINTERPRET_CAST LESSER type GREATER",
 /* 203 */ "expr_atom ::= NUMERIC",
 /* 204 */ "expr_atom ::= IDENTIFIER",
 /* 205 */ "expr_atom ::= CHARACTER",
 /* 206 */ "expr_atom ::= STRING",
 /* 207 */ "expr_atom ::= LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 208 */ "expr_atom ::= PREPROCESSOR_STRINGIFY IDENTIFIER",
 /* 209 */ "expr_atom ::= expr_atom PREPROCESSOR_CONCAT IDENTIFIER",
 /* 210 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET type RIGHTROUNDBRACKET",
 /* 211 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET IDENTIFIER RIGHTROUNDBRACKET",
 /* 212 */ "typecast ::= LEFTROUNDBRACKET type RIGHTROUNDBRACKET",
 /* 213 */ "type ::= CONSTKWD non_const_type",
 /* 214 */ "type ::= non_const_type",
 /* 215 */ "non_const_type ::= non_const_type MULTIPLY",
 /* 216 */ "non_const_type ::= non_const_type CONSTKWD MULTIPLY",
 /* 217 */ "non_const_type ::= non_const_type AMPERSAND",
 /* 218 */ "non_const_type ::= builtintype",
 /* 219 */ "non_const_type ::= primitive_or_complex_type",
 /* 220 */ "non_const_type ::= user_defined_type",
 /* 221 */ "primitive_or_complex_type ::= namespace_resolve TYPENAME",
 /* 222 */ "namespace_resolve ::= namespace_resolve TYPENAME NAMESPACE_RESOLVE",
 /* 223 */ "namespace_resolve ::= TYPENAME NAMESPACE_RESOLVE",
 /* 224 */ "user_defined_type ::= TYPENAME",
 /* 225 */ "builtintype ::= VOID",
 /* 226 */ "builtintype ::= FLOAT",
 /* 227 */ "builtintype ::= DOUBLE",
 /* 228 */ "builtintype ::= LONG DOUBLE",
 /* 229 */ "builtintype ::= CHAR",
 /* 230 */ "builtintype ::= SIGNED CHAR",
 /* 231 */ "builtintype ::= UNSIGNED CHAR",
 /* 232 */ "builtintype ::= INT",
 /* 233 */ "builtintype ::= SIGNED INT",
 /* 234 */ "builtintype ::= UNSIGNED INT",
 /* 235 */ "builtintype ::= SHORT INT",
 /* 236 */ "builtintype ::= SIGNED SHORT INT",
 /* 237 */ "builtintype ::= UNSIGNED SHORT INT",
 /* 238 */ "builtintype ::= LONG INT",
 /* 239 */ "builtintype ::= SIGNED LONG INT",
 /* 240 */ "builtintype ::= UNSIGNED LONG INT",
 /* 241 */ "builtintype ::= LONG LONG INT",
 /* 242 */ "builtintype ::= SIGNED LONG LONG INT",
 /* 243 */ "builtintype ::= UNSIGNED LONG LONG INT",
 /* 244 */ "builtintype ::= SHORT",
 /* 245 */ "builtintype ::= SIGNED SHORT",
 /* 246 */ "builtintype ::= UNSIGNED SHORT",
 /* 247 */ "builtintype ::= LONG",
 /* 248 */ "builtintype ::= SIGNED LONG",
 /* 249 */ "builtintype ::= UNSIGNED LONG",
 /* 250 */ "builtintype ::= LONG LONG",
 /* 251 */ "builtintype ::= SIGNED LONG LONG",
 /* 252 */ "builtintype ::= UNSIGNED LONG LONG",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param block_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new block_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 123, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 2 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 5 ),
  array( 'lhs' => 128, 'rhs' => 4 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 4 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 5 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 125, 'rhs' => 5 ),
  array( 'lhs' => 125, 'rhs' => 5 ),
  array( 'lhs' => 125, 'rhs' => 5 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 125, 'rhs' => 6 ),
  array( 'lhs' => 125, 'rhs' => 5 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 148, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 156, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 5 ),
  array( 'lhs' => 126, 'rhs' => 7 ),
  array( 'lhs' => 126, 'rhs' => 9 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 2 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 4 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 6 ),
  array( 'lhs' => 164, 'rhs' => 7 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 6 ),
  array( 'lhs' => 166, 'rhs' => 7 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 4 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 5 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 4 ),
  array( 'lhs' => 183, 'rhs' => 4 ),
  array( 'lhs' => 183, 'rhs' => 4 ),
  array( 'lhs' => 183, 'rhs' => 3 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 179, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 4 ),
  array( 'lhs' => 184, 'rhs' => 4 ),
  array( 'lhs' => 184, 'rhs' => 4 ),
  array( 'lhs' => 184, 'rhs' => 4 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 2 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 4 ),
  array( 'lhs' => 141, 'rhs' => 4 ),
  array( 'lhs' => 182, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 3 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 4 ),
  array( 'lhs' => 185, 'rhs' => 4 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 41,
        43 => 43,
        44 => 43,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        58 => 58,
        59 => 59,
        60 => 60,
        61 => 61,
        62 => 62,
        63 => 62,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 80,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 92,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        113 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 124,
        129 => 124,
        126 => 126,
        130 => 126,
        131 => 126,
        127 => 127,
        128 => 128,
        132 => 132,
        133 => 133,
        151 => 133,
        159 => 133,
        164 => 133,
        167 => 133,
        170 => 133,
        174 => 133,
        177 => 133,
        187 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        165 => 165,
        166 => 166,
        168 => 168,
        169 => 169,
        171 => 171,
        172 => 172,
        173 => 173,
        175 => 175,
        176 => 175,
        178 => 178,
        179 => 179,
        180 => 180,
        181 => 181,
        182 => 182,
        183 => 183,
        184 => 184,
        185 => 185,
        186 => 186,
        188 => 188,
        189 => 188,
        190 => 190,
        191 => 191,
        192 => 192,
        193 => 193,
        194 => 194,
        195 => 195,
        196 => 196,
        197 => 197,
        198 => 198,
        199 => 199,
        200 => 200,
        201 => 201,
        202 => 202,
        203 => 203,
        204 => 203,
        205 => 203,
        206 => 203,
        207 => 207,
        208 => 208,
        209 => 209,
        210 => 210,
        211 => 211,
        212 => 212,
        213 => 213,
        214 => 214,
        215 => 215,
        216 => 216,
        217 => 217,
        218 => 218,
        219 => 218,
        220 => 220,
        221 => 221,
        222 => 222,
        223 => 223,
        224 => 224,
        225 => 225,
        226 => 226,
        227 => 227,
        228 => 228,
        229 => 229,
        230 => 230,
        231 => 231,
        232 => 232,
        233 => 233,
        234 => 234,
        235 => 235,
        236 => 236,
        237 => 237,
        238 => 238,
        239 => 239,
        240 => 240,
        241 => 241,
        242 => 242,
        243 => 243,
        244 => 244,
        245 => 245,
        246 => 246,
        247 => 247,
        248 => 248,
        249 => 249,
        250 => 250,
        251 => 251,
        252 => 252,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 88 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 3068 "langs_src/parser_cpp_language.php"
#line 104 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3074 "langs_src/parser_cpp_language.php"
#line 109 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3080 "langs_src/parser_cpp_language.php"
#line 114 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "идентификатор", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3087 "langs_src/parser_cpp_language.php"
#line 120 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3093 "langs_src/parser_cpp_language.php"
#line 125 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3099 "langs_src/parser_cpp_language.php"
#line 132 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3105 "langs_src/parser_cpp_language.php"
#line 137 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3112 "langs_src/parser_cpp_language.php"
#line 143 "langs_src/parser_cpp_language.y"
    function yy_r8(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3119 "langs_src/parser_cpp_language.php"
#line 149 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3126 "langs_src/parser_cpp_language.php"
#line 155 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3132 "langs_src/parser_cpp_language.php"
#line 160 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3138 "langs_src/parser_cpp_language.php"
#line 165 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array(A, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3144 "langs_src/parser_cpp_language.php"
#line 170 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3150 "langs_src/parser_cpp_language.php"
#line 175 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления класса"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3156 "langs_src/parser_cpp_language.php"
#line 180 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления структуры"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3162 "langs_src/parser_cpp_language.php"
#line 185 "langs_src/parser_cpp_language.y"
    function yy_r16(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления объединения"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3168 "langs_src/parser_cpp_language.php"
#line 190 "langs_src/parser_cpp_language.y"
    function yy_r17(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3174 "langs_src/parser_cpp_language.php"
#line 195 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3180 "langs_src/parser_cpp_language.php"
#line 200 "langs_src/parser_cpp_language.y"
    function yy_r19(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3186 "langs_src/parser_cpp_language.php"
#line 205 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3192 "langs_src/parser_cpp_language.php"
#line 212 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3199 "langs_src/parser_cpp_language.php"
#line 218 "langs_src/parser_cpp_language.y"
    function yy_r22(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3205 "langs_src/parser_cpp_language.php"
#line 223 "langs_src/parser_cpp_language.y"
    function yy_r23(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3211 "langs_src/parser_cpp_language.php"
#line 228 "langs_src/parser_cpp_language.y"
    function yy_r24(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3217 "langs_src/parser_cpp_language.php"
#line 233 "langs_src/parser_cpp_language.y"
    function yy_r25(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово открытой видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3223 "langs_src/parser_cpp_language.php"
#line 238 "langs_src/parser_cpp_language.y"
    function yy_r26(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово защищенной видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3229 "langs_src/parser_cpp_language.php"
#line 243 "langs_src/parser_cpp_language.y"
    function yy_r27(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово скрытой видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3235 "langs_src/parser_cpp_language.php"
#line 248 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления сигнала"));
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3241 "langs_src/parser_cpp_language.php"
#line 253 "langs_src/parser_cpp_language.y"
    function yy_r29(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления слота"));
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3247 "langs_src/parser_cpp_language.php"
#line 260 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3254 "langs_src/parser_cpp_language.php"
#line 266 "langs_src/parser_cpp_language.y"
    function yy_r31(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "%ur(именительный)", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3261 "langs_src/parser_cpp_language.php"
#line 272 "langs_src/parser_cpp_language.y"
    function yy_r32(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3267 "langs_src/parser_cpp_language.php"
#line 277 "langs_src/parser_cpp_language.y"
    function yy_r33(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3274 "langs_src/parser_cpp_language.php"
#line 283 "langs_src/parser_cpp_language.y"
    function yy_r34(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3280 "langs_src/parser_cpp_language.php"
#line 288 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3286 "langs_src/parser_cpp_language.php"
#line 293 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3292 "langs_src/parser_cpp_language.php"
#line 298 "langs_src/parser_cpp_language.y"
    function yy_r37(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3298 "langs_src/parser_cpp_language.php"
#line 303 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3304 "langs_src/parser_cpp_language.php"
#line 308 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3310 "langs_src/parser_cpp_language.php"
#line 313 "langs_src/parser_cpp_language.y"
    function yy_r40(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3316 "langs_src/parser_cpp_language.php"
#line 320 "langs_src/parser_cpp_language.y"
    function yy_r41(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3322 "langs_src/parser_cpp_language.php"
#line 330 "langs_src/parser_cpp_language.y"
    function yy_r43(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3328 "langs_src/parser_cpp_language.php"
#line 341 "langs_src/parser_cpp_language.y"
    function yy_r45(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor));
    }
#line 3334 "langs_src/parser_cpp_language.php"
#line 347 "langs_src/parser_cpp_language.y"
    function yy_r46(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("тип", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3340 "langs_src/parser_cpp_language.php"
#line 352 "langs_src/parser_cpp_language.y"
    function yy_r47(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "тильда", "%s", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3346 "langs_src/parser_cpp_language.php"
#line 364 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("тильда", "%s", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3352 "langs_src/parser_cpp_language.php"
#line 382 "langs_src/parser_cpp_language.y"
    function yy_r49(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3358 "langs_src/parser_cpp_language.php"
#line 387 "langs_src/parser_cpp_language.y"
    function yy_r50(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3364 "langs_src/parser_cpp_language.php"
#line 392 "langs_src/parser_cpp_language.y"
    function yy_r51(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3370 "langs_src/parser_cpp_language.php"
#line 397 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3376 "langs_src/parser_cpp_language.php"
#line 402 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3383 "langs_src/parser_cpp_language.php"
#line 409 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово имени типа"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3389 "langs_src/parser_cpp_language.php"
#line 414 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления класса"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3395 "langs_src/parser_cpp_language.php"
#line 419 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления структуры"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3401 "langs_src/parser_cpp_language.php"
#line 424 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово перечисления"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3407 "langs_src/parser_cpp_language.php"
#line 430 "langs_src/parser_cpp_language.y"
    function yy_r58(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3413 "langs_src/parser_cpp_language.php"
#line 435 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3419 "langs_src/parser_cpp_language.php"
#line 440 "langs_src/parser_cpp_language.y"
    function yy_r60(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3425 "langs_src/parser_cpp_language.php"
#line 446 "langs_src/parser_cpp_language.y"
    function yy_r61(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('possible_function_name', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3431 "langs_src/parser_cpp_language.php"
#line 451 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('possible_function_name', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3437 "langs_src/parser_cpp_language.php"
#line 464 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3443 "langs_src/parser_cpp_language.php"
#line 469 "langs_src/parser_cpp_language.y"
    function yy_r65(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3449 "langs_src/parser_cpp_language.php"
#line 474 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3455 "langs_src/parser_cpp_language.php"
#line 479 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3461 "langs_src/parser_cpp_language.php"
#line 484 "langs_src/parser_cpp_language.y"
    function yy_r68(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3467 "langs_src/parser_cpp_language.php"
#line 489 "langs_src/parser_cpp_language.y"
    function yy_r69(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3473 "langs_src/parser_cpp_language.php"
#line 494 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3479 "langs_src/parser_cpp_language.php"
#line 501 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3485 "langs_src/parser_cpp_language.php"
#line 506 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3491 "langs_src/parser_cpp_language.php"
#line 511 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3497 "langs_src/parser_cpp_language.php"
#line 516 "langs_src/parser_cpp_language.y"
    function yy_r74(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3503 "langs_src/parser_cpp_language.php"
#line 521 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3509 "langs_src/parser_cpp_language.php"
#line 526 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3515 "langs_src/parser_cpp_language.php"
#line 531 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3521 "langs_src/parser_cpp_language.php"
#line 536 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3527 "langs_src/parser_cpp_language.php"
#line 541 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3533 "langs_src/parser_cpp_language.php"
#line 546 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 3539 "langs_src/parser_cpp_language.php"
#line 556 "langs_src/parser_cpp_language.y"
    function yy_r82(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 3545 "langs_src/parser_cpp_language.php"
#line 561 "langs_src/parser_cpp_language.y"
    function yy_r83(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 3551 "langs_src/parser_cpp_language.php"
#line 566 "langs_src/parser_cpp_language.y"
    function yy_r84(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3557 "langs_src/parser_cpp_language.php"
#line 571 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3563 "langs_src/parser_cpp_language.php"
#line 583 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3569 "langs_src/parser_cpp_language.php"
#line 595 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3575 "langs_src/parser_cpp_language.php"
#line 608 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3581 "langs_src/parser_cpp_language.php"
#line 616 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3587 "langs_src/parser_cpp_language.php"
#line 621 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3593 "langs_src/parser_cpp_language.php"
#line 629 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3599 "langs_src/parser_cpp_language.php"
#line 636 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3605 "langs_src/parser_cpp_language.php"
#line 646 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3611 "langs_src/parser_cpp_language.php"
#line 653 "langs_src/parser_cpp_language.y"
    function yy_r95(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3617 "langs_src/parser_cpp_language.php"
#line 658 "langs_src/parser_cpp_language.y"
    function yy_r96(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3623 "langs_src/parser_cpp_language.php"
#line 663 "langs_src/parser_cpp_language.y"
    function yy_r97(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3629 "langs_src/parser_cpp_language.php"
#line 668 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3635 "langs_src/parser_cpp_language.php"
#line 673 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3641 "langs_src/parser_cpp_language.php"
#line 678 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3647 "langs_src/parser_cpp_language.php"
#line 683 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3653 "langs_src/parser_cpp_language.php"
#line 688 "langs_src/parser_cpp_language.y"
    function yy_r102(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3659 "langs_src/parser_cpp_language.php"
#line 693 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3665 "langs_src/parser_cpp_language.php"
#line 698 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3671 "langs_src/parser_cpp_language.php"
#line 705 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3677 "langs_src/parser_cpp_language.php"
#line 712 "langs_src/parser_cpp_language.y"
    function yy_r106(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3683 "langs_src/parser_cpp_language.php"
#line 717 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3689 "langs_src/parser_cpp_language.php"
#line 722 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3695 "langs_src/parser_cpp_language.php"
#line 727 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3701 "langs_src/parser_cpp_language.php"
#line 732 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3707 "langs_src/parser_cpp_language.php"
#line 737 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3713 "langs_src/parser_cpp_language.php"
#line 742 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3719 "langs_src/parser_cpp_language.php"
#line 754 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3725 "langs_src/parser_cpp_language.php"
#line 759 "langs_src/parser_cpp_language.y"
    function yy_r115(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3731 "langs_src/parser_cpp_language.php"
#line 764 "langs_src/parser_cpp_language.y"
    function yy_r116(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3737 "langs_src/parser_cpp_language.php"
#line 771 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3743 "langs_src/parser_cpp_language.php"
#line 776 "langs_src/parser_cpp_language.y"
    function yy_r118(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 3750 "langs_src/parser_cpp_language.php"
#line 783 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3756 "langs_src/parser_cpp_language.php"
#line 788 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3762 "langs_src/parser_cpp_language.php"
#line 795 "langs_src/parser_cpp_language.y"
    function yy_r121(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('new_kwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3768 "langs_src/parser_cpp_language.php"
#line 800 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_array', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3774 "langs_src/parser_cpp_language.php"
#line 805 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_pointer', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3780 "langs_src/parser_cpp_language.php"
#line 810 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменной %2(имя переменной)", array("%ur(именительный)", "%s", "оператор присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration_with_assignment', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3786 "langs_src/parser_cpp_language.php"
#line 820 "langs_src/parser_cpp_language.y"
    function yy_r126(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменной %2(имя переменной)", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3792 "langs_src/parser_cpp_language.php"
#line 825 "langs_src/parser_cpp_language.y"
    function yy_r127(){
    $this->currentrule = new block_formal_langs_description_rule("объявление переменной %2(имя переменной)", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3798 "langs_src/parser_cpp_language.php"
#line 830 "langs_src/parser_cpp_language.y"
    function yy_r128(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменной %2(имя переменной)", array("%ur(именительный)", "%s", "оператор присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration_with_assignment', array( $this->yystack[$this->yyidx + -3]->minor,  $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3804 "langs_src/parser_cpp_language.php"
#line 850 "langs_src/parser_cpp_language.y"
    function yy_r132(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_comma', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3810 "langs_src/parser_cpp_language.php"
#line 855 "langs_src/parser_cpp_language.y"
    function yy_r133(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3816 "langs_src/parser_cpp_language.php"
#line 862 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 3823 "langs_src/parser_cpp_language.php"
#line 868 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3829 "langs_src/parser_cpp_language.php"
#line 873 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3835 "langs_src/parser_cpp_language.php"
#line 878 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3841 "langs_src/parser_cpp_language.php"
#line 883 "langs_src/parser_cpp_language.y"
    function yy_r138(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3847 "langs_src/parser_cpp_language.php"
#line 888 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3853 "langs_src/parser_cpp_language.php"
#line 895 "langs_src/parser_cpp_language.y"
    function yy_r140(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryxor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3859 "langs_src/parser_cpp_language.php"
#line 900 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3865 "langs_src/parser_cpp_language.php"
#line 905 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryand_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3871 "langs_src/parser_cpp_language.php"
#line 910 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3877 "langs_src/parser_cpp_language.php"
#line 915 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3883 "langs_src/parser_cpp_language.php"
#line 920 "langs_src/parser_cpp_language.y"
    function yy_r145(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulo_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3889 "langs_src/parser_cpp_language.php"
#line 925 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3895 "langs_src/parser_cpp_language.php"
#line 930 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3901 "langs_src/parser_cpp_language.php"
#line 935 "langs_src/parser_cpp_language.y"
    function yy_r148(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3907 "langs_src/parser_cpp_language.php"
#line 940 "langs_src/parser_cpp_language.y"
    function yy_r149(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3913 "langs_src/parser_cpp_language.php"
#line 945 "langs_src/parser_cpp_language.y"
    function yy_r150(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3919 "langs_src/parser_cpp_language.php"
#line 957 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3925 "langs_src/parser_cpp_language.php"
#line 962 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3931 "langs_src/parser_cpp_language.php"
#line 967 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3937 "langs_src/parser_cpp_language.php"
#line 972 "langs_src/parser_cpp_language.y"
    function yy_r155(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_xor', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3943 "langs_src/parser_cpp_language.php"
#line 977 "langs_src/parser_cpp_language.y"
    function yy_r156(){
	// Well, that's what you get when you mix binary and and adress taking
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3950 "langs_src/parser_cpp_language.php"
#line 983 "langs_src/parser_cpp_language.y"
    function yy_r157(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_notequal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3956 "langs_src/parser_cpp_language.php"
#line 988 "langs_src/parser_cpp_language.y"
    function yy_r158(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3962 "langs_src/parser_cpp_language.php"
#line 1000 "langs_src/parser_cpp_language.y"
    function yy_r160(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3968 "langs_src/parser_cpp_language.php"
#line 1005 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3974 "langs_src/parser_cpp_language.php"
#line 1010 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3980 "langs_src/parser_cpp_language.php"
#line 1015 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3986 "langs_src/parser_cpp_language.php"
#line 1027 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3992 "langs_src/parser_cpp_language.php"
#line 1032 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3998 "langs_src/parser_cpp_language.php"
#line 1044 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4004 "langs_src/parser_cpp_language.php"
#line 1049 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4010 "langs_src/parser_cpp_language.php"
#line 1061 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulosign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4016 "langs_src/parser_cpp_language.php"
#line 1066 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4022 "langs_src/parser_cpp_language.php"
#line 1071 "langs_src/parser_cpp_language.y"
    function yy_r173(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4028 "langs_src/parser_cpp_language.php"
#line 1083 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_get_property', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4034 "langs_src/parser_cpp_language.php"
#line 1100 "langs_src/parser_cpp_language.y"
    function yy_r178(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_take_adress', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4040 "langs_src/parser_cpp_language.php"
#line 1105 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_dereference', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4046 "langs_src/parser_cpp_language.php"
#line 1110 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_typecast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4052 "langs_src/parser_cpp_language.php"
#line 1115 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4058 "langs_src/parser_cpp_language.php"
#line 1120 "langs_src/parser_cpp_language.y"
    function yy_r182(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4064 "langs_src/parser_cpp_language.php"
#line 1125 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4070 "langs_src/parser_cpp_language.php"
#line 1130 "langs_src/parser_cpp_language.y"
    function yy_r184(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4076 "langs_src/parser_cpp_language.php"
#line 1135 "langs_src/parser_cpp_language.y"
    function yy_r185(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4082 "langs_src/parser_cpp_language.php"
#line 1140 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4088 "langs_src/parser_cpp_language.php"
#line 1152 "langs_src/parser_cpp_language.y"
    function yy_r188(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_property_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4094 "langs_src/parser_cpp_language.php"
#line 1162 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4100 "langs_src/parser_cpp_language.php"
#line 1167 "langs_src/parser_cpp_language.y"
    function yy_r191(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4106 "langs_src/parser_cpp_language.php"
#line 1172 "langs_src/parser_cpp_language.y"
    function yy_r192(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4112 "langs_src/parser_cpp_language.php"
#line 1177 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4118 "langs_src/parser_cpp_language.php"
#line 1182 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_postfix_increment', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4124 "langs_src/parser_cpp_language.php"
#line 1187 "langs_src/parser_cpp_language.y"
    function yy_r195(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_postfix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4130 "langs_src/parser_cpp_language.php"
#line 1192 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4136 "langs_src/parser_cpp_language.php"
#line 1199 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4142 "langs_src/parser_cpp_language.php"
#line 1204 "langs_src/parser_cpp_language.y"
    function yy_r198(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4148 "langs_src/parser_cpp_language.php"
#line 1211 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_const_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4154 "langs_src/parser_cpp_language.php"
#line 1216 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_static_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4160 "langs_src/parser_cpp_language.php"
#line 1221 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_dynamic_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4166 "langs_src/parser_cpp_language.php"
#line 1226 "langs_src/parser_cpp_language.y"
    function yy_r202(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_reinterpret_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4172 "langs_src/parser_cpp_language.php"
#line 1233 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4178 "langs_src/parser_cpp_language.php"
#line 1253 "langs_src/parser_cpp_language.y"
    function yy_r207(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_brackets', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4184 "langs_src/parser_cpp_language.php"
#line 1258 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('expr_preprocessor_stringify', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4190 "langs_src/parser_cpp_language.php"
#line 1263 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('expr_preprocessor_concat', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4196 "langs_src/parser_cpp_language.php"
#line 1268 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4202 "langs_src/parser_cpp_language.php"
#line 1273 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4208 "langs_src/parser_cpp_language.php"
#line 1280 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('typecast', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 4215 "langs_src/parser_cpp_language.php"
#line 1301 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4221 "langs_src/parser_cpp_language.php"
#line 1306 "langs_src/parser_cpp_language.y"
    function yy_r214(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4227 "langs_src/parser_cpp_language.php"
#line 1311 "langs_src/parser_cpp_language.y"
    function yy_r215(){
	$this->currentrule = new block_formal_langs_description_rule("указатель на переменную %1(родительный) типа", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4233 "langs_src/parser_cpp_language.php"
#line 1316 "langs_src/parser_cpp_language.y"
    function yy_r216(){
	$this->currentrule = new block_formal_langs_description_rule("указатель на константную переменную %1(родительный) типа", array("%ur(именительный)", "ключевое слово константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4239 "langs_src/parser_cpp_language.php"
#line 1321 "langs_src/parser_cpp_language.y"
    function yy_r217(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на  переменную %1(родительный) типа", array("%ur(именительный)", "амперсанд"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4245 "langs_src/parser_cpp_language.php"
#line 1326 "langs_src/parser_cpp_language.y"
    function yy_r218(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('non_const_type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4251 "langs_src/parser_cpp_language.php"
#line 1372 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4256 "langs_src/parser_cpp_language.php"
#line 1376 "langs_src/parser_cpp_language.y"
    function yy_r221(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -1]->minor,  $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4263 "langs_src/parser_cpp_language.php"
#line 1382 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "операция разрешения видимости"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4270 "langs_src/parser_cpp_language.php"
#line 1388 "langs_src/parser_cpp_language.y"
    function yy_r223(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4277 "langs_src/parser_cpp_language.php"
#line 1396 "langs_src/parser_cpp_language.y"
    function yy_r224(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('user_defined_type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4283 "langs_src/parser_cpp_language.php"
#line 1403 "langs_src/parser_cpp_language.y"
    function yy_r225(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя пустого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4289 "langs_src/parser_cpp_language.php"
#line 1411 "langs_src/parser_cpp_language.y"
    function yy_r226(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой одинарной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4295 "langs_src/parser_cpp_language.php"
#line 1416 "langs_src/parser_cpp_language.y"
    function yy_r227(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4301 "langs_src/parser_cpp_language.php"
#line 1421 "langs_src/parser_cpp_language.y"
    function yy_r228(){
    $this->currentrule = new block_formal_langs_description_rule("имя длинного типа c плавающей запятой двойной точности", array("признак длинного числа", "имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4307 "langs_src/parser_cpp_language.php"
#line 1429 "langs_src/parser_cpp_language.y"
    function yy_r229(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя символьного типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4313 "langs_src/parser_cpp_language.php"
#line 1434 "langs_src/parser_cpp_language.y"
    function yy_r230(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый символьный тип", array("признак знаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4319 "langs_src/parser_cpp_language.php"
#line 1439 "langs_src/parser_cpp_language.y"
    function yy_r231(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый символьный тип", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4325 "langs_src/parser_cpp_language.php"
#line 1447 "langs_src/parser_cpp_language.y"
    function yy_r232(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4331 "langs_src/parser_cpp_language.php"
#line 1452 "langs_src/parser_cpp_language.y"
    function yy_r233(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый целый тип", array("признак знаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4337 "langs_src/parser_cpp_language.php"
#line 1457 "langs_src/parser_cpp_language.y"
    function yy_r234(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый целый тип", array("признак беззнаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4343 "langs_src/parser_cpp_language.php"
#line 1462 "langs_src/parser_cpp_language.y"
    function yy_r235(){
    $this->currentrule = new block_formal_langs_description_rule("короткий целый тип", array("признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4349 "langs_src/parser_cpp_language.php"
#line 1467 "langs_src/parser_cpp_language.y"
    function yy_r236(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4355 "langs_src/parser_cpp_language.php"
#line 1472 "langs_src/parser_cpp_language.y"
    function yy_r237(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4361 "langs_src/parser_cpp_language.php"
#line 1477 "langs_src/parser_cpp_language.y"
    function yy_r238(){
    $this->currentrule = new block_formal_langs_description_rule("длинный целый тип", array("признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4367 "langs_src/parser_cpp_language.php"
#line 1482 "langs_src/parser_cpp_language.y"
    function yy_r239(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целый тип", array("признак знаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4373 "langs_src/parser_cpp_language.php"
#line 1487 "langs_src/parser_cpp_language.y"
    function yy_r240(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целый тип", array("признак беззнаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4379 "langs_src/parser_cpp_language.php"
#line 1492 "langs_src/parser_cpp_language.y"
    function yy_r241(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4385 "langs_src/parser_cpp_language.php"
#line 1498 "langs_src/parser_cpp_language.y"
    function yy_r242(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4391 "langs_src/parser_cpp_language.php"
#line 1503 "langs_src/parser_cpp_language.y"
    function yy_r243(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4397 "langs_src/parser_cpp_language.php"
#line 1511 "langs_src/parser_cpp_language.y"
    function yy_r244(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4403 "langs_src/parser_cpp_language.php"
#line 1516 "langs_src/parser_cpp_language.y"
    function yy_r245(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4409 "langs_src/parser_cpp_language.php"
#line 1521 "langs_src/parser_cpp_language.y"
    function yy_r246(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4415 "langs_src/parser_cpp_language.php"
#line 1528 "langs_src/parser_cpp_language.y"
    function yy_r247(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4421 "langs_src/parser_cpp_language.php"
#line 1533 "langs_src/parser_cpp_language.y"
    function yy_r248(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целвый тип", array("признак знаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4427 "langs_src/parser_cpp_language.php"
#line 1538 "langs_src/parser_cpp_language.y"
    function yy_r249(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целвый тип", array("признак беззнаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4433 "langs_src/parser_cpp_language.php"
#line 1545 "langs_src/parser_cpp_language.y"
    function yy_r250(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4439 "langs_src/parser_cpp_language.php"
#line 1550 "langs_src/parser_cpp_language.y"
    function yy_r251(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4445 "langs_src/parser_cpp_language.php"
#line 1555 "langs_src/parser_cpp_language.y"
    function yy_r252(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4451 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //block_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 40 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 4596 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
