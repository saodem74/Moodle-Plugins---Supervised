<?php
/* Driver template for the PHP_block_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class block_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof block_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof block_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof block_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof block_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class block_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 3 "langs_src/parser_cpp_language.y"

require_once($CFG->dirroot.'/blocks/formal_langs/descriptions/descriptionrule.php');
#line 102 "langs_src/parser_cpp_language.php"

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 107 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 6 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 145 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const NOTEQUAL                       =  3;
    const EQUAL                          =  4;
    const LOGICALAND                     =  5;
    const BINARYAND                      =  6;
    const BINARYOR                       =  7;
    const LOGICALOR                      =  8;
    const AMPERSAND                      =  9;
    const BINARYXOR                      = 10;
    const UINDIRECTION                   = 11;
    const UADRESS                        = 12;
    const NAMESPACE_RESOLVE              = 13;
    const UMINUS                         = 14;
    const UPLUS                          = 15;
    const UBRACKET                       = 16;
    const TYPEUNARY                      = 17;
    const MACROPARAMETERPRIORITY         = 18;
    const SEMICOLON                      = 19;
    const FORKWD                         = 20;
    const UNSIGNED                       = 21;
    const SIGNED                         = 22;
    const LONG                           = 23;
    const SHORT                          = 24;
    const INT                            = 25;
    const CHAR                           = 26;
    const DOUBLE                         = 27;
    const FLOAT                          = 28;
    const VOID                           = 29;
    const GREATER                        = 30;
    const COMMA                          = 31;
    const LESSER                         = 32;
    const MULTIPLY                       = 33;
    const CONSTKWD                       = 34;
    const TYPENAME                       = 35;
    const LEFTROUNDBRACKET               = 36;
    const RIGHTROUNDBRACKET              = 37;
    const SIZEOF                         = 38;
    const IDENTIFIER                     = 39;
    const PREPROCESSOR_CONCAT            = 40;
    const PREPROCESSOR_STRINGIFY         = 41;
    const STRING                         = 42;
    const CHARACTER                      = 43;
    const NUMERIC                        = 44;
    const LEFTSQUAREBRACKET              = 45;
    const RIGHTSQUAREBRACKET             = 46;
    const LEFTFIGUREBRACKET              = 47;
    const RIGHTFIGUREBRACKET             = 48;
    const ASSIGN                         = 49;
    const REINTERPRET_CAST               = 50;
    const DYNAMIC_CAST                   = 51;
    const STATIC_CAST                    = 52;
    const CONST_CAST                     = 53;
    const RIGHTARROW                     = 54;
    const DOT                            = 55;
    const DECREMENT                      = 56;
    const INCREMENT                      = 57;
    const PLUS                           = 58;
    const MINUS                          = 59;
    const BINARYNOT                      = 60;
    const LOGICALNOT                     = 61;
    const DIVISION                       = 62;
    const MODULOSIGN                     = 63;
    const RIGHTSHIFT                     = 64;
    const LEFTSHIFT                      = 65;
    const GREATER_OR_EQUAL               = 66;
    const LESSER_OR_EQUAL                = 67;
    const NOT_EQUAL                      = 68;
    const MINUS_ASSIGN                   = 69;
    const PLUS_ASSIGN                    = 70;
    const MULTIPLY_ASSIGN                = 71;
    const DIVISION_ASSIGN                = 72;
    const MODULO_ASSIGN                  = 73;
    const LEFTSHIFT_ASSIGN               = 74;
    const RIGHTSHIFT_ASSIGN              = 75;
    const BINARYAND_ASSIGN               = 76;
    const BINARYOR_ASSIGN                = 77;
    const BINARYXOR_ASSIGN               = 78;
    const FRIENDKWD                      = 79;
    const VOLATILEKWD                    = 80;
    const REGISTERKWD                    = 81;
    const EXTERNKWD                      = 82;
    const STATICKWD                      = 83;
    const DELETE                         = 84;
    const NEWKWD                         = 85;
    const BREAKKWD                       = 86;
    const TYPEDEF                        = 87;
    const IFKWD                          = 88;
    const DEFAULTKWD                     = 89;
    const CASEKWD                        = 90;
    const COLON                          = 91;
    const SWITCHKWD                      = 92;
    const ELLIPSIS                       = 93;
    const CATCHKWD                       = 94;
    const TRYKWD                         = 95;
    const GOTOKWD                        = 96;
    const CONTINUEKWD                    = 97;
    const RETURNKWD                      = 98;
    const DOKWD                          = 99;
    const WHILEKWD                       = 100;
    const PREPROCESSOR_INCLUDE           = 101;
    const PREPROCESSOR_DEFINE            = 102;
    const PREPROCESSOR_IF                = 103;
    const PREPROCESSOR_IFDEF             = 104;
    const PREPROCESSOR_ELSE              = 105;
    const PREPROCESSOR_ELIF              = 106;
    const PREPROCESSOR_ENDIF             = 107;
    const OUTER_CONSTRUCTOR_NAME         = 108;
    const OPERATOROVERLOADDECLARATION    = 109;
    const ENUMKWD                        = 110;
    const SLOTSKWD                       = 111;
    const SIGNALSKWD                     = 112;
    const PRIVATEKWD                     = 113;
    const PROTECTEDKWD                   = 114;
    const PUBLICKWD                      = 115;
    const UNIONKWD                       = 116;
    const STRUCTKWD                      = 117;
    const CLASSKWD                       = 118;
    const TEMPLATEKWD                    = 119;
    const TYPENAMEKWD                    = 120;
    const NAMESPACEKWD                   = 121;
    const COMMENT                        = 122;
    const YY_NO_ACTION = 1382;
    const YY_ACCEPT_ACTION = 1381;
    const YY_ERROR_ACTION = 1380;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 15709;
static public $yy_action = array(
 /*     0 */   605,  170,  390,  185,  749,  362,  238,   18,  616,  345,
 /*    10 */   687,  198,  380,  694,  226,  766,  334,  354,  340,  391,
 /*    20 */   237,  199,   97,  234,  730,  734,  167,  697,  426,  310,
 /*    30 */   428,  737,  735,    2,  578,  611,  137,  730,  734,  610,
 /*    40 */   609,  608,  398,  389,  731,  735,  366,  712,  176,  113,
 /*    50 */   598,  772,  743,  742,   14,   15,   92,  349,  109,   93,
 /*    60 */   766,  243,  124,  362,   95,  221,  125,  345,  225,   40,
 /*    70 */   326,  138,  363,   16,  376,  177,  628,  634,  233,  644,
 /*    80 */   332,  174,  751,  750,  748,  240,  635,   27,  526,   69,
 /*    90 */    32,  475,  195,  617,  169,   80,  286,   81,  398,  389,
 /*   100 */   349,  582,  278,  398,  345,  409,  689,  596,  300,  345,
 /*   110 */   306,  106,  529,   58,   47,  326,  138,  148,  307,  773,
 /*   120 */   105,  621,  789,  805,  804,  803,  114,   75,   76,  348,
 /*   130 */   424,  334,  354,  340,  391,  329,  427,  422,  150,  350,
 /*   140 */   181,  186,  766,  663,  133,  140,  592,  111,  330,  196,
 /*   150 */   315,  102,  159,  103,  227,  713,   87,  207,  205,  670,
 /*   160 */    94,   91,  122,   88,   89,  358,  530,  192,  377,  361,
 /*   170 */   419,  432,  654,   68,  308,   70,   84,  698,  699,  703,
 /*   180 */   454,  700,  193,   73,  392,  638,  696,  695,  770,  739,
 /*   190 */   224,  146,  365,  375,  740,  118,  758,  324,  119,  755,
 /*   200 */   168,  623,  622,  626,  162,  629,  135,  132,  666,  347,
 /*   210 */   685,  170,  390,  185,  749,  403,  401,   18,  296,  682,
 /*   220 */   687,  198,  380,  694,  226,  291,  290,  284,  285,  599,
 /*   230 */     6,  199,   97,  767,  730,  734,  167,  697,  426,  769,
 /*   240 */   266,  737,  735,  383,   74,   77,  398,  389,  348,  424,
 /*   250 */   334,  354,  340,  391,  329,  427,  422,  712,  176,  113,
 /*   260 */    66,  772,   67,  430,  429,  294,   92,  688,  109,   93,
 /*   270 */   721,   85,  124,   86,   95,  221,  125,  613,  225,   40,
 /*   280 */   398,  338,  337,   16,  745,  255,  144,  589,  588,   14,
 /*   290 */    15,  174,  751,  750,  748,  240,  635,   27,  526,   57,
 /*   300 */    32,  475,  195,  617,  169,   44,  286,  201,  720,  322,
 /*   310 */   321,  582,  278,  490,  768,  775,  515,  596,  300, 1108,
 /*   320 */   306,  106,  529,   58,   47,  600,  111,  330,  307,  773,
 /*   330 */   105,  621,  789,  805,  804,  803,  114,  296,  388,  217,
 /*   340 */   294, 1108,  344,   39,  291,  290,  360,  285,  150,  315,
 /*   350 */   694,  186,  766,  636,  133,   87,  398,  409,  689,  196,
 /*   360 */   388,  102,  159,  103,  344,  713,  344,  207,  205,  670,
 /*   370 */    94,   91,  122,   88,   89,  358,  705,  192,  377,  361,
 /*   380 */   419,  432,  544,  729,  766,  322,  321,  698,  699,  703,
 /*   390 */   454,  700,  193,   73,  392,  638,  696,  695,  398,  389,
 /*   400 */   224,   65,  365,  375,  409,  689,  741,  324,  119,  755,
 /*   410 */   168,  623,  622,  626,  162,  629,  135,  132,  666,  347,
 /*   420 */   605,  170,  390,  185,  749,  719,  360,   18,  618,  148,
 /*   430 */   687,  198,  380,  179,  226,  673,   78,  141,   79,  326,
 /*   440 */   138,  199,   97,    1,  730,  734,  167,  697,  426,  228,
 /*   450 */   376,  737,  735,   45,  612,  611,  137,  627,  341,  610,
 /*   460 */   609,  608,  631,  671,  669,  669,  229,  712,  176,  113,
 /*   470 */   220,  772,  587,  288,  398,  389,   92,  283,  109,   93,
 /*   480 */   345,  383,  124,  388,   95,  221,  125,  398,  225,   40,
 /*   490 */   166,  417,  232,   16,  235,  762,  376,  236,  245,   52,
 /*   500 */   528,  174,  751,  750,  748,  240,  635,   27,  526,  656,
 /*   510 */    32,  475,  195,  617,  169,  469,  286,  252,  247,  399,
 /*   520 */    73,  582,  278,  166,  166,  767,  232,  596,  300,  762,
 /*   530 */   306,  106,  529,   58,   47,  686,  339,    7,  307,  773,
 /*   540 */   105,  621,  789,  805,  804,  803,  114,  710,  706,    6,
 /*   550 */   711,  715,  694,  774,  409,  689,  768,  775,  150,   63,
 /*   560 */   467,  186,  604,  404,  133,  657,  655,  606,  607,  196,
 /*   570 */   367,  102,  159,  103,  466,  713,  366,  207,  205,  670,
 /*   580 */    94,   91,  122,   88,   89,  358,  175,  495,  377,  361,
 /*   590 */   419,  432,   87,  409,  689,   83,  763,  698,  699,  703,
 /*   600 */   454,  700,  193,  694,  392,  638,  696,  695,  736,  716,
 /*   610 */   224,  694,  365,  375,  398,  389,  223,  369,  283,  373,
 /*   620 */   345,  623,  622,  626,  162,  629,  135,  132,  666,  347,
 /*   630 */  1381,   21,    9,  597,  170,  390,  185,  749,  405,  407,
 /*   640 */    18,  601,  288,  687,  198,  380,  217,  226,  725,  166,
 /*   650 */   369,  369,  373,  373,  199,   97,  315,  730,  734,  167,
 /*   660 */   697,  426,   87,   41,  737,  735,  471,   53,   55,   49,
 /*   670 */    59,   54,   62,   60,   64,   61,   50,   66,  258,   67,
 /*   680 */   712,  176,  113,  334,  772,  340,  334,  329,  340,   92,
 /*   690 */   308,  109,   93,  409,  689,  124,  367,   95,  221,  125,
 /*   700 */   345,  225,   40,  409,  689,  650,   16,  283,   65,   44,
 /*   710 */   318,  544, 1108,  266,  174,  751,  750,  748,  240,  635,
 /*   720 */    27,  526,   73,   32,  475,  195,  617,  169,  702,  286,
 /*   730 */   345,  388,  216,  659,  582,  278,  658,  356,  370,  360,
 /*   740 */   596,  300,  259,  306,  106,  529,   58,   47,  250,  291,
 /*   750 */   290,  307,  773,  105,  621,  789,  805,  804,  803,  114,
 /*   760 */   362,  344,  442,  396,  345,  518,  412,  410,  406,  408,
 /*   770 */   544,  150,  486,   73,  186,  766,  369,  133,  373,  717,
 /*   780 */   664,   73,  196,  208,  102,  159,  103,  701,  713,   87,
 /*   790 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  669,
 /*   800 */   178,  377,  361,  419,  432,   65,   87,  766,  409,  689,
 /*   810 */   698,  699,  703,  454,  700,  193,  210,  392,  638,  696,
 /*   820 */   695,  190,   87,  224,  353,  365,  375,   87,  661,  757,
 /*   830 */   324,  119,  755,  168,  623,  622,  626,  162,  629,  135,
 /*   840 */   132,  666,  347,   10,  641,  597,  170,  390,  185,  749,
 /*   850 */   355,  603,   18,  602,  238,  687,  198,  380,  171,  226,
 /*   860 */   370,  756,  324,  119,  755,  168,  199,   97,  534,  730,
 /*   870 */   734,  167,  697,  426,  398,  389,  737,  735,    1,  383,
 /*   880 */   345,  388,  362,  344,  230,  396,  345,    6,  412,  410,
 /*   890 */   406,  408,  712,  176,  113,    6,  772,  327,  397,  416,
 /*   900 */   400,   92,  371,  109,   93,  282,  439,  124,  344,   95,
 /*   910 */   221,  125,  533,  225,   40,  252,  247,  355,   16,  362,
 /*   920 */   381,  238,  345,  766,  508,  345,  174,  751,  750,  748,
 /*   930 */   240,  635,   27,  526,  759,   32,  475,  195,  617,  169,
 /*   940 */   345,  286,  738,    6,  428,  297,  582,  278,  771,  372,
 /*   950 */   368,  619,  596,  300,    6,  306,  106,  529,   58,   47,
 /*   960 */   746,  523,  766,  307,  773,  105,  621,  789,  805,  804,
 /*   970 */   803,  114,  179,  349,    6,  384,  141,  468,  326,  138,
 /*   980 */   770,  383,  367,  150,  672,  369,  186,  373,  459,  133,
 /*   990 */   614,  388,  233,    6,  196,  344,  102,  159,  103,  360,
 /*  1000 */   713,  754,  207,  205,  670,   94,   91,  122,   88,   89,
 /*  1010 */   358,  344,  104,  377,  361,  419,  432,  326,  138,  747,
 /*  1020 */   355,  615,  698,  699,  703,  454,  700,  193,  649,  392,
 /*  1030 */   638,  696,  695,  345,  647,  224,  345,  365,  375,   72,
 /*  1040 */   760,   71,  266, 1102,  349,   57,  623,  622,  626,  162,
 /*  1050 */   629,  135,  132,  666,  347,   12, 1108,  597,  170,  390,
 /*  1060 */   185,  749,  388,  108,   18,  584,  388,  687,  198,  380,
 /*  1070 */     6,  226,  786,  387,  360,  388,  683,  764,  199,   97,
 /*  1080 */    46,  730,  734,  167,  697,  426,  506,  648,  737,  735,
 /*  1090 */    98,  344,  778,  646,  388,  768,  775,  213,   96,  806,
 /*  1100 */   355,  101,  532,  521,  712,  176,  113,  451,  772,  343,
 /*  1110 */   342,  331,  328,   92,  449,  109,   93,  753,  511,  124,
 /*  1120 */   411,   95,  221,  125,  643,  225,   40,  493,  559,  680,
 /*  1130 */    16,  370,  555,  637,  100,  771,  546,  691,  174,  751,
 /*  1140 */   750,  748,  240,  635,   27,  526,  376,   32,  475,  195,
 /*  1150 */   617,  169,  727,  286,  694,  633,  639,  552,  582,  278,
 /*  1160 */   213,  553,  549,  452,  596,  300,  437,  306,  106,  529,
 /*  1170 */    58,   47,  551,  481,  668,  307,  773,  105,  621,  789,
 /*  1180 */   805,  804,  803,  114,  498,  366,  505,   82,  214,  516,
 /*  1190 */   651,  445,  513,  497,   87,  150,  642,  447,  186,  684,
 /*  1200 */   444,  133,  640,  538,  434,  543,  196,  477,  102,  159,
 /*  1210 */   103,  265,  713,  263,  207,  205,  670,   94,   91,  122,
 /*  1220 */    88,   89,  358,  360, 1107,  377,  361,  419,  432,  385,
 /*  1230 */  1103,  379,  316,  319,  698,  699,  703,  454,  700,  193,
 /*  1240 */   314,  392,  638,  696,  695,  311,  239,  224,  325,  365,
 /*  1250 */   375,  280,  478,  540,  565,  262,  539,   36,  623,  622,
 /*  1260 */   626,  162,  629,  135,  132,  666,  347,   25,  795,  597,
 /*  1270 */   170,  390,  185,  749,  243,  556,   18,  548,  359,  687,
 /*  1280 */   198,  380,  547,  226,  512,   38,  494,  499,  443,  500,
 /*  1290 */   199,   97,  527,  730,  734,  167,  697,  426,  531,  557,
 /*  1300 */   737,  735,  537,  349,    5,    4,  448,   31,  192,   42,
 /*  1310 */   458,  435,  287,  544,  440,   33,  712,  176,  113,  489,
 /*  1320 */   772,  541,  545,  484,   73,   92,  474,  109,   93,  542,
 /*  1330 */   461,  124,   34,   95,  221,  125,   29,  225,   40,  761,
 /*  1340 */   362,  436,   16,  233,  501,  509,  510,  374,  492,  491,
 /*  1350 */   174,  751,  750,  748,  240,  635,   27,  526,  414,   32,
 /*  1360 */   475,  195,  617,  169,  433,  286,  694,  482,  450,  463,
 /*  1370 */   582,  278,  496,  571,  566,  520,  596,  300,  554,  306,
 /*  1380 */   106,  529,   58,   47,  264,  519,  256,  307,  773,  105,
 /*  1390 */   621,  789,  805,  804,  803,  114,  479,  580,  524,  514,
 /*  1400 */   203,  522,   51,  517,   28,  117,   87,  150,   56,  367,
 /*  1410 */   186,  340,  562,  133,  485,  645,  570,  744,  196,   13,
 /*  1420 */   102,  159,  103,  574,  713,  572,  207,  205,  670,   94,
 /*  1430 */    91,  122,   88,   89,  358,  254,  266,  377,  361,  419,
 /*  1440 */   432,  581,  577,  673,  671,  525,  698,  699,  703,  454,
 /*  1450 */   700,  193,  465,  392,  638,  696,  695,  355,  457,  224,
 /*  1460 */   464,  365,  375,  129,  576,  483,   65,  139,  120,  575,
 /*  1470 */   623,  622,  626,  162,  629,  135,  132,  666,  347,   11,
 /*  1480 */    99,  597,  170,  390,  185,  749,   17,  573,   18,  591,
 /*  1490 */   456,  687,  198,  380,  536,  226,  568,  504,  441,  662,
 /*  1500 */   446,  579,  199,   97,  660,  730,  734,  167,  697,  426,
 /*  1510 */   503,   37,  737,  735,  630,  470,  535,  462,  472,  502,
 /*  1520 */   192,  473,  507,  480,  667,  654,  665,  455,  712,  176,
 /*  1530 */   113,  560,  772,  561,  564,  488,   73,   92,   35,  109,
 /*  1540 */    93,   30,  453,  124,  567,   95,  221,  125,  550,  225,
 /*  1550 */    40,  558,  112,   57,   16,  460,  292,  333,  389,   26,
 /*  1560 */   802,  722,  174,  751,  750,  748,  240,  635,   27,  526,
 /*  1570 */   317,   32,  475,  195,  617,  169,  487,  286,  476,  563,
 /*  1580 */   569,  907,  582,  278,  907,  907,  907,  907,  596,  300,
 /*  1590 */   907,  306,  106,  529,   58,   47,  907,  907,  907,  307,
 /*  1600 */   773,  105,  621,  789,  805,  804,  803,  114,  907,  907,
 /*  1610 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  150,
 /*  1620 */   907,  907,  186,  907,  907,  133,  907,  907,  907,  907,
 /*  1630 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /*  1640 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /*  1650 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /*  1660 */   703,  454,  700,  193,  907,  392,  638,  696,  695,  907,
 /*  1670 */   907,  224,  907,  365,  375,  907,  907,  907,  907,  907,
 /*  1680 */   907,  907,  623,  622,  626,  162,  629,  135,  132,  666,
 /*  1690 */   347,   24,  907,  597,  170,  390,  185,  749,  907,  907,
 /*  1700 */    18,  907,  907,  687,  198,  380,  907,  226,  907,  907,
 /*  1710 */   907,  907,  907,  907,  199,   97,  907,  730,  734,  167,
 /*  1720 */   697,  426,  907,  907,  737,  735,  907,  907,  907,  907,
 /*  1730 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  1740 */   712,  176,  113,  907,  772,  907,  907,  907,  907,   92,
 /*  1750 */   907,  109,   93,  907,  907,  124,  907,   95,  221,  125,
 /*  1760 */   907,  225,   40,  907,  907,  907,   16,  907,  907,  907,
 /*  1770 */   907,  907,  907,  907,  174,  751,  750,  748,  240,  635,
 /*  1780 */    27,  526,  907,   32,  475,  195,  617,  169,  907,  286,
 /*  1790 */   907,  907,  907,  907,  582,  278,  907,  907,  907,  907,
 /*  1800 */   596,  300,  907,  306,  106,  529,   58,   47,  907,  907,
 /*  1810 */   907,  307,  773,  105,  621,  789,  805,  804,  803,  114,
 /*  1820 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  1830 */   907,  150,  907,  907,  186,  907,  907,  133,  907,  907,
 /*  1840 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /*  1850 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /*  1860 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /*  1870 */   698,  699,  703,  454,  700,  193,  907,  392,  638,  696,
 /*  1880 */   695,  907,  907,  224,  907,  365,  375,  907,  907,  907,
 /*  1890 */   907,  907,  907,  907,  623,  622,  626,  162,  629,  135,
 /*  1900 */   132,  666,  347,  685,  170,  390,  185,  749,  907,  907,
 /*  1910 */    18,  585,  907,  687,  198,  380,  907,  226,  907,  907,
 /*  1920 */   907,  907,  907,  907,  199,   97,  907,  730,  734,  167,
 /*  1930 */   697,  426,  907,  907,  737,  735,  907,  907,  907,  907,
 /*  1940 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  1950 */   712,  176,  113,  907,  772,  907,  907,  907,  907,   92,
 /*  1960 */   907,  109,   93,  907,  907,  124,  907,   95,  221,  125,
 /*  1970 */   907,  225,   40,  907,  907,  907,   16,  907,  907,  907,
 /*  1980 */   907,  907,  907,  907,  174,  751,  750,  748,  240,  635,
 /*  1990 */    27,  526,  907,   32,  475,  195,  617,  169,  907,  286,
 /*  2000 */   907,  907,  907,  907,  582,  278,  907,  907,  907,  907,
 /*  2010 */   596,  300,  907,  306,  106,  529,   58,   47,  907,  907,
 /*  2020 */   907,  307,  773,  105,  621,  789,  805,  804,  803,  114,
 /*  2030 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  2040 */   907,  150,  907,  907,  186,  907,  907,  133,  907,  907,
 /*  2050 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /*  2060 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /*  2070 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /*  2080 */   698,  699,  703,  454,  700,  193,  907,  392,  638,  696,
 /*  2090 */   695,  907,  907,  224,  907,  365,  375,  907,  907,  907,
 /*  2100 */   907,  907,  907,  907,  623,  622,  626,  162,  629,  135,
 /*  2110 */   132,  666,  347,  685,  170,  390,  185,  749,  907,  907,
 /*  2120 */    18,  590,  907,  687,  198,  380,  907,  226,  907,  907,
 /*  2130 */   907,  907,  907,  907,  199,   97,  907,  730,  734,  167,
 /*  2140 */   697,  426,  907,  907,  737,  735,  907,  907,  907,  907,
 /*  2150 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  2160 */   712,  176,  113,  907,  772,  907,  907,  907,  907,   92,
 /*  2170 */   907,  109,   93,  907,  907,  124,  907,   95,  221,  125,
 /*  2180 */   907,  225,   40,  907,  907,  907,   16,  907,  907,  907,
 /*  2190 */   907,  907,  907,  907,  174,  751,  750,  748,  240,  635,
 /*  2200 */    27,  526,  907,   32,  475,  195,  617,  169,  907,  286,
 /*  2210 */   907,  907,  907,  907,  582,  278,  907,  907,  907,  907,
 /*  2220 */   596,  300,  907,  306,  106,  529,   58,   47,  907,  907,
 /*  2230 */   907,  307,  773,  105,  621,  789,  805,  804,  803,  114,
 /*  2240 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  2250 */   907,  150,  907,  907,  186,  907,  907,  133,  907,  907,
 /*  2260 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /*  2270 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /*  2280 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /*  2290 */   698,  699,  703,  454,  700,  193,  907,  392,  638,  696,
 /*  2300 */   695,  907,  907,  224,  907,  365,  375,  907,  907,  907,
 /*  2310 */   907,  907,  907,  907,  623,  622,  626,  162,  629,  135,
 /*  2320 */   132,  666,  347,   20,  907,  597,  170,  390,  185,  749,
 /*  2330 */   907,  907,   18,  907,  907,  687,  198,  380,  907,  226,
 /*  2340 */   907,  907,  907,  907,  907,  907,  199,   97,  907,  730,
 /*  2350 */   734,  167,  697,  426,  907,  907,  737,  735,  907,  907,
 /*  2360 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  2370 */   907,  907,  712,  176,  113,  907,  772,  907,  907,  907,
 /*  2380 */   907,   92,  907,  109,   93,  907,  907,  124,  907,   95,
 /*  2390 */   221,  125,  907,  225,   40,  907,  907,  907,   16,  907,
 /*  2400 */   907,  907,  907,  907,  907,  907,  174,  751,  750,  748,
 /*  2410 */   240,  635,   27,  526,  907,   32,  475,  195,  617,  169,
 /*  2420 */   907,  286,  907,  907,  907,  907,  582,  278,  907,  907,
 /*  2430 */   907,  907,  596,  300,  907,  306,  106,  529,   58,   47,
 /*  2440 */   907,  907,  907,  307,  773,  105,  621,  789,  805,  804,
 /*  2450 */   803,  114,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  2460 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /*  2470 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /*  2480 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /*  2490 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /*  2500 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  2510 */   638,  696,  695,  907,  907,  224,  907,  365,  375,  907,
 /*  2520 */   907,  907,  907,  907,  907,  907,  623,  622,  626,  162,
 /*  2530 */   629,  135,  132,  666,  347,    8,  907,  597,  170,  390,
 /*  2540 */   185,  749,  907,  907,   18,  907,  907,  687,  198,  380,
 /*  2550 */   907,  226,  907,  907,  907,  907,  907,  907,  199,   97,
 /*  2560 */   907,  730,  734,  167,  697,  426,  907,  907,  737,  735,
 /*  2570 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  2580 */   907,  907,  907,  907,  712,  176,  113,  907,  772,  907,
 /*  2590 */   907,  907,  907,   92,  907,  109,   93,  907,  907,  124,
 /*  2600 */   907,   95,  221,  125,  907,  225,   40,  907,  907,  907,
 /*  2610 */    16,  907,  907,  907,  907,  907,  907,  907,  174,  751,
 /*  2620 */   750,  748,  240,  635,   27,  526,  907,   32,  475,  195,
 /*  2630 */   617,  169,  907,  286,  907,  907,  907,  907,  582,  278,
 /*  2640 */   907,  907,  907,  907,  596,  300,  907,  306,  106,  529,
 /*  2650 */    58,   47,  907,  907,  907,  307,  773,  105,  621,  789,
 /*  2660 */   805,  804,  803,  114,  907,  907,  907,  907,  907,  907,
 /*  2670 */   907,  907,  907,  907,  907,  150,  907,  907,  186,  907,
 /*  2680 */   907,  133,  907,  907,  907,  907,  196,  907,  102,  159,
 /*  2690 */   103,  907,  713,  907,  207,  205,  670,   94,   91,  122,
 /*  2700 */    88,   89,  358,  907,  907,  377,  361,  419,  432,  907,
 /*  2710 */   907,  907,  907,  907,  698,  699,  703,  454,  700,  193,
 /*  2720 */   907,  392,  638,  696,  695,  907,  907,  224,  907,  365,
 /*  2730 */   375,  907,  907,  907,  907,  907,  907,  907,  623,  622,
 /*  2740 */   626,  162,  629,  135,  132,  666,  347,   22,  907,  597,
 /*  2750 */   170,  390,  185,  749,  907,  907,   18,  907,  907,  687,
 /*  2760 */   198,  380,  907,  226,  907,  907,  907,  907,  907,  907,
 /*  2770 */   199,   97,  907,  730,  734,  167,  697,  426,  907,  907,
 /*  2780 */   737,  735,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  2790 */   907,  907,  907,  907,  907,  907,  712,  176,  113,  907,
 /*  2800 */   772,  907,  907,  907,  907,   92,  907,  109,   93,  907,
 /*  2810 */   907,  124,  907,   95,  221,  125,  907,  225,   40,  907,
 /*  2820 */   907,  907,   16,  907,  907,  907,  907,  907,  907,  907,
 /*  2830 */   174,  751,  750,  748,  240,  635,   27,  526,  907,   32,
 /*  2840 */   475,  195,  617,  169,  907,  286,  907,  907,  907,  907,
 /*  2850 */   582,  278,  907,  907,  907,  907,  596,  300,  907,  306,
 /*  2860 */   106,  529,   58,   47,  907,  907,  907,  307,  773,  105,
 /*  2870 */   621,  789,  805,  804,  803,  114,  907,  907,  907,  907,
 /*  2880 */   907,  907,  907,  907,  907,  907,  907,  150,  907,  907,
 /*  2890 */   186,  907,  907,  133,  907,  907,  907,  907,  196,  907,
 /*  2900 */   102,  159,  103,  907,  713,  907,  207,  205,  670,   94,
 /*  2910 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /*  2920 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /*  2930 */   700,  193,  907,  392,  638,  696,  695,  907,  907,  224,
 /*  2940 */   907,  365,  375,  907,  907,  907,  907,  907,  907,  907,
 /*  2950 */   623,  622,  626,  162,  629,  135,  132,  666,  347,    3,
 /*  2960 */   907,  597,  170,  390,  185,  749,  907,  907,   18,  907,
 /*  2970 */   907,  687,  198,  380,  907,  226,  907,  907,  907,  907,
 /*  2980 */   907,  907,  199,   97,  907,  730,  734,  167,  697,  426,
 /*  2990 */   907,  907,  737,  735,  907,  907,  907,  907,  907,  907,
 /*  3000 */   907,  907,  907,  907,  907,  907,  907,  907,  712,  176,
 /*  3010 */   113,  907,  772,  907,  907,  907,  907,   92,  907,  109,
 /*  3020 */    93,  907,  907,  124,  907,   95,  221,  125,  907,  225,
 /*  3030 */    40,  907,  907,  907,   16,  907,  907,  907,  907,  907,
 /*  3040 */   907,  907,  174,  751,  750,  748,  240,  635,   27,  526,
 /*  3050 */   907,   32,  475,  195,  617,  169,  907,  286,  907,  907,
 /*  3060 */   907,  907,  582,  278,  907,  907,  907,  907,  596,  300,
 /*  3070 */   907,  306,  106,  529,   58,   47,  907,  907,  907,  307,
 /*  3080 */   773,  105,  621,  789,  805,  804,  803,  114,  907,  907,
 /*  3090 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  150,
 /*  3100 */   907,  907,  186,  907,  907,  133,  907,  907,  907,  907,
 /*  3110 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /*  3120 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /*  3130 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /*  3140 */   703,  454,  700,  193,  907,  392,  638,  696,  695,  907,
 /*  3150 */   907,  224,  907,  365,  375,  907,  907,  907,  907,  907,
 /*  3160 */   907,  907,  623,  622,  626,  162,  629,  135,  132,  666,
 /*  3170 */   347,   23,  907,  597,  170,  390,  185,  749,  907,  907,
 /*  3180 */    18,  907,  907,  687,  198,  380,  907,  226,  907,  907,
 /*  3190 */   907,  907,  907,  907,  199,   97,  907,  730,  734,  167,
 /*  3200 */   697,  426,  907,  907,  737,  735,  907,  907,  907,  907,
 /*  3210 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  3220 */   712,  176,  113,  907,  772,  907,  907,  907,  907,   92,
 /*  3230 */   907,  109,   93,  907,  907,  124,  907,   95,  221,  125,
 /*  3240 */   907,  225,   40,  907,  907,  907,   16,  907,  907,  907,
 /*  3250 */   907,  907,  907,  907,  174,  751,  750,  748,  240,  635,
 /*  3260 */    27,  526,  907,   32,  475,  195,  617,  169,  907,  286,
 /*  3270 */   907,  907,  907,  907,  582,  278,  907,  907,  907,  907,
 /*  3280 */   596,  300,  907,  306,  106,  529,   58,   47,  907,  907,
 /*  3290 */   907,  307,  773,  105,  621,  789,  805,  804,  803,  114,
 /*  3300 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  3310 */   907,  150,  907,  907,  186,  907,  907,  133,  907,  907,
 /*  3320 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /*  3330 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /*  3340 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /*  3350 */   698,  699,  703,  454,  700,  193,  907,  392,  638,  696,
 /*  3360 */   695,  907,  907,  224,  907,  365,  375,  907,  907,  907,
 /*  3370 */   907,  907,  907,  907,  623,  622,  626,  162,  629,  135,
 /*  3380 */   132,  666,  347,   19,  907,  597,  170,  390,  185,  749,
 /*  3390 */   907,  907,   18,  907,  907,  687,  198,  380,  907,  226,
 /*  3400 */   907,  907,  907,  907,  907,  907,  199,   97,  907,  730,
 /*  3410 */   734,  167,  697,  426,  907,  907,  737,  735,  907,  907,
 /*  3420 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  3430 */   907,  907,  712,  176,  113,  907,  772,  907,  907,  907,
 /*  3440 */   907,   92,  907,  109,   93,  907,  907,  124,  907,   95,
 /*  3450 */   221,  125,  907,  225,   40,  907,  907,  907,   16,  907,
 /*  3460 */   907,  907,  907,  907,  907,  907,  174,  751,  750,  748,
 /*  3470 */   240,  635,   27,  526,  907,   32,  475,  195,  617,  169,
 /*  3480 */   907,  286,  907,  907,  907,  907,  582,  278,  907,  907,
 /*  3490 */   907,  907,  596,  300,  907,  306,  106,  529,   58,   47,
 /*  3500 */   907,  907,  907,  307,  773,  105,  621,  789,  805,  804,
 /*  3510 */   803,  114,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  3520 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /*  3530 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /*  3540 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /*  3550 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /*  3560 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  3570 */   638,  696,  695,  907,  907,  224,  907,  365,  375,  907,
 /*  3580 */   907,  907,  907,  907,  907,  907,  623,  622,  626,  162,
 /*  3590 */   629,  135,  132,  666,  347,  685,  170,  390,  185,  749,
 /*  3600 */   907,  907,   18,  752,  907,  687,  198,  380,  907,  226,
 /*  3610 */   907,  907,  907,  907,  907,  907,  199,   97,  907,  730,
 /*  3620 */   734,  167,  697,  426,  907,  907,  737,  735,  907,  907,
 /*  3630 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  3640 */   907,  907,  712,  176,  113,  907,  772,  907,  907,  907,
 /*  3650 */   907,   92,  907,  109,   93,  907,  907,  124,  907,   95,
 /*  3660 */   221,  125,  907,  225,   40,  907,  907,  907,   16,  907,
 /*  3670 */   907,  907,  907,  907,  907,  907,  174,  751,  750,  748,
 /*  3680 */   240,  635,   27,  526,  907,   32,  475,  195,  617,  169,
 /*  3690 */   907,  286,  907,  907,  907,  907,  582,  278,  907,  907,
 /*  3700 */   907,  907,  596,  300,  907,  306,  106,  529,   58,   47,
 /*  3710 */   907,  907,  907,  307,  773,  105,  621,  789,  805,  804,
 /*  3720 */   803,  114,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  3730 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /*  3740 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /*  3750 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /*  3760 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /*  3770 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  3780 */   638,  696,  695,  907,  907,  224,  907,  365,  375,  907,
 /*  3790 */   907,  907,  907,  907,  907,  907,  623,  622,  626,  162,
 /*  3800 */   629,  135,  132,  666,  347,  685,  170,  390,  185,  749,
 /*  3810 */   907,  907,   18,  595,  907,  687,  198,  380,  907,  226,
 /*  3820 */   907,  907,  907,  907,  907,  907,  199,   97,  907,  730,
 /*  3830 */   734,  167,  697,  426,  907,  907,  737,  735,  907,  907,
 /*  3840 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  3850 */   907,  907,  712,  176,  113,  907,  772,  907,  907,  907,
 /*  3860 */   907,   92,  907,  109,   93,  907,  907,  124,  907,   95,
 /*  3870 */   221,  125,  907,  225,   40,  907,  907,  907,   16,  907,
 /*  3880 */   907,  907,  907,  907,  907,  907,  174,  751,  750,  748,
 /*  3890 */   240,  635,   27,  526,  907,   32,  475,  195,  617,  169,
 /*  3900 */   907,  286,  907,  907,  907,  907,  582,  278,  907,  907,
 /*  3910 */   907,  907,  596,  300,  907,  306,  106,  529,   58,   47,
 /*  3920 */   907,  907,  907,  307,  773,  105,  621,  789,  805,  804,
 /*  3930 */   803,  114,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  3940 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /*  3950 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /*  3960 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /*  3970 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /*  3980 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  3990 */   638,  696,  695,  907,  907,  224,  907,  365,  375,  907,
 /*  4000 */   907,  907,  907,  907,  907,  907,  623,  622,  626,  162,
 /*  4010 */   629,  135,  132,  666,  347,  685,  170,  390,  185,  749,
 /*  4020 */   907,  907,   18,  907,  907,  687,  198,  380,  907,  226,
 /*  4030 */   907,  907,  907,  907,  907,  907,  199,   97,  907,  730,
 /*  4040 */   734,  167,  697,  426,  907,  907,  737,  735,  907,  907,
 /*  4050 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  4060 */   907,  907,  712,  176,  113,  907,  772,  907,  907,  907,
 /*  4070 */   907,   92,  907,  109,   93,  907,  907,  124,  907,   95,
 /*  4080 */   221,  125,  907,  225,   40,  907,  907,  907,   16,  907,
 /*  4090 */   907,  907,  907,  907,  907,  907,  174,  751,  750,  748,
 /*  4100 */   240,  635,   27,  526,  907,   32,  475,  195,  617,  169,
 /*  4110 */   907,  286,  907,  907,  907,  907,  582,  278,  907,  907,
 /*  4120 */   907,  907,  596,  300,  907,  306,  106,  529,   58,   47,
 /*  4130 */   907,  907,  907,  307,  773,  105,  621,  789,  805,  804,
 /*  4140 */   803,  114,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  4150 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /*  4160 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /*  4170 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /*  4180 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /*  4190 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  4200 */   638,  696,  695,  907,  907,  224,  907,  365,  375,  907,
 /*  4210 */   907,  907,  907,  907,  907,  907,  623,  622,  626,  162,
 /*  4220 */   629,  135,  132,  666,  347,  170,  390,  185,  593,  907,
 /*  4230 */   237,   18,  907,  234,  687,  198,  380,  907,  226,  907,
 /*  4240 */   907,  907,  907,  907,  907,  199,  136,  907,  730,  734,
 /*  4250 */   370,  697,  426,  907,  907,  737,  735,  907,  348,  424,
 /*  4260 */   334,  354,  340,  391,  329,  427,  422,  907,  907,  907,
 /*  4270 */   398,  712,  362,  116,  238,  772,  907,  907,  907,  907,
 /*  4280 */    92,  907,  109,   93,  907,  907,  142,  907,   90,  907,
 /*  4290 */   145,  907,  907,   40,  277,  279,  281,  276,  275,  270,
 /*  4300 */   269,  271,  272,  274,  907,  907,  907,  907,  748,  240,
 /*  4310 */   635,   27,  526,  907,   32,  475,  195,  617,  169,  907,
 /*  4320 */   286,  907,  907,  907,  907,  582,  278,  907,  907,  907,
 /*  4330 */   907,  596,  300,  907,  306,  106,  529,   58,   47,  907,
 /*  4340 */   907,  907,  307,  773,  105,  621,  789,  805,  804,  803,
 /*  4350 */   114,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  4360 */   907,  907,  150,  907,  907,  186,  907,  907,  133,  907,
 /*  4370 */   907,  907,  907,  196,  907,  102,  159,  103,  907,  713,
 /*  4380 */   907,  207,  205,  670,   94,   91,  122,   88,   89,  358,
 /*  4390 */   907,  907,  377,  361,  419,  432,  907,  907,  907,  907,
 /*  4400 */   907,  698,  699,  703,  454,  700,  193,  907,  392,  638,
 /*  4410 */   696,  695,  907,  907,  224,  907,  365,  375,  907,  907,
 /*  4420 */   907,  907,  907,  907,  907,  623,  622,  626,  162,  629,
 /*  4430 */   135,  132,  666,  347,  907,  907,  907,  170,  390,  185,
 /*  4440 */   249,  907,  907,   18,  907,  907,  687,  198,  380,  907,
 /*  4450 */   226,  907,  907,  907,  907,  907,  907,  199,  136,  907,
 /*  4460 */   730,  734,  370,  697,  426,  907,  907,  737,  735,  907,
 /*  4470 */   348,  424,  334,  354,  340,  391,  329,  427,  422,  907,
 /*  4480 */   907,  907,  907,  712,  362,  116,  907,  772,  907,  907,
 /*  4490 */   907,  907,   92,  907,  109,   93,  907,  907,  142,  907,
 /*  4500 */    90,  907,  145,  907,  907,   40,  907,  907,  907,  907,
 /*  4510 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  4520 */   748,  240,  635,   27,  526,  907,   32,  475,  195,  617,
 /*  4530 */   169,  907,  286,  907,  907,  907,  907,  582,  278,  907,
 /*  4540 */   907,  907,  907,  596,  300,  907,  306,  106,  529,   58,
 /*  4550 */    47,  907,  907,  907,  307,  773,  105,  621,  789,  805,
 /*  4560 */   804,  803,  114,  907,  907,  907,  907,  907,  907,  907,
 /*  4570 */   907,  907,  907,  907,  150,  907,  907,  186,  907,  907,
 /*  4580 */   133,  907,  907,  907,  907,  196,  907,  102,  159,  103,
 /*  4590 */   907,  713,  907,  207,  205,  670,   94,   91,  122,   88,
 /*  4600 */    89,  358,  907,  907,  377,  361,  419,  432,  907,  907,
 /*  4610 */   907,  907,  907,  698,  699,  703,  454,  700,  193,  907,
 /*  4620 */   392,  638,  696,  695,  907,  907,  224,  907,  365,  375,
 /*  4630 */   907,  907,  907,  907,  907,  907,  907,  623,  622,  626,
 /*  4640 */   162,  629,  135,  132,  666,  347,  907,  907,  907,  170,
 /*  4650 */   390,  185,  811,  907,  907,   18,  907,  907,  687,  198,
 /*  4660 */   380,  907,  226,  907,  907,  907,  907,  907,  907,  199,
 /*  4670 */   136,  907,  730,  734,  907,  697,  426,  907,  907,  737,
 /*  4680 */   735,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  4690 */   907,  907,  907,  907,  907,  712,  907,  116,  907,  772,
 /*  4700 */   907,  907,  907,  907,   92,  907,  109,   93,  907,  907,
 /*  4710 */   142,  907,   90,  907,  145,  907,  907,   40,  907,  907,
 /*  4720 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  4730 */   907,  907,  748,  240,  635,   27,  526,  907,   32,  475,
 /*  4740 */   195,  617,  169,  907,  286,  907,  907,  907,  907,  582,
 /*  4750 */   278,  907,  907,  907,  907,  596,  300,  907,  306,  106,
 /*  4760 */   529,   58,   47,  907,  907,  907,  307,  773,  105,  621,
 /*  4770 */   789,  805,  804,  803,  114,  907,  907,  907,  907,  907,
 /*  4780 */   907,  907,  907,  907,  907,  907,  150,  907,  907,  186,
 /*  4790 */   907,  907,  133,  907,  907,  907,  907,  196,  907,  102,
 /*  4800 */   159,  103,  907,  713,  907,  207,  205,  670,   94,   91,
 /*  4810 */   122,   88,   89,  358,  907,  907,  377,  361,  419,  432,
 /*  4820 */   907,  907,  907,  907,  907,  698,  699,  703,  454,  700,
 /*  4830 */   193,  907,  392,  638,  696,  695,  907,  907,  224,  907,
 /*  4840 */   365,  375,  907,  907,  907,  907,  907,  907,  907,  623,
 /*  4850 */   622,  626,  162,  629,  135,  132,  666,  347,  907,  907,
 /*  4860 */   907,  170,  390,  185,  620,  907,  907,   18,  907,  907,
 /*  4870 */   687,  198,  380,  907,  226,  907,  907,  907,  907,  907,
 /*  4880 */   907,  199,  136,  907,  730,  734,  907,  697,  426,  907,
 /*  4890 */   907,  737,  735,  907,  907,  907,  907,  907,  907,  907,
 /*  4900 */   907,  907,  907,  907,  907,  907,  907,  712,  907,  116,
 /*  4910 */   907,  772,  907,  907,  907,  907,   92,  907,  109,   93,
 /*  4920 */   907,  907,  142,  907,   90,  907,  145,  907,  907,   40,
 /*  4930 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  4940 */   907,  907,  907,  907,  748,  240,  635,   27,  526,  907,
 /*  4950 */    32,  475,  195,  617,  169,  907,  286,  907,  907,  907,
 /*  4960 */   907,  582,  278,  907,  907,  907,  907,  596,  300,  907,
 /*  4970 */   306,  106,  529,   58,   47,  907,  907,  907,  307,  773,
 /*  4980 */   105,  621,  789,  805,  804,  803,  114,  907,  907,  907,
 /*  4990 */   907,  907,  907,  907,  907,  907,  907,  907,  150,  907,
 /*  5000 */   907,  186,  907,  907,  133,  907,  907,  907,  907,  196,
 /*  5010 */   907,  102,  159,  103,  907,  713,  907,  207,  205,  670,
 /*  5020 */    94,   91,  122,   88,   89,  358,  907,  907,  377,  361,
 /*  5030 */   419,  432,  907,  907,  907,  907,  907,  698,  699,  703,
 /*  5040 */   454,  700,  193,  907,  392,  638,  696,  695,  907,  907,
 /*  5050 */   224,  907,  365,  375,  907,  907,  907,  907,  907,  907,
 /*  5060 */   907,  623,  622,  626,  162,  629,  135,  132,  666,  347,
 /*  5070 */   907,  907,  907,  170,  390,  185,  594,  907,  907,   18,
 /*  5080 */   907,  907,  687,  198,  380,  907,  226,  907,  907,  907,
 /*  5090 */   907,  907,  907,  199,  136,  907,  730,  734,  907,  697,
 /*  5100 */   426,  907,  907,  737,  735,  907,  907,  907,  907,  907,
 /*  5110 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  712,
 /*  5120 */   907,  116,  907,  772,  907,  907,  907,  907,   92,  907,
 /*  5130 */   109,   93,  907,  907,  142,  907,   90,  907,  145,  907,
 /*  5140 */   907,   40,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  5150 */   907,  907,  907,  907,  907,  907,  748,  240,  635,   27,
 /*  5160 */   526,  907,   32,  475,  195,  617,  169,  907,  286,  907,
 /*  5170 */   907,  907,  907,  582,  278,  907,  907,  907,  907,  596,
 /*  5180 */   300,  907,  306,  106,  529,   58,   47,  907,  907,  907,
 /*  5190 */   307,  773,  105,  621,  789,  805,  804,  803,  114,  907,
 /*  5200 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  5210 */   150,  907,  907,  186,  907,  907,  133,  907,  907,  907,
 /*  5220 */   907,  196,  907,  102,  159,  103,  907,  713,  907,  207,
 /*  5230 */   205,  670,   94,   91,  122,   88,   89,  358,  907,  907,
 /*  5240 */   377,  361,  419,  432,  907,  907,  907,  907,  907,  698,
 /*  5250 */   699,  703,  454,  700,  193,  907,  392,  638,  696,  695,
 /*  5260 */   907,  907,  224,  907,  365,  375,  907,  364,  907,  907,
 /*  5270 */   907,  907,  907,  623,  622,  626,  162,  629,  135,  132,
 /*  5280 */   666,  347,  907,  907,  376,  199,  907,  907,  370,  766,
 /*  5290 */   907,  697,  907,  907,  907,  907,  348,  424,  334,  354,
 /*  5300 */   340,  391,  329,  427,  422,  907,  907,  907,  398,  389,
 /*  5310 */   362,  712,  366,  116,  345,  772,  907,  907,  907,  907,
 /*  5320 */    92,  907,  109,   93,  907,  907,  142,  907,   90,  907,
 /*  5330 */   145,  907,  907,   40,  907,  907,  718,  907,  130,  907,
 /*  5340 */   907,  740,  118,  758,  324,  119,  755,  168,  907,  907,
 /*  5350 */   635,  907,  583,  907,  907,  907,  907,  907,  907,  191,
 /*  5360 */   907,  733,  423,  289,  586,  907,  110,  799,  798,  797,
 /*  5370 */   796,  765,  426,  907,  732,  907,  907,   58,   47,  907,
 /*  5380 */   907,  907,  307,  773,  105,  621,  789,  805,  804,  803,
 /*  5390 */   114,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  5400 */   907,  907,  150,  245,  907,  186,  907,  907,  133,  907,
 /*  5410 */   907,  907,  907,  196,  907,  102,  159,  103,  907,  713,
 /*  5420 */   907,  207,  205,  670,   94,   91,  122,   88,   89,  358,
 /*  5430 */   907,  907,  377,  361,  419,  432,  907,  907,  907,  907,
 /*  5440 */   907,  698,  699,  703,  454,  700,  193,  907,  392,  638,
 /*  5450 */   696,  695,  907,  907,  224,  907,  365,  375,  774,  364,
 /*  5460 */   907,  768,  775,  907,  907,  623,  622,  626,  162,  629,
 /*  5470 */   135,  132,  666,  347,  907,  907,  907,  199,  907,  907,
 /*  5480 */   370,  907,  907,  697,  907,  907,  907,  907,  348,  424,
 /*  5490 */   334,  354,  340,  391,  329,  427,  422,  907,  907,  907,
 /*  5500 */   907,  389,  362,  712,  907,  116,  907,  772,  907,  907,
 /*  5510 */   907,  907,   92,  907,  109,   93,  907,  907,  142,  370,
 /*  5520 */    90,  907,  145,  907,  907,   40,  907,  348,  424,  334,
 /*  5530 */   354,  340,  391,  329,  427,  422,  907,  907,  907,  907,
 /*  5540 */   389,  362,  635,  907,  438,  623,  622,  626,  162,  629,
 /*  5550 */   135,  132,  666,  347,  907,  907,  907,  907,  907,  907,
 /*  5560 */   907,  907,  907,  697,  907,  907,  907,  907,  907,   58,
 /*  5570 */    47,  907,  907,  907,  307,  773,  105,  621,  789,  805,
 /*  5580 */   804,  803,  114,  250,  291,  290,  907,  907,  907,  907,
 /*  5590 */   907,  907,  907,  907,  150,  139,  907,  186,  165,  907,
 /*  5600 */   133,  907,  172,  907,  907,  196,  907,  102,  159,  103,
 /*  5610 */   907,  713,  907,  207,  205,  670,   94,   91,  122,   88,
 /*  5620 */    89,  358,  907,  907,  377,  361,  419,  432,  907,  907,
 /*  5630 */   907,  907,  907,  698,  699,  703,  454,  700,  193,  907,
 /*  5640 */   392,  638,  696,  695,  907,  907,  224,  907,  365,  375,
 /*  5650 */   907,  364,  907,  907,  907,  907,  907,  623,  622,  626,
 /*  5660 */   162,  629,  135,  132,  666,  347,  907,  907,  376,  199,
 /*  5670 */   907,  907,  370,  907,  907,  697,  907,  907,  907,  907,
 /*  5680 */   348,  424,  334,  354,  340,  391,  329,  427,  422,  907,
 /*  5690 */   907,  907,  398,  389,  362,  712,  907,  116,  345,  772,
 /*  5700 */   907,  907,  907,  907,   92,  907,  109,   93,  907,  907,
 /*  5710 */   142,  907,   90,  907,  145,  907,  907,   40,  907,  907,
 /*  5720 */   907,  704,  696,  695,  907,  907,  224,  907,  365,  375,
 /*  5730 */   907,  907,  907,  907,  635,  907,  231,  623,  622,  626,
 /*  5740 */   162,  629,  135,  132,  666,  347,  907,  907,  907,  907,
 /*  5750 */   907,  907,  907,  907,  907,  697,  907,  907,  907,  907,
 /*  5760 */   907,   58,   47,  907,  907,  907,  307,  773,  105,  621,
 /*  5770 */   789,  805,  804,  803,  114,  907,  907,  907,  907,  907,
 /*  5780 */   907,  907,  907,  907,  907,  907,  150,  907,  907,  186,
 /*  5790 */   165,  907,  133,  907,  172,  907,  907,  196,  907,  102,
 /*  5800 */   159,  103,  907,  713,  907,  207,  205,  670,   94,   91,
 /*  5810 */   122,   88,   89,  358,  907,  907,  377,  361,  419,  432,
 /*  5820 */   907,  907,  907,  907,  907,  698,  699,  703,  454,  700,
 /*  5830 */   193,  907,  392,  638,  696,  695,  907,  907,  224,  907,
 /*  5840 */   365,  375,  907,  364,  907,  907,  907,  907,  907,  623,
 /*  5850 */   622,  626,  162,  629,  135,  132,  666,  347,  907,  907,
 /*  5860 */   907,  199,  907,  907,  907,  907,  907,  697,  907,  907,
 /*  5870 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  5880 */   907,  907,  907,  907,  907,  907,  907,  712,  907,  116,
 /*  5890 */   907,  772,  907,  907,  907,  907,   92,  907,  109,   93,
 /*  5900 */   907,  907,  142,  907,   90,  907,  145,  907,  907,   40,
 /*  5910 */   907,  907,  907,  704,  696,  695,  907,  907,  224,  907,
 /*  5920 */   365,  375,  907,  907,  907,  907,  635,  907,  257,  623,
 /*  5930 */   622,  626,  162,  629,  135,  132,  666,  347,  907,  690,
 /*  5940 */   423,  907,  907,  907,  110,  799,  798,  797,  796,  765,
 /*  5950 */   426,  907,  907,   58,   47,  907,  907,  907,  307,  773,
 /*  5960 */   105,  621,  789,  805,  804,  803,  114,  348,  424,  334,
 /*  5970 */   354,  340,  391,  329,  427,  422,  383,  907,  150,  907,
 /*  5980 */   907,  186,  907,  907,  133,  907,  907,  907,  907,  196,
 /*  5990 */   907,  102,  159,  103,  907,  713,  907,  207,  205,  670,
 /*  6000 */    94,   91,  122,   88,   89,  358,  907,  907,  377,  361,
 /*  6010 */   419,  432,  907,  907,  907,  907,  907,  698,  699,  703,
 /*  6020 */   454,  700,  193,  907,  392,  638,  696,  695,  907,  907,
 /*  6030 */   224,  907,  365,  375,  907,  364,  907,  907,  907,  907,
 /*  6040 */   907,  623,  622,  626,  162,  629,  135,  132,  666,  347,
 /*  6050 */   907,  907,  907,  199,  907,  907,  296,  907,  907,  697,
 /*  6060 */   907,  907,  907,  291,  290,  284,  285,  907,  907,  907,
 /*  6070 */   907,  907,  907,  907,  907,  907,  907,  907,  364,  712,
 /*  6080 */   907,  116,  907,  772,  907,  907,  907,  907,   92,  907,
 /*  6090 */   109,   93,  907,  907,  142,  907,   90,  907,  145,  907,
 /*  6100 */   907,   40,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6110 */   907,  907,  907,  907,  907,  907,  907,  907,  635,  907,
 /*  6120 */   299,  907,  728,  623,  622,  626,  162,  629,  135,  132,
 /*  6130 */   666,  347,  907,  907,  907,  907,  907,  143,  907,  907,
 /*  6140 */   907,  147,  907,  907,   48,   58,   47,  907,  907,  907,
 /*  6150 */   307,  773,  105,  621,  789,  805,  804,  803,  114,  907,
 /*  6160 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6170 */   150,  907,  907,  186,  907,  907,  133,  907,  907,  907,
 /*  6180 */   907,  196,  907,  102,  159,  103,  907,  713,  907,  207,
 /*  6190 */   205,  670,   94,   91,  122,   88,   89,  358,  907,  907,
 /*  6200 */   377,  361,  419,  432,  907,  907,  907,  907,  907,  698,
 /*  6210 */   699,  703,  454,  700,  193,  907,  392,  638,  696,  695,
 /*  6220 */   907,  907,  224,  907,  365,  375,  907,  364,  907,  907,
 /*  6230 */   907,  907,  907,  623,  622,  626,  162,  629,  135,  132,
 /*  6240 */   666,  347,  907,  907,  907,  199,  907,  907,  907,  907,
 /*  6250 */   907,  697,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  6260 */   907,  907,  907,  907,  907,  224,  907,  365,  375,  907,
 /*  6270 */   907,  712,  907,  116,  907,  772,  907,  907,  907,  907,
 /*  6280 */    92,  907,  109,   93,  907,  907,  142,  907,   90,  907,
 /*  6290 */   145,  907,  907,   40,  907,  907,  907,  907,  907,  907,
 /*  6300 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6310 */   635,  907,  267,  907,  907,  907,  907,  907,  907,  907,
 /*  6320 */   907,  907,  293,  907,  907,  907,  907,  799,  798,  797,
 /*  6330 */   796,  765,  907,  907,  907,  907,  907,   58,   47,  907,
 /*  6340 */   907,  907,  307,  773,  105,  621,  789,  805,  804,  803,
 /*  6350 */   114,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6360 */   907,  907,  150,  907,  907,  186,  907,  907,  133,  907,
 /*  6370 */   907,  907,  907,  196,  907,  102,  159,  103,  907,  713,
 /*  6380 */   907,  207,  205,  670,   94,   91,  122,   88,   89,  358,
 /*  6390 */   907,  907,  377,  361,  419,  432,  907,  907,  907,  907,
 /*  6400 */   907,  698,  699,  703,  454,  700,  193,  907,  392,  638,
 /*  6410 */   696,  695,  907,  907,  224,  907,  365,  375,  907,  364,
 /*  6420 */   907,  907,  907,  907,  907,  623,  622,  626,  162,  629,
 /*  6430 */   135,  132,  666,  347,  907,  907,  907,  199,  907,  907,
 /*  6440 */   907,  907,  907,  697,  907,  907,  907,  907,  907,  907,
 /*  6450 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6460 */   907,  907,  907,  712,  907,  116,  907,  772,  907,  907,
 /*  6470 */   907,  907,   92,  907,  109,   93,  907,  907,  142,  907,
 /*  6480 */    90,  907,  145,  907,  907,   40,  907,  907,  907,  907,
 /*  6490 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6500 */   907,  907,  635,  907,  244,  623,  622,  626,  162,  629,
 /*  6510 */   135,  132,  666,  347,  907,  907,  907,  907,  907,  907,
 /*  6520 */   907,  907,  907,  907,  907,  907,  907,  907,  907,   58,
 /*  6530 */    47,  907,  907,  907,  307,  773,  105,  621,  789,  805,
 /*  6540 */   804,  803,  114,  907,  907,  907,  907,  907,  907,  907,
 /*  6550 */   907,  907,  907,  907,  150,  907,  907,  186,  907,  907,
 /*  6560 */   133,  907,  907,  907,  907,  196,  907,  102,  159,  103,
 /*  6570 */   907,  713,  907,  207,  205,  670,   94,   91,  122,   88,
 /*  6580 */    89,  358,  907,  907,  377,  361,  419,  432,  907,  907,
 /*  6590 */   907,  907,  907,  698,  699,  703,  454,  700,  193,  907,
 /*  6600 */   392,  638,  696,  695,  907,  907,  224,  907,  365,  375,
 /*  6610 */   907,  364,  907,  907,  907,  907,  907,  623,  622,  626,
 /*  6620 */   162,  629,  135,  132,  666,  347,  907,  907,  907,  199,
 /*  6630 */   907,  907,  907,  907,  907,  697,  907,  907,  907,  907,
 /*  6640 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6650 */   907,  907,  907,  907,  907,  712,  907,  116,  907,  772,
 /*  6660 */   907,  907,  907,  907,   92,  907,  109,   93,  907,  907,
 /*  6670 */   142,  907,   90,  907,  145,  907,  907,   40,  907,  907,
 /*  6680 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6690 */   907,  907,  907,  907,  635,  907,  298,  907,  907,  907,
 /*  6700 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6710 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6720 */   907,   58,   47,  907,  907,  907,  307,  773,  105,  621,
 /*  6730 */   789,  805,  804,  803,  114,  907,  907,  907,  907,  907,
 /*  6740 */   907,  907,  907,  907,  907,  907,  150,  907,  907,  186,
 /*  6750 */   907,  907,  133,  907,  907,  907,  907,  196,  907,  102,
 /*  6760 */   159,  103,  907,  713,  907,  207,  205,  670,   94,   91,
 /*  6770 */   122,   88,   89,  358,  907,  907,  377,  361,  419,  432,
 /*  6780 */   907,  907,  907,  907,  907,  698,  699,  703,  454,  700,
 /*  6790 */   193,  907,  392,  638,  696,  695,  907,  907,  224,  907,
 /*  6800 */   365,  375,  907,  364,  907,  907,  907,  907,  907,  623,
 /*  6810 */   622,  626,  162,  629,  135,  132,  666,  347,  907,  907,
 /*  6820 */   907,  199,  907,  907,  907,  907,  907,  697,  907,  907,
 /*  6830 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6840 */   907,  907,  907,  907,  907,  907,  907,  712,  907,  116,
 /*  6850 */   907,  772,  907,  907,  907,  907,   92,  907,  109,   93,
 /*  6860 */   907,  907,  142,  907,   90,  907,  145,  907,  907,   40,
 /*  6870 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6880 */   907,  907,  907,  907,  907,  907,  635,  907,  309,  907,
 /*  6890 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6900 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  6910 */   907,  907,  907,   58,   47,  907,  907,  907,  307,  773,
 /*  6920 */   105,  621,  789,  805,  804,  803,  114,  907,  907,  907,
 /*  6930 */   907,  907,  907,  907,  907,  907,  907,  907,  150,  907,
 /*  6940 */   907,  186,  907,  907,  133,  907,  907,  907,  907,  196,
 /*  6950 */   907,  102,  159,  103,  907,  713,  907,  207,  205,  670,
 /*  6960 */    94,   91,  122,   88,   89,  358,  907,  907,  377,  361,
 /*  6970 */   419,  432,  907,  907,  907,  907,  907,  698,  699,  703,
 /*  6980 */   454,  700,  193,  907,  392,  638,  696,  695,  907,  907,
 /*  6990 */   224,  907,  365,  375,  907,  907,  907,  907,  907,  907,
 /*  7000 */   907,  623,  622,  626,  162,  629,  135,  132,  666,  347,
 /*  7010 */   907,  376,  907,  907,  907,  370,  907,  907,  907,  907,
 /*  7020 */   907,  295,  260,  348,  424,  334,  354,  340,  391,  329,
 /*  7030 */   427,  422,  907,  907,  907,  398,  389,  362,  344,  907,
 /*  7040 */   396,  345,  907,  412,  410,  406,  408,  907,  907,  349,
 /*  7050 */   266,  907,  327,  397,  416,  400,  907,  907,  331,  328,
 /*  7060 */   430,  429,  428,  420,  907,  907,  907,  907,  907,  907,
 /*  7070 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7080 */   907,  301,  268,  302,  304,  303,  312,  313,  253,  242,
 /*  7090 */   251,  907,  907,  907,  248,  907,  907,  425,  395,  393,
 /*  7100 */   402,  415,  264,  431,  346,  351,  357,  907,  907,  907,
 /*  7110 */   907,  907,  296,  907,  907,  421,  418,  413,  250,  291,
 /*  7120 */   290,  284,  376,  352,  907,  907,  370,  907,  907,  907,
 /*  7130 */   907,  907,  295,  260,  348,  424,  334,  354,  340,  391,
 /*  7140 */   329,  427,  422,  907,  907,  907,  398,  389,  362,  344,
 /*  7150 */   907,  396,  345,  907,  412,  410,  406,  408,  907,  907,
 /*  7160 */   349,  907,  907,  327,  397,  416,  400,  907,  907,  331,
 /*  7170 */   328,  430,  429,  428,  420,  907,  907,  907,  907,  907,
 /*  7180 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7190 */   907,  907,  301,  268,  302,  304,  303,  312,  313,  253,
 /*  7200 */   242,  251,  907,  907,  907,  248,  907,  907,  425,  395,
 /*  7210 */   393,  402,  415,  264,  431,  346,  351,  357,  372,  368,
 /*  7220 */   256,  364,  907,  296,  907,  907,  907,  907,  907,  250,
 /*  7230 */   291,  290,  284,  907,  352,  907,  907,  907,  155,  199,
 /*  7240 */   907,  907,  907,  907,  907,  697,  907,  907,  907,  907,
 /*  7250 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7260 */   907,  907,  907,  907,  907,  712,  907,  907,  907,  382,
 /*  7270 */   907,  907,  907,  907,   92,  907,  109,   93,  907,  376,
 /*  7280 */   142,  907,   90,  370,  145,  907,  907,   40,  907,  907,
 /*  7290 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7300 */   907,  907,  907,  398,  635,  362,  344,  907,  396,  345,
 /*  7310 */   907,  412,  410,  406,  408,  907,  907,  349,  266,  907,
 /*  7320 */   327,  397,  416,  400,  907,  907,  331,  328,  430,  429,
 /*  7330 */   428,  420,  907,  907,  907,  907,  202,  907,  907,  907,
 /*  7340 */   907,  907,  907,  907,  114,  907,  907,  907,  907,  907,
 /*  7350 */   907,  907,  907,  907,  907,  907,  150,  907,  907,  186,
 /*  7360 */   907,  907,  133,  907,  907,  907,  907,  196,  907,  102,
 /*  7370 */   159,  103,  907,  713,  907,  207,  205,  670,   94,   91,
 /*  7380 */   122,   88,   89,  358,  907,  907,  377,  361,  419,  432,
 /*  7390 */   907,  907,  907,  907,  907,  698,  699,  703,  454,  700,
 /*  7400 */   193,  907,  392,  638,  696,  695,  907,  907,  224,  907,
 /*  7410 */   365,  375,  378,  632,  625,  624,  907,  907,  907,  623,
 /*  7420 */   622,  626,  162,  629,  135,  132,  666,  347,  907,  376,
 /*  7430 */   907,  907,  907,  370,  907,  907,  907,  907,  907,  295,
 /*  7440 */   260,  348,  424,  334,  354,  340,  391,  329,  427,  422,
 /*  7450 */   907,  907,  907,  398,  389,  362,  344,  907,  396,  345,
 /*  7460 */   907,  412,  410,  406,  408,  907,  907,  349,  266,  907,
 /*  7470 */   327,  397,  416,  400,  907,  907,  331,  328,  430,  429,
 /*  7480 */   428,  420,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7490 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  301,
 /*  7500 */   268,  302,  304,  303,  312,  313,  253,  242,  251,  907,
 /*  7510 */   907,  907,  248,  907,  907,  425,  395,  393,  402,  415,
 /*  7520 */   264,  431,  346,  351,  357,  907,  907,  907,  907,  907,
 /*  7530 */   296,  907,  907,  907,  907,  907,  250,  291,  290,  284,
 /*  7540 */   376,  352,  907,  907,  370,  907,  907,  907,  907,  907,
 /*  7550 */   295,  260,  348,  424,  334,  354,  340,  391,  329,  427,
 /*  7560 */   422,  907,  907,  907,  398,  389,  362,  344,  907,  396,
 /*  7570 */   345,  907,  412,  410,  406,  408,  907,  907,  349,  907,
 /*  7580 */   907,  327,  397,  416,  400,  907,  907,  331,  328,  430,
 /*  7590 */   429,  428,  420,  907,  907,  907,  907,  907,  907,  907,
 /*  7600 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7610 */   301,  268,  302,  304,  303,  312,  313,  253,  242,  251,
 /*  7620 */   907,  907,  907,  248,  907,  907,  425,  395,  393,  402,
 /*  7630 */   415,  264,  431,  346,  351,  357,  907,  907,  907,  907,
 /*  7640 */   907,  296,  907,  907,  907,  907,  907,  250,  291,  290,
 /*  7650 */   284,  376,  352,  682,  907,  370,  907,  907,  907,  907,
 /*  7660 */   907,  295,  260,  348,  424,  334,  354,  340,  391,  329,
 /*  7670 */   427,  422,  907,  907,  907,  398,  389,  362,  344,  907,
 /*  7680 */   396,  345,  907,  412,  410,  406,  408,  907,  907,  349,
 /*  7690 */   907,  907,  327,  397,  416,  400,  907,  907,  331,  328,
 /*  7700 */   430,  429,  428,  420,  907,  907,  907,  907,  907,  907,
 /*  7710 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7720 */   907,  301,  268,  302,  304,  303,  312,  313,  253,  242,
 /*  7730 */   251,  907,  907,  907,  248,  907,  907,  425,  395,  393,
 /*  7740 */   402,  415,  264,  431,  346,  351,  357,  907,  907,  907,
 /*  7750 */   907,  907,  296,  907,  907,  907,  907,  907,  250,  291,
 /*  7760 */   290,  284,  376,  352,  683,  907,  370,  907,  907,  907,
 /*  7770 */   907,  907,  295,  260,  348,  424,  334,  354,  340,  391,
 /*  7780 */   329,  427,  422,  907,  907,  907,  398,  389,  362,  344,
 /*  7790 */   907,  396,  345,  907,  412,  410,  406,  408,  907,  907,
 /*  7800 */   349,  907,  907,  327,  397,  416,  400,  907,  907,  331,
 /*  7810 */   328,  430,  429,  428,  420,  907,  907,  907,  907,  907,
 /*  7820 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7830 */   907,  907,  301,  268,  302,  304,  303,  312,  313,  253,
 /*  7840 */   242,  251,  907,  907,  907,  248,  907,  907,  425,  395,
 /*  7850 */   393,  402,  415,  264,  431,  346,  351,  357,  907,  907,
 /*  7860 */   907,  907,  907,  296,  907,  907,  907,  907,  907,  250,
 /*  7870 */   291,  290,  284,  376,  352,  907,  907,  370,  907,  907,
 /*  7880 */   907,  907,  907,  295,  260,  348,  424,  334,  354,  340,
 /*  7890 */   391,  329,  427,  422,  907,  907,  907,  398,  389,  362,
 /*  7900 */   344,  907,  396,  345,  907,  412,  410,  406,  408,  907,
 /*  7910 */   907,  349,  907,  907,  327,  397,  416,  400,  907,  907,
 /*  7920 */   331,  328,  430,  429,  428,  420,  907,  907,  907,  907,
 /*  7930 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7940 */   907,  907,  907,  301,  268,  302,  304,  303,  312,  313,
 /*  7950 */   253,  242,  251,  907,  907,  907,  248,  907,  907,  425,
 /*  7960 */   395,  393,  402,  415,  264,  431,  907,  907,  907,  364,
 /*  7970 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  7980 */   250,  291,  290,  284,  907,  352,  211,  200,  907,  907,
 /*  7990 */   907,  907,  907,  697,  907,  907,  907,  907,  907,  907,
 /*  8000 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  8010 */   907,  907,  907,  712,  907,  907,  907,  382,  907,  907,
 /*  8020 */   907,  907,   92,  907,  109,   93,  907,  907,  142,  907,
 /*  8030 */    90,  364,  145,  907,  907,   40,  907,  907,  907,  907,
 /*  8040 */   907,  907,  907,  907,  907,  907,  907,  907,  197,  212,
 /*  8050 */   907,  907,  907,  907,  907,  697,  907,  907,  907,  907,
 /*  8060 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  8070 */   907,  907,  907,  907,  907,  712,  907,  907,  907,  382,
 /*  8080 */   907,  907,  907,  907,   92,  907,  109,   93,  907,  907,
 /*  8090 */   142,  907,   90,  907,  145,  907,  907,   40,  907,  907,
 /*  8100 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  8110 */   907,  907,  907,  907,  907,  196,  907,  102,  159,  103,
 /*  8120 */   907,  713,  907,  207,  205,  670,   94,   91,  122,   88,
 /*  8130 */    89,  358,  907,  907,  377,  361,  419,  432,  907,  907,
 /*  8140 */   907,  907,  907,  698,  699,  703,  454,  700,  193,  907,
 /*  8150 */   392,  638,  696,  695,  907,  907,  224,  907,  365,  375,
 /*  8160 */   378,  632,  625,  624,  907,  907,  907,  623,  622,  626,
 /*  8170 */   162,  629,  135,  132,  666,  347,  907,  196,  907,  102,
 /*  8180 */   159,  103,  907,  713,  907,  207,  205,  670,   94,   91,
 /*  8190 */   122,   88,   89,  358,  907,  907,  377,  361,  419,  432,
 /*  8200 */   907,  907,  907,  907,  907,  698,  699,  703,  454,  700,
 /*  8210 */   193,  907,  392,  638,  696,  695,  907,  907,  224,  907,
 /*  8220 */   365,  375,  378,  632,  625,  624,  907,  907,  907,  623,
 /*  8230 */   622,  626,  162,  629,  135,  132,  666,  347,  907,  907,
 /*  8240 */   907,  907,  907,  907,  376,  907,  364,  907,  370,  907,
 /*  8250 */    43,  787,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  8260 */   907,  907,  907,  907,  199,  907,  907,  364,  398,  907,
 /*  8270 */   362,  344,  366,  396,  345,  907,  412,  410,  406,  408,
 /*  8280 */   907,  907,  907,  907,  907,  327,  397,  416,  400,  907,
 /*  8290 */   712,  331,  328,  430,  429,  428,  420,  907,  907,   92,
 /*  8300 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /*  8310 */   907,  323,   40,  907,  364,  907,  907,  907,   43,  907,
 /*  8320 */   907,  907,  907,  907,  907,  907,  143,  907,  907,  777,
 /*  8330 */   147,  907,  199,   48,  907,  907,  907,  907,  907,  907,
 /*  8340 */   907,  907,  907,  907,  730,  734,  907,  697,  907,  907,
 /*  8350 */   907,  731,  735,  907,  907,  907,  907,  907,  712,  907,
 /*  8360 */   907,  907,  907,  907,  907,  907,  907,   92,  907,  114,
 /*  8370 */    93,  115,  907,  143,  907,   90,  907,  147,  109,  907,
 /*  8380 */    40,  150,  127,  907,  186,  219,  128,  133,  222,  907,
 /*  8390 */   907,  907,  196,  907,  102,  159,  103,  782,  713,  907,
 /*  8400 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /*  8410 */   907,  377,  361,  419,  432,  907,  776,  182,  907,  907,
 /*  8420 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /*  8430 */   907,  907,  907,  224,  907,  365,  375,  114,  907,  907,
 /*  8440 */   907,  698,  699,  703,  454,  700,  193,  907,  392,  150,
 /*  8450 */   907,  907,  186,  907,  224,  133,  365,  375,  907,  907,
 /*  8460 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /*  8470 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /*  8480 */   361,  419,  432,  907,  783,  907,  907,  907,  698,  699,
 /*  8490 */   703,  454,  700,  193,  907,  392,  907,  907,  364,  907,
 /*  8500 */   907,  224,   43,  365,  375,  638,  696,  695,  907,  907,
 /*  8510 */   224,  907,  365,  375,  907,  907,  199,  907,  907,  907,
 /*  8520 */   907,  623,  622,  626,  162,  629,  135,  132,  666,  347,
 /*  8530 */   907,  907,  151,  907,  907,  907,  907,  907,  907,  697,
 /*  8540 */   907,  907,  712,  907,  907,  907,  907,  907,  907,  907,
 /*  8550 */   907,   92,  907,  907,   93,  907,  907,  143,  907,   90,
 /*  8560 */   907,  147,  907,  382,   40,  907,  907,  376,  907,  907,
 /*  8570 */   109,  370,  907,  907,  165,  907,  907,  907,  172,  907,
 /*  8580 */   907,  785,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  8590 */   907,  398,  907,  362,  344,  907,  396,  345,  907,  412,
 /*  8600 */   410,  406,  408,  907,  907,  349,  907,  907,  327,  397,
 /*  8610 */   416,  400,  907,  907,  331,  328,  430,  429,  428,  420,
 /*  8620 */   907,  114,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  8630 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /*  8640 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /*  8650 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /*  8660 */   358,  907,  907,  377,  361,  419,  432,  907,  784,  907,
 /*  8670 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  8680 */   907,  907,  364,  907,  907,  224,  907,  365,  375,  907,
 /*  8690 */   907,  907,  907,  907,  907,  907,  907,  638,  696,  695,
 /*  8700 */   199,  907,  224,  907,  365,  375,  378,  632,  625,  624,
 /*  8710 */   907,  907,  907,  623,  622,  626,  162,  629,  135,  132,
 /*  8720 */   666,  347,  697,  907,  907,  907,  712,  907,  907,  907,
 /*  8730 */   907,  907,  907,  907,  907,   92,  907,  907,   93,  907,
 /*  8740 */   907,  143,  907,   90,  907,  147,  788,  907,   40,  807,
 /*  8750 */   907,  907,  907,  109,  907,  907,  907,  165,  907,  376,
 /*  8760 */   907,  172,  907,  370,  907,  635,  907,  907,  907,  907,
 /*  8770 */   907,  348,  424,  334,  354,  340,  391,  329,  427,  422,
 /*  8780 */   907,  907,  907,  398,  389,  362,  344,  907,  396,  345,
 /*  8790 */   907,  412,  410,  406,  408,  907,  907,  188,  907,  907,
 /*  8800 */   327,  397,  416,  400,  907,  114,  331,  328,  430,  429,
 /*  8810 */   428,  420,  907,  907,  907,  907,  907,  150,  907,  907,
 /*  8820 */   186,  907,  907,  133,  907,  907,  907,  907,  196,  907,
 /*  8830 */   102,  159,  103,  907,  713,  907,  207,  205,  670,   94,
 /*  8840 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /*  8850 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /*  8860 */   700,  193,  907,  392,  907,  907,  364,  907,  907,  224,
 /*  8870 */   907,  365,  375,  907,  907,  907,  907,  907,  907,  907,
 /*  8880 */   638,  696,  695,  907,  199,  224,  907,  365,  375,  907,
 /*  8890 */   907,  907,  907,  907,  907,  907,  623,  622,  626,  162,
 /*  8900 */   629,  135,  132,  666,  347,  907,  907,  907,  364,  907,
 /*  8910 */   712,  907,  907,  907,  907,  907,  907,  907,  907,   92,
 /*  8920 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /*  8930 */   907,  907,   40,  907,  907,  907,  907,  907,  907,  907,
 /*  8940 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  635,
 /*  8950 */   907,  907,  712,  157,  907,  907,  907,  907,  907,  907,
 /*  8960 */   697,  907,  907,  907,  907,  907,  907,  143,  907,  907,
 /*  8970 */   907,  147,  907,  907,   48,  907,  907,  907,  907,  907,
 /*  8980 */   907,  202,  907,  907,  382,  907,  907,  907,  907,  114,
 /*  8990 */   907,  109,  907,  907,  907,  165,  907,  907,  907,  172,
 /*  9000 */   907,  150,  907,  907,  186,  907,  907,  133,  907,  907,
 /*  9010 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /*  9020 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /*  9030 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /*  9040 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /*  9050 */   364,  907,  907,  224,  907,  365,  375,  907,  907,  907,
 /*  9060 */   907,  907,  335,  336,  907,  907,  907,  121,  199,  907,
 /*  9070 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /*  9080 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  9090 */   907,  907,  907,  907,  712,  224,  907,  365,  375,  907,
 /*  9100 */   907,  907,  907,   92,  907,  907,   93,  907,  907,  143,
 /*  9110 */   907,   90,  907,  147,  907,  907,   40,  907,  638,  696,
 /*  9120 */   695,  907,  907,  224,  907,  365,  375,  378,  632,  625,
 /*  9130 */   624,  907,  907,  779,  623,  622,  626,  162,  629,  135,
 /*  9140 */   132,  666,  347,  907,  907,  907,  907,  907,  907,  907,
 /*  9150 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  9160 */   907,  907,  241,  907,  907,  907,  907,  907,  907,  907,
 /*  9170 */   907,  907,  907,  114,  907,  907,  907,  907,  907,  907,
 /*  9180 */   907,  907,  907,  907,  907,  150,  907,  907,  186,  907,
 /*  9190 */   907,  133,  907,  907,  907,  907,  196,  907,  102,  159,
 /*  9200 */   103,  907,  713,  907,  207,  205,  670,   94,   91,  122,
 /*  9210 */    88,   89,  358,  907,  907,  377,  361,  419,  432,  907,
 /*  9220 */   907,  907,  907,  907,  698,  699,  703,  454,  700,  193,
 /*  9230 */   907,  392,  907,  907,  364,  907,  907,  224,  907,  365,
 /*  9240 */   375,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  9250 */   907,  907,  199,  907,  907,  907,  907,  907,  907,  907,
 /*  9260 */   907,  907,  907,  907,  907,  907,  907,  152,  907,  907,
 /*  9270 */   907,  907,  907,  907,  697,  907,  907,  907,  712,  907,
 /*  9280 */   907,  907,  907,  907,  907,  907,  907,   92,  907,  907,
 /*  9290 */    93,  907,  907,  143,  907,   90,  907,  147,  382,  907,
 /*  9300 */    40,  907,  907,  907,  907,  109,  907,  907,  907,  165,
 /*  9310 */   907,  907,  907,  172,  907,  907,  907,  273,  907,  907,
 /*  9320 */   907,  149,  907,  907,  907,  907,  907,  907,  697,  907,
 /*  9330 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  9340 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  9350 */   907,  907,  382,  907,  907,  907,  907,  114,  907,  109,
 /*  9360 */   907,  907,  907,  165,  907,  907,  907,  172,  907,  150,
 /*  9370 */   907,  907,  186,  907,  907,  133,  907,  907,  907,  907,
 /*  9380 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /*  9390 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /*  9400 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /*  9410 */   703,  454,  700,  193,  907,  392,  907,  907,  364,  907,
 /*  9420 */   907,  224,  907,  365,  375,  907,  907,  907,  907,  907,
 /*  9430 */   907,  907,  638,  696,  695,  907,  199,  224,  907,  365,
 /*  9440 */   375,  378,  632,  625,  624,  907,  907,  907,  623,  622,
 /*  9450 */   626,  162,  629,  135,  132,  666,  347,  907,  907,  907,
 /*  9460 */   907,  907,  712,  907,  907,  907,  907,  907,  907,  907,
 /*  9470 */   907,   92,  907,  907,   93,  907,  907,  143,  907,   90,
 /*  9480 */   907,  147,  907,  907,   40,  907,  638,  696,  695,  907,
 /*  9490 */   907,  224,  907,  365,  375,  378,  632,  625,  624,  907,
 /*  9500 */   907,  676,  623,  622,  626,  162,  629,  135,  132,  666,
 /*  9510 */   347,  907,  907,  907,  907,  907,  907,  370,  907,  907,
 /*  9520 */   907,  907,  907,  907,  907,  348,  424,  334,  354,  340,
 /*  9530 */   391,  329,  427,  422,  383,  907,  907,  907,  389,  362,
 /*  9540 */   344,  114,  396,  345,  907,  412,  410,  406,  408,  907,
 /*  9550 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /*  9560 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /*  9570 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /*  9580 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /*  9590 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /*  9600 */   907,  907,  364,  907,  907,  224,  907,  365,  375,  907,
 /*  9610 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  9620 */   199,  907,  370,  907,  907,  907,  907,  907,  907,  907,
 /*  9630 */   348,  424,  334,  354,  340,  391,  329,  427,  422,  907,
 /*  9640 */   907,  907,  697,  389,  362,  344,  712,  396,  345,  907,
 /*  9650 */   412,  410,  406,  408,  907,   92,  907,  907,   93,  907,
 /*  9660 */   907,  143,  907,   90,  907,  147,  261,  907,   40,  907,
 /*  9670 */   907,  376,  907,  109,  907,  370,  907,  165,  907,  907,
 /*  9680 */   907,  172,  907,  907,  907,  809,  907,  907,  907,  907,
 /*  9690 */   907,  907,  907,  907,  907,  398,  907,  362,  344,  907,
 /*  9700 */   396,  345,  907,  412,  410,  406,  408,  355,  907,  907,
 /*  9710 */   907,  907,  327,  397,  416,  400,  907,  907,  331,  328,
 /*  9720 */   430,  429,  428,  420,  907,  114,  907,  907,  907,  907,
 /*  9730 */   907,  907,  907,  907,  907,  907,  907,  150,  907,  907,
 /*  9740 */   186,  907,  907,  133,  907,  907,  907,  907,  196,  907,
 /*  9750 */   102,  159,  103,  907,  713,  907,  207,  205,  670,   94,
 /*  9760 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /*  9770 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /*  9780 */   700,  193,  907,  392,  907,  907,  364,  907,  907,  224,
 /*  9790 */   907,  365,  375,  907,  907,  907,  907,  907,  907,  907,
 /*  9800 */   638,  696,  695,  907,  199,  224,  907,  365,  375,  907,
 /*  9810 */   907,  907,  907,  907,  907,  907,  623,  622,  626,  162,
 /*  9820 */   629,  135,  132,  666,  347,  907,  907,  907,  907,  907,
 /*  9830 */   712,  907,  907,  907,  907,  907,  907,  907,  907,   92,
 /*  9840 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /*  9850 */   907,  907,   40,  907,  907,  376,  907,  907,  907,  370,
 /*  9860 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  790,
 /*  9870 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  398,
 /*  9880 */   907,  362,  344,  907,  396,  345,  907,  412,  410,  406,
 /*  9890 */   408,  907,  907,  907,  907,  907,  327,  397,  416,  400,
 /*  9900 */   907,  907,  331,  328,  430,  429,  428,  420,  907,  114,
 /*  9910 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /*  9920 */   907,  150,  907,  907,  186,  907,  907,  133,  907,  907,
 /*  9930 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /*  9940 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /*  9950 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /*  9960 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /*  9970 */   364,  907,  907,  224,  907,  365,  375,  907,  907,  907,
 /*  9980 */   907,  907,  907,  907,  907,  907,  907,  907,  199,  907,
 /*  9990 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10000 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10010 */   907,  907,  907,  907,  712,  907,  907,  907,  907,  907,
 /* 10020 */   907,  907,  907,   92,  907,  907,   93,  907,  907,  143,
 /* 10030 */   907,   90,  907,  147,  907,  907,   40,  907,  907,  907,
 /* 10040 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10050 */   907,  907,  907,  780,  907,  907,  907,  907,  907,  907,
 /* 10060 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10070 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10080 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10090 */   907,  907,  907,  114,  907,  907,  907,  907,  907,  907,
 /* 10100 */   907,  907,  907,  907,  907,  150,  907,  907,  186,  907,
 /* 10110 */   907,  133,  907,  907,  907,  907,  196,  907,  102,  159,
 /* 10120 */   103,  907,  713,  907,  207,  205,  670,   94,   91,  122,
 /* 10130 */    88,   89,  358,  907,  907,  377,  361,  419,  432,  907,
 /* 10140 */   907,  907,  907,  907,  698,  699,  703,  454,  700,  193,
 /* 10150 */   907,  392,  907,  907,  364,  907,  907,  224,  907,  365,
 /* 10160 */   375,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10170 */   907,  907,  199,  907,  907,  907,  907,  907,  907,  907,
 /* 10180 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10190 */   907,  907,  907,  907,  907,  907,  907,  907,  712,  907,
 /* 10200 */   907,  907,  907,  907,  907,  907,  907,   92,  907,  907,
 /* 10210 */    93,  907,  907,  143,  907,   90,  907,  147,  907,  907,
 /* 10220 */    40,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10230 */   907,  907,  907,  907,  907,  907,  907,  791,  907,  907,
 /* 10240 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10250 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10260 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10270 */   907,  907,  907,  907,  907,  907,  907,  114,  907,  907,
 /* 10280 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  150,
 /* 10290 */   907,  907,  186,  907,  907,  133,  907,  907,  907,  907,
 /* 10300 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /* 10310 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /* 10320 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /* 10330 */   703,  454,  700,  193,  907,  392,  907,  907,  364,  907,
 /* 10340 */   907,  224,  907,  365,  375,  907,  907,  907,  907,  907,
 /* 10350 */   907,  907,  907,  907,  907,  907,  199,  907,  907,  907,
 /* 10360 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10370 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10380 */   907,  907,  712,  907,  907,  907,  907,  907,  907,  907,
 /* 10390 */   907,   92,  907,  907,   93,  907,  907,  143,  907,   90,
 /* 10400 */   907,  147,  907,  907,   40,  907,  907,  907,  907,  907,
 /* 10410 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10420 */   907,  800,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10430 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10440 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10450 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10460 */   907,  114,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10470 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /* 10480 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /* 10490 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /* 10500 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /* 10510 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /* 10520 */   907,  907,  364,  907,  907,  224,  907,  365,  375,  907,
 /* 10530 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10540 */   199,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10550 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10560 */   907,  907,  907,  907,  907,  907,  712,  907,  907,  907,
 /* 10570 */   907,  907,  907,  907,  907,   92,  907,  907,   93,  907,
 /* 10580 */   907,  143,  907,   90,  907,  147,  907,  907,   40,  907,
 /* 10590 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10600 */   907,  907,  907,  907,  907,  792,  907,  907,  907,  907,
 /* 10610 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10620 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10630 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10640 */   907,  907,  907,  907,  907,  114,  907,  907,  907,  907,
 /* 10650 */   907,  907,  907,  907,  907,  907,  907,  150,  907,  907,
 /* 10660 */   186,  907,  907,  133,  907,  907,  907,  907,  196,  907,
 /* 10670 */   102,  159,  103,  907,  713,  907,  207,  205,  670,   94,
 /* 10680 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /* 10690 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /* 10700 */   700,  193,  907,  392,  907,  907,  364,  907,  907,  224,
 /* 10710 */   907,  365,  375,  907,  907,  907,  907,  907,  907,  907,
 /* 10720 */   907,  907,  907,  907,  199,  907,  907,  907,  907,  907,
 /* 10730 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10740 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10750 */   712,  907,  907,  907,  907,  907,  907,  907,  907,   92,
 /* 10760 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /* 10770 */   907,  907,   40,  907,  907,  907,  907,  907,  907,  907,
 /* 10780 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  794,
 /* 10790 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10800 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10810 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10820 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  114,
 /* 10830 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10840 */   907,  150,  907,  907,  186,  907,  907,  133,  907,  907,
 /* 10850 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /* 10860 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /* 10870 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /* 10880 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /* 10890 */   364,  907,  907,  224,  907,  365,  375,  907,  907,  907,
 /* 10900 */   907,  907,  907,  907,  907,  907,  907,  907,  199,  907,
 /* 10910 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10920 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10930 */   907,  907,  907,  907,  712,  907,  907,  907,  907,  907,
 /* 10940 */   907,  907,  907,   92,  907,  907,   93,  907,  907,  143,
 /* 10950 */   907,   90,  907,  147,  907,  907,   40,  907,  907,  907,
 /* 10960 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10970 */   907,  907,  907,  793,  907,  907,  907,  907,  907,  907,
 /* 10980 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 10990 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11000 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11010 */   907,  907,  907,  114,  907,  907,  907,  907,  907,  907,
 /* 11020 */   907,  907,  907,  907,  907,  150,  907,  907,  186,  907,
 /* 11030 */   907,  133,  907,  907,  907,  907,  196,  907,  102,  159,
 /* 11040 */   103,  907,  713,  907,  207,  205,  670,   94,   91,  122,
 /* 11050 */    88,   89,  358,  907,  907,  377,  361,  419,  432,  907,
 /* 11060 */   907,  907,  907,  907,  698,  699,  703,  454,  700,  193,
 /* 11070 */   907,  392,  907,  907,  364,  907,  907,  224,  907,  365,
 /* 11080 */   375,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11090 */   907,  907,  199,  907,  907,  907,  907,  907,  907,  907,
 /* 11100 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11110 */   907,  907,  907,  907,  907,  907,  907,  907,  712,  907,
 /* 11120 */   907,  907,  907,  907,  907,  907,  907,   92,  907,  907,
 /* 11130 */    93,  907,  907,  143,  907,   90,  907,  147,  907,  907,
 /* 11140 */    40,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11150 */   907,  907,  907,  907,  907,  907,  907,  808,  907,  907,
 /* 11160 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11170 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11180 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11190 */   907,  907,  907,  907,  907,  907,  907,  114,  907,  907,
 /* 11200 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  150,
 /* 11210 */   907,  907,  186,  907,  907,  133,  907,  907,  907,  907,
 /* 11220 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /* 11230 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /* 11240 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /* 11250 */   703,  454,  700,  193,  907,  392,  907,  907,  364,  907,
 /* 11260 */   907,  224,  907,  365,  375,  907,  907,  907,  907,  907,
 /* 11270 */   907,  907,  907,  907,  907,  907,  199,  907,  907,  907,
 /* 11280 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11290 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11300 */   907,  907,  712,  907,  907,  907,  907,  907,  907,  907,
 /* 11310 */   907,   92,  907,  907,   93,  907,  907,  143,  907,   90,
 /* 11320 */   907,  147,  907,  907,   40,  907,  907,  907,  907,  907,
 /* 11330 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11340 */   907,  810,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11350 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11360 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11370 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11380 */   907,  114,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11390 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /* 11400 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /* 11410 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /* 11420 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /* 11430 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /* 11440 */   907,  907,  364,  907,  907,  224,  907,  365,  375,  907,
 /* 11450 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11460 */   199,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11470 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11480 */   907,  907,  907,  907,  907,  907,  712,  907,  907,  907,
 /* 11490 */   907,  907,  907,  907,  907,   92,  907,  907,   93,  907,
 /* 11500 */   907,  143,  907,   90,  907,  147,  907,  907,   40,  907,
 /* 11510 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11520 */   907,  907,  907,  907,  907,  693,  907,  907,  907,  907,
 /* 11530 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11540 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11550 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11560 */   907,  907,  907,  907,  907,  114,  907,  907,  907,  907,
 /* 11570 */   907,  907,  907,  907,  907,  907,  907,  150,  907,  907,
 /* 11580 */   186,  907,  907,  133,  907,  907,  907,  907,  196,  907,
 /* 11590 */   102,  159,  103,  907,  713,  907,  207,  205,  670,   94,
 /* 11600 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /* 11610 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /* 11620 */   700,  193,  907,  392,  907,  907,  364,  907,  907,  224,
 /* 11630 */   907,  365,  375,  907,  907,  907,  907,  907,  907,  907,
 /* 11640 */   907,  907,  907,  907,  199,  907,  907,  907,  907,  907,
 /* 11650 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11660 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11670 */   712,  907,  907,  907,  907,  907,  907,  907,  907,   92,
 /* 11680 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /* 11690 */   907,  907,   40,  907,  907,  907,  907,  907,  907,  907,
 /* 11700 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  714,
 /* 11710 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11720 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11730 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11740 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  114,
 /* 11750 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11760 */   907,  150,  907,  907,  186,  907,  907,  133,  907,  907,
 /* 11770 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /* 11780 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /* 11790 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /* 11800 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /* 11810 */   364,  907,  907,  224,  907,  365,  375,  907,  907,  907,
 /* 11820 */   907,  907,  907,  907,  907,  907,  907,  907,  199,  907,
 /* 11830 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11840 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11850 */   907,  907,  907,  907,  712,  907,  907,  907,  907,  907,
 /* 11860 */   907,  907,  907,   92,  907,  907,   93,  907,  907,  143,
 /* 11870 */   907,   90,  907,  147,  907,  907,   40,  907,  907,  907,
 /* 11880 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11890 */   907,  907,  907,  801,  907,  907,  907,  907,  907,  907,
 /* 11900 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11910 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11920 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 11930 */   907,  907,  907,  114,  907,  907,  907,  907,  907,  907,
 /* 11940 */   907,  907,  907,  907,  907,  150,  907,  907,  186,  907,
 /* 11950 */   907,  133,  907,  907,  907,  907,  196,  907,  102,  159,
 /* 11960 */   103,  907,  713,  907,  207,  205,  670,   94,   91,  122,
 /* 11970 */    88,   89,  358,  907,  907,  377,  361,  419,  432,  907,
 /* 11980 */   907,  907,  907,  907,  698,  699,  703,  454,  700,  193,
 /* 11990 */   907,  392,  907,  907,  364,  907,  907,  224,  907,  365,
 /* 12000 */   375,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12010 */   907,  907,  199,  907,  907,  907,  907,  907,  907,  907,
 /* 12020 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12030 */   907,  907,  907,  907,  907,  907,  907,  907,  712,  907,
 /* 12040 */   907,  907,  907,  907,  907,  907,  907,   92,  907,  907,
 /* 12050 */    93,  907,  907,  143,  907,   90,  907,  147,  907,  907,
 /* 12060 */    40,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12070 */   907,  907,  907,  907,  907,  907,  907,  246,  907,  907,
 /* 12080 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12090 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12100 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12110 */   907,  907,  907,  907,  907,  907,  907,  114,  907,  907,
 /* 12120 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  150,
 /* 12130 */   907,  907,  186,  907,  907,  133,  907,  907,  907,  907,
 /* 12140 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /* 12150 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /* 12160 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /* 12170 */   703,  454,  700,  193,  907,  392,  907,  907,  364,  907,
 /* 12180 */   907,  224,  907,  365,  375,  907,  907,  907,  907,  907,
 /* 12190 */   907,  907,  907,  907,  907,  907,  199,  907,  907,  907,
 /* 12200 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12210 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12220 */   907,  907,  712,  907,  907,  907,  907,  907,  907,  907,
 /* 12230 */   907,   92,  907,  907,   93,  907,  907,  143,  907,   90,
 /* 12240 */   907,  147,  907,  907,   40,  907,  907,  907,  907,  907,
 /* 12250 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12260 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12270 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12280 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12290 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12300 */   907,  156,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12310 */   907,  907,  907,  150,  907,  907,  186,  907,  907,  133,
 /* 12320 */   907,  907,  907,  907,  196,  907,  102,  159,  103,  907,
 /* 12330 */   713,  907,  207,  205,  670,   94,   91,  122,   88,   89,
 /* 12340 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /* 12350 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /* 12360 */   907,  907,  364,  907,  907,  224,  907,  365,  375,  907,
 /* 12370 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12380 */   199,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12390 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12400 */   907,  907,  907,  907,  907,  907,  712,  907,  907,  907,
 /* 12410 */   907,  907,  907,  907,  907,   92,  907,  907,   93,  907,
 /* 12420 */   907,  143,  907,   90,  907,  147,  907,  907,   40,  907,
 /* 12430 */   907,  907,  364,  907,  907,  907,  907,  907,  907,  907,
 /* 12440 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12450 */   199,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12460 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12470 */   907,  907,  907,  907,  907,  907,  712,  907,  907,  907,
 /* 12480 */   907,  907,  907,  907,  907,   92,  907,  907,   93,  907,
 /* 12490 */   907,  143,  907,   90,  907,  147,  907,  153,   40,  907,
 /* 12500 */   186,  907,  907,  133,  907,  907,  907,  907,  196,  907,
 /* 12510 */   102,  159,  103,  907,  713,  907,  207,  205,  670,   94,
 /* 12520 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /* 12530 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /* 12540 */   700,  193,  907,  392,  907,  907,  907,  907,  907,  224,
 /* 12550 */   907,  365,  375,  907,  907,  907,  907,  907,  907,  907,
 /* 12560 */   907,  907,  907,  907,  907,  907,  907,  158,  907,  907,
 /* 12570 */   186,  907,  907,  133,  907,  907,  907,  907,  196,  907,
 /* 12580 */   102,  159,  103,  907,  713,  907,  207,  205,  670,   94,
 /* 12590 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /* 12600 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /* 12610 */   700,  193,  907,  392,  907,  907,  364,  907,  907,  224,
 /* 12620 */   907,  365,  375,  907,  907,  907,  907,  907,  907,  907,
 /* 12630 */   907,  907,  907,  907,  199,  907,  907,  907,  907,  907,
 /* 12640 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12650 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12660 */   712,  907,  907,  907,  907,  907,  907,  907,  907,   92,
 /* 12670 */   364,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /* 12680 */   907,  907,   40,  907,  907,  907,  907,  907,  199,  907,
 /* 12690 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12700 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12710 */   907,  907,  907,  907,  712,  907,  907,  907,  907,  907,
 /* 12720 */   907,  907,  907,   92,  907,  907,   93,  907,  907,  143,
 /* 12730 */   907,   90,  907,  147,  907,  907,   40,  907,  907,  907,
 /* 12740 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12750 */   907,  907,  907,  907,  184,  907,  907,  133,  907,  907,
 /* 12760 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /* 12770 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /* 12780 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /* 12790 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /* 12800 */   907,  907,  907,  224,  907,  365,  375,  907,  194,  907,
 /* 12810 */   907,  133,  907,  907,  907,  907,  196,  907,  102,  159,
 /* 12820 */   103,  907,  713,  907,  207,  205,  670,   94,   91,  122,
 /* 12830 */    88,   89,  358,  907,  907,  377,  361,  419,  432,  907,
 /* 12840 */   907,  907,  907,  907,  698,  699,  703,  454,  700,  193,
 /* 12850 */   907,  392,  907,  907,  364,  907,  907,  224,  907,  365,
 /* 12860 */   375,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12870 */   907,  907,  199,  907,  907,  907,  907,  907,  907,  907,
 /* 12880 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12890 */   907,  907,  907,  907,  907,  907,  907,  907,  712,  907,
 /* 12900 */   907,  907,  907,  907,  907,  907,  907,   92,  907,  907,
 /* 12910 */    93,  907,  907,  143,  907,   90,  907,  147,  907,  907,
 /* 12920 */    40,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12930 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12940 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12950 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12960 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12970 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12980 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 12990 */   907,  907,  173,  907,  907,  133,  907,  907,  907,  907,
 /* 13000 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /* 13010 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /* 13020 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /* 13030 */   703,  454,  700,  193,  907,  392,  907,  907,  376,  907,
 /* 13040 */   907,  224,  370,  365,  375,  907,  907,  907,  305,  907,
 /* 13050 */   348,  424,  334,  354,  340,  391,  329,  427,  422,  907,
 /* 13060 */   907,  907,  398,  389,  362,  344,  907,  396,  345,  907,
 /* 13070 */   412,  410,  406,  408,  907,  907,  907,  907,  907,  327,
 /* 13080 */   397,  416,  400,  907,  907,  331,  328,  430,  429,  428,
 /* 13090 */   420,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13100 */   907,  907,  907,  907,  907,  907,  907,  907,  301,  268,
 /* 13110 */   302,  304,  303,  312,  313,  907,  907,  907,  376,  907,
 /* 13120 */   907,  907,  370,  907,  907,  907,  907,  907,  907,  907,
 /* 13130 */   348,  424,  334,  354,  340,  391,  329,  427,  422,  907,
 /* 13140 */   907,  907,  398,  389,  362,  344,  907,  396,  345,  907,
 /* 13150 */   412,  410,  406,  408,  907,  907,  907,  907,  907,  327,
 /* 13160 */   397,  416,  400,  907,  907,  331,  328,  430,  429,  428,
 /* 13170 */   420,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13180 */   907,  907,  907,  907,  907,  907,  907,  907,  301,  268,
 /* 13190 */   302,  304,  303,  312,  313,  907,  907,  907,  907,  376,
 /* 13200 */   907,  907,  386,  370,  907,  907,  907,  907,  907,  907,
 /* 13210 */   907,  348,  424,  334,  354,  340,  391,  329,  427,  422,
 /* 13220 */   907,  907,  907,  398,  389,  362,  344,  907,  396,  345,
 /* 13230 */   907,  412,  410,  406,  408,  907,  907,  907,  907,  907,
 /* 13240 */   327,  397,  416,  400,  907,  907,  331,  328,  430,  429,
 /* 13250 */   428,  420,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13260 */   907,  364,  907,  907,  907,  907,  907,  907,  907,  301,
 /* 13270 */   268,  302,  304,  303,  312,  313,  907,  907,  218,  907,
 /* 13280 */   907,  907,  907,  907,  907,  697,  907,  907,  716,  907,
 /* 13290 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13300 */   907,  907,  907,  907,  907,  653,  907,  907,  907,  382,
 /* 13310 */   907,  907,  907,  907,  907,  907,  109,  907,  907,  907,
 /* 13320 */   142,  907,  907,  907,  145,  907,  907,   48,  907,  907,
 /* 13330 */   364,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13340 */   907,  907,  907,  907,  907,  907,  907,  907,  199,  907,
 /* 13350 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13360 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13370 */   907,  907,  907,  907,  712,  907,  907,  907,  907,  907,
 /* 13380 */   907,  907,  907,   92,  907,  907,   93,  907,  907,  143,
 /* 13390 */   907,   90,  907,  147,  907,  907,   40,  907,  907,  907,
 /* 13400 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13410 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13420 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13430 */   907,  907,  907,  907,  907,  698,  699,  703,  454,  700,
 /* 13440 */   193,  907,  392,  638,  696,  695,  907,  907,  224,  907,
 /* 13450 */   365,  375,  378,  632,  625,  624,  164,  907,  781,  623,
 /* 13460 */   622,  626,  162,  629,  135,  132,  666,  347,  907,  907,
 /* 13470 */   907,  131,  907,  907,  907,  907,  196,  907,  102,  159,
 /* 13480 */   103,  907,  713,  907,  207,  205,  670,   94,   91,  122,
 /* 13490 */    88,   89,  358,  907,  907,  377,  361,  419,  432,  907,
 /* 13500 */   907,  907,  907,  907,  698,  699,  703,  454,  700,  193,
 /* 13510 */   907,  392,  907,  907,  364,  907,  907,  224,  907,  365,
 /* 13520 */   375,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13530 */   907,  907,  199,  907,  907,  907,  907,  907,  907,  907,
 /* 13540 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13550 */   907,  907,  907,  907,  907,  907,  907,  907,  712,  907,
 /* 13560 */   907,  907,  907,  907,  907,  907,  364,   92,  907,  907,
 /* 13570 */    93,  907,  907,  143,  907,   90,  907,  147,  907,  907,
 /* 13580 */    40,  907,  907,  907,  180,  907,  907,  766,  907,  907,
 /* 13590 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13600 */   907,  907,  907,  907,  161,  907,  907,  907,  907,  907,
 /* 13610 */   712,  697,  907,  907,  907,  907,  907,  907,  907,   92,
 /* 13620 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /* 13630 */   907,  907,   40,  907,  907,  382,  320,  907,  907,  907,
 /* 13640 */   141,  907,  107,  138,  907,  907,  165,  907,  907,  907,
 /* 13650 */   172,  907,  907,  907,  907,  134,  726,  907,  907,  907,
 /* 13660 */   196,  907,  102,  159,  103,  907,  713,  907,  207,  205,
 /* 13670 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /* 13680 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /* 13690 */   703,  454,  700,  193,  907,  392,  907,  907,  907,  907,
 /* 13700 */   907,  224,  907,  365,  375,  907,  907,  907,  907,  907,
 /* 13710 */   907,  907,  196,  907,  102,  159,  103,  907,  713,  907,
 /* 13720 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /* 13730 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /* 13740 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /* 13750 */   364,  907,  907,  224,  907,  365,  375,  907,  907,  768,
 /* 13760 */   775,  907,  907,  907,  907,  907,  907,  907,  206,  638,
 /* 13770 */   696,  695,  907,  907,  224,  907,  365,  375,  378,  632,
 /* 13780 */   625,  624,  907,  907,  907,  623,  622,  626,  162,  629,
 /* 13790 */   135,  132,  666,  347,  712,  907,  907,  364,  907,  907,
 /* 13800 */   907,  907,  907,   92,  907,  907,   93,  907,  907,  143,
 /* 13810 */   907,   90,  907,  147,  907,  209,   40,  907,  907,  907,
 /* 13820 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13830 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13840 */   907,  712,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13850 */    92,  907,  907,   93,  907,  907,  143,  907,   90,  907,
 /* 13860 */   147,  907,  907,   40,  907,  907,  907,  907,  907,  907,
 /* 13870 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13880 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 13890 */   907,  907,  907,  907,  907,  907,  196,  907,  102,  159,
 /* 13900 */   103,  907,  713,  907,  207,  205,  670,   94,   91,  122,
 /* 13910 */    88,   89,  358,  907,  907,  377,  361,  419,  432,  907,
 /* 13920 */   907,  907,  907,  907,  698,  699,  703,  454,  700,  193,
 /* 13930 */   907,  392,  907,  907,  907,  907,  907,  224,  907,  365,
 /* 13940 */   375,  907,  907,  196,  907,  102,  159,  103,  907,  713,
 /* 13950 */   907,  207,  205,  670,   94,   91,  122,   88,   89,  358,
 /* 13960 */   907,  907,  377,  361,  419,  432,  907,  907,  907,  907,
 /* 13970 */   907,  698,  699,  703,  454,  700,  193,  907,  392,  907,
 /* 13980 */   907,  364,  907,  907,  224,  907,  365,  375,  907,  907,
 /* 13990 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  187,
 /* 14000 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14010 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14020 */   907,  907,  907,  907,  907,  712,  907,  364,  907,  907,
 /* 14030 */   907,  907,  907,  907,   92,  907,  907,   93,  907,  907,
 /* 14040 */   143,  907,   90,  907,  147,  907,  907,   40,  907,  907,
 /* 14050 */   907,  907,  907,  907,  907,  907,  907,  907,  364,  907,
 /* 14060 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14070 */   907,  712,  907,  907,  907,  215,  907,  907,  907,  907,
 /* 14080 */    92,  907,  697,   93,  907,  907,  143,  907,   90,  907,
 /* 14090 */   147,  907,  907,   40,  907,  907,  907,  907,  907,  907,
 /* 14100 */   907,  907,  652,  907,  907,  907,  382,  907,  907,  907,
 /* 14110 */   907,  907,  907,  109,  907,  907,  907,  142,  907,  907,
 /* 14120 */   907,  145,  907,  907,   48,  907,  907,  196,  907,  102,
 /* 14130 */   159,  103,  907,  713,  907,  207,  205,  670,   94,   91,
 /* 14140 */   122,   88,   89,  358,  907,  907,  377,  361,  419,  432,
 /* 14150 */   907,  907,  907,  907,  907,  698,  699,  703,  454,  700,
 /* 14160 */   193,  907,  392,  907,  907,  364,  907,  907,  224,  907,
 /* 14170 */   365,  375,  907,  189,  907,  102,  159,  103,  907,  713,
 /* 14180 */   907,  207,  205,  670,   94,   91,  122,   88,   89,  358,
 /* 14190 */   907,  907,  377,  361,  419,  432,  907,  907,  907,  907,
 /* 14200 */   907,  698,  699,  703,  454,  700,  193,  907,  392,  712,
 /* 14210 */   907,  907,  907,  907,  224,  907,  365,  375,   92,  907,
 /* 14220 */   907,   93,  907,  907,  143,  907,   90,  907,  147,  907,
 /* 14230 */   907,   40,  698,  699,  703,  454,  700,  193,  907,  392,
 /* 14240 */   638,  696,  695,  907,  364,  224,  907,  365,  375,  378,
 /* 14250 */   632,  625,  624,  907,  907,  907,  623,  622,  626,  162,
 /* 14260 */   629,  135,  132,  666,  347,  907,  907,  907,  907,  907,
 /* 14270 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14280 */   907,  907,  907,  907,  907,  907,  907,  907,  712,  907,
 /* 14290 */   907,  907,  907,  907,  907,  907,  907,   92,  907,  907,
 /* 14300 */    93,  907,  907,  143,  907,   90,  907,  147,  907,  907,
 /* 14310 */    40,  204,  364,  102,  159,  103,  907,  713,  907,  207,
 /* 14320 */   205,  670,   94,   91,  122,   88,   89,  358,  907,  154,
 /* 14330 */   377,  361,  419,  432,  907,  907,  697,  907,  907,  698,
 /* 14340 */   699,  703,  454,  700,  193,  907,  392,  907,  907,  907,
 /* 14350 */   907,  907,  224,  907,  365,  375,  394,  907,  907,  907,
 /* 14360 */   382,  907,  907,  907,  907,  907,  907,  109,  907,  907,
 /* 14370 */   907,  142,  907,  907,  907,  145,  907,  907,   48,  907,
 /* 14380 */   907,  907,  364,  907,  907,  907,  907,  907,  907,  907,
 /* 14390 */   907,  907,  102,  163,  103,  907,  713,  907,  207,  205,
 /* 14400 */   670,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /* 14410 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /* 14420 */   703,  454,  700,  193,  907,  392,  712,  907,  907,  907,
 /* 14430 */   907,  224,  907,  365,  375,   92,  907,  907,   93,  907,
 /* 14440 */   907,  143,  907,   90,  907,  147,  907,  907,   40,  907,
 /* 14450 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14460 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14470 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14480 */   907,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /* 14490 */   700,  193,  907,  392,  638,  696,  695,  907,  907,  224,
 /* 14500 */   907,  365,  375,  378,  632,  625,  624,  907,  907,  907,
 /* 14510 */   623,  622,  626,  162,  629,  135,  132,  666,  347,  907,
 /* 14520 */   907,  907,  907,  364,  907,  907,  907,  907,  907,  907,
 /* 14530 */   102,  160,  103,  907,  713,  907,  207,  205,  670,   94,
 /* 14540 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /* 14550 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /* 14560 */   700,  193,  907,  392,  907,  907,  364,  712,  907,  224,
 /* 14570 */   907,  365,  375,  907,  907,  907,   92,  907,  907,   93,
 /* 14580 */   907,  907,  143,  907,   90,  907,  147,  907,  907,   40,
 /* 14590 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14600 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14610 */   712,  907,  907,  907,  907,  907,  907,  907,  907,   92,
 /* 14620 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /* 14630 */   907,  907,   40,  907,  907,  907,  907,  907,  907,  907,
 /* 14640 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14650 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14660 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14670 */   907,  102,  907,  103,  907,  692,  907,  207,  205,  670,
 /* 14680 */    94,   91,  122,   88,   89,  358,  907,  907,  377,  361,
 /* 14690 */   419,  432,  907,  907,  907,  907,  907,  698,  699,  703,
 /* 14700 */   454,  700,  193,  907,  392,  907,  907,  364,  907,  907,
 /* 14710 */   224,  907,  365,  375,  102,  907,  103,  907,  681,  907,
 /* 14720 */   207,  205,  670,   94,   91,  122,   88,   89,  358,  907,
 /* 14730 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /* 14740 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /* 14750 */   766,  712,  907,  224,  907,  365,  375,  907,  907,  907,
 /* 14760 */    92,  907,  907,   93,  907,  907,  143,  161,   90,  907,
 /* 14770 */   147,  907,  907,   40,  697,  907,  907,  907,  907,  907,
 /* 14780 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14790 */   907,  907,  907,  907,  907,  907,  907,  907,  382,  320,
 /* 14800 */   907,  907,  907,  141,  907,  107,  138,  907,  907,  165,
 /* 14810 */   907,  907,  907,  172,  907,  907,  907,  723,  183,  724,
 /* 14820 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14830 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14840 */   907,  907,  907,  907,  907,  364,  907,  907,  907,  907,
 /* 14850 */   907,  907,  907,  907,  907,  102,  907,  103,  907,  709,
 /* 14860 */   907,  207,  205,  670,   94,   91,  122,   88,   89,  358,
 /* 14870 */   907,  907,  377,  361,  419,  432,  907,  907,  907,  907,
 /* 14880 */   907,  698,  699,  703,  454,  700,  193,  907,  392,  712,
 /* 14890 */   907,  907,  907,  907,  224,  907,  365,  375,   92,  907,
 /* 14900 */   907,   93,  907,  907,  143,  907,   90,  907,  147,  907,
 /* 14910 */   907,   40,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14920 */   907,  907,  768,  775,  907,  907,  907,  907,  907,  907,
 /* 14930 */   907,  907,  638,  696,  695,  907,  907,  224,  907,  365,
 /* 14940 */   375,  378,  632,  625,  624,  907,  907,  907,  623,  622,
 /* 14950 */   626,  162,  629,  135,  132,  666,  347,  907,  907,  907,
 /* 14960 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14970 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 14980 */   907,  907,  907,  907,  907,  907,  364,  907,  907,  907,
 /* 14990 */   907,  907,  907,  102,  907,  103,  907,  907,  907,  335,
 /* 15000 */   336,  677,   94,   91,  122,   88,   89,  358,  907,  907,
 /* 15010 */   377,  361,  419,  432,  907,  907,  907,  907,  907,  698,
 /* 15020 */   699,  703,  454,  700,  193,  907,  392,  907,  907,  364,
 /* 15030 */   712,  907,  224,  907,  365,  375,  907,  907,  907,   92,
 /* 15040 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /* 15050 */   907,  907,   40,  907,  907,  907,  907,  907,  907,  907,
 /* 15060 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15070 */   907,  907,  364,  712,  907,  907,  907,  907,  907,  907,
 /* 15080 */   907,  907,   92,  907,  907,   93,  907,  907,  143,  907,
 /* 15090 */    90,  907,  147,  907,  907,   40,  907,  907,  907,  907,
 /* 15100 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15110 */   907,  907,  907,  907,  907,  907,  712,  907,  907,  907,
 /* 15120 */   907,  907,  907,  907,  907,   92,  907,  907,   93,  907,
 /* 15130 */   907,  143,  907,   90,  102,  147,  103,  907,   40,  907,
 /* 15140 */   335,  336,  708,   94,   91,  122,   88,   89,  358,  907,
 /* 15150 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /* 15160 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /* 15170 */   907,  907,  907,  224,  907,  365,  375,  102,  907,  103,
 /* 15180 */   907,  907,  907,  335,  336,  707,   94,   91,  122,   88,
 /* 15190 */    89,  358,  907,  907,  377,  361,  419,  432,  907,  907,
 /* 15200 */   907,  907,  907,  698,  699,  703,  454,  700,  193,  907,
 /* 15210 */   392,  907,  907,  364,  907,  907,  224,  907,  365,  375,
 /* 15220 */   102,  907,  103,  907,  907,  907,  335,  336,  678,   94,
 /* 15230 */    91,  122,   88,   89,  358,  907,  907,  377,  361,  419,
 /* 15240 */   432,  907,  907,  907,  907,  907,  698,  699,  703,  454,
 /* 15250 */   700,  193,  907,  392,  907,  907,  364,  712,  907,  224,
 /* 15260 */   907,  365,  375,  907,  907,  907,   92,  907,  907,   93,
 /* 15270 */   907,  907,  143,  907,   90,  907,  147,  907,  907,   40,
 /* 15280 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15290 */   907,  907,  907,  907,  364,  907,  907,  907,  907,  907,
 /* 15300 */   712,  907,  907,  907,  907,  907,  907,  907,  907,   92,
 /* 15310 */   907,  907,   93,  907,  907,  143,  907,   90,  907,  147,
 /* 15320 */   907,  907,   40,  907,  907,  907,  907,  907,  907,  907,
 /* 15330 */   907,  907,  907,  907,  907,  907,  907,  907,  712,  907,
 /* 15340 */   907,  907,  907,  907,  907,  907,  907,   92,  907,  907,
 /* 15350 */    93,  907,  907,  126,  907,   90,  907,  147,  907,  907,
 /* 15360 */    40,  102,  907,  103,  907,  907,  907,  335,  336,  674,
 /* 15370 */    94,   91,  122,   88,   89,  358,  907,  907,  377,  361,
 /* 15380 */   419,  432,  907,  907,  907,  907,  907,  698,  699,  703,
 /* 15390 */   454,  700,  193,  907,  392,  907,  907,  907,  907,  907,
 /* 15400 */   224,  907,  365,  375,  102,  907,  103,  907,  907,  907,
 /* 15410 */   335,  336,  675,   94,   91,  122,   88,   89,  358,  907,
 /* 15420 */   907,  377,  361,  419,  432,  907,  907,  907,  907,  907,
 /* 15430 */   698,  699,  703,  454,  700,  193,  907,  392,  907,  907,
 /* 15440 */   907,  907,  102,  224,  103,  365,  375,  907,  335,  336,
 /* 15450 */   677,   94,   91,  122,   88,   89,  358,  907,  907,  377,
 /* 15460 */   361,  419,  432,  907,  907,  907,  907,  907,  698,  699,
 /* 15470 */   703,  454,  700,  193,  907,  392,  907,  907,  364,  907,
 /* 15480 */   907,  224,  907,  365,  375,  907,  907,  907,  907,  907,
 /* 15490 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15500 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15510 */   907,  907,  907,  907,  907,  907,  907,  907,  364,  907,
 /* 15520 */   907,  907,  712,  907,  907,  907,  907,  907,  907,  907,
 /* 15530 */   907,   92,  907,  907,   93,  907,  907,  143,  907,   90,
 /* 15540 */   907,  147,  907,  907,   40,  907,  907,  907,  907,  907,
 /* 15550 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15560 */   907,  907,  712,  907,  907,  907,  907,  907,  907,  907,
 /* 15570 */   907,  907,  907,  907,  907,  907,  907,  143,  907,  907,
 /* 15580 */   907,  147,  907,  907,   48,  907,  907,  907,  907,  907,
 /* 15590 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15600 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15610 */   907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
 /* 15620 */   907,  907,  907,  907,  907,  907,  102,  907,  103,  907,
 /* 15630 */   907,  907,  335,  336,  679,   94,   91,  122,   88,   89,
 /* 15640 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /* 15650 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /* 15660 */   907,  907,  907,  907,  907,  224,  907,  365,  375,  907,
 /* 15670 */   907,  907,  335,  336,  907,  907,  907,  123,  907,  907,
 /* 15680 */   358,  907,  907,  377,  361,  419,  432,  907,  907,  907,
 /* 15690 */   907,  907,  698,  699,  703,  454,  700,  193,  907,  392,
 /* 15700 */   907,  907,  907,  907,  907,  224,  907,  365,  375,
    );
    static public $yy_lookahead = array(
 /*     0 */   127,  128,  129,  130,  131,   35,   49,  134,  135,   39,
 /*    10 */   137,  138,  139,  156,  141,  130,   23,   24,   25,   26,
 /*    20 */     5,  148,  149,    8,  151,  152,  153,  154,  155,   19,
 /*    30 */    60,  158,  159,  160,  161,  162,  163,  151,  152,  166,
 /*    40 */   167,  168,   33,   34,  158,  159,   37,  174,  175,  176,
 /*    50 */   135,  178,  204,  205,  206,  207,  183,   47,  185,  186,
 /*    60 */   130,   46,  189,   35,  191,  192,  193,   39,  195,  196,
 /*    70 */   185,  186,   19,  200,    9,  331,  332,  157,  108,  335,
 /*    80 */   336,  208,  209,  210,  211,  212,  213,  214,  215,  183,
 /*    90 */   217,  218,  219,  220,  221,  278,  223,  280,   33,   34,
 /*   100 */    47,  228,  229,   33,   39,  185,  186,  234,  235,   39,
 /*   110 */   237,  238,  239,  240,  241,  185,  186,  134,  245,  246,
 /*   120 */   247,  248,  249,  250,  251,  252,  253,  156,  157,   21,
 /*   130 */    22,   23,   24,   25,   26,   27,   28,   29,  265,  331,
 /*   140 */   180,  268,  130,  335,  271,  230,  231,  232,  233,  276,
 /*   150 */   190,  278,  279,  280,  171,  282,  196,  284,  285,  286,
 /*   160 */   287,  288,  289,  290,  291,  292,  126,  310,  295,  296,
 /*   170 */   297,  298,  315,  267,  109,  269,  186,  304,  305,  306,
 /*   180 */   307,  308,  309,  326,  311,  312,  313,  314,  303,  177,
 /*   190 */   317,  179,  319,  320,  182,  183,  184,  185,  186,  187,
 /*   200 */   188,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*   210 */   127,  128,  129,  130,  131,   64,   65,  134,  110,  122,
 /*   220 */   137,  138,  139,  156,  141,  117,  118,  119,  120,  135,
 /*   230 */   134,  148,  149,  303,  151,  152,  153,  154,  155,  243,
 /*   240 */    48,  158,  159,   30,  273,  274,   33,   34,   21,   22,
 /*   250 */    23,   24,   25,   26,   27,   28,   29,  174,  175,  176,
 /*   260 */   264,  178,  266,   58,   59,  130,  183,  186,  185,  186,
 /*   270 */   135,  281,  189,  283,  191,  192,  193,  181,  195,  196,
 /*   280 */    33,   89,   90,  200,  201,  202,  203,  204,  205,  206,
 /*   290 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  143,
 /*   300 */   217,  218,  219,  220,  221,  146,  223,  172,  173,   62,
 /*   310 */    63,  228,  229,  126,  302,  303,  126,  234,  235,   13,
 /*   320 */   237,  238,  239,  240,  241,  231,  232,  233,  245,  246,
 /*   330 */   247,  248,  249,  250,  251,  252,  253,  110,   32,  180,
 /*   340 */   130,   13,   36,  196,  117,  118,   40,  120,  265,  190,
 /*   350 */   156,  268,  130,  197,  271,  196,   33,  185,  186,  276,
 /*   360 */    32,  278,  279,  280,   36,  282,   36,  284,  285,  286,
 /*   370 */   287,  288,  289,  290,  291,  292,  157,  310,  295,  296,
 /*   380 */   297,  298,  315,  173,  130,   62,   63,  304,  305,  306,
 /*   390 */   307,  308,  309,  326,  311,  312,  313,  314,   33,   34,
 /*   400 */   317,  242,  319,  320,  185,  186,  184,  185,  186,  187,
 /*   410 */   188,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*   420 */   127,  128,  129,  130,  131,  130,   40,  134,  135,  134,
 /*   430 */   137,  138,  139,  179,  141,  130,  275,  183,  277,  185,
 /*   440 */   186,  148,  149,  134,  151,  152,  153,  154,  155,  140,
 /*   450 */     9,  158,  159,  196,  161,  162,  163,  330,  331,  166,
 /*   460 */   167,  168,  335,  130,  130,  130,  171,  174,  175,  176,
 /*   470 */   222,  178,  224,  225,   33,   34,  183,   91,  185,  186,
 /*   480 */    39,   30,  189,   32,  191,  192,  193,   33,  195,  196,
 /*   490 */   189,  186,  191,  200,    7,  194,    9,   10,  244,  242,
 /*   500 */   126,  208,  209,  210,  211,  212,  213,  214,  215,  315,
 /*   510 */   217,  218,  219,  220,  221,  130,  223,   66,   67,  186,
 /*   520 */   326,  228,  229,  189,  189,  303,  191,  234,  235,  194,
 /*   530 */   237,  238,  239,  240,  241,  132,  133,  134,  245,  246,
 /*   540 */   247,  248,  249,  250,  251,  252,  253,  290,  291,  134,
 /*   550 */   293,  294,  156,  299,  185,  186,  302,  303,  265,  146,
 /*   560 */   126,  268,  164,  165,  271,  157,  197,  169,  170,  276,
 /*   570 */    31,  278,  279,  280,  189,  282,   37,  284,  285,  286,
 /*   580 */   287,  288,  289,  290,  291,  292,  190,  126,  295,  296,
 /*   590 */   297,  298,  196,  185,  186,  143,  181,  304,  305,  306,
 /*   600 */   307,  308,  309,  156,  311,  312,  313,  314,  135,  157,
 /*   610 */   317,  156,  319,  320,   33,   34,  143,  316,   91,  318,
 /*   620 */    39,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*   630 */   124,  125,  126,  127,  128,  129,  130,  131,  111,  112,
 /*   640 */   134,  224,  225,  137,  138,  139,  180,  141,  130,  189,
 /*   650 */   316,  316,  318,  318,  148,  149,  190,  151,  152,  153,
 /*   660 */   154,  155,  196,  146,  158,  159,  126,  254,  255,  256,
 /*   670 */   257,  258,  259,  260,  261,  262,  263,  264,    4,  266,
 /*   680 */   174,  175,  176,   23,  178,   25,   23,   27,   25,  183,
 /*   690 */   109,  185,  186,  185,  186,  189,   31,  191,  192,  193,
 /*   700 */    39,  195,  196,  185,  186,  197,  200,   91,  242,  146,
 /*   710 */    19,  315,   13,   48,  208,  209,  210,  211,  212,  213,
 /*   720 */   214,  215,  326,  217,  218,  219,  220,  221,  130,  223,
 /*   730 */    39,   32,  331,  332,  228,  229,  335,  336,   13,   40,
 /*   740 */   234,  235,   68,  237,  238,  239,  240,  241,  116,  117,
 /*   750 */   118,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*   760 */    35,   36,  315,   38,   39,  126,   41,   42,   43,   44,
 /*   770 */   315,  265,  126,  326,  268,  130,  316,  271,  318,  327,
 /*   780 */   157,  326,  276,  190,  278,  279,  280,  189,  282,  196,
 /*   790 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  130,
 /*   800 */   190,  295,  296,  297,  298,  242,  196,  130,  185,  186,
 /*   810 */   304,  305,  306,  307,  308,  309,  190,  311,  312,  313,
 /*   820 */   314,  190,  196,  317,  331,  319,  320,  196,  335,  184,
 /*   830 */   185,  186,  187,  188,  328,  329,  330,  331,  332,  333,
 /*   840 */   334,  335,  336,  125,  189,  127,  128,  129,  130,  131,
 /*   850 */    45,  164,  134,  135,   49,  137,  138,  139,  189,  141,
 /*   860 */    13,  184,  185,  186,  187,  188,  148,  149,  126,  151,
 /*   870 */   152,  153,  154,  155,   33,   34,  158,  159,  134,   30,
 /*   880 */    39,   32,   35,   36,  140,   38,   39,  134,   41,   42,
 /*   890 */    43,   44,  174,  175,  176,  134,  178,   50,   51,   52,
 /*   900 */    53,  183,   19,  185,  186,   19,  126,  189,   36,  191,
 /*   910 */   192,  193,  126,  195,  196,   66,   67,   45,  200,   35,
 /*   920 */    19,   49,   39,  130,  126,   39,  208,  209,  210,  211,
 /*   930 */   212,  213,  214,  215,  181,  217,  218,  219,  220,  221,
 /*   940 */    39,  223,  181,  134,   60,   19,  228,  229,  303,  105,
 /*   950 */   106,  164,  234,  235,  134,  237,  238,  239,  240,  241,
 /*   960 */   130,  126,  130,  245,  246,  247,  248,  249,  250,  251,
 /*   970 */   252,  253,  179,   47,  134,  320,  183,  126,  185,  186,
 /*   980 */   303,   30,   31,  265,  130,  316,  268,  318,  126,  271,
 /*   990 */   181,   32,  108,  134,  276,   36,  278,  279,  280,   40,
 /*  1000 */   282,  181,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  1010 */   292,   36,  156,  295,  296,  297,  298,  185,  186,  189,
 /*  1020 */    45,  181,  304,  305,  306,  307,  308,  309,  130,  311,
 /*  1030 */   312,  313,  314,   39,  130,  317,   39,  319,  320,  270,
 /*  1040 */   181,  272,   48,   13,   47,  143,  328,  329,  330,  331,
 /*  1050 */   332,  333,  334,  335,  336,  125,   13,  127,  128,  129,
 /*  1060 */   130,  131,   32,  143,  134,  135,   32,  137,  138,  139,
 /*  1070 */   134,  141,  135,   19,   40,   32,  122,  157,  148,  149,
 /*  1080 */   143,  151,  152,  153,  154,  155,  126,  189,  158,  159,
 /*  1090 */   156,   36,  299,  189,   32,  302,  303,  310,  143,  197,
 /*  1100 */    45,  156,  126,  126,  174,  175,  176,  126,  178,   54,
 /*  1110 */    55,   56,   57,  183,  126,  185,  186,  181,  126,  189,
 /*  1120 */   130,  191,  192,  193,  317,  195,  196,  126,  126,  130,
 /*  1130 */   200,   13,  126,  317,  156,  303,  126,  130,  208,  209,
 /*  1140 */   210,  211,  212,  213,  214,  215,    9,  217,  218,  219,
 /*  1150 */   220,  221,  197,  223,  156,  183,  317,  126,  228,  229,
 /*  1160 */   310,  126,  126,  126,  234,  235,  126,  237,  238,  239,
 /*  1170 */   240,  241,  126,  126,  317,  245,  246,  247,  248,  249,
 /*  1180 */   250,  251,  252,  253,  126,   37,  126,  196,  190,  126,
 /*  1190 */   197,  126,  126,  126,  196,  265,  317,  126,  268,  130,
 /*  1200 */   126,  271,  183,  126,  126,  126,  276,  126,  278,  279,
 /*  1210 */   280,   19,  282,   19,  284,  285,  286,  287,  288,  289,
 /*  1220 */   290,  291,  292,   40,   13,  295,  296,  297,  298,   42,
 /*  1230 */    13,   19,   19,   19,  304,  305,  306,  307,  308,  309,
 /*  1240 */    19,  311,  312,  313,  314,   19,   19,  317,   19,  319,
 /*  1250 */   320,   19,  126,  126,  126,   19,  126,  216,  328,  329,
 /*  1260 */   330,  331,  332,  333,  334,  335,  336,  125,  243,  127,
 /*  1270 */   128,  129,  130,  131,   46,  126,  134,  126,  136,  137,
 /*  1280 */   138,  139,  126,  141,  126,  196,  126,  126,  126,  130,
 /*  1290 */   148,  149,  126,  151,  152,  153,  154,  155,  126,  126,
 /*  1300 */   158,  159,  126,   47,  134,  134,  126,  196,  310,  146,
 /*  1310 */   126,  126,  197,  315,  126,  196,  174,  175,  176,  126,
 /*  1320 */   178,  126,  126,  126,  326,  183,  126,  185,  186,  126,
 /*  1330 */   126,  189,  216,  191,  192,  193,  197,  195,  196,  194,
 /*  1340 */    35,  126,  200,  108,  126,  126,  126,   94,  126,  126,
 /*  1350 */   208,  209,  210,  211,  212,  213,  214,  215,  212,  217,
 /*  1360 */   218,  219,  220,  221,  130,  223,  156,  130,  126,  130,
 /*  1370 */   228,  229,  126,  130,  126,  126,  234,  235,  126,  237,
 /*  1380 */   238,  239,  240,  241,  100,  126,  107,  245,  246,  247,
 /*  1390 */   248,  249,  250,  251,  252,  253,  126,  216,  126,  126,
 /*  1400 */   190,  126,  196,  126,  197,  143,  196,  265,  243,   31,
 /*  1410 */   268,   25,  126,  271,  126,  335,  126,  201,  276,  164,
 /*  1420 */   278,  279,  280,  126,  282,  126,  284,  285,  286,  287,
 /*  1430 */   288,  289,  290,  291,  292,  197,   48,  295,  296,  297,
 /*  1440 */   298,  135,  126,  130,  130,  126,  304,  305,  306,  307,
 /*  1450 */   308,  309,  126,  311,  312,  313,  314,   45,  126,  317,
 /*  1460 */   126,  319,  320,  134,  126,  126,  242,  186,  186,  126,
 /*  1470 */   328,  329,  330,  331,  332,  333,  334,  335,  336,  125,
 /*  1480 */   156,  127,  128,  129,  130,  131,  164,  126,  134,  135,
 /*  1490 */   126,  137,  138,  139,  126,  141,  126,  126,  126,  335,
 /*  1500 */   126,  135,  148,  149,  335,  151,  152,  153,  154,  155,
 /*  1510 */   126,  196,  158,  159,  335,  126,  126,  126,  126,  126,
 /*  1520 */   310,  126,  126,  126,  335,  315,  335,  126,  174,  175,
 /*  1530 */   176,  126,  178,  126,  126,  126,  326,  183,  196,  185,
 /*  1540 */   186,  197,  126,  189,  126,  191,  192,  193,  126,  195,
 /*  1550 */   196,  126,  146,  143,  200,  126,  130,    2,   34,  236,
 /*  1560 */   197,  185,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  1570 */   197,  217,  218,  219,  220,  221,  126,  223,  126,  126,
 /*  1580 */   126,  337,  228,  229,  337,  337,  337,  337,  234,  235,
 /*  1590 */   337,  237,  238,  239,  240,  241,  337,  337,  337,  245,
 /*  1600 */   246,  247,  248,  249,  250,  251,  252,  253,  337,  337,
 /*  1610 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /*  1620 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /*  1630 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /*  1640 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /*  1650 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /*  1660 */   306,  307,  308,  309,  337,  311,  312,  313,  314,  337,
 /*  1670 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /*  1680 */   337,  337,  328,  329,  330,  331,  332,  333,  334,  335,
 /*  1690 */   336,  125,  337,  127,  128,  129,  130,  131,  337,  337,
 /*  1700 */   134,  337,  337,  137,  138,  139,  337,  141,  337,  337,
 /*  1710 */   337,  337,  337,  337,  148,  149,  337,  151,  152,  153,
 /*  1720 */   154,  155,  337,  337,  158,  159,  337,  337,  337,  337,
 /*  1730 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  1740 */   174,  175,  176,  337,  178,  337,  337,  337,  337,  183,
 /*  1750 */   337,  185,  186,  337,  337,  189,  337,  191,  192,  193,
 /*  1760 */   337,  195,  196,  337,  337,  337,  200,  337,  337,  337,
 /*  1770 */   337,  337,  337,  337,  208,  209,  210,  211,  212,  213,
 /*  1780 */   214,  215,  337,  217,  218,  219,  220,  221,  337,  223,
 /*  1790 */   337,  337,  337,  337,  228,  229,  337,  337,  337,  337,
 /*  1800 */   234,  235,  337,  237,  238,  239,  240,  241,  337,  337,
 /*  1810 */   337,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  1820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  1830 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  1840 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  1850 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  1860 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  1870 */   304,  305,  306,  307,  308,  309,  337,  311,  312,  313,
 /*  1880 */   314,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  1890 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  1900 */   334,  335,  336,  127,  128,  129,  130,  131,  337,  337,
 /*  1910 */   134,  135,  337,  137,  138,  139,  337,  141,  337,  337,
 /*  1920 */   337,  337,  337,  337,  148,  149,  337,  151,  152,  153,
 /*  1930 */   154,  155,  337,  337,  158,  159,  337,  337,  337,  337,
 /*  1940 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  1950 */   174,  175,  176,  337,  178,  337,  337,  337,  337,  183,
 /*  1960 */   337,  185,  186,  337,  337,  189,  337,  191,  192,  193,
 /*  1970 */   337,  195,  196,  337,  337,  337,  200,  337,  337,  337,
 /*  1980 */   337,  337,  337,  337,  208,  209,  210,  211,  212,  213,
 /*  1990 */   214,  215,  337,  217,  218,  219,  220,  221,  337,  223,
 /*  2000 */   337,  337,  337,  337,  228,  229,  337,  337,  337,  337,
 /*  2010 */   234,  235,  337,  237,  238,  239,  240,  241,  337,  337,
 /*  2020 */   337,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  2030 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2040 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  2050 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  2060 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  2070 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  2080 */   304,  305,  306,  307,  308,  309,  337,  311,  312,  313,
 /*  2090 */   314,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  2100 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  2110 */   334,  335,  336,  127,  128,  129,  130,  131,  337,  337,
 /*  2120 */   134,  135,  337,  137,  138,  139,  337,  141,  337,  337,
 /*  2130 */   337,  337,  337,  337,  148,  149,  337,  151,  152,  153,
 /*  2140 */   154,  155,  337,  337,  158,  159,  337,  337,  337,  337,
 /*  2150 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2160 */   174,  175,  176,  337,  178,  337,  337,  337,  337,  183,
 /*  2170 */   337,  185,  186,  337,  337,  189,  337,  191,  192,  193,
 /*  2180 */   337,  195,  196,  337,  337,  337,  200,  337,  337,  337,
 /*  2190 */   337,  337,  337,  337,  208,  209,  210,  211,  212,  213,
 /*  2200 */   214,  215,  337,  217,  218,  219,  220,  221,  337,  223,
 /*  2210 */   337,  337,  337,  337,  228,  229,  337,  337,  337,  337,
 /*  2220 */   234,  235,  337,  237,  238,  239,  240,  241,  337,  337,
 /*  2230 */   337,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  2240 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2250 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  2260 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  2270 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  2280 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  2290 */   304,  305,  306,  307,  308,  309,  337,  311,  312,  313,
 /*  2300 */   314,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  2310 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  2320 */   334,  335,  336,  125,  337,  127,  128,  129,  130,  131,
 /*  2330 */   337,  337,  134,  337,  337,  137,  138,  139,  337,  141,
 /*  2340 */   337,  337,  337,  337,  337,  337,  148,  149,  337,  151,
 /*  2350 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  2360 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2370 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  2380 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  2390 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  2400 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  2410 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  2420 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  2430 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  2440 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  2450 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2460 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  2470 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  2480 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  2490 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  2500 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  2510 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  2520 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  2530 */   332,  333,  334,  335,  336,  125,  337,  127,  128,  129,
 /*  2540 */   130,  131,  337,  337,  134,  337,  337,  137,  138,  139,
 /*  2550 */   337,  141,  337,  337,  337,  337,  337,  337,  148,  149,
 /*  2560 */   337,  151,  152,  153,  154,  155,  337,  337,  158,  159,
 /*  2570 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2580 */   337,  337,  337,  337,  174,  175,  176,  337,  178,  337,
 /*  2590 */   337,  337,  337,  183,  337,  185,  186,  337,  337,  189,
 /*  2600 */   337,  191,  192,  193,  337,  195,  196,  337,  337,  337,
 /*  2610 */   200,  337,  337,  337,  337,  337,  337,  337,  208,  209,
 /*  2620 */   210,  211,  212,  213,  214,  215,  337,  217,  218,  219,
 /*  2630 */   220,  221,  337,  223,  337,  337,  337,  337,  228,  229,
 /*  2640 */   337,  337,  337,  337,  234,  235,  337,  237,  238,  239,
 /*  2650 */   240,  241,  337,  337,  337,  245,  246,  247,  248,  249,
 /*  2660 */   250,  251,  252,  253,  337,  337,  337,  337,  337,  337,
 /*  2670 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /*  2680 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /*  2690 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /*  2700 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /*  2710 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /*  2720 */   337,  311,  312,  313,  314,  337,  337,  317,  337,  319,
 /*  2730 */   320,  337,  337,  337,  337,  337,  337,  337,  328,  329,
 /*  2740 */   330,  331,  332,  333,  334,  335,  336,  125,  337,  127,
 /*  2750 */   128,  129,  130,  131,  337,  337,  134,  337,  337,  137,
 /*  2760 */   138,  139,  337,  141,  337,  337,  337,  337,  337,  337,
 /*  2770 */   148,  149,  337,  151,  152,  153,  154,  155,  337,  337,
 /*  2780 */   158,  159,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2790 */   337,  337,  337,  337,  337,  337,  174,  175,  176,  337,
 /*  2800 */   178,  337,  337,  337,  337,  183,  337,  185,  186,  337,
 /*  2810 */   337,  189,  337,  191,  192,  193,  337,  195,  196,  337,
 /*  2820 */   337,  337,  200,  337,  337,  337,  337,  337,  337,  337,
 /*  2830 */   208,  209,  210,  211,  212,  213,  214,  215,  337,  217,
 /*  2840 */   218,  219,  220,  221,  337,  223,  337,  337,  337,  337,
 /*  2850 */   228,  229,  337,  337,  337,  337,  234,  235,  337,  237,
 /*  2860 */   238,  239,  240,  241,  337,  337,  337,  245,  246,  247,
 /*  2870 */   248,  249,  250,  251,  252,  253,  337,  337,  337,  337,
 /*  2880 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /*  2890 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /*  2900 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /*  2910 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /*  2920 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /*  2930 */   308,  309,  337,  311,  312,  313,  314,  337,  337,  317,
 /*  2940 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /*  2950 */   328,  329,  330,  331,  332,  333,  334,  335,  336,  125,
 /*  2960 */   337,  127,  128,  129,  130,  131,  337,  337,  134,  337,
 /*  2970 */   337,  137,  138,  139,  337,  141,  337,  337,  337,  337,
 /*  2980 */   337,  337,  148,  149,  337,  151,  152,  153,  154,  155,
 /*  2990 */   337,  337,  158,  159,  337,  337,  337,  337,  337,  337,
 /*  3000 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  175,
 /*  3010 */   176,  337,  178,  337,  337,  337,  337,  183,  337,  185,
 /*  3020 */   186,  337,  337,  189,  337,  191,  192,  193,  337,  195,
 /*  3030 */   196,  337,  337,  337,  200,  337,  337,  337,  337,  337,
 /*  3040 */   337,  337,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  3050 */   337,  217,  218,  219,  220,  221,  337,  223,  337,  337,
 /*  3060 */   337,  337,  228,  229,  337,  337,  337,  337,  234,  235,
 /*  3070 */   337,  237,  238,  239,  240,  241,  337,  337,  337,  245,
 /*  3080 */   246,  247,  248,  249,  250,  251,  252,  253,  337,  337,
 /*  3090 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /*  3100 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /*  3110 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /*  3120 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /*  3130 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /*  3140 */   306,  307,  308,  309,  337,  311,  312,  313,  314,  337,
 /*  3150 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /*  3160 */   337,  337,  328,  329,  330,  331,  332,  333,  334,  335,
 /*  3170 */   336,  125,  337,  127,  128,  129,  130,  131,  337,  337,
 /*  3180 */   134,  337,  337,  137,  138,  139,  337,  141,  337,  337,
 /*  3190 */   337,  337,  337,  337,  148,  149,  337,  151,  152,  153,
 /*  3200 */   154,  155,  337,  337,  158,  159,  337,  337,  337,  337,
 /*  3210 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3220 */   174,  175,  176,  337,  178,  337,  337,  337,  337,  183,
 /*  3230 */   337,  185,  186,  337,  337,  189,  337,  191,  192,  193,
 /*  3240 */   337,  195,  196,  337,  337,  337,  200,  337,  337,  337,
 /*  3250 */   337,  337,  337,  337,  208,  209,  210,  211,  212,  213,
 /*  3260 */   214,  215,  337,  217,  218,  219,  220,  221,  337,  223,
 /*  3270 */   337,  337,  337,  337,  228,  229,  337,  337,  337,  337,
 /*  3280 */   234,  235,  337,  237,  238,  239,  240,  241,  337,  337,
 /*  3290 */   337,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  3300 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3310 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  3320 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  3330 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  3340 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  3350 */   304,  305,  306,  307,  308,  309,  337,  311,  312,  313,
 /*  3360 */   314,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  3370 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  3380 */   334,  335,  336,  125,  337,  127,  128,  129,  130,  131,
 /*  3390 */   337,  337,  134,  337,  337,  137,  138,  139,  337,  141,
 /*  3400 */   337,  337,  337,  337,  337,  337,  148,  149,  337,  151,
 /*  3410 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  3420 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3430 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  3440 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  3450 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  3460 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  3470 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  3480 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  3490 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  3500 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  3510 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3520 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  3530 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  3540 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  3550 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  3560 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  3570 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  3580 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  3590 */   332,  333,  334,  335,  336,  127,  128,  129,  130,  131,
 /*  3600 */   337,  337,  134,  135,  337,  137,  138,  139,  337,  141,
 /*  3610 */   337,  337,  337,  337,  337,  337,  148,  149,  337,  151,
 /*  3620 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  3630 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3640 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  3650 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  3660 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  3670 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  3680 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  3690 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  3700 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  3710 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  3720 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3730 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  3740 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  3750 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  3760 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  3770 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  3780 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  3790 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  3800 */   332,  333,  334,  335,  336,  127,  128,  129,  130,  131,
 /*  3810 */   337,  337,  134,  135,  337,  137,  138,  139,  337,  141,
 /*  3820 */   337,  337,  337,  337,  337,  337,  148,  149,  337,  151,
 /*  3830 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  3840 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3850 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  3860 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  3870 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  3880 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  3890 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  3900 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  3910 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  3920 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  3930 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3940 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  3950 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  3960 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  3970 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  3980 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  3990 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  4000 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  4010 */   332,  333,  334,  335,  336,  127,  128,  129,  130,  131,
 /*  4020 */   337,  337,  134,  337,  337,  137,  138,  139,  337,  141,
 /*  4030 */   337,  337,  337,  337,  337,  337,  148,  149,  337,  151,
 /*  4040 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  4050 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4060 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  4070 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  4080 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  4090 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  4100 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  4110 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  4120 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  4130 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  4140 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4150 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  4160 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  4170 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  4180 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  4190 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  4200 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  4210 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  4220 */   332,  333,  334,  335,  336,  128,  129,  130,  131,  337,
 /*  4230 */     5,  134,  337,    8,  137,  138,  139,  337,  141,  337,
 /*  4240 */   337,  337,  337,  337,  337,  148,  149,  337,  151,  152,
 /*  4250 */    13,  154,  155,  337,  337,  158,  159,  337,   21,   22,
 /*  4260 */    23,   24,   25,   26,   27,   28,   29,  337,  337,  337,
 /*  4270 */    33,  174,   35,  176,   49,  178,  337,  337,  337,  337,
 /*  4280 */   183,  337,  185,  186,  337,  337,  189,  337,  191,  337,
 /*  4290 */   193,  337,  337,  196,   69,   70,   71,   72,   73,   74,
 /*  4300 */    75,   76,   77,   78,  337,  337,  337,  337,  211,  212,
 /*  4310 */   213,  214,  215,  337,  217,  218,  219,  220,  221,  337,
 /*  4320 */   223,  337,  337,  337,  337,  228,  229,  337,  337,  337,
 /*  4330 */   337,  234,  235,  337,  237,  238,  239,  240,  241,  337,
 /*  4340 */   337,  337,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  4350 */   253,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4360 */   337,  337,  265,  337,  337,  268,  337,  337,  271,  337,
 /*  4370 */   337,  337,  337,  276,  337,  278,  279,  280,  337,  282,
 /*  4380 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /*  4390 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /*  4400 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  312,
 /*  4410 */   313,  314,  337,  337,  317,  337,  319,  320,  337,  337,
 /*  4420 */   337,  337,  337,  337,  337,  328,  329,  330,  331,  332,
 /*  4430 */   333,  334,  335,  336,  337,  337,  337,  128,  129,  130,
 /*  4440 */   131,  337,  337,  134,  337,  337,  137,  138,  139,  337,
 /*  4450 */   141,  337,  337,  337,  337,  337,  337,  148,  149,  337,
 /*  4460 */   151,  152,   13,  154,  155,  337,  337,  158,  159,  337,
 /*  4470 */    21,   22,   23,   24,   25,   26,   27,   28,   29,  337,
 /*  4480 */   337,  337,  337,  174,   35,  176,  337,  178,  337,  337,
 /*  4490 */   337,  337,  183,  337,  185,  186,  337,  337,  189,  337,
 /*  4500 */   191,  337,  193,  337,  337,  196,  337,  337,  337,  337,
 /*  4510 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4520 */   211,  212,  213,  214,  215,  337,  217,  218,  219,  220,
 /*  4530 */   221,  337,  223,  337,  337,  337,  337,  228,  229,  337,
 /*  4540 */   337,  337,  337,  234,  235,  337,  237,  238,  239,  240,
 /*  4550 */   241,  337,  337,  337,  245,  246,  247,  248,  249,  250,
 /*  4560 */   251,  252,  253,  337,  337,  337,  337,  337,  337,  337,
 /*  4570 */   337,  337,  337,  337,  265,  337,  337,  268,  337,  337,
 /*  4580 */   271,  337,  337,  337,  337,  276,  337,  278,  279,  280,
 /*  4590 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /*  4600 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /*  4610 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /*  4620 */   311,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  4630 */   337,  337,  337,  337,  337,  337,  337,  328,  329,  330,
 /*  4640 */   331,  332,  333,  334,  335,  336,  337,  337,  337,  128,
 /*  4650 */   129,  130,  131,  337,  337,  134,  337,  337,  137,  138,
 /*  4660 */   139,  337,  141,  337,  337,  337,  337,  337,  337,  148,
 /*  4670 */   149,  337,  151,  152,  337,  154,  155,  337,  337,  158,
 /*  4680 */   159,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4690 */   337,  337,  337,  337,  337,  174,  337,  176,  337,  178,
 /*  4700 */   337,  337,  337,  337,  183,  337,  185,  186,  337,  337,
 /*  4710 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /*  4720 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4730 */   337,  337,  211,  212,  213,  214,  215,  337,  217,  218,
 /*  4740 */   219,  220,  221,  337,  223,  337,  337,  337,  337,  228,
 /*  4750 */   229,  337,  337,  337,  337,  234,  235,  337,  237,  238,
 /*  4760 */   239,  240,  241,  337,  337,  337,  245,  246,  247,  248,
 /*  4770 */   249,  250,  251,  252,  253,  337,  337,  337,  337,  337,
 /*  4780 */   337,  337,  337,  337,  337,  337,  265,  337,  337,  268,
 /*  4790 */   337,  337,  271,  337,  337,  337,  337,  276,  337,  278,
 /*  4800 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  4810 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  4820 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  4830 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  4840 */   319,  320,  337,  337,  337,  337,  337,  337,  337,  328,
 /*  4850 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /*  4860 */   337,  128,  129,  130,  131,  337,  337,  134,  337,  337,
 /*  4870 */   137,  138,  139,  337,  141,  337,  337,  337,  337,  337,
 /*  4880 */   337,  148,  149,  337,  151,  152,  337,  154,  155,  337,
 /*  4890 */   337,  158,  159,  337,  337,  337,  337,  337,  337,  337,
 /*  4900 */   337,  337,  337,  337,  337,  337,  337,  174,  337,  176,
 /*  4910 */   337,  178,  337,  337,  337,  337,  183,  337,  185,  186,
 /*  4920 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /*  4930 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4940 */   337,  337,  337,  337,  211,  212,  213,  214,  215,  337,
 /*  4950 */   217,  218,  219,  220,  221,  337,  223,  337,  337,  337,
 /*  4960 */   337,  228,  229,  337,  337,  337,  337,  234,  235,  337,
 /*  4970 */   237,  238,  239,  240,  241,  337,  337,  337,  245,  246,
 /*  4980 */   247,  248,  249,  250,  251,  252,  253,  337,  337,  337,
 /*  4990 */   337,  337,  337,  337,  337,  337,  337,  337,  265,  337,
 /*  5000 */   337,  268,  337,  337,  271,  337,  337,  337,  337,  276,
 /*  5010 */   337,  278,  279,  280,  337,  282,  337,  284,  285,  286,
 /*  5020 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /*  5030 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /*  5040 */   307,  308,  309,  337,  311,  312,  313,  314,  337,  337,
 /*  5050 */   317,  337,  319,  320,  337,  337,  337,  337,  337,  337,
 /*  5060 */   337,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*  5070 */   337,  337,  337,  128,  129,  130,  131,  337,  337,  134,
 /*  5080 */   337,  337,  137,  138,  139,  337,  141,  337,  337,  337,
 /*  5090 */   337,  337,  337,  148,  149,  337,  151,  152,  337,  154,
 /*  5100 */   155,  337,  337,  158,  159,  337,  337,  337,  337,  337,
 /*  5110 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  174,
 /*  5120 */   337,  176,  337,  178,  337,  337,  337,  337,  183,  337,
 /*  5130 */   185,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /*  5140 */   337,  196,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  5150 */   337,  337,  337,  337,  337,  337,  211,  212,  213,  214,
 /*  5160 */   215,  337,  217,  218,  219,  220,  221,  337,  223,  337,
 /*  5170 */   337,  337,  337,  228,  229,  337,  337,  337,  337,  234,
 /*  5180 */   235,  337,  237,  238,  239,  240,  241,  337,  337,  337,
 /*  5190 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  337,
 /*  5200 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  5210 */   265,  337,  337,  268,  337,  337,  271,  337,  337,  337,
 /*  5220 */   337,  276,  337,  278,  279,  280,  337,  282,  337,  284,
 /*  5230 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  337,
 /*  5240 */   295,  296,  297,  298,  337,  337,  337,  337,  337,  304,
 /*  5250 */   305,  306,  307,  308,  309,  337,  311,  312,  313,  314,
 /*  5260 */   337,  337,  317,  337,  319,  320,  337,  130,  337,  337,
 /*  5270 */   337,  337,  337,  328,  329,  330,  331,  332,  333,  334,
 /*  5280 */   335,  336,  337,  337,    9,  148,  337,  337,   13,  130,
 /*  5290 */   337,  154,  337,  337,  337,  337,   21,   22,   23,   24,
 /*  5300 */    25,   26,   27,   28,   29,  337,  337,  337,   33,   34,
 /*  5310 */    35,  174,   37,  176,   39,  178,  337,  337,  337,  337,
 /*  5320 */   183,  337,  185,  186,  337,  337,  189,  337,  191,  337,
 /*  5330 */   193,  337,  337,  196,  337,  337,  177,  337,  179,  337,
 /*  5340 */   337,  182,  183,  184,  185,  186,  187,  188,  337,  337,
 /*  5350 */   213,  337,  215,  337,  337,  337,  337,  337,  337,  142,
 /*  5360 */   337,  144,  145,  226,  227,  337,  149,  150,  151,  152,
 /*  5370 */   153,  154,  155,  337,  157,  337,  337,  240,  241,  337,
 /*  5380 */   337,  337,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  5390 */   253,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  5400 */   337,  337,  265,  244,  337,  268,  337,  337,  271,  337,
 /*  5410 */   337,  337,  337,  276,  337,  278,  279,  280,  337,  282,
 /*  5420 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /*  5430 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /*  5440 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  312,
 /*  5450 */   313,  314,  337,  337,  317,  337,  319,  320,  299,  130,
 /*  5460 */   337,  302,  303,  337,  337,  328,  329,  330,  331,  332,
 /*  5470 */   333,  334,  335,  336,  337,  337,  337,  148,  337,  337,
 /*  5480 */    13,  337,  337,  154,  337,  337,  337,  337,   21,   22,
 /*  5490 */    23,   24,   25,   26,   27,   28,   29,  337,  337,  337,
 /*  5500 */   337,   34,   35,  174,  337,  176,  337,  178,  337,  337,
 /*  5510 */   337,  337,  183,  337,  185,  186,  337,  337,  189,   13,
 /*  5520 */   191,  337,  193,  337,  337,  196,  337,   21,   22,   23,
 /*  5530 */    24,   25,   26,   27,   28,   29,  337,  337,  337,  337,
 /*  5540 */    34,   35,  213,  337,  215,  328,  329,  330,  331,  332,
 /*  5550 */   333,  334,  335,  336,  337,  337,  337,  337,  337,  337,
 /*  5560 */   337,  337,  337,  154,  337,  337,  337,  337,  337,  240,
 /*  5570 */   241,  337,  337,  337,  245,  246,  247,  248,  249,  250,
 /*  5580 */   251,  252,  253,  116,  117,  118,  337,  337,  337,  337,
 /*  5590 */   337,  337,  337,  337,  265,  186,  337,  268,  189,  337,
 /*  5600 */   271,  337,  193,  337,  337,  276,  337,  278,  279,  280,
 /*  5610 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /*  5620 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /*  5630 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /*  5640 */   311,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  5650 */   337,  130,  337,  337,  337,  337,  337,  328,  329,  330,
 /*  5660 */   331,  332,  333,  334,  335,  336,  337,  337,    9,  148,
 /*  5670 */   337,  337,   13,  337,  337,  154,  337,  337,  337,  337,
 /*  5680 */    21,   22,   23,   24,   25,   26,   27,   28,   29,  337,
 /*  5690 */   337,  337,   33,   34,   35,  174,  337,  176,   39,  178,
 /*  5700 */   337,  337,  337,  337,  183,  337,  185,  186,  337,  337,
 /*  5710 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /*  5720 */   337,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  5730 */   337,  337,  337,  337,  213,  337,  215,  328,  329,  330,
 /*  5740 */   331,  332,  333,  334,  335,  336,  337,  337,  337,  337,
 /*  5750 */   337,  337,  337,  337,  337,  154,  337,  337,  337,  337,
 /*  5760 */   337,  240,  241,  337,  337,  337,  245,  246,  247,  248,
 /*  5770 */   249,  250,  251,  252,  253,  337,  337,  337,  337,  337,
 /*  5780 */   337,  337,  337,  337,  337,  337,  265,  337,  337,  268,
 /*  5790 */   189,  337,  271,  337,  193,  337,  337,  276,  337,  278,
 /*  5800 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  5810 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  5820 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  5830 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  5840 */   319,  320,  337,  130,  337,  337,  337,  337,  337,  328,
 /*  5850 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /*  5860 */   337,  148,  337,  337,  337,  337,  337,  154,  337,  337,
 /*  5870 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  5880 */   337,  337,  337,  337,  337,  337,  337,  174,  337,  176,
 /*  5890 */   337,  178,  337,  337,  337,  337,  183,  337,  185,  186,
 /*  5900 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /*  5910 */   337,  337,  337,  312,  313,  314,  337,  337,  317,  337,
 /*  5920 */   319,  320,  337,  337,  337,  337,  213,  337,  215,  328,
 /*  5930 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  144,
 /*  5940 */   145,  337,  337,  337,  149,  150,  151,  152,  153,  154,
 /*  5950 */   155,  337,  337,  240,  241,  337,  337,  337,  245,  246,
 /*  5960 */   247,  248,  249,  250,  251,  252,  253,   21,   22,   23,
 /*  5970 */    24,   25,   26,   27,   28,   29,   30,  337,  265,  337,
 /*  5980 */   337,  268,  337,  337,  271,  337,  337,  337,  337,  276,
 /*  5990 */   337,  278,  279,  280,  337,  282,  337,  284,  285,  286,
 /*  6000 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /*  6010 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /*  6020 */   307,  308,  309,  337,  311,  312,  313,  314,  337,  337,
 /*  6030 */   317,  337,  319,  320,  337,  130,  337,  337,  337,  337,
 /*  6040 */   337,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*  6050 */   337,  337,  337,  148,  337,  337,  110,  337,  337,  154,
 /*  6060 */   337,  337,  337,  117,  118,  119,  120,  337,  337,  337,
 /*  6070 */   337,  337,  337,  337,  337,  337,  337,  337,  130,  174,
 /*  6080 */   337,  176,  337,  178,  337,  337,  337,  337,  183,  337,
 /*  6090 */   185,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /*  6100 */   337,  196,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6110 */   337,  337,  337,  337,  337,  337,  337,  337,  213,  337,
 /*  6120 */   215,  337,  174,  328,  329,  330,  331,  332,  333,  334,
 /*  6130 */   335,  336,  337,  337,  337,  337,  337,  189,  337,  337,
 /*  6140 */   337,  193,  337,  337,  196,  240,  241,  337,  337,  337,
 /*  6150 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  337,
 /*  6160 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6170 */   265,  337,  337,  268,  337,  337,  271,  337,  337,  337,
 /*  6180 */   337,  276,  337,  278,  279,  280,  337,  282,  337,  284,
 /*  6190 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  337,
 /*  6200 */   295,  296,  297,  298,  337,  337,  337,  337,  337,  304,
 /*  6210 */   305,  306,  307,  308,  309,  337,  311,  312,  313,  314,
 /*  6220 */   337,  337,  317,  337,  319,  320,  337,  130,  337,  337,
 /*  6230 */   337,  337,  337,  328,  329,  330,  331,  332,  333,  334,
 /*  6240 */   335,  336,  337,  337,  337,  148,  337,  337,  337,  337,
 /*  6250 */   337,  154,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  6260 */   337,  337,  337,  337,  337,  317,  337,  319,  320,  337,
 /*  6270 */   337,  174,  337,  176,  337,  178,  337,  337,  337,  337,
 /*  6280 */   183,  337,  185,  186,  337,  337,  189,  337,  191,  337,
 /*  6290 */   193,  337,  337,  196,  337,  337,  337,  337,  337,  337,
 /*  6300 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6310 */   213,  337,  215,  337,  337,  337,  337,  337,  337,  337,
 /*  6320 */   337,  337,  145,  337,  337,  337,  337,  150,  151,  152,
 /*  6330 */   153,  154,  337,  337,  337,  337,  337,  240,  241,  337,
 /*  6340 */   337,  337,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  6350 */   253,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6360 */   337,  337,  265,  337,  337,  268,  337,  337,  271,  337,
 /*  6370 */   337,  337,  337,  276,  337,  278,  279,  280,  337,  282,
 /*  6380 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /*  6390 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /*  6400 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  312,
 /*  6410 */   313,  314,  337,  337,  317,  337,  319,  320,  337,  130,
 /*  6420 */   337,  337,  337,  337,  337,  328,  329,  330,  331,  332,
 /*  6430 */   333,  334,  335,  336,  337,  337,  337,  148,  337,  337,
 /*  6440 */   337,  337,  337,  154,  337,  337,  337,  337,  337,  337,
 /*  6450 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6460 */   337,  337,  337,  174,  337,  176,  337,  178,  337,  337,
 /*  6470 */   337,  337,  183,  337,  185,  186,  337,  337,  189,  337,
 /*  6480 */   191,  337,  193,  337,  337,  196,  337,  337,  337,  337,
 /*  6490 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6500 */   337,  337,  213,  337,  215,  328,  329,  330,  331,  332,
 /*  6510 */   333,  334,  335,  336,  337,  337,  337,  337,  337,  337,
 /*  6520 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  240,
 /*  6530 */   241,  337,  337,  337,  245,  246,  247,  248,  249,  250,
 /*  6540 */   251,  252,  253,  337,  337,  337,  337,  337,  337,  337,
 /*  6550 */   337,  337,  337,  337,  265,  337,  337,  268,  337,  337,
 /*  6560 */   271,  337,  337,  337,  337,  276,  337,  278,  279,  280,
 /*  6570 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /*  6580 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /*  6590 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /*  6600 */   311,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  6610 */   337,  130,  337,  337,  337,  337,  337,  328,  329,  330,
 /*  6620 */   331,  332,  333,  334,  335,  336,  337,  337,  337,  148,
 /*  6630 */   337,  337,  337,  337,  337,  154,  337,  337,  337,  337,
 /*  6640 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6650 */   337,  337,  337,  337,  337,  174,  337,  176,  337,  178,
 /*  6660 */   337,  337,  337,  337,  183,  337,  185,  186,  337,  337,
 /*  6670 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /*  6680 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6690 */   337,  337,  337,  337,  213,  337,  215,  337,  337,  337,
 /*  6700 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6710 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6720 */   337,  240,  241,  337,  337,  337,  245,  246,  247,  248,
 /*  6730 */   249,  250,  251,  252,  253,  337,  337,  337,  337,  337,
 /*  6740 */   337,  337,  337,  337,  337,  337,  265,  337,  337,  268,
 /*  6750 */   337,  337,  271,  337,  337,  337,  337,  276,  337,  278,
 /*  6760 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  6770 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  6780 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  6790 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  6800 */   319,  320,  337,  130,  337,  337,  337,  337,  337,  328,
 /*  6810 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /*  6820 */   337,  148,  337,  337,  337,  337,  337,  154,  337,  337,
 /*  6830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6840 */   337,  337,  337,  337,  337,  337,  337,  174,  337,  176,
 /*  6850 */   337,  178,  337,  337,  337,  337,  183,  337,  185,  186,
 /*  6860 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /*  6870 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6880 */   337,  337,  337,  337,  337,  337,  213,  337,  215,  337,
 /*  6890 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6900 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6910 */   337,  337,  337,  240,  241,  337,  337,  337,  245,  246,
 /*  6920 */   247,  248,  249,  250,  251,  252,  253,  337,  337,  337,
 /*  6930 */   337,  337,  337,  337,  337,  337,  337,  337,  265,  337,
 /*  6940 */   337,  268,  337,  337,  271,  337,  337,  337,  337,  276,
 /*  6950 */   337,  278,  279,  280,  337,  282,  337,  284,  285,  286,
 /*  6960 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /*  6970 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /*  6980 */   307,  308,  309,  337,  311,  312,  313,  314,  337,  337,
 /*  6990 */   317,  337,  319,  320,  337,  337,  337,  337,  337,  337,
 /*  7000 */   337,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*  7010 */   337,    9,  337,  337,  337,   13,  337,  337,  337,  337,
 /*  7020 */   337,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  7030 */    28,   29,  337,  337,  337,   33,   34,   35,   36,  337,
 /*  7040 */    38,   39,  337,   41,   42,   43,   44,  337,  337,   47,
 /*  7050 */    48,  337,   50,   51,   52,   53,  337,  337,   56,   57,
 /*  7060 */    58,   59,   60,   61,  337,  337,  337,  337,  337,  337,
 /*  7070 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7080 */   337,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  7090 */    88,  337,  337,  337,   92,  337,  337,   95,   96,   97,
 /*  7100 */    98,   99,  100,  101,  102,  103,  104,  337,  337,  337,
 /*  7110 */   337,  337,  110,  337,  337,  113,  114,  115,  116,  117,
 /*  7120 */   118,  119,    9,  121,  337,  337,   13,  337,  337,  337,
 /*  7130 */   337,  337,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  7140 */    27,   28,   29,  337,  337,  337,   33,   34,   35,   36,
 /*  7150 */   337,   38,   39,  337,   41,   42,   43,   44,  337,  337,
 /*  7160 */    47,  337,  337,   50,   51,   52,   53,  337,  337,   56,
 /*  7170 */    57,   58,   59,   60,   61,  337,  337,  337,  337,  337,
 /*  7180 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7190 */   337,  337,   79,   80,   81,   82,   83,   84,   85,   86,
 /*  7200 */    87,   88,  337,  337,  337,   92,  337,  337,   95,   96,
 /*  7210 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  7220 */   107,  130,  337,  110,  337,  337,  337,  337,  337,  116,
 /*  7230 */   117,  118,  119,  337,  121,  337,  337,  337,  147,  148,
 /*  7240 */   337,  337,  337,  337,  337,  154,  337,  337,  337,  337,
 /*  7250 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7260 */   337,  337,  337,  337,  337,  174,  337,  337,  337,  178,
 /*  7270 */   337,  337,  337,  337,  183,  337,  185,  186,  337,    9,
 /*  7280 */   189,  337,  191,   13,  193,  337,  337,  196,  337,  337,
 /*  7290 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7300 */   337,  337,  337,   33,  213,   35,   36,  337,   38,   39,
 /*  7310 */   337,   41,   42,   43,   44,  337,  337,   47,   48,  337,
 /*  7320 */    50,   51,   52,   53,  337,  337,   56,   57,   58,   59,
 /*  7330 */    60,   61,  337,  337,  337,  337,  245,  337,  337,  337,
 /*  7340 */   337,  337,  337,  337,  253,  337,  337,  337,  337,  337,
 /*  7350 */   337,  337,  337,  337,  337,  337,  265,  337,  337,  268,
 /*  7360 */   337,  337,  271,  337,  337,  337,  337,  276,  337,  278,
 /*  7370 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  7380 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  7390 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  7400 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  7410 */   319,  320,  321,  322,  323,  324,  337,  337,  337,  328,
 /*  7420 */   329,  330,  331,  332,  333,  334,  335,  336,  337,    9,
 /*  7430 */   337,  337,  337,   13,  337,  337,  337,  337,  337,   19,
 /*  7440 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  7450 */   337,  337,  337,   33,   34,   35,   36,  337,   38,   39,
 /*  7460 */   337,   41,   42,   43,   44,  337,  337,   47,   48,  337,
 /*  7470 */    50,   51,   52,   53,  337,  337,   56,   57,   58,   59,
 /*  7480 */    60,   61,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7490 */   337,  337,  337,  337,  337,  337,  337,  337,  337,   79,
 /*  7500 */    80,   81,   82,   83,   84,   85,   86,   87,   88,  337,
 /*  7510 */   337,  337,   92,  337,  337,   95,   96,   97,   98,   99,
 /*  7520 */   100,  101,  102,  103,  104,  337,  337,  337,  337,  337,
 /*  7530 */   110,  337,  337,  337,  337,  337,  116,  117,  118,  119,
 /*  7540 */     9,  121,  337,  337,   13,  337,  337,  337,  337,  337,
 /*  7550 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  7560 */    29,  337,  337,  337,   33,   34,   35,   36,  337,   38,
 /*  7570 */    39,  337,   41,   42,   43,   44,  337,  337,   47,  337,
 /*  7580 */   337,   50,   51,   52,   53,  337,  337,   56,   57,   58,
 /*  7590 */    59,   60,   61,  337,  337,  337,  337,  337,  337,  337,
 /*  7600 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7610 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*  7620 */   337,  337,  337,   92,  337,  337,   95,   96,   97,   98,
 /*  7630 */    99,  100,  101,  102,  103,  104,  337,  337,  337,  337,
 /*  7640 */   337,  110,  337,  337,  337,  337,  337,  116,  117,  118,
 /*  7650 */   119,    9,  121,  122,  337,   13,  337,  337,  337,  337,
 /*  7660 */   337,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  7670 */    28,   29,  337,  337,  337,   33,   34,   35,   36,  337,
 /*  7680 */    38,   39,  337,   41,   42,   43,   44,  337,  337,   47,
 /*  7690 */   337,  337,   50,   51,   52,   53,  337,  337,   56,   57,
 /*  7700 */    58,   59,   60,   61,  337,  337,  337,  337,  337,  337,
 /*  7710 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7720 */   337,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  7730 */    88,  337,  337,  337,   92,  337,  337,   95,   96,   97,
 /*  7740 */    98,   99,  100,  101,  102,  103,  104,  337,  337,  337,
 /*  7750 */   337,  337,  110,  337,  337,  337,  337,  337,  116,  117,
 /*  7760 */   118,  119,    9,  121,  122,  337,   13,  337,  337,  337,
 /*  7770 */   337,  337,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  7780 */    27,   28,   29,  337,  337,  337,   33,   34,   35,   36,
 /*  7790 */   337,   38,   39,  337,   41,   42,   43,   44,  337,  337,
 /*  7800 */    47,  337,  337,   50,   51,   52,   53,  337,  337,   56,
 /*  7810 */    57,   58,   59,   60,   61,  337,  337,  337,  337,  337,
 /*  7820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7830 */   337,  337,   79,   80,   81,   82,   83,   84,   85,   86,
 /*  7840 */    87,   88,  337,  337,  337,   92,  337,  337,   95,   96,
 /*  7850 */    97,   98,   99,  100,  101,  102,  103,  104,  337,  337,
 /*  7860 */   337,  337,  337,  110,  337,  337,  337,  337,  337,  116,
 /*  7870 */   117,  118,  119,    9,  121,  337,  337,   13,  337,  337,
 /*  7880 */   337,  337,  337,   19,   20,   21,   22,   23,   24,   25,
 /*  7890 */    26,   27,   28,   29,  337,  337,  337,   33,   34,   35,
 /*  7900 */    36,  337,   38,   39,  337,   41,   42,   43,   44,  337,
 /*  7910 */   337,   47,  337,  337,   50,   51,   52,   53,  337,  337,
 /*  7920 */    56,   57,   58,   59,   60,   61,  337,  337,  337,  337,
 /*  7930 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7940 */   337,  337,  337,   79,   80,   81,   82,   83,   84,   85,
 /*  7950 */    86,   87,   88,  337,  337,  337,   92,  337,  337,   95,
 /*  7960 */    96,   97,   98,   99,  100,  101,  337,  337,  337,  130,
 /*  7970 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7980 */   116,  117,  118,  119,  337,  121,  147,  148,  337,  337,
 /*  7990 */   337,  337,  337,  154,  337,  337,  337,  337,  337,  337,
 /*  8000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8010 */   337,  337,  337,  174,  337,  337,  337,  178,  337,  337,
 /*  8020 */   337,  337,  183,  337,  185,  186,  337,  337,  189,  337,
 /*  8030 */   191,  130,  193,  337,  337,  196,  337,  337,  337,  337,
 /*  8040 */   337,  337,  337,  337,  337,  337,  337,  337,  147,  148,
 /*  8050 */   337,  337,  337,  337,  337,  154,  337,  337,  337,  337,
 /*  8060 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8070 */   337,  337,  337,  337,  337,  174,  337,  337,  337,  178,
 /*  8080 */   337,  337,  337,  337,  183,  337,  185,  186,  337,  337,
 /*  8090 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /*  8100 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8110 */   337,  337,  337,  337,  337,  276,  337,  278,  279,  280,
 /*  8120 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /*  8130 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /*  8140 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /*  8150 */   311,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  8160 */   321,  322,  323,  324,  337,  337,  337,  328,  329,  330,
 /*  8170 */   331,  332,  333,  334,  335,  336,  337,  276,  337,  278,
 /*  8180 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  8190 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  8200 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  8210 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  8220 */   319,  320,  321,  322,  323,  324,  337,  337,  337,  328,
 /*  8230 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /*  8240 */   337,  337,  337,  337,    9,  337,  130,  337,   13,  337,
 /*  8250 */   134,  135,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8260 */   337,  337,  337,  337,  148,  337,  337,  130,   33,  337,
 /*  8270 */    35,   36,   37,   38,   39,  337,   41,   42,   43,   44,
 /*  8280 */   337,  337,  337,  337,  337,   50,   51,   52,   53,  337,
 /*  8290 */   174,   56,   57,   58,   59,   60,   61,  337,  337,  183,
 /*  8300 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /*  8310 */   337,  174,  196,  337,  130,  337,  337,  337,  134,  337,
 /*  8320 */   337,  337,  337,  337,  337,  337,  189,  337,  337,  213,
 /*  8330 */   193,  337,  148,  196,  337,  337,  337,  337,  337,  337,
 /*  8340 */   337,  337,  337,  337,  151,  152,  337,  154,  337,  337,
 /*  8350 */   337,  158,  159,  337,  337,  337,  337,  337,  174,  337,
 /*  8360 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  253,
 /*  8370 */   186,  178,  337,  189,  337,  191,  337,  193,  185,  337,
 /*  8380 */   196,  265,  189,  337,  268,  192,  193,  271,  195,  337,
 /*  8390 */   337,  337,  276,  337,  278,  279,  280,  213,  282,  337,
 /*  8400 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  8410 */   337,  295,  296,  297,  298,  337,  300,  301,  337,  337,
 /*  8420 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /*  8430 */   337,  337,  337,  317,  337,  319,  320,  253,  337,  337,
 /*  8440 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  265,
 /*  8450 */   337,  337,  268,  337,  317,  271,  319,  320,  337,  337,
 /*  8460 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /*  8470 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /*  8480 */   296,  297,  298,  337,  300,  337,  337,  337,  304,  305,
 /*  8490 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /*  8500 */   337,  317,  134,  319,  320,  312,  313,  314,  337,  337,
 /*  8510 */   317,  337,  319,  320,  337,  337,  148,  337,  337,  337,
 /*  8520 */   337,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*  8530 */   337,  337,  147,  337,  337,  337,  337,  337,  337,  154,
 /*  8540 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /*  8550 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /*  8560 */   337,  193,  337,  178,  196,  337,  337,    9,  337,  337,
 /*  8570 */   185,   13,  337,  337,  189,  337,  337,  337,  193,  337,
 /*  8580 */   337,  213,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8590 */   337,   33,  337,   35,   36,  337,   38,   39,  337,   41,
 /*  8600 */    42,   43,   44,  337,  337,   47,  337,  337,   50,   51,
 /*  8610 */    52,   53,  337,  337,   56,   57,   58,   59,   60,   61,
 /*  8620 */   337,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8630 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  8640 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  8650 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  8660 */   292,  337,  337,  295,  296,  297,  298,  337,  300,  337,
 /*  8670 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  8680 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /*  8690 */   337,  337,  337,  337,  337,  337,  337,  312,  313,  314,
 /*  8700 */   148,  337,  317,  337,  319,  320,  321,  322,  323,  324,
 /*  8710 */   337,  337,  337,  328,  329,  330,  331,  332,  333,  334,
 /*  8720 */   335,  336,  154,  337,  337,  337,  174,  337,  337,  337,
 /*  8730 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /*  8740 */   337,  189,  337,  191,  337,  193,  178,  337,  196,  197,
 /*  8750 */   337,  337,  337,  185,  337,  337,  337,  189,  337,    9,
 /*  8760 */   337,  193,  337,   13,  337,  213,  337,  337,  337,  337,
 /*  8770 */   337,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  8780 */   337,  337,  337,   33,   34,   35,   36,  337,   38,   39,
 /*  8790 */   337,   41,   42,   43,   44,  337,  337,  245,  337,  337,
 /*  8800 */    50,   51,   52,   53,  337,  253,   56,   57,   58,   59,
 /*  8810 */    60,   61,  337,  337,  337,  337,  337,  265,  337,  337,
 /*  8820 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /*  8830 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /*  8840 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /*  8850 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /*  8860 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /*  8870 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /*  8880 */   312,  313,  314,  337,  148,  317,  337,  319,  320,  337,
 /*  8890 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  8900 */   332,  333,  334,  335,  336,  337,  337,  337,  130,  337,
 /*  8910 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /*  8920 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /*  8930 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /*  8940 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  213,
 /*  8950 */   337,  337,  174,  147,  337,  337,  337,  337,  337,  337,
 /*  8960 */   154,  337,  337,  337,  337,  337,  337,  189,  337,  337,
 /*  8970 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /*  8980 */   337,  245,  337,  337,  178,  337,  337,  337,  337,  253,
 /*  8990 */   337,  185,  337,  337,  337,  189,  337,  337,  337,  193,
 /*  9000 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  9010 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  9020 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  9030 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  9040 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /*  9050 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  9060 */   337,  337,  284,  285,  337,  337,  337,  289,  148,  337,
 /*  9070 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  9080 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  9090 */   337,  337,  337,  337,  174,  317,  337,  319,  320,  337,
 /*  9100 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /*  9110 */   337,  191,  337,  193,  337,  337,  196,  337,  312,  313,
 /*  9120 */   314,  337,  337,  317,  337,  319,  320,  321,  322,  323,
 /*  9130 */   324,  337,  337,  213,  328,  329,  330,  331,  332,  333,
 /*  9140 */   334,  335,  336,  337,  337,  337,  337,  337,  337,  337,
 /*  9150 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9160 */   337,  337,  242,  337,  337,  337,  337,  337,  337,  337,
 /*  9170 */   337,  337,  337,  253,  337,  337,  337,  337,  337,  337,
 /*  9180 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /*  9190 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /*  9200 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /*  9210 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /*  9220 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /*  9230 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /*  9240 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9250 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /*  9260 */   337,  337,  337,  337,  337,  337,  337,  147,  337,  337,
 /*  9270 */   337,  337,  337,  337,  154,  337,  337,  337,  174,  337,
 /*  9280 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /*  9290 */   186,  337,  337,  189,  337,  191,  337,  193,  178,  337,
 /*  9300 */   196,  337,  337,  337,  337,  185,  337,  337,  337,  189,
 /*  9310 */   337,  337,  337,  193,  337,  337,  337,  213,  337,  337,
 /*  9320 */   337,  147,  337,  337,  337,  337,  337,  337,  154,  337,
 /*  9330 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9340 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9350 */   337,  337,  178,  337,  337,  337,  337,  253,  337,  185,
 /*  9360 */   337,  337,  337,  189,  337,  337,  337,  193,  337,  265,
 /*  9370 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /*  9380 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /*  9390 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /*  9400 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /*  9410 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /*  9420 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /*  9430 */   337,  337,  312,  313,  314,  337,  148,  317,  337,  319,
 /*  9440 */   320,  321,  322,  323,  324,  337,  337,  337,  328,  329,
 /*  9450 */   330,  331,  332,  333,  334,  335,  336,  337,  337,  337,
 /*  9460 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /*  9470 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /*  9480 */   337,  193,  337,  337,  196,  337,  312,  313,  314,  337,
 /*  9490 */   337,  317,  337,  319,  320,  321,  322,  323,  324,  337,
 /*  9500 */   337,  213,  328,  329,  330,  331,  332,  333,  334,  335,
 /*  9510 */   336,  337,  337,  337,  337,  337,  337,   13,  337,  337,
 /*  9520 */   337,  337,  337,  337,  337,   21,   22,   23,   24,   25,
 /*  9530 */    26,   27,   28,   29,   30,  337,  337,  337,   34,   35,
 /*  9540 */    36,  253,   38,   39,  337,   41,   42,   43,   44,  337,
 /*  9550 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  9560 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  9570 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  9580 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  9590 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  9600 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /*  9610 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9620 */   148,  337,   13,  337,  337,  337,  337,  337,  337,  337,
 /*  9630 */    21,   22,   23,   24,   25,   26,   27,   28,   29,  337,
 /*  9640 */   337,  337,  154,   34,   35,   36,  174,   38,   39,  337,
 /*  9650 */    41,   42,   43,   44,  337,  183,  337,  337,  186,  337,
 /*  9660 */   337,  189,  337,  191,  337,  193,  178,  337,  196,  337,
 /*  9670 */   337,    9,  337,  185,  337,   13,  337,  189,  337,  337,
 /*  9680 */   337,  193,  337,  337,  337,  213,  337,  337,  337,  337,
 /*  9690 */   337,  337,  337,  337,  337,   33,  337,   35,   36,  337,
 /*  9700 */    38,   39,  337,   41,   42,   43,   44,   45,  337,  337,
 /*  9710 */   337,  337,   50,   51,   52,   53,  337,  337,   56,   57,
 /*  9720 */    58,   59,   60,   61,  337,  253,  337,  337,  337,  337,
 /*  9730 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /*  9740 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /*  9750 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /*  9760 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /*  9770 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /*  9780 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /*  9790 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /*  9800 */   312,  313,  314,  337,  148,  317,  337,  319,  320,  337,
 /*  9810 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  9820 */   332,  333,  334,  335,  336,  337,  337,  337,  337,  337,
 /*  9830 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /*  9840 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /*  9850 */   337,  337,  196,  337,  337,    9,  337,  337,  337,   13,
 /*  9860 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  213,
 /*  9870 */   337,  337,  337,  337,  337,  337,  337,  337,  337,   33,
 /*  9880 */   337,   35,   36,  337,   38,   39,  337,   41,   42,   43,
 /*  9890 */    44,  337,  337,  337,  337,  337,   50,   51,   52,   53,
 /*  9900 */   337,  337,   56,   57,   58,   59,   60,   61,  337,  253,
 /*  9910 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9920 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  9930 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  9940 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  9950 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  9960 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /*  9970 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  9980 */   337,  337,  337,  337,  337,  337,  337,  337,  148,  337,
 /*  9990 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10010 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /* 10020 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 10030 */   337,  191,  337,  193,  337,  337,  196,  337,  337,  337,
 /* 10040 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10050 */   337,  337,  337,  213,  337,  337,  337,  337,  337,  337,
 /* 10060 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10070 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10080 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10090 */   337,  337,  337,  253,  337,  337,  337,  337,  337,  337,
 /* 10100 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /* 10110 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 10120 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 10130 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 10140 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 10150 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /* 10160 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10170 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 10180 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10190 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 10200 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 10210 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 10220 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10230 */   337,  337,  337,  337,  337,  337,  337,  213,  337,  337,
 /* 10240 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10250 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10260 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10270 */   337,  337,  337,  337,  337,  337,  337,  253,  337,  337,
 /* 10280 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /* 10290 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 10300 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 10310 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 10320 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 10330 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /* 10340 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /* 10350 */   337,  337,  337,  337,  337,  337,  148,  337,  337,  337,
 /* 10360 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10370 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10380 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /* 10390 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /* 10400 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /* 10410 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10420 */   337,  213,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10430 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10440 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10450 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10460 */   337,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10470 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /* 10480 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /* 10490 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /* 10500 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /* 10510 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /* 10520 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /* 10530 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10540 */   148,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10550 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10560 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 10570 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 10580 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /* 10590 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10600 */   337,  337,  337,  337,  337,  213,  337,  337,  337,  337,
 /* 10610 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10620 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10630 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10640 */   337,  337,  337,  337,  337,  253,  337,  337,  337,  337,
 /* 10650 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /* 10660 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /* 10670 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 10680 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 10690 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 10700 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /* 10710 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /* 10720 */   337,  337,  337,  337,  148,  337,  337,  337,  337,  337,
 /* 10730 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10740 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10750 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 10760 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 10770 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 10780 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  213,
 /* 10790 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10800 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10810 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  253,
 /* 10830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10840 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /* 10850 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /* 10860 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 10870 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 10880 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 10890 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /* 10900 */   337,  337,  337,  337,  337,  337,  337,  337,  148,  337,
 /* 10910 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10920 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10930 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /* 10940 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 10950 */   337,  191,  337,  193,  337,  337,  196,  337,  337,  337,
 /* 10960 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10970 */   337,  337,  337,  213,  337,  337,  337,  337,  337,  337,
 /* 10980 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10990 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11010 */   337,  337,  337,  253,  337,  337,  337,  337,  337,  337,
 /* 11020 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /* 11030 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 11040 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 11050 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 11060 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 11070 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /* 11080 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11090 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 11100 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11110 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 11120 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 11130 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 11140 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11150 */   337,  337,  337,  337,  337,  337,  337,  213,  337,  337,
 /* 11160 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11170 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11180 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11190 */   337,  337,  337,  337,  337,  337,  337,  253,  337,  337,
 /* 11200 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /* 11210 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 11220 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 11230 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 11240 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 11250 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /* 11260 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /* 11270 */   337,  337,  337,  337,  337,  337,  148,  337,  337,  337,
 /* 11280 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11290 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11300 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /* 11310 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /* 11320 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /* 11330 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11340 */   337,  213,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11350 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11360 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11370 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11380 */   337,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11390 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /* 11400 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /* 11410 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /* 11420 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /* 11430 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /* 11440 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /* 11450 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11460 */   148,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11470 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11480 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 11490 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 11500 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /* 11510 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11520 */   337,  337,  337,  337,  337,  213,  337,  337,  337,  337,
 /* 11530 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11540 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11550 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11560 */   337,  337,  337,  337,  337,  253,  337,  337,  337,  337,
 /* 11570 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /* 11580 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /* 11590 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 11600 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 11610 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 11620 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /* 11630 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /* 11640 */   337,  337,  337,  337,  148,  337,  337,  337,  337,  337,
 /* 11650 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11660 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11670 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 11680 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 11690 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 11700 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  213,
 /* 11710 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11720 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11730 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11740 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  253,
 /* 11750 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11760 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /* 11770 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /* 11780 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 11790 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 11800 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 11810 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /* 11820 */   337,  337,  337,  337,  337,  337,  337,  337,  148,  337,
 /* 11830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11840 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11850 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /* 11860 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 11870 */   337,  191,  337,  193,  337,  337,  196,  337,  337,  337,
 /* 11880 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11890 */   337,  337,  337,  213,  337,  337,  337,  337,  337,  337,
 /* 11900 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11910 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11920 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11930 */   337,  337,  337,  253,  337,  337,  337,  337,  337,  337,
 /* 11940 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /* 11950 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 11960 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 11970 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 11980 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 11990 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /* 12000 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12010 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 12020 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12030 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 12040 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 12050 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 12060 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12070 */   337,  337,  337,  337,  337,  337,  337,  213,  337,  337,
 /* 12080 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12090 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12100 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12110 */   337,  337,  337,  337,  337,  337,  337,  253,  337,  337,
 /* 12120 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /* 12130 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 12140 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 12150 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 12160 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 12170 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /* 12180 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /* 12190 */   337,  337,  337,  337,  337,  337,  148,  337,  337,  337,
 /* 12200 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12210 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12220 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /* 12230 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /* 12240 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /* 12250 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12260 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12270 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12280 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12290 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12300 */   337,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12310 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /* 12320 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /* 12330 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /* 12340 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /* 12350 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /* 12360 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /* 12370 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12380 */   148,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12390 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12400 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 12410 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 12420 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /* 12430 */   337,  337,  130,  337,  337,  337,  337,  337,  337,  337,
 /* 12440 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12450 */   148,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12460 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12470 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 12480 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 12490 */   337,  189,  337,  191,  337,  193,  337,  265,  196,  337,
 /* 12500 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /* 12510 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 12520 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 12530 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 12540 */   308,  309,  337,  311,  337,  337,  337,  337,  337,  317,
 /* 12550 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /* 12560 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /* 12570 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /* 12580 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 12590 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 12600 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 12610 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /* 12620 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /* 12630 */   337,  337,  337,  337,  148,  337,  337,  337,  337,  337,
 /* 12640 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12650 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12660 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 12670 */   130,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 12680 */   337,  337,  196,  337,  337,  337,  337,  337,  148,  337,
 /* 12690 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12700 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12710 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /* 12720 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 12730 */   337,  191,  337,  193,  337,  337,  196,  337,  337,  337,
 /* 12740 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12750 */   337,  337,  337,  337,  268,  337,  337,  271,  337,  337,
 /* 12760 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /* 12770 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 12780 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 12790 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 12800 */   337,  337,  337,  317,  337,  319,  320,  337,  268,  337,
 /* 12810 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 12820 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 12830 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 12840 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 12850 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /* 12860 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12870 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 12880 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12890 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 12900 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 12910 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 12920 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12930 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12940 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12950 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12960 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12970 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12980 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12990 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 13000 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 13010 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 13020 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 13030 */   306,  307,  308,  309,  337,  311,  337,  337,    9,  337,
 /* 13040 */   337,  317,   13,  319,  320,  337,  337,  337,   19,  337,
 /* 13050 */    21,   22,   23,   24,   25,   26,   27,   28,   29,  337,
 /* 13060 */   337,  337,   33,   34,   35,   36,  337,   38,   39,  337,
 /* 13070 */    41,   42,   43,   44,  337,  337,  337,  337,  337,   50,
 /* 13080 */    51,   52,   53,  337,  337,   56,   57,   58,   59,   60,
 /* 13090 */    61,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13100 */   337,  337,  337,  337,  337,  337,  337,  337,   79,   80,
 /* 13110 */    81,   82,   83,   84,   85,  337,  337,  337,    9,  337,
 /* 13120 */   337,  337,   13,  337,  337,  337,  337,  337,  337,  337,
 /* 13130 */    21,   22,   23,   24,   25,   26,   27,   28,   29,  337,
 /* 13140 */   337,  337,   33,   34,   35,   36,  337,   38,   39,  337,
 /* 13150 */    41,   42,   43,   44,  337,  337,  337,  337,  337,   50,
 /* 13160 */    51,   52,   53,  337,  337,   56,   57,   58,   59,   60,
 /* 13170 */    61,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13180 */   337,  337,  337,  337,  337,  337,  337,  337,   79,   80,
 /* 13190 */    81,   82,   83,   84,   85,  337,  337,  337,  337,    9,
 /* 13200 */   337,  337,   93,   13,  337,  337,  337,  337,  337,  337,
 /* 13210 */   337,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /* 13220 */   337,  337,  337,   33,   34,   35,   36,  337,   38,   39,
 /* 13230 */   337,   41,   42,   43,   44,  337,  337,  337,  337,  337,
 /* 13240 */    50,   51,   52,   53,  337,  337,   56,   57,   58,   59,
 /* 13250 */    60,   61,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13260 */   337,  130,  337,  337,  337,  337,  337,  337,  337,   79,
 /* 13270 */    80,   81,   82,   83,   84,   85,  337,  337,  147,  337,
 /* 13280 */   337,  337,  337,  337,  337,  154,  337,  337,  157,  337,
 /* 13290 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13300 */   337,  337,  337,  337,  337,  174,  337,  337,  337,  178,
 /* 13310 */   337,  337,  337,  337,  337,  337,  185,  337,  337,  337,
 /* 13320 */   189,  337,  337,  337,  193,  337,  337,  196,  337,  337,
 /* 13330 */   130,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13340 */   337,  337,  337,  337,  337,  337,  337,  337,  148,  337,
 /* 13350 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13360 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13370 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /* 13380 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 13390 */   337,  191,  337,  193,  337,  337,  196,  337,  337,  337,
 /* 13400 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13410 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13420 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13430 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /* 13440 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /* 13450 */   319,  320,  321,  322,  323,  324,  325,  337,  327,  328,
 /* 13460 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /* 13470 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 13480 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 13490 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 13500 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 13510 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /* 13520 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13530 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 13540 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13550 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 13560 */   337,  337,  337,  337,  337,  337,  130,  183,  337,  337,
 /* 13570 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 13580 */   196,  337,  337,  337,  148,  337,  337,  130,  337,  337,
 /* 13590 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13600 */   337,  337,  337,  337,  147,  337,  337,  337,  337,  337,
 /* 13610 */   174,  154,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 13620 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 13630 */   337,  337,  196,  337,  337,  178,  179,  337,  337,  337,
 /* 13640 */   183,  337,  185,  186,  337,  337,  189,  337,  337,  337,
 /* 13650 */   193,  337,  337,  337,  337,  271,  199,  337,  337,  337,
 /* 13660 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 13670 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 13680 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 13690 */   306,  307,  308,  309,  337,  311,  337,  337,  337,  337,
 /* 13700 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /* 13710 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /* 13720 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 13730 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 13740 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 13750 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  302,
 /* 13760 */   303,  337,  337,  337,  337,  337,  337,  337,  148,  312,
 /* 13770 */   313,  314,  337,  337,  317,  337,  319,  320,  321,  322,
 /* 13780 */   323,  324,  337,  337,  337,  328,  329,  330,  331,  332,
 /* 13790 */   333,  334,  335,  336,  174,  337,  337,  130,  337,  337,
 /* 13800 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 13810 */   337,  191,  337,  193,  337,  148,  196,  337,  337,  337,
 /* 13820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13840 */   337,  174,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13850 */   183,  337,  337,  186,  337,  337,  189,  337,  191,  337,
 /* 13860 */   193,  337,  337,  196,  337,  337,  337,  337,  337,  337,
 /* 13870 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13880 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13890 */   337,  337,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 13900 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 13910 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 13920 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 13930 */   337,  311,  337,  337,  337,  337,  337,  317,  337,  319,
 /* 13940 */   320,  337,  337,  276,  337,  278,  279,  280,  337,  282,
 /* 13950 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /* 13960 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /* 13970 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  337,
 /* 13980 */   337,  130,  337,  337,  317,  337,  319,  320,  337,  337,
 /* 13990 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  148,
 /* 14000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14010 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14020 */   337,  337,  337,  337,  337,  174,  337,  130,  337,  337,
 /* 14030 */   337,  337,  337,  337,  183,  337,  337,  186,  337,  337,
 /* 14040 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /* 14050 */   337,  337,  337,  337,  337,  337,  337,  337,  130,  337,
 /* 14060 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14070 */   337,  174,  337,  337,  337,  147,  337,  337,  337,  337,
 /* 14080 */   183,  337,  154,  186,  337,  337,  189,  337,  191,  337,
 /* 14090 */   193,  337,  337,  196,  337,  337,  337,  337,  337,  337,
 /* 14100 */   337,  337,  174,  337,  337,  337,  178,  337,  337,  337,
 /* 14110 */   337,  337,  337,  185,  337,  337,  337,  189,  337,  337,
 /* 14120 */   337,  193,  337,  337,  196,  337,  337,  276,  337,  278,
 /* 14130 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /* 14140 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /* 14150 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /* 14160 */   309,  337,  311,  337,  337,  130,  337,  337,  317,  337,
 /* 14170 */   319,  320,  337,  276,  337,  278,  279,  280,  337,  282,
 /* 14180 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /* 14190 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /* 14200 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  174,
 /* 14210 */   337,  337,  337,  337,  317,  337,  319,  320,  183,  337,
 /* 14220 */   337,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /* 14230 */   337,  196,  304,  305,  306,  307,  308,  309,  337,  311,
 /* 14240 */   312,  313,  314,  337,  130,  317,  337,  319,  320,  321,
 /* 14250 */   322,  323,  324,  337,  337,  337,  328,  329,  330,  331,
 /* 14260 */   332,  333,  334,  335,  336,  337,  337,  337,  337,  337,
 /* 14270 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14280 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 14290 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 14300 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 14310 */   196,  276,  130,  278,  279,  280,  337,  282,  337,  284,
 /* 14320 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  147,
 /* 14330 */   295,  296,  297,  298,  337,  337,  154,  337,  337,  304,
 /* 14340 */   305,  306,  307,  308,  309,  337,  311,  337,  337,  337,
 /* 14350 */   337,  337,  317,  337,  319,  320,  174,  337,  337,  337,
 /* 14360 */   178,  337,  337,  337,  337,  337,  337,  185,  337,  337,
 /* 14370 */   337,  189,  337,  337,  337,  193,  337,  337,  196,  337,
 /* 14380 */   337,  337,  130,  337,  337,  337,  337,  337,  337,  337,
 /* 14390 */   337,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 14400 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 14410 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 14420 */   306,  307,  308,  309,  337,  311,  174,  337,  337,  337,
 /* 14430 */   337,  317,  337,  319,  320,  183,  337,  337,  186,  337,
 /* 14440 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /* 14450 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14460 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14470 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14480 */   337,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 14490 */   308,  309,  337,  311,  312,  313,  314,  337,  337,  317,
 /* 14500 */   337,  319,  320,  321,  322,  323,  324,  337,  337,  337,
 /* 14510 */   328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
 /* 14520 */   337,  337,  337,  130,  337,  337,  337,  337,  337,  337,
 /* 14530 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 14540 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 14550 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 14560 */   308,  309,  337,  311,  337,  337,  130,  174,  337,  317,
 /* 14570 */   337,  319,  320,  337,  337,  337,  183,  337,  337,  186,
 /* 14580 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /* 14590 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14600 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14610 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 14620 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 14630 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 14640 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14650 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14660 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14670 */   337,  278,  337,  280,  337,  282,  337,  284,  285,  286,
 /* 14680 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /* 14690 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /* 14700 */   307,  308,  309,  337,  311,  337,  337,  130,  337,  337,
 /* 14710 */   317,  337,  319,  320,  278,  337,  280,  337,  282,  337,
 /* 14720 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 14730 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 14740 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 14750 */   130,  174,  337,  317,  337,  319,  320,  337,  337,  337,
 /* 14760 */   183,  337,  337,  186,  337,  337,  189,  147,  191,  337,
 /* 14770 */   193,  337,  337,  196,  154,  337,  337,  337,  337,  337,
 /* 14780 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14790 */   337,  337,  337,  337,  337,  337,  337,  337,  178,  179,
 /* 14800 */   337,  337,  337,  183,  337,  185,  186,  337,  337,  189,
 /* 14810 */   337,  337,  337,  193,  337,  337,  337,  197,  198,  199,
 /* 14820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14840 */   337,  337,  337,  337,  337,  130,  337,  337,  337,  337,
 /* 14850 */   337,  337,  337,  337,  337,  278,  337,  280,  337,  282,
 /* 14860 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /* 14870 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /* 14880 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  174,
 /* 14890 */   337,  337,  337,  337,  317,  337,  319,  320,  183,  337,
 /* 14900 */   337,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /* 14910 */   337,  196,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14920 */   337,  337,  302,  303,  337,  337,  337,  337,  337,  337,
 /* 14930 */   337,  337,  312,  313,  314,  337,  337,  317,  337,  319,
 /* 14940 */   320,  321,  322,  323,  324,  337,  337,  337,  328,  329,
 /* 14950 */   330,  331,  332,  333,  334,  335,  336,  337,  337,  337,
 /* 14960 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14970 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14980 */   337,  337,  337,  337,  337,  337,  130,  337,  337,  337,
 /* 14990 */   337,  337,  337,  278,  337,  280,  337,  337,  337,  284,
 /* 15000 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  337,
 /* 15010 */   295,  296,  297,  298,  337,  337,  337,  337,  337,  304,
 /* 15020 */   305,  306,  307,  308,  309,  337,  311,  337,  337,  130,
 /* 15030 */   174,  337,  317,  337,  319,  320,  337,  337,  337,  183,
 /* 15040 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 15050 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 15060 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15070 */   337,  337,  130,  174,  337,  337,  337,  337,  337,  337,
 /* 15080 */   337,  337,  183,  337,  337,  186,  337,  337,  189,  337,
 /* 15090 */   191,  337,  193,  337,  337,  196,  337,  337,  337,  337,
 /* 15100 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15110 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 15120 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 15130 */   337,  189,  337,  191,  278,  193,  280,  337,  196,  337,
 /* 15140 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 15150 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 15160 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 15170 */   337,  337,  337,  317,  337,  319,  320,  278,  337,  280,
 /* 15180 */   337,  337,  337,  284,  285,  286,  287,  288,  289,  290,
 /* 15190 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /* 15200 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /* 15210 */   311,  337,  337,  130,  337,  337,  317,  337,  319,  320,
 /* 15220 */   278,  337,  280,  337,  337,  337,  284,  285,  286,  287,
 /* 15230 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 15240 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 15250 */   308,  309,  337,  311,  337,  337,  130,  174,  337,  317,
 /* 15260 */   337,  319,  320,  337,  337,  337,  183,  337,  337,  186,
 /* 15270 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /* 15280 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15290 */   337,  337,  337,  337,  130,  337,  337,  337,  337,  337,
 /* 15300 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 15310 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 15320 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 15330 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 15340 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 15350 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 15360 */   196,  278,  337,  280,  337,  337,  337,  284,  285,  286,
 /* 15370 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /* 15380 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /* 15390 */   307,  308,  309,  337,  311,  337,  337,  337,  337,  337,
 /* 15400 */   317,  337,  319,  320,  278,  337,  280,  337,  337,  337,
 /* 15410 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 15420 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 15430 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 15440 */   337,  337,  278,  317,  280,  319,  320,  337,  284,  285,
 /* 15450 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 15460 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 15470 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /* 15480 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /* 15490 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15500 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15510 */   337,  337,  337,  337,  337,  337,  337,  337,  130,  337,
 /* 15520 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /* 15530 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /* 15540 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /* 15550 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15560 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /* 15570 */   337,  337,  337,  337,  337,  337,  337,  189,  337,  337,
 /* 15580 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /* 15590 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15600 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15610 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15620 */   337,  337,  337,  337,  337,  337,  278,  337,  280,  337,
 /* 15630 */   337,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /* 15640 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /* 15650 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /* 15660 */   337,  337,  337,  337,  337,  317,  337,  319,  320,  337,
 /* 15670 */   337,  337,  284,  285,  337,  337,  337,  289,  337,  337,
 /* 15680 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /* 15690 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /* 15700 */   337,  337,  337,  337,  337,  317,  337,  319,  320,
);
    const YY_SHIFT_USE_DFLT = -44;
    const YY_SHIFT_MAX = 577;
    static public $yy_shift_ofst = array(
 /*     0 */  7531, 7002, 7002, 7113, 7420, 7420, 7420, 7753, 7420, 7642,
 /*    10 */  7420, 7420, 7420, 7753, 7753, 7753, 7753, 7753, 7753, 7753,
 /*    20 */  7753, 7753, 7753, 7753, 7753, 7753, 7864, 7864, 7864, 7864,
 /*    30 */  7864, 13109, 13029, 13190, 13190, 13190, 13190, 13190, 13190, 13190,
 /*    40 */  8750, 8750, 8750, 7270, 8558, 8235, 8558, 9662, 9846, 9846,
 /*    50 */  9846, 9846, 9846, 9846, 9846, 9846, 9846, 9846, 9846, 9846,
 /*    60 */  9846, 9846, 9846, 9846, 9846, 9846, 9846, 9846, 9846, 9846,
 /*    70 */  9846, 9846, 9846, 9504, 9846, 9846, 9846, 9846, 9846, 9846,
 /*    80 */  9846, 9846, 9609, 9609, 9846, 9846, 9846, 5275, 9846, 9846,
 /*    90 */  9846, 9846, 9846, 9846, 9846, 9846, 5659, 5467, 5506, 5506,
 /*   100 */  5506, 5506,  847,  847, 5946, 5506, 5506, 4237,  108, 4449,
 /*   110 */   227,  725,  725,   65, 4225,   65,  441,  441,  581,  581,
 /*   120 */   581, 1055, 1055, 1055,  306,  -30,  959,  328,  884,  192,
 /*   130 */   872,  451,   -7,  451,  849,   -7,  632,  527,  841,  841,
 /*   140 */   192,  841,  699, 1034,  844,   28,  975,   28,  994,  213,
 /*   150 */   487,  213,  213,  487,    9,    9,   15,  213,  487,  247,
 /*   160 */   323,  841,  660,  247,  951, 1043, 1030,  997,  330, 1253,
 /*   170 */  1256, 1062, 1305,  674,   28,   10,  926,  663,   10,  805,
 /*   180 */   151,   10,  665,  539,  674,  386,  674,  151,  539,  205,
 /*   190 */    10,  951,   28,   28,  674,   28,  205,  365,   53,  151,
 /*   200 */   151,  665,  539,   10,  205,   70,  151,   70,   10,  151,
 /*   210 */    10,  365,  151,   28,   10,  365,  663,   10,  365,  330,
 /*   220 */  1253,  330,  330,  661, 1305,  330, 1256,  691,  883,  886,
 /*   230 */   901, 1148, 1235,   97,   97,   97,   97,   97,   97,   97,
 /*   240 */   330, 1228,   97,   97, 1148, 1378, 1148,   97,   97, 1284,
 /*   250 */    97,   97,   97,   97, 1236, 1279,   97, 1236,   97,   97,
 /*   260 */   330,  661,   97,   97,   97,   97,   97, 1236,   97,   97,
 /*   270 */    97,   97,   97, 1228,   97,   97,   97,   97,  330,   97,
 /*   280 */    97,   97,   97,   97,   97,   97, 1256, 1256,  330, 1148,
 /*   290 */    97,   97,  -43,  661,  -43,   97,   97,   97, 1148, 1148,
 /*   300 */  1555,   97,   97,   97,   97,   97,  330, 1378,   97, 1148,
 /*   310 */    97,   97,   97,   97,   97, 1524,   97, 1256,   97,   97,
 /*   320 */  1412,   97,   97,  616,  454,   97,  454,   97,   97,   97,
 /*   330 */   616,   97, 1386,   97,   97,  661,  661,   97,   97, 1388,
 /*   340 */    97, 1386,   97,   97,   97,   97,   97, 1386,   97,   97,
 /*   350 */  1386,   97,   97, 1386,   97,   97, 1386,   97,  330, 1388,
 /*   360 */    97, 1062,   97,   97, 1183, 1118,   97,   97,   97, 1118,
 /*   370 */    97,   97,   97, 1118,   97, 1118,   97, 1062, 1137,   97,
 /*   380 */   661,   97, 1137,   97, 1118,   97,   97,   97,   97,   97,
 /*   390 */   661,   97,  330,   97, 1148,   97,   97,   97,   97,  661,
 /*   400 */    97,   97,   97,   97,  616,   97,   97,   97,   97,  454,
 /*   410 */    97,  -43,   97,   97,  330,   97,   97,  661,   97, 1062,
 /*   420 */    97,   97,   97,  661,   97,   97, 1062,   97,   97,   97,
 /*   430 */    97,   97, 1062, 1054,  954,  954,  954,  954, 1226,  954,
 /*   440 */   954,  954, 1217,  954,  954,  954,  954,  954,  954,  954,
 /*   450 */   954,  954,  954,  954, 1187,  954,  954,  954,  954,  954,
 /*   460 */   954,  954,  954, 1213,  954,  954, 1221,  954,  954, 1214,
 /*   470 */   954,  954,  954,  954,  954, 1229,  954,  954,  954,  954,
 /*   480 */   954,  954, 1232,  954,  954,  954,  954,  954,  954,  954,
 /*   490 */   954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
 /*   500 */  1227,  954,  954,  954,  954,  954,  954,  954,  954,  954,
 /*   510 */   954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
 /*   520 */   954,  954,  954,  954,  954,  954, 1194,  954,  954, 1192,
 /*   530 */   954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
 /*   540 */   954,  954,  954,  954, 1211,  954,  954,  954,  954,  954,
 /*   550 */   954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
 /*   560 */   954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
 /*   570 */   954, 1212,  954,  954,  954,  954,  954,  954,
);
    const YY_REDUCE_USE_DFLT = -257;
    const YY_REDUCE_MAX = 432;
    static public $yy_reduce_ofst = array(
 /*     0 */   506, -127,  293,   83, 1354,  930,  718, 1142, 3678, 3046,
 /*    10 */  3468, 1986, 1776, 1566, 3258, 2198, 2834, 2622, 2410, 3888,
 /*    20 */  3888, 3888, 3888, 3888, 3888, 3888, 4097, 4309, 4521, 4733,
 /*    30 */  4945, 5137, 5329, 6481, 6097, 6673, 5521, 5905, 5713, 6289,
 /*    40 */  7091, 7901, 7839, 8116, 8184, 8552, 8368, 8920, 8736, 9472,
 /*    50 */  9656, 11864, 9104, 9288, 11680, 11128, 9840, 11312, 11496, 10944,
 /*    60 */  10760, 10024, 10208, 10576, 10392, 12048, 12232, 12302, 12486, 12724,
 /*    70 */  12540, 13384, 13200, 13131, 13436, 13620, 13667, 13851, 14035, 13897,
 /*    80 */  14252, 14114, 14182, 13928, 14577, 14436, 14393, 14620, 14856, 14899,
 /*    90 */  14715, 14942, 15083, 15126, 15348, 15164, 13457, 8193, 8385, 8806,
 /*   100 */  9174, 9120, 8778, 15388, 5217, 8568, 9488, 5409, 5795, 5601,
 /*   110 */  6177, 8137, 5948, 5159,  413,   12,  254,  793,  222,  677,
 /*   120 */   645,  257,  257,  257,  998,  335, 1210,  396,  301,  -85,
 /*   130 */   159,  -29,  401,  -29,  -29, -256, -114,  398, -115,  832,
 /*   140 */    94,  -70,   67, -143, -152,  334,  466,  669,  135,  219,
 /*   150 */   -94,  408,  623,  -94,  508,  369,   -4,  -80,  -94,  -10,
 /*   160 */   -10,  518,  127,  -10,  452,  455,  447,  295,  -40,  248,
 /*   170 */   403,  194,  460,  769,  830,  840,  -17,  493,  859,  563,
 /*   180 */   161,  820,  937,  955,  769,  787,  769,  161,  902, -183,
 /*   190 */   936,  920,  904,  898,  769,  385, -183,  172,  309,  161,
 /*   200 */   161,  473,  156,  415, -183,  333,  161,  305,   96,  161,
 /*   210 */   809,  172,  161,  598,  753,  172, -192,  761,  172,  626,
 /*   220 */   417,  610,  593,  210,  655,  631,  744, 1239, 1243, 1237,
 /*   230 */  1234, 1139, 1145, 1215, 1218, 1223, 1222, 1219, 1220, 1246,
 /*   240 */  1206, 1165, 1275, 1277, 1238, 1262, 1207, 1273, 1252, 1146,
 /*   250 */  1248, 1249, 1259, 1272, 1181, 1216, 1270, 1116, 1161, 1160,
 /*   260 */  1089, 1159, 1173, 1172, 1162, 1166, 1158, 1041, 1128, 1127,
 /*   270 */  1130, 1156, 1151, 1025, 1149, 1176, 1195, 1193, 1119, 1196,
 /*   280 */  1204, 1203, 1197, 1200, 1188, 1180, 1171, 1170, 1111, 1115,
 /*   290 */  1185, 1184, 1163, 1426, 1406, 1422, 1425, 1429, 1373, 1363,
 /*   300 */  1323, 1418, 1408, 1407, 1405, 1401, 1342, 1410, 1416, 1344,
 /*   310 */  1409, 1452, 1453, 1454, 1450, 1376, 1334, 1329, 1332, 1326,
 /*   320 */  1224, 1338, 1343, 1322, 1282, 1339, 1281, 1319, 1397, 1290,
 /*   330 */  1255, 1288, 1080, 1286, 1297, 1313, 1314, 1316, 1299, 1306,
 /*   340 */  1361, 1179, 1392, 1391, 1389, 1390, 1393, 1191, 1396, 1395,
 /*   350 */  1189, 1384, 1370, 1169, 1368, 1364, 1164, 1371, 1315, 1366,
 /*   360 */  1374, 1324, 1372, 1242,  850,  839, 1035, 1036, 1037,  857,
 /*   370 */  1046, 1040, 1031,  816, 1006,  807, 1002,  978,  972, 1010,
 /*   380 */  1007, 1047, 1019, 1074,  879, 1071, 1077, 1081, 1079, 1078,
 /*   390 */  1069, 1060,  991, 1058,  993, 1067, 1066, 1063, 1065,  854,
 /*   400 */   639,  540,  461,  646,  687, 1126,  742,  780,  786,   81,
 /*   410 */    40,  517,  374,  434,  147,  187,  190,  999,  981,  945,
 /*   420 */   977,  988, 1001,  990,  992,  976,  856,  798,  835,  851,
 /*   430 */   862,  960,  934,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, 122, ),
        /* 1 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 113, 114, 115, 116, 117, 118, 119, 121, ),
        /* 2 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 113, 114, 115, 116, 117, 118, 119, 121, ),
        /* 3 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 116, 117, 118, 119, 121, ),
        /* 4 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 5 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 6 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 7 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 8 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 9 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, 122, ),
        /* 10 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 11 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 12 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 13 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 14 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 15 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 16 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 17 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 18 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 19 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 20 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 21 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 22 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 23 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 24 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 25 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 26 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 27 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 28 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 29 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 30 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 31 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 93, ),
        /* 32 */ array(9, 13, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 33 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 34 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 35 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 36 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 37 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 38 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 39 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 40 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 41 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 42 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 43 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 44 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 45 */ array(9, 13, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 46 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 47 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 48 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 49 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 50 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 51 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 52 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 53 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 54 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 55 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 56 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 57 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 58 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 59 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 60 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 61 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 62 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 63 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 64 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 65 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 66 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 67 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 68 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 69 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 70 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 71 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 72 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 73 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 74 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 75 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 76 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 77 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 78 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 79 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 80 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 81 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 82 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 83 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 84 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 85 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 86 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 87 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 37, 39, ),
        /* 88 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 89 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 90 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 91 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 92 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 93 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 94 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 95 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 96 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, ),
        /* 97 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 116, 117, 118, ),
        /* 98 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 99 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 100 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 101 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 102 */ array(13, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, ),
        /* 103 */ array(13, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, ),
        /* 104 */ array(21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 110, 117, 118, 119, 120, ),
        /* 105 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 106 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 107 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 35, ),
        /* 108 */ array(21, 22, 23, 24, 25, 26, 27, 28, 29, 110, 117, 118, 119, 120, ),
        /* 109 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, ),
        /* 110 */ array(21, 22, 23, 24, 25, 26, 27, 28, 29, 110, 117, 118, 120, ),
        /* 111 */ array(13, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 112 */ array(13, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 113 */ array(9, 33, 34, 39, 109, ),
        /* 114 */ array(5, 8, 49, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, ),
        /* 115 */ array(9, 33, 34, 39, 109, ),
        /* 116 */ array(9, 33, 34, 39, ),
        /* 117 */ array(9, 33, 34, 39, ),
        /* 118 */ array(33, 34, 39, 109, ),
        /* 119 */ array(33, 34, 39, 109, ),
        /* 120 */ array(33, 34, 39, 109, ),
        /* 121 */ array(36, 45, 54, 55, 56, 57, ),
        /* 122 */ array(36, 45, 54, 55, 56, 57, ),
        /* 123 */ array(36, 45, 54, 55, 56, 57, ),
        /* 124 */ array(13, 32, 36, 40, ),
        /* 125 */ array(35, 39, 60, 108, ),
        /* 126 */ array(32, 36, 40, ),
        /* 127 */ array(13, 32, 36, ),
        /* 128 */ array(35, 60, 108, ),
        /* 129 */ array(48, 89, 90, ),
        /* 130 */ array(36, 45, 49, ),
        /* 131 */ array(30, 32, 66, 67, ),
        /* 132 */ array(23, 24, 25, 26, ),
        /* 133 */ array(30, 32, 66, 67, ),
        /* 134 */ array(30, 32, 66, 67, ),
        /* 135 */ array(23, 24, 25, 26, ),
        /* 136 */ array(116, 117, 118, ),
        /* 137 */ array(91, 111, 112, ),
        /* 138 */ array(33, 34, 39, ),
        /* 139 */ array(33, 34, 39, ),
        /* 140 */ array(48, 89, 90, ),
        /* 141 */ array(33, 34, 39, ),
        /* 142 */ array(13, 32, 40, ),
        /* 143 */ array(32, 40, ),
        /* 144 */ array(105, 106, ),
        /* 145 */ array(35, 39, ),
        /* 146 */ array(36, 45, ),
        /* 147 */ array(35, 39, ),
        /* 148 */ array(39, 48, ),
        /* 149 */ array(30, 33, 34, ),
        /* 150 */ array(7, 9, 10, ),
        /* 151 */ array(30, 33, 34, ),
        /* 152 */ array(30, 33, 34, ),
        /* 153 */ array(7, 9, 10, ),
        /* 154 */ array(33, 34, 37, ),
        /* 155 */ array(33, 34, 37, ),
        /* 156 */ array(5, 8, 46, ),
        /* 157 */ array(30, 33, 34, ),
        /* 158 */ array(7, 9, 10, ),
        /* 159 */ array(33, 62, 63, ),
        /* 160 */ array(33, 62, 63, ),
        /* 161 */ array(33, 34, 39, ),
        /* 162 */ array(23, 25, 27, ),
        /* 163 */ array(33, 62, 63, ),
        /* 164 */ array(30, 31, ),
        /* 165 */ array(13, 32, ),
        /* 166 */ array(13, 32, ),
        /* 167 */ array(39, 47, ),
        /* 168 */ array(36, ),
        /* 169 */ array(94, ),
        /* 170 */ array(47, ),
        /* 171 */ array(32, ),
        /* 172 */ array(35, ),
        /* 173 */ array(4, 68, ),
        /* 174 */ array(35, 39, ),
        /* 175 */ array(19, 47, ),
        /* 176 */ array(19, 47, ),
        /* 177 */ array(23, 25, ),
        /* 178 */ array(19, 47, ),
        /* 179 */ array(45, 49, ),
        /* 180 */ array(64, 65, ),
        /* 181 */ array(19, 47, ),
        /* 182 */ array(31, 48, ),
        /* 183 */ array(31, 37, ),
        /* 184 */ array(4, 68, ),
        /* 185 */ array(40, 91, ),
        /* 186 */ array(4, 68, ),
        /* 187 */ array(64, 65, ),
        /* 188 */ array(31, 37, ),
        /* 189 */ array(58, 59, ),
        /* 190 */ array(19, 47, ),
        /* 191 */ array(30, 31, ),
        /* 192 */ array(35, 39, ),
        /* 193 */ array(35, 39, ),
        /* 194 */ array(4, 68, ),
        /* 195 */ array(35, 39, ),
        /* 196 */ array(58, 59, ),
        /* 197 */ array(33, 34, ),
        /* 198 */ array(19, 47, ),
        /* 199 */ array(64, 65, ),
        /* 200 */ array(64, 65, ),
        /* 201 */ array(31, 48, ),
        /* 202 */ array(31, 37, ),
        /* 203 */ array(19, 47, ),
        /* 204 */ array(58, 59, ),
        /* 205 */ array(33, 39, ),
        /* 206 */ array(64, 65, ),
        /* 207 */ array(33, 39, ),
        /* 208 */ array(19, 47, ),
        /* 209 */ array(64, 65, ),
        /* 210 */ array(19, 47, ),
        /* 211 */ array(33, 34, ),
        /* 212 */ array(64, 65, ),
        /* 213 */ array(35, 39, ),
        /* 214 */ array(19, 47, ),
        /* 215 */ array(33, 34, ),
        /* 216 */ array(23, 25, ),
        /* 217 */ array(19, 47, ),
        /* 218 */ array(33, 34, ),
        /* 219 */ array(36, ),
        /* 220 */ array(94, ),
        /* 221 */ array(36, ),
        /* 222 */ array(36, ),
        /* 223 */ array(39, ),
        /* 224 */ array(35, ),
        /* 225 */ array(36, ),
        /* 226 */ array(47, ),
        /* 227 */ array(19, 39, ),
        /* 228 */ array(19, 39, ),
        /* 229 */ array(19, 39, ),
        /* 230 */ array(19, 39, ),
        /* 231 */ array(37, ),
        /* 232 */ array(108, ),
        /* 233 */ array(122, ),
        /* 234 */ array(122, ),
        /* 235 */ array(122, ),
        /* 236 */ array(122, ),
        /* 237 */ array(122, ),
        /* 238 */ array(122, ),
        /* 239 */ array(122, ),
        /* 240 */ array(36, ),
        /* 241 */ array(46, ),
        /* 242 */ array(122, ),
        /* 243 */ array(122, ),
        /* 244 */ array(37, ),
        /* 245 */ array(31, ),
        /* 246 */ array(37, ),
        /* 247 */ array(122, ),
        /* 248 */ array(122, ),
        /* 249 */ array(100, ),
        /* 250 */ array(122, ),
        /* 251 */ array(122, ),
        /* 252 */ array(122, ),
        /* 253 */ array(122, ),
        /* 254 */ array(19, ),
        /* 255 */ array(107, ),
        /* 256 */ array(122, ),
        /* 257 */ array(19, ),
        /* 258 */ array(122, ),
        /* 259 */ array(122, ),
        /* 260 */ array(36, ),
        /* 261 */ array(39, ),
        /* 262 */ array(122, ),
        /* 263 */ array(122, ),
        /* 264 */ array(122, ),
        /* 265 */ array(122, ),
        /* 266 */ array(122, ),
        /* 267 */ array(19, ),
        /* 268 */ array(122, ),
        /* 269 */ array(122, ),
        /* 270 */ array(122, ),
        /* 271 */ array(122, ),
        /* 272 */ array(122, ),
        /* 273 */ array(46, ),
        /* 274 */ array(122, ),
        /* 275 */ array(122, ),
        /* 276 */ array(122, ),
        /* 277 */ array(122, ),
        /* 278 */ array(36, ),
        /* 279 */ array(122, ),
        /* 280 */ array(122, ),
        /* 281 */ array(122, ),
        /* 282 */ array(122, ),
        /* 283 */ array(122, ),
        /* 284 */ array(122, ),
        /* 285 */ array(122, ),
        /* 286 */ array(47, ),
        /* 287 */ array(47, ),
        /* 288 */ array(36, ),
        /* 289 */ array(37, ),
        /* 290 */ array(122, ),
        /* 291 */ array(122, ),
        /* 292 */ array(49, ),
        /* 293 */ array(39, ),
        /* 294 */ array(49, ),
        /* 295 */ array(122, ),
        /* 296 */ array(122, ),
        /* 297 */ array(122, ),
        /* 298 */ array(37, ),
        /* 299 */ array(37, ),
        /* 300 */ array(2, ),
        /* 301 */ array(122, ),
        /* 302 */ array(122, ),
        /* 303 */ array(122, ),
        /* 304 */ array(122, ),
        /* 305 */ array(122, ),
        /* 306 */ array(36, ),
        /* 307 */ array(31, ),
        /* 308 */ array(122, ),
        /* 309 */ array(37, ),
        /* 310 */ array(122, ),
        /* 311 */ array(122, ),
        /* 312 */ array(122, ),
        /* 313 */ array(122, ),
        /* 314 */ array(122, ),
        /* 315 */ array(34, ),
        /* 316 */ array(122, ),
        /* 317 */ array(47, ),
        /* 318 */ array(122, ),
        /* 319 */ array(122, ),
        /* 320 */ array(45, ),
        /* 321 */ array(122, ),
        /* 322 */ array(122, ),
        /* 323 */ array(91, ),
        /* 324 */ array(33, ),
        /* 325 */ array(122, ),
        /* 326 */ array(33, ),
        /* 327 */ array(122, ),
        /* 328 */ array(122, ),
        /* 329 */ array(122, ),
        /* 330 */ array(91, ),
        /* 331 */ array(122, ),
        /* 332 */ array(25, ),
        /* 333 */ array(122, ),
        /* 334 */ array(122, ),
        /* 335 */ array(39, ),
        /* 336 */ array(39, ),
        /* 337 */ array(122, ),
        /* 338 */ array(122, ),
        /* 339 */ array(48, ),
        /* 340 */ array(122, ),
        /* 341 */ array(25, ),
        /* 342 */ array(122, ),
        /* 343 */ array(122, ),
        /* 344 */ array(122, ),
        /* 345 */ array(122, ),
        /* 346 */ array(122, ),
        /* 347 */ array(25, ),
        /* 348 */ array(122, ),
        /* 349 */ array(122, ),
        /* 350 */ array(25, ),
        /* 351 */ array(122, ),
        /* 352 */ array(122, ),
        /* 353 */ array(25, ),
        /* 354 */ array(122, ),
        /* 355 */ array(122, ),
        /* 356 */ array(25, ),
        /* 357 */ array(122, ),
        /* 358 */ array(36, ),
        /* 359 */ array(48, ),
        /* 360 */ array(122, ),
        /* 361 */ array(32, ),
        /* 362 */ array(122, ),
        /* 363 */ array(122, ),
        /* 364 */ array(40, ),
        /* 365 */ array(13, ),
        /* 366 */ array(122, ),
        /* 367 */ array(122, ),
        /* 368 */ array(122, ),
        /* 369 */ array(13, ),
        /* 370 */ array(122, ),
        /* 371 */ array(122, ),
        /* 372 */ array(122, ),
        /* 373 */ array(13, ),
        /* 374 */ array(122, ),
        /* 375 */ array(13, ),
        /* 376 */ array(122, ),
        /* 377 */ array(32, ),
        /* 378 */ array(9, ),
        /* 379 */ array(122, ),
        /* 380 */ array(39, ),
        /* 381 */ array(122, ),
        /* 382 */ array(9, ),
        /* 383 */ array(122, ),
        /* 384 */ array(13, ),
        /* 385 */ array(122, ),
        /* 386 */ array(122, ),
        /* 387 */ array(122, ),
        /* 388 */ array(122, ),
        /* 389 */ array(122, ),
        /* 390 */ array(39, ),
        /* 391 */ array(122, ),
        /* 392 */ array(36, ),
        /* 393 */ array(122, ),
        /* 394 */ array(37, ),
        /* 395 */ array(122, ),
        /* 396 */ array(122, ),
        /* 397 */ array(122, ),
        /* 398 */ array(122, ),
        /* 399 */ array(39, ),
        /* 400 */ array(122, ),
        /* 401 */ array(122, ),
        /* 402 */ array(122, ),
        /* 403 */ array(122, ),
        /* 404 */ array(91, ),
        /* 405 */ array(122, ),
        /* 406 */ array(122, ),
        /* 407 */ array(122, ),
        /* 408 */ array(122, ),
        /* 409 */ array(33, ),
        /* 410 */ array(122, ),
        /* 411 */ array(49, ),
        /* 412 */ array(122, ),
        /* 413 */ array(122, ),
        /* 414 */ array(36, ),
        /* 415 */ array(122, ),
        /* 416 */ array(122, ),
        /* 417 */ array(39, ),
        /* 418 */ array(122, ),
        /* 419 */ array(32, ),
        /* 420 */ array(122, ),
        /* 421 */ array(122, ),
        /* 422 */ array(122, ),
        /* 423 */ array(39, ),
        /* 424 */ array(122, ),
        /* 425 */ array(122, ),
        /* 426 */ array(32, ),
        /* 427 */ array(122, ),
        /* 428 */ array(122, ),
        /* 429 */ array(122, ),
        /* 430 */ array(122, ),
        /* 431 */ array(122, ),
        /* 432 */ array(32, ),
        /* 433 */ array(19, ),
        /* 434 */ array(122, ),
        /* 435 */ array(122, ),
        /* 436 */ array(122, ),
        /* 437 */ array(122, ),
        /* 438 */ array(19, ),
        /* 439 */ array(122, ),
        /* 440 */ array(122, ),
        /* 441 */ array(122, ),
        /* 442 */ array(13, ),
        /* 443 */ array(122, ),
        /* 444 */ array(122, ),
        /* 445 */ array(122, ),
        /* 446 */ array(122, ),
        /* 447 */ array(122, ),
        /* 448 */ array(122, ),
        /* 449 */ array(122, ),
        /* 450 */ array(122, ),
        /* 451 */ array(122, ),
        /* 452 */ array(122, ),
        /* 453 */ array(122, ),
        /* 454 */ array(42, ),
        /* 455 */ array(122, ),
        /* 456 */ array(122, ),
        /* 457 */ array(122, ),
        /* 458 */ array(122, ),
        /* 459 */ array(122, ),
        /* 460 */ array(122, ),
        /* 461 */ array(122, ),
        /* 462 */ array(122, ),
        /* 463 */ array(19, ),
        /* 464 */ array(122, ),
        /* 465 */ array(122, ),
        /* 466 */ array(19, ),
        /* 467 */ array(122, ),
        /* 468 */ array(122, ),
        /* 469 */ array(19, ),
        /* 470 */ array(122, ),
        /* 471 */ array(122, ),
        /* 472 */ array(122, ),
        /* 473 */ array(122, ),
        /* 474 */ array(122, ),
        /* 475 */ array(19, ),
        /* 476 */ array(122, ),
        /* 477 */ array(122, ),
        /* 478 */ array(122, ),
        /* 479 */ array(122, ),
        /* 480 */ array(122, ),
        /* 481 */ array(122, ),
        /* 482 */ array(19, ),
        /* 483 */ array(122, ),
        /* 484 */ array(122, ),
        /* 485 */ array(122, ),
        /* 486 */ array(122, ),
        /* 487 */ array(122, ),
        /* 488 */ array(122, ),
        /* 489 */ array(122, ),
        /* 490 */ array(122, ),
        /* 491 */ array(122, ),
        /* 492 */ array(122, ),
        /* 493 */ array(122, ),
        /* 494 */ array(122, ),
        /* 495 */ array(122, ),
        /* 496 */ array(122, ),
        /* 497 */ array(122, ),
        /* 498 */ array(122, ),
        /* 499 */ array(122, ),
        /* 500 */ array(19, ),
        /* 501 */ array(122, ),
        /* 502 */ array(122, ),
        /* 503 */ array(122, ),
        /* 504 */ array(122, ),
        /* 505 */ array(122, ),
        /* 506 */ array(122, ),
        /* 507 */ array(122, ),
        /* 508 */ array(122, ),
        /* 509 */ array(122, ),
        /* 510 */ array(122, ),
        /* 511 */ array(122, ),
        /* 512 */ array(122, ),
        /* 513 */ array(122, ),
        /* 514 */ array(122, ),
        /* 515 */ array(122, ),
        /* 516 */ array(122, ),
        /* 517 */ array(122, ),
        /* 518 */ array(122, ),
        /* 519 */ array(122, ),
        /* 520 */ array(122, ),
        /* 521 */ array(122, ),
        /* 522 */ array(122, ),
        /* 523 */ array(122, ),
        /* 524 */ array(122, ),
        /* 525 */ array(122, ),
        /* 526 */ array(19, ),
        /* 527 */ array(122, ),
        /* 528 */ array(122, ),
        /* 529 */ array(19, ),
        /* 530 */ array(122, ),
        /* 531 */ array(122, ),
        /* 532 */ array(122, ),
        /* 533 */ array(122, ),
        /* 534 */ array(122, ),
        /* 535 */ array(122, ),
        /* 536 */ array(122, ),
        /* 537 */ array(122, ),
        /* 538 */ array(122, ),
        /* 539 */ array(122, ),
        /* 540 */ array(122, ),
        /* 541 */ array(122, ),
        /* 542 */ array(122, ),
        /* 543 */ array(122, ),
        /* 544 */ array(13, ),
        /* 545 */ array(122, ),
        /* 546 */ array(122, ),
        /* 547 */ array(122, ),
        /* 548 */ array(122, ),
        /* 549 */ array(122, ),
        /* 550 */ array(122, ),
        /* 551 */ array(122, ),
        /* 552 */ array(122, ),
        /* 553 */ array(122, ),
        /* 554 */ array(122, ),
        /* 555 */ array(122, ),
        /* 556 */ array(122, ),
        /* 557 */ array(122, ),
        /* 558 */ array(122, ),
        /* 559 */ array(122, ),
        /* 560 */ array(122, ),
        /* 561 */ array(122, ),
        /* 562 */ array(122, ),
        /* 563 */ array(122, ),
        /* 564 */ array(122, ),
        /* 565 */ array(122, ),
        /* 566 */ array(122, ),
        /* 567 */ array(122, ),
        /* 568 */ array(122, ),
        /* 569 */ array(122, ),
        /* 570 */ array(122, ),
        /* 571 */ array(19, ),
        /* 572 */ array(122, ),
        /* 573 */ array(122, ),
        /* 574 */ array(122, ),
        /* 575 */ array(122, ),
        /* 576 */ array(122, ),
        /* 577 */ array(122, ),
        /* 578 */ array(),
        /* 579 */ array(),
        /* 580 */ array(),
        /* 581 */ array(),
        /* 582 */ array(),
        /* 583 */ array(),
        /* 584 */ array(),
        /* 585 */ array(),
        /* 586 */ array(),
        /* 587 */ array(),
        /* 588 */ array(),
        /* 589 */ array(),
        /* 590 */ array(),
        /* 591 */ array(),
        /* 592 */ array(),
        /* 593 */ array(),
        /* 594 */ array(),
        /* 595 */ array(),
        /* 596 */ array(),
        /* 597 */ array(),
        /* 598 */ array(),
        /* 599 */ array(),
        /* 600 */ array(),
        /* 601 */ array(),
        /* 602 */ array(),
        /* 603 */ array(),
        /* 604 */ array(),
        /* 605 */ array(),
        /* 606 */ array(),
        /* 607 */ array(),
        /* 608 */ array(),
        /* 609 */ array(),
        /* 610 */ array(),
        /* 611 */ array(),
        /* 612 */ array(),
        /* 613 */ array(),
        /* 614 */ array(),
        /* 615 */ array(),
        /* 616 */ array(),
        /* 617 */ array(),
        /* 618 */ array(),
        /* 619 */ array(),
        /* 620 */ array(),
        /* 621 */ array(),
        /* 622 */ array(),
        /* 623 */ array(),
        /* 624 */ array(),
        /* 625 */ array(),
        /* 626 */ array(),
        /* 627 */ array(),
        /* 628 */ array(),
        /* 629 */ array(),
        /* 630 */ array(),
        /* 631 */ array(),
        /* 632 */ array(),
        /* 633 */ array(),
        /* 634 */ array(),
        /* 635 */ array(),
        /* 636 */ array(),
        /* 637 */ array(),
        /* 638 */ array(),
        /* 639 */ array(),
        /* 640 */ array(),
        /* 641 */ array(),
        /* 642 */ array(),
        /* 643 */ array(),
        /* 644 */ array(),
        /* 645 */ array(),
        /* 646 */ array(),
        /* 647 */ array(),
        /* 648 */ array(),
        /* 649 */ array(),
        /* 650 */ array(),
        /* 651 */ array(),
        /* 652 */ array(),
        /* 653 */ array(),
        /* 654 */ array(),
        /* 655 */ array(),
        /* 656 */ array(),
        /* 657 */ array(),
        /* 658 */ array(),
        /* 659 */ array(),
        /* 660 */ array(),
        /* 661 */ array(),
        /* 662 */ array(),
        /* 663 */ array(),
        /* 664 */ array(),
        /* 665 */ array(),
        /* 666 */ array(),
        /* 667 */ array(),
        /* 668 */ array(),
        /* 669 */ array(),
        /* 670 */ array(),
        /* 671 */ array(),
        /* 672 */ array(),
        /* 673 */ array(),
        /* 674 */ array(),
        /* 675 */ array(),
        /* 676 */ array(),
        /* 677 */ array(),
        /* 678 */ array(),
        /* 679 */ array(),
        /* 680 */ array(),
        /* 681 */ array(),
        /* 682 */ array(),
        /* 683 */ array(),
        /* 684 */ array(),
        /* 685 */ array(),
        /* 686 */ array(),
        /* 687 */ array(),
        /* 688 */ array(),
        /* 689 */ array(),
        /* 690 */ array(),
        /* 691 */ array(),
        /* 692 */ array(),
        /* 693 */ array(),
        /* 694 */ array(),
        /* 695 */ array(),
        /* 696 */ array(),
        /* 697 */ array(),
        /* 698 */ array(),
        /* 699 */ array(),
        /* 700 */ array(),
        /* 701 */ array(),
        /* 702 */ array(),
        /* 703 */ array(),
        /* 704 */ array(),
        /* 705 */ array(),
        /* 706 */ array(),
        /* 707 */ array(),
        /* 708 */ array(),
        /* 709 */ array(),
        /* 710 */ array(),
        /* 711 */ array(),
        /* 712 */ array(),
        /* 713 */ array(),
        /* 714 */ array(),
        /* 715 */ array(),
        /* 716 */ array(),
        /* 717 */ array(),
        /* 718 */ array(),
        /* 719 */ array(),
        /* 720 */ array(),
        /* 721 */ array(),
        /* 722 */ array(),
        /* 723 */ array(),
        /* 724 */ array(),
        /* 725 */ array(),
        /* 726 */ array(),
        /* 727 */ array(),
        /* 728 */ array(),
        /* 729 */ array(),
        /* 730 */ array(),
        /* 731 */ array(),
        /* 732 */ array(),
        /* 733 */ array(),
        /* 734 */ array(),
        /* 735 */ array(),
        /* 736 */ array(),
        /* 737 */ array(),
        /* 738 */ array(),
        /* 739 */ array(),
        /* 740 */ array(),
        /* 741 */ array(),
        /* 742 */ array(),
        /* 743 */ array(),
        /* 744 */ array(),
        /* 745 */ array(),
        /* 746 */ array(),
        /* 747 */ array(),
        /* 748 */ array(),
        /* 749 */ array(),
        /* 750 */ array(),
        /* 751 */ array(),
        /* 752 */ array(),
        /* 753 */ array(),
        /* 754 */ array(),
        /* 755 */ array(),
        /* 756 */ array(),
        /* 757 */ array(),
        /* 758 */ array(),
        /* 759 */ array(),
        /* 760 */ array(),
        /* 761 */ array(),
        /* 762 */ array(),
        /* 763 */ array(),
        /* 764 */ array(),
        /* 765 */ array(),
        /* 766 */ array(),
        /* 767 */ array(),
        /* 768 */ array(),
        /* 769 */ array(),
        /* 770 */ array(),
        /* 771 */ array(),
        /* 772 */ array(),
        /* 773 */ array(),
        /* 774 */ array(),
        /* 775 */ array(),
        /* 776 */ array(),
        /* 777 */ array(),
        /* 778 */ array(),
        /* 779 */ array(),
        /* 780 */ array(),
        /* 781 */ array(),
        /* 782 */ array(),
        /* 783 */ array(),
        /* 784 */ array(),
        /* 785 */ array(),
        /* 786 */ array(),
        /* 787 */ array(),
        /* 788 */ array(),
        /* 789 */ array(),
        /* 790 */ array(),
        /* 791 */ array(),
        /* 792 */ array(),
        /* 793 */ array(),
        /* 794 */ array(),
        /* 795 */ array(),
        /* 796 */ array(),
        /* 797 */ array(),
        /* 798 */ array(),
        /* 799 */ array(),
        /* 800 */ array(),
        /* 801 */ array(),
        /* 802 */ array(),
        /* 803 */ array(),
        /* 804 */ array(),
        /* 805 */ array(),
        /* 806 */ array(),
        /* 807 */ array(),
        /* 808 */ array(),
        /* 809 */ array(),
        /* 810 */ array(),
        /* 811 */ array(),
);
    static public $yy_default = array(
 /*     0 */  1380, 1380, 1380, 1380, 1380, 1380, 1380,  819, 1380, 1380,
 /*    10 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,  926,
 /*    20 */   927,  812,  965,  813,  966,  821, 1380, 1380, 1380, 1380,
 /*    30 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*    40 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*    50 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*    60 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*    70 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*    80 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*    90 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*   100 */  1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*   110 */  1380, 1380, 1380, 1380, 1004, 1380, 1380, 1380, 1380, 1380,
 /*   120 */  1380, 1038, 1042, 1039, 1109, 1380, 1108, 1109, 1380, 1380,
 /*   130 */  1060, 1012, 1380, 1014, 1013, 1380, 1380, 1380, 1380, 1380,
 /*   140 */  1380, 1380, 1109, 1108,  922, 1380, 1380, 1380, 1380, 1380,
 /*   150 */  1007, 1380, 1380, 1005, 1380, 1380, 1380, 1380, 1006, 1025,
 /*   160 */  1023,  918, 1150, 1024, 1380, 1109, 1099, 1380, 1380, 1380,
 /*   170 */  1380, 1102, 1380, 1010, 1380, 1380, 1380, 1151, 1380, 1060,
 /*   180 */  1015, 1380, 1380, 1380, 1008, 1080, 1011, 1016, 1380, 1021,
 /*   190 */  1380, 1380, 1380, 1380, 1009, 1380, 1022,  840, 1380, 1019,
 /*   200 */   844, 1380, 1380, 1380, 1020, 1380, 1018, 1380, 1380, 1017,
 /*   210 */  1380,  843,  841, 1380, 1380, 1122, 1152, 1380, 1120, 1380,
 /*   220 */   949, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
 /*   230 */  1380, 1380, 1380, 1350, 1264, 1260, 1262, 1266, 1218,  972,
 /*   240 */  1380, 1380, 1304, 1212, 1380,  981, 1380, 1254, 1316, 1380,
 /*   250 */  1366, 1306, 1252, 1302, 1380, 1380, 1348, 1380, 1256, 1258,
 /*   260 */  1380, 1380, 1330,  976, 1334,  974, 1216, 1380, 1290, 1280,
 /*   270 */  1278, 1282, 1284, 1380, 1286, 1276, 1274, 1268, 1380, 1270,
 /*   280 */   885, 1272,  881, 1314, 1372, 1374, 1380, 1380, 1380, 1380,
 /*   290 */  1370, 1368,  842, 1380,  874,  958, 1354,  877, 1380, 1380,
 /*   300 */   968, 1288, 1292, 1296, 1294,  939, 1380,  982, 1352, 1380,
 /*   310 */   908,  937, 1298, 1300,  945,  910,  883, 1380,  879,  943,
 /*   320 */   916, 1246, 1244, 1380, 1380,  941, 1380, 1220, 1234, 1168,
 /*   330 */  1380, 1232, 1148, 1308, 1160, 1380, 1380, 1312, 1310, 1380,
 /*   340 */  1164, 1153, 1230, 1228, 1190, 1196, 1338, 1147, 1156, 1214,
 /*   350 */  1155, 1340, 1376, 1154, 1162, 1210, 1149, 1342, 1380, 1380,
 /*   360 */  1198, 1380, 1186,  829, 1080, 1380, 1192, 1176, 1346, 1380,
 /*   370 */  1188,  827, 1344, 1380, 1320, 1380, 1182, 1380, 1113,  825,
 /*   380 */   831,  834, 1115, 1174, 1380, 1204, 1318,  832, 1178, 1184,
 /*   390 */   816, 1166, 1380, 1326, 1380, 1324, 1194, 1222, 1180, 1380,
 /*   400 */  1226, 1250, 1328, 1248, 1380, 1356, 1206, 1358, 1208, 1380,
 /*   410 */  1202,  839, 1200, 1364, 1380, 1332, 1224, 1380, 1362, 1380,
 /*   420 */  1242, 1360, 1172,  838, 1158, 1322, 1380, 1170, 1240, 1238,
 /*   430 */  1236, 1336, 1380, 1380, 1185, 1371, 1351,  828, 1380, 1359,
 /*   440 */  1373, 1187, 1098, 1335, 1175, 1181, 1199, 1205, 1375, 1361,
 /*   450 */   830, 1363, 1347, 1353, 1079,  940, 1211,  880, 1369, 1237,
 /*   460 */   878,  886, 1229, 1380,  884,  944, 1380, 1365, 1239, 1380,
 /*   470 */  1191, 1251, 1231, 1215, 1315, 1380,  938,  833, 1357, 1349,
 /*   480 */  1235,  835, 1380,  942,  882, 1233, 1249,  946,  909, 1269,
 /*   490 */  1333, 1261, 1263, 1173, 1259, 1329,  973, 1325, 1327, 1257,
 /*   500 */  1380, 1265, 1339, 1341, 1343, 1167, 1337, 1157, 1171, 1267,
 /*   510 */  1219, 1159, 1217, 1195, 1255, 1225, 1223, 1213, 1227, 1253,
 /*   520 */  1307, 1243, 1305, 1241, 1303, 1221, 1380,  975, 1201, 1380,
 /*   530 */  1203,  977, 1323, 1209, 1207, 1197, 1163, 1277, 1319, 1279,
 /*   540 */  1281, 1275, 1273, 1179, 1110, 1271,  826, 1283, 1285, 1177,
 /*   550 */   959, 1189, 1345, 1193, 1317, 1321, 1287, 1331, 1355, 1183,
 /*   560 */  1295, 1297, 1309, 1299, 1293, 1291, 1367, 1289, 1377, 1301,
 /*   570 */  1169, 1380, 1311, 1165, 1161, 1245, 1247, 1313,  859,  822,
 /*   580 */   935,  820,  960,  956,  954,  955,  957,  953,  925,  923,
 /*   590 */   951,  950,  963,  969,  970,  971,  967,  815,  961,  962,
 /*   600 */   964,  952,  907,  864,  863,  862,  868,  869,  867,  866,
 /*   610 */   865,  861,  860,  904,  901,  897,  857,  948,  858,  947,
 /*   620 */   936,  988, 1129, 1128, 1117, 1116, 1130, 1131, 1133, 1132,
 /*   630 */  1144, 1141, 1114, 1112, 1055,  984, 1083, 1101, 1094, 1104,
 /*   640 */  1111, 1108, 1106, 1105, 1136, 1139, 1089, 1088, 1085, 1084,
 /*   650 */  1090, 1091, 1123, 1121, 1107, 1092, 1103, 1057, 1137, 1134,
 /*   660 */  1145, 1142, 1140, 1143, 1056, 1138, 1135, 1146, 1100, 1082,
 /*   670 */  1032, 1044, 1031, 1043, 1033, 1034,  993, 1037, 1036, 1035,
 /*   680 */  1030, 1026, 1379, 1378,  817,  814,  818,  823, 1119, 1118,
 /*   690 */   836,  824, 1027,  983, 1124, 1097, 1096, 1095, 1076, 1077,
 /*   700 */  1081, 1087, 1086, 1078, 1093, 1054, 1049, 1041, 1040, 1028,
 /*   710 */  1050, 1052, 1051, 1029,  978, 1053, 1125, 1127,  887,  876,
 /*   720 */   873,  871,  911,  912,  914,  917,  915,  913,  875,  872,
 /*   730 */   854,  852,  850,  837,  855,  856,  870,  853,  889,  888,
 /*   740 */   890,  891,  924,  921,  920,  919,  928,  929,  933,  932,
 /*   750 */   931,  930,  906,  905,  896,  895,  894,  893,  892,  898,
 /*   760 */   902,  903,  900,  899,  851,  849, 1073, 1071, 1069, 1070,
 /*   770 */  1074, 1075,  986,  985, 1058, 1072, 1066, 1065, 1059,  980,
 /*   780 */   979, 1126, 1061, 1062, 1068, 1067, 1064, 1063,  987,  989,
 /*   790 */  1002, 1001, 1000,  999, 1003, 1046,  848,  847,  846,  845,
 /*   800 */   998,  997, 1045,  992,  991,  990, 1047, 1048,  996,  995,
 /*   810 */   994,  934,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 338;
    const YYSTACKDEPTH = 100;
    const block_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 812;
    const YYNRULE = 568;
    const YYERRORSYMBOL = 123;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'NOTEQUAL',    
  'EQUAL',         'LOGICALAND',    'BINARYAND',     'BINARYOR',    
  'LOGICALOR',     'AMPERSAND',     'BINARYXOR',     'UINDIRECTION',
  'UADRESS',       'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',       
  'UBRACKET',      'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'SEMICOLON',   
  'FORKWD',        'UNSIGNED',      'SIGNED',        'LONG',        
  'SHORT',         'INT',           'CHAR',          'DOUBLE',      
  'FLOAT',         'VOID',          'GREATER',       'COMMA',       
  'LESSER',        'MULTIPLY',      'CONSTKWD',      'TYPENAME',    
  'LEFTROUNDBRACKET',  'RIGHTROUNDBRACKET',  'SIZEOF',        'IDENTIFIER',  
  'PREPROCESSOR_CONCAT',  'PREPROCESSOR_STRINGIFY',  'STRING',        'CHARACTER',   
  'NUMERIC',       'LEFTSQUAREBRACKET',  'RIGHTSQUAREBRACKET',  'LEFTFIGUREBRACKET',
  'RIGHTFIGUREBRACKET',  'ASSIGN',        'REINTERPRET_CAST',  'DYNAMIC_CAST',
  'STATIC_CAST',   'CONST_CAST',    'RIGHTARROW',    'DOT',         
  'DECREMENT',     'INCREMENT',     'PLUS',          'MINUS',       
  'BINARYNOT',     'LOGICALNOT',    'DIVISION',      'MODULOSIGN',  
  'RIGHTSHIFT',    'LEFTSHIFT',     'GREATER_OR_EQUAL',  'LESSER_OR_EQUAL',
  'NOT_EQUAL',     'MINUS_ASSIGN',  'PLUS_ASSIGN',   'MULTIPLY_ASSIGN',
  'DIVISION_ASSIGN',  'MODULO_ASSIGN',  'LEFTSHIFT_ASSIGN',  'RIGHTSHIFT_ASSIGN',
  'BINARYAND_ASSIGN',  'BINARYOR_ASSIGN',  'BINARYXOR_ASSIGN',  'FRIENDKWD',   
  'VOLATILEKWD',   'REGISTERKWD',   'EXTERNKWD',     'STATICKWD',   
  'DELETE',        'NEWKWD',        'BREAKKWD',      'TYPEDEF',     
  'IFKWD',         'DEFAULTKWD',    'CASEKWD',       'COLON',       
  'SWITCHKWD',     'ELLIPSIS',      'CATCHKWD',      'TRYKWD',      
  'GOTOKWD',       'CONTINUEKWD',   'RETURNKWD',     'DOKWD',       
  'WHILEKWD',      'PREPROCESSOR_INCLUDE',  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_IF',
  'PREPROCESSOR_IFDEF',  'PREPROCESSOR_ELSE',  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ENDIF',
  'OUTER_CONSTRUCTOR_NAME',  'OPERATOROVERLOADDECLARATION',  'ENUMKWD',       'SLOTSKWD',    
  'SIGNALSKWD',    'PRIVATEKWD',    'PROTECTEDKWD',  'PUBLICKWD',   
  'UNIONKWD',      'STRUCTKWD',     'CLASSKWD',      'TEMPLATEKWD', 
  'TYPENAMEKWD',   'NAMESPACEKWD',  'COMMENT',       'error',       
  'program',       'stmt_list',     'comment_list',  'stmt_or_defined_macro',
  'namespace_definition_start',  'namespacekwd',  'identifier',    'stmt',        
  'namespace_body',  'start_of_empty_namespace',  'leftfigurebracket',  'rightfigurebracket',
  'namespace_statements',  'class_or_union_or_struct',  'identified_type_meta_specifier_with_template_def',  'type_meta_specifier_with_template_def',
  'structure_body',  'nonidentified_type_meta_specifier_with_template_def',  'template_spec_list',  'comma',       
  'template_spec',  'template_typename',  'assign',        'type_or_type_ref_or_with_ptr',
  'expr_prec_7',   'template_def',  'typenamekwd',   'classkwd',    
  'structkwd',     'enumkwd',       'builtintype',   'templatekwd', 
  'lesser',        'greater',       'type_meta_specifier',  'unionkwd',    
  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',  'visibility_spec_full',  'visibility_spec',
  'colon',         'signal_slots',  'publickwd',     'protectedkwd',
  'privatekwd',    'signalskwd',    'slotskwd',      'enum_body',   
  'enum_value_list',  'enum_value',    'expr_atom',     'enum_definition_start',
  'type_or_type_with_qualifier',  'function_definition_without_type',  'type',          'lvalue',      
  'formal_args_list_with_or_without_const',  'function_body',  'operator_overload_declaration_type_modificators',  'ampersand',   
  'operator_overload_declaration_ptr',  'constkwd',      'multiply',      'operator_overload_declaration_without_type',
  'operatoroverloaddeclaration',  'typename',      'formal_args_list',  'binarynot',   
  'outer_constructor_name',  'namespace_resolve',  'outer_constructor_name_terminal',  'outer_destructor_name',
  'leftroundbracket',  'rightroundbracket',  'arg_list',      'arg',         
  'preprocessor_cond',  'preprocessor_endif',  'preprocessor_else_clauses',  'preprocessor_elif_list',
  'preprocessor_else',  'preprocessor_elif',  'preprocessor_elif_terminal',  'preprocessor_else_terminal',
  'preprocessor_ifdef',  'preprocessor_if',  'preprocessor_define',  'preprocessor_include',
  'whilekwd',      'expr_prec_10',  'dokwd',         'expr_prec_11',
  'semicolon',     'returnkwd',     'continuekwd',   'gotokwd',     
  'try_catch',     'try',           'catch_list',    'trykwd',      
  'catch',         'catchkwd',      'expr_prec_11_or_ellipsis',  'ellipsis',    
  'switch_stmt',   'switchkwd',     'switch_case_list',  'case',        
  'casekwd',       'defaultkwd',    'if_then_else',  'if_then',     
  'elsekwd',       'ifkwd',         'typedef',       'breakkwd',    
  'newkwd',        'delete',        'leftsquarebracket',  'rightsquarebracket',
  'lvalue_or_assignment_list',  'expr_list',     'type_with_qualifier',  'varqualifier',
  'statickwd',     'externkwd',     'registerkwd',   'volatilekwd', 
  'friendkwd',     'expr_prec_9',   'binaryxor_assign',  'binaryor_assign',
  'binaryand_assign',  'rightshift_assign',  'leftshift_assign',  'modulo_assign',
  'division_assign',  'multiply_assign',  'plus_assign',   'minus_assign',
  'logicaland',    'expr_binary_ops',  'logicalor',     'binaryxor',   
  'expr_or_equal',  'binaryor',      'not_equal',     'expr_prec_8', 
  'equal',         'lesser_or_equal',  'greater_or_equal',  'leftshift',   
  'expr_prec_6',   'rightshift',    'minus',         'expr_prec_5', 
  'plus',          'modulosign',    'expr_prec_4',   'division',    
  'try_value_access',  'try_pointer_access',  'expr_prec_3',   'typecast',    
  'logicalnot',    'expr_prec_2',   'decrement',     'increment',   
  'cpp_style_cast',  'dot',           'rightarrow',    'const_cast',  
  'static_cast',   'dynamic_cast',  'reinterpret_cast',  'lvalue_or_assignment',
  'initialization_list',  'initialization_list_argument_list',  'possibly_identifier_preceded_ref',  'possibly_idenitifer_preceded_ptrs',
  'numeric',       'assignable',    'character',     'string',      
  'scoped_identifier',  'preprocessor_stringify',  'preprocessor_concat',  'sizeof',      
  'non_const_type',  'scoped_type',   'typename_or_instantiated_template_type',  'template_instantiation_arguments',
  'instantiated_template_type_on_in_namespace_resolve',  'namespace_resolve_terminal',  'typename_in_namespace_resolve',  'instantiated_template_type_on_start_of_namespace_resolve',
  'typename_on_start_of_namespace_resolve',  'type_ref_one',  'type_ref_two',  'type_ref',    
  'type_or_type_ref',  'template_instantiation_argument_list',  'template_instantiation_arguments_begin',  'template_instantiation_arguments_end',
  'void',          'float',         'double',        'long',        
  'char',          'signed',        'unsigned',      'int',         
  'short',       
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "program ::= comment_list stmt_list",
 /*   2 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   3 */ "stmt_list ::= stmt_or_defined_macro",
 /*   4 */ "namespace_definition_start ::= namespacekwd",
 /*   5 */ "namespace_definition_start ::= namespacekwd identifier",
 /*   6 */ "stmt ::= namespace_definition_start namespace_body",
 /*   7 */ "start_of_empty_namespace ::= leftfigurebracket",
 /*   8 */ "namespace_body ::= start_of_empty_namespace rightfigurebracket",
 /*   9 */ "namespace_statements ::= stmt_list",
 /*  10 */ "namespace_body ::= leftfigurebracket namespace_statements rightfigurebracket",
 /*  11 */ "stmt ::= class_or_union_or_struct",
 /*  12 */ "identified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def identifier",
 /*  13 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON",
 /*  14 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON comment_list",
 /*  15 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  16 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body SEMICOLON comment_list",
 /*  17 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def SEMICOLON",
 /*  18 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def SEMICOLON comment_list",
 /*  19 */ "nonidentified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def",
 /*  20 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON",
 /*  21 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON comment_list",
 /*  22 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  23 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body SEMICOLON comment_list",
 /*  24 */ "template_spec_list ::= template_spec_list comma template_spec",
 /*  25 */ "template_spec_list ::= template_spec",
 /*  26 */ "template_spec ::= template_typename",
 /*  27 */ "template_spec ::= template_typename identifier",
 /*  28 */ "template_spec ::= template_typename identifier assign type_or_type_ref_or_with_ptr",
 /*  29 */ "template_spec ::= template_typename identifier assign expr_prec_7",
 /*  30 */ "template_spec ::= template_def template_typename identifier",
 /*  31 */ "template_spec ::= template_def template_typename identifier assign type_or_type_ref_or_with_ptr",
 /*  32 */ "template_spec ::= template_def template_typename identifier assign expr_prec_7",
 /*  33 */ "template_typename ::= typenamekwd",
 /*  34 */ "template_typename ::= classkwd",
 /*  35 */ "template_typename ::= structkwd",
 /*  36 */ "template_typename ::= enumkwd",
 /*  37 */ "template_typename ::= builtintype",
 /*  38 */ "template_def ::= templatekwd lesser greater",
 /*  39 */ "template_def ::= templatekwd lesser template_spec_list greater",
 /*  40 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  41 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  42 */ "type_meta_specifier ::= classkwd",
 /*  43 */ "type_meta_specifier ::= structkwd",
 /*  44 */ "type_meta_specifier ::= unionkwd",
 /*  45 */ "structure_body ::= leftfigurebracket rightfigurebracket",
 /*  46 */ "structure_body ::= leftfigurebracket stmt_or_visibility_spec_list rightfigurebracket",
 /*  47 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  48 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  49 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  50 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  51 */ "visibility_spec_full ::= visibility_spec colon",
 /*  52 */ "visibility_spec_full ::= visibility_spec signal_slots colon",
 /*  53 */ "visibility_spec ::= publickwd",
 /*  54 */ "visibility_spec ::= protectedkwd",
 /*  55 */ "visibility_spec ::= privatekwd",
 /*  56 */ "signal_slots ::= signalskwd",
 /*  57 */ "signal_slots ::= slotskwd",
 /*  58 */ "enum_body ::= leftfigurebracket enum_value_list rightfigurebracket",
 /*  59 */ "enum_body ::= leftfigurebracket rightfigurebracket",
 /*  60 */ "enum_value_list ::= enum_value_list comma enum_value",
 /*  61 */ "enum_value_list ::= enum_value",
 /*  62 */ "enum_value ::= identifier",
 /*  63 */ "enum_value ::= identifier assign expr_atom",
 /*  64 */ "enum_definition_start ::= enumkwd identifier",
 /*  65 */ "stmt_or_defined_macro ::= enum_definition_start SEMICOLON",
 /*  66 */ "stmt_or_defined_macro ::= enum_definition_start SEMICOLON comment_list",
 /*  67 */ "stmt_or_defined_macro ::= enum_definition_start enum_body SEMICOLON",
 /*  68 */ "stmt_or_defined_macro ::= enum_definition_start enum_body SEMICOLON comment_list",
 /*  69 */ "stmt_or_defined_macro ::= enumkwd enum_body SEMICOLON",
 /*  70 */ "stmt_or_defined_macro ::= enumkwd enum_body SEMICOLON comment_list",
 /*  71 */ "stmt_or_defined_macro ::= enum_definition_start enum_body identifier SEMICOLON",
 /*  72 */ "stmt_or_defined_macro ::= enum_definition_start enum_body identifier SEMICOLON comment_list",
 /*  73 */ "stmt_or_defined_macro ::= enumkwd enum_body identifier SEMICOLON",
 /*  74 */ "stmt_or_defined_macro ::= enumkwd enum_body identifier SEMICOLON comment_list",
 /*  75 */ "stmt_or_defined_macro ::= type_or_type_with_qualifier function_definition_without_type",
 /*  76 */ "stmt_or_defined_macro ::= template_def type function_definition_without_type",
 /*  77 */ "function_definition_without_type ::= lvalue formal_args_list_with_or_without_const function_body",
 /*  78 */ "function_definition_without_type ::= operator_overload_declaration_type_modificators",
 /*  79 */ "operator_overload_declaration_type_modificators ::= ampersand operator_overload_declaration_ptr",
 /*  80 */ "operator_overload_declaration_type_modificators ::= operator_overload_declaration_ptr",
 /*  81 */ "operator_overload_declaration_ptr ::= constkwd multiply operator_overload_declaration_ptr",
 /*  82 */ "operator_overload_declaration_ptr ::= multiply operator_overload_declaration_ptr",
 /*  83 */ "operator_overload_declaration_ptr ::= operator_overload_declaration_without_type",
 /*  84 */ "operator_overload_declaration_without_type ::= operatoroverloaddeclaration formal_args_list_with_or_without_const function_body",
 /*  85 */ "stmt_or_defined_macro ::= template_def typename formal_args_list function_body",
 /*  86 */ "stmt_or_defined_macro ::= typename formal_args_list function_body",
 /*  87 */ "stmt_or_defined_macro ::= binarynot typename formal_args_list function_body",
 /*  88 */ "outer_constructor_name ::= namespace_resolve outer_constructor_name_terminal",
 /*  89 */ "stmt_or_defined_macro ::= template_def outer_constructor_name formal_args_list function_body",
 /*  90 */ "stmt_or_defined_macro ::= outer_constructor_name formal_args_list function_body",
 /*  91 */ "outer_destructor_name ::= namespace_resolve binarynot outer_constructor_name_terminal",
 /*  92 */ "stmt_or_defined_macro ::= template_def outer_destructor_name formal_args_list function_body",
 /*  93 */ "stmt_or_defined_macro ::= outer_destructor_name formal_args_list function_body",
 /*  94 */ "function_body ::= leftfigurebracket stmt_list rightfigurebracket",
 /*  95 */ "function_body ::= leftfigurebracket rightfigurebracket",
 /*  96 */ "function_body ::= SEMICOLON",
 /*  97 */ "function_body ::= SEMICOLON comment_list",
 /*  98 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  99 */ "formal_args_list_with_or_without_const ::= formal_args_list constkwd",
 /* 100 */ "formal_args_list ::= leftroundbracket rightroundbracket",
 /* 101 */ "formal_args_list ::= leftroundbracket arg_list rightroundbracket",
 /* 102 */ "arg_list ::= arg",
 /* 103 */ "arg_list ::= arg_list comma arg",
 /* 104 */ "arg ::= lvalue",
 /* 105 */ "arg ::= type_or_type_ref_or_with_ptr identifier",
 /* 106 */ "arg ::= type_or_type_ref_or_with_ptr",
 /* 107 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_endif",
 /* 108 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses preprocessor_endif",
 /* 109 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /* 110 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /* 111 */ "preprocessor_else_clauses ::= preprocessor_else",
 /* 112 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /* 113 */ "preprocessor_elif_list ::= preprocessor_elif",
 /* 114 */ "preprocessor_elif ::= preprocessor_elif_terminal stmt_list",
 /* 115 */ "preprocessor_else ::= preprocessor_else_terminal stmt_list",
 /* 116 */ "preprocessor_cond ::= preprocessor_ifdef identifier",
 /* 117 */ "preprocessor_cond ::= preprocessor_ifdef typename",
 /* 118 */ "preprocessor_cond ::= preprocessor_if",
 /* 119 */ "stmt_or_defined_macro ::= preprocessor_define",
 /* 120 */ "stmt_or_defined_macro ::= stmt",
 /* 121 */ "stmt ::= preprocessor_include",
 /* 122 */ "stmt ::= whilekwd leftroundbracket expr_prec_10 rightroundbracket stmt",
 /* 123 */ "stmt ::= dokwd stmt whilekwd leftroundbracket expr_prec_11 rightroundbracket semicolon",
 /* 124 */ "stmt ::= FORKWD leftroundbracket expr_prec_11 semicolon expr_prec_11 semicolon expr_prec_11 rightroundbracket stmt",
 /* 125 */ "stmt ::= returnkwd expr_prec_11 SEMICOLON",
 /* 126 */ "stmt ::= returnkwd expr_prec_11 SEMICOLON comment_list",
 /* 127 */ "stmt ::= returnkwd SEMICOLON",
 /* 128 */ "stmt ::= returnkwd SEMICOLON comment_list",
 /* 129 */ "stmt ::= continuekwd SEMICOLON",
 /* 130 */ "stmt ::= continuekwd SEMICOLON comment_list",
 /* 131 */ "stmt ::= gotokwd identifier SEMICOLON",
 /* 132 */ "stmt ::= gotokwd identifier SEMICOLON comment_list",
 /* 133 */ "stmt ::= gotokwd typename SEMICOLON",
 /* 134 */ "stmt ::= gotokwd typename SEMICOLON comment_list",
 /* 135 */ "stmt ::= identifier colon",
 /* 136 */ "stmt ::= try_catch",
 /* 137 */ "try_catch ::= try catch_list",
 /* 138 */ "try ::= trykwd leftfigurebracket rightfigurebracket",
 /* 139 */ "try ::= trykwd leftfigurebracket stmt_list rightfigurebracket",
 /* 140 */ "catch_list ::= catch_list catch",
 /* 141 */ "catch_list ::= catch",
 /* 142 */ "catch ::= catchkwd leftroundbracket expr_prec_11_or_ellipsis rightroundbracket leftfigurebracket rightfigurebracket",
 /* 143 */ "catch ::= catchkwd leftroundbracket expr_prec_11_or_ellipsis rightroundbracket leftfigurebracket stmt_list rightfigurebracket",
 /* 144 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 145 */ "expr_prec_11_or_ellipsis ::= ellipsis",
 /* 146 */ "stmt ::= SEMICOLON",
 /* 147 */ "stmt ::= SEMICOLON comment_list",
 /* 148 */ "stmt ::= switch_stmt",
 /* 149 */ "switch_stmt ::= switchkwd leftroundbracket expr_prec_11 rightroundbracket leftfigurebracket rightfigurebracket",
 /* 150 */ "switch_stmt ::= switchkwd leftroundbracket expr_prec_11 rightroundbracket leftfigurebracket switch_case_list rightfigurebracket",
 /* 151 */ "switch_case_list ::= case",
 /* 152 */ "switch_case_list ::= switch_case_list case",
 /* 153 */ "case ::= casekwd expr_atom colon stmt_list",
 /* 154 */ "case ::= defaultkwd colon stmt_list",
 /* 155 */ "stmt ::= if_then_else",
 /* 156 */ "if_then_else ::= if_then",
 /* 157 */ "if_then_else ::= if_then elsekwd stmt",
 /* 158 */ "if_then ::= ifkwd leftroundbracket expr_prec_11 rightroundbracket stmt",
 /* 159 */ "stmt ::= leftfigurebracket stmt_list rightfigurebracket",
 /* 160 */ "stmt ::= typedef type identifier SEMICOLON",
 /* 161 */ "stmt ::= typedef type identifier SEMICOLON comment_list",
 /* 162 */ "stmt ::= breakkwd SEMICOLON",
 /* 163 */ "stmt ::= breakkwd SEMICOLON comment_list",
 /* 164 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 165 */ "stmt ::= expr_prec_11 SEMICOLON comment_list",
 /* 166 */ "expr_prec_11 ::= newkwd expr_prec_10",
 /* 167 */ "expr_prec_11 ::= delete leftsquarebracket rightsquarebracket expr_prec_10",
 /* 168 */ "expr_prec_11 ::= delete expr_prec_10",
 /* 169 */ "expr_prec_11 ::= type_or_type_with_qualifier lvalue_or_assignment_list",
 /* 170 */ "expr_prec_11 ::= expr_list",
 /* 171 */ "expr_list ::= expr_list comma expr_prec_10",
 /* 172 */ "expr_list ::= expr_prec_10",
 /* 173 */ "type_or_type_with_qualifier ::= type_with_qualifier",
 /* 174 */ "type_or_type_with_qualifier ::= type",
 /* 175 */ "type_with_qualifier ::= varqualifier type",
 /* 176 */ "varqualifier ::= statickwd",
 /* 177 */ "varqualifier ::= externkwd",
 /* 178 */ "varqualifier ::= registerkwd",
 /* 179 */ "varqualifier ::= volatilekwd",
 /* 180 */ "varqualifier ::= friendkwd",
 /* 181 */ "expr_prec_10 ::= expr_prec_9 binaryxor_assign expr_prec_10",
 /* 182 */ "expr_prec_10 ::= expr_prec_9 binaryor_assign expr_prec_10",
 /* 183 */ "expr_prec_10 ::= expr_prec_9 binaryand_assign expr_prec_10",
 /* 184 */ "expr_prec_10 ::= expr_prec_9 rightshift_assign expr_prec_10",
 /* 185 */ "expr_prec_10 ::= expr_prec_9 leftshift_assign expr_prec_10",
 /* 186 */ "expr_prec_10 ::= expr_prec_9 modulo_assign expr_prec_10",
 /* 187 */ "expr_prec_10 ::= expr_prec_9 division_assign expr_prec_10",
 /* 188 */ "expr_prec_10 ::= expr_prec_9 multiply_assign expr_prec_10",
 /* 189 */ "expr_prec_10 ::= expr_prec_9 plus_assign expr_prec_10",
 /* 190 */ "expr_prec_10 ::= expr_prec_9 minus_assign expr_prec_10",
 /* 191 */ "expr_prec_10 ::= expr_prec_9 assign expr_prec_10",
 /* 192 */ "expr_prec_10 ::= expr_prec_9",
 /* 193 */ "expr_prec_9 ::= expr_prec_9 logicaland expr_binary_ops",
 /* 194 */ "expr_prec_9 ::= expr_prec_9 logicalor expr_binary_ops",
 /* 195 */ "expr_prec_9 ::= expr_binary_ops",
 /* 196 */ "expr_binary_ops ::= expr_binary_ops binaryxor expr_or_equal",
 /* 197 */ "expr_binary_ops ::= expr_binary_ops binaryor expr_or_equal",
 /* 198 */ "expr_binary_ops ::= expr_binary_ops ampersand expr_or_equal",
 /* 199 */ "expr_binary_ops ::= expr_or_equal",
 /* 200 */ "expr_or_equal ::= expr_or_equal not_equal expr_prec_8",
 /* 201 */ "expr_or_equal ::= expr_or_equal equal expr_prec_8",
 /* 202 */ "expr_or_equal ::= expr_prec_8",
 /* 203 */ "expr_prec_8 ::= expr_prec_8 lesser_or_equal expr_prec_7",
 /* 204 */ "expr_prec_8 ::= expr_prec_8 greater_or_equal expr_prec_7",
 /* 205 */ "expr_prec_8 ::= expr_prec_8 greater expr_prec_7",
 /* 206 */ "expr_prec_8 ::= expr_prec_8 lesser expr_prec_7",
 /* 207 */ "expr_prec_8 ::= expr_prec_7",
 /* 208 */ "expr_prec_7 ::= expr_prec_7 leftshift expr_prec_6",
 /* 209 */ "expr_prec_7 ::= expr_prec_7 rightshift expr_prec_6",
 /* 210 */ "expr_prec_7 ::= expr_prec_6",
 /* 211 */ "expr_prec_6 ::= expr_prec_6 minus expr_prec_5",
 /* 212 */ "expr_prec_6 ::= expr_prec_6 plus expr_prec_5",
 /* 213 */ "expr_prec_6 ::= expr_prec_5",
 /* 214 */ "expr_prec_5 ::= expr_prec_5 modulosign expr_prec_4",
 /* 215 */ "expr_prec_5 ::= expr_prec_5 division expr_prec_4",
 /* 216 */ "expr_prec_5 ::= expr_prec_5 multiply expr_prec_4",
 /* 217 */ "expr_prec_5 ::= expr_prec_4",
 /* 218 */ "expr_prec_4 ::= try_value_access multiply identifier",
 /* 219 */ "expr_prec_4 ::= try_pointer_access multiply identifier",
 /* 220 */ "expr_prec_4 ::= expr_prec_3",
 /* 221 */ "expr_prec_3 ::= ampersand expr_prec_3",
 /* 222 */ "expr_prec_3 ::= multiply expr_prec_3",
 /* 223 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 224 */ "expr_prec_3 ::= logicalnot expr_prec_3",
 /* 225 */ "expr_prec_3 ::= binarynot expr_prec_3",
 /* 226 */ "expr_prec_3 ::= minus expr_prec_2",
 /* 227 */ "expr_prec_3 ::= plus expr_prec_2",
 /* 228 */ "expr_prec_3 ::= decrement expr_prec_3",
 /* 229 */ "expr_prec_3 ::= increment expr_prec_3",
 /* 230 */ "expr_prec_3 ::= expr_prec_2",
 /* 231 */ "expr_prec_2 ::= try_value_access identifier",
 /* 232 */ "expr_prec_2 ::= try_pointer_access identifier",
 /* 233 */ "expr_prec_2 ::= cpp_style_cast leftroundbracket expr_prec_11 rightroundbracket",
 /* 234 */ "expr_prec_2 ::= expr_prec_2 leftsquarebracket expr_prec_10 rightsquarebracket",
 /* 235 */ "expr_prec_2 ::= expr_prec_2 leftroundbracket expr_list rightroundbracket",
 /* 236 */ "expr_prec_2 ::= expr_prec_2 leftroundbracket rightroundbracket",
 /* 237 */ "expr_prec_2 ::= expr_prec_2 increment",
 /* 238 */ "expr_prec_2 ::= expr_prec_2 decrement",
 /* 239 */ "expr_prec_2 ::= expr_atom",
 /* 240 */ "try_value_access ::= expr_prec_2 dot",
 /* 241 */ "try_pointer_access ::= expr_prec_2 rightarrow",
 /* 242 */ "cpp_style_cast ::= const_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 243 */ "cpp_style_cast ::= static_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 244 */ "cpp_style_cast ::= dynamic_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 245 */ "cpp_style_cast ::= reinterpret_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 246 */ "lvalue_or_assignment_list ::= lvalue_or_assignment",
 /* 247 */ "lvalue_or_assignment_list ::= lvalue_or_assignment_list comma lvalue_or_assignment",
 /* 248 */ "lvalue_or_assignment ::= lvalue",
 /* 249 */ "lvalue_or_assignment ::= lvalue assign expr_prec_10",
 /* 250 */ "lvalue_or_assignment ::= lvalue assign initialization_list",
 /* 251 */ "initialization_list ::= leftfigurebracket rightfigurebracket",
 /* 252 */ "initialization_list ::= leftfigurebracket initialization_list_argument_list rightfigurebracket",
 /* 253 */ "initialization_list_argument_list ::= expr_prec_10",
 /* 254 */ "initialization_list_argument_list ::= initialization_list",
 /* 255 */ "initialization_list_argument_list ::= initialization_list_argument_list comma expr_prec_10",
 /* 256 */ "initialization_list_argument_list ::= initialization_list_argument_list comma initialization_list",
 /* 257 */ "lvalue ::= possibly_identifier_preceded_ref",
 /* 258 */ "lvalue ::= lvalue leftsquarebracket expr_prec_9 rightsquarebracket",
 /* 259 */ "possibly_identifier_preceded_ref ::= ampersand possibly_idenitifer_preceded_ptrs",
 /* 260 */ "possibly_identifier_preceded_ref ::= possibly_idenitifer_preceded_ptrs",
 /* 261 */ "possibly_idenitifer_preceded_ptrs ::= identifier",
 /* 262 */ "possibly_idenitifer_preceded_ptrs ::= multiply possibly_idenitifer_preceded_ptrs",
 /* 263 */ "possibly_idenitifer_preceded_ptrs ::= constkwd multiply possibly_idenitifer_preceded_ptrs",
 /* 264 */ "expr_atom ::= numeric",
 /* 265 */ "expr_atom ::= assignable",
 /* 266 */ "expr_atom ::= character",
 /* 267 */ "expr_atom ::= string",
 /* 268 */ "assignable ::= identifier",
 /* 269 */ "assignable ::= scoped_identifier",
 /* 270 */ "scoped_identifier ::= namespace_resolve identifier",
 /* 271 */ "expr_atom ::= leftroundbracket expr_list rightroundbracket",
 /* 272 */ "expr_atom ::= preprocessor_stringify identifier",
 /* 273 */ "expr_atom ::= preprocessor_stringify typename",
 /* 274 */ "expr_atom ::= identifier preprocessor_concat identifier",
 /* 275 */ "expr_atom ::= identifier preprocessor_concat typename",
 /* 276 */ "expr_atom ::= typename preprocessor_concat identifier",
 /* 277 */ "expr_atom ::= typename preprocessor_concat typename",
 /* 278 */ "expr_atom ::= sizeof leftroundbracket type_or_type_ref_or_with_ptr rightroundbracket",
 /* 279 */ "expr_atom ::= sizeof leftroundbracket expr_atom rightroundbracket",
 /* 280 */ "typecast ::= leftroundbracket type_or_type_ref_or_with_ptr rightroundbracket",
 /* 281 */ "type ::= constkwd non_const_type",
 /* 282 */ "type ::= non_const_type",
 /* 283 */ "non_const_type ::= builtintype",
 /* 284 */ "non_const_type ::= scoped_type",
 /* 285 */ "non_const_type ::= typename_or_instantiated_template_type",
 /* 286 */ "scoped_type ::= namespace_resolve typename template_instantiation_arguments",
 /* 287 */ "scoped_type ::= namespace_resolve typename",
 /* 288 */ "namespace_resolve ::= namespace_resolve instantiated_template_type_on_in_namespace_resolve namespace_resolve_terminal",
 /* 289 */ "namespace_resolve ::= namespace_resolve typename_in_namespace_resolve namespace_resolve_terminal",
 /* 290 */ "typename_in_namespace_resolve ::= typename",
 /* 291 */ "instantiated_template_type_on_in_namespace_resolve ::= typename template_instantiation_arguments",
 /* 292 */ "namespace_resolve ::= instantiated_template_type_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 293 */ "namespace_resolve ::= typename_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 294 */ "namespace_resolve ::= namespace_resolve_terminal typename_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 295 */ "instantiated_template_type_on_start_of_namespace_resolve ::= typename template_instantiation_arguments",
 /* 296 */ "typename_on_start_of_namespace_resolve ::= typename",
 /* 297 */ "typename_or_instantiated_template_type ::= typename",
 /* 298 */ "typename_or_instantiated_template_type ::= typename template_instantiation_arguments",
 /* 299 */ "type_ref_one ::= type ampersand",
 /* 300 */ "type_ref_two ::= type_ref_one ampersand",
 /* 301 */ "type_ref ::= type_ref_one",
 /* 302 */ "type_ref ::= type_ref_two",
 /* 303 */ "type_or_type_ref ::= type",
 /* 304 */ "type_or_type_ref ::= type_ref",
 /* 305 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref",
 /* 306 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr multiply",
 /* 307 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr constkwd multiply",
 /* 308 */ "template_instantiation_argument_list ::= type_or_type_ref_or_with_ptr",
 /* 309 */ "template_instantiation_argument_list ::= expr_atom",
 /* 310 */ "template_instantiation_argument_list ::= template_instantiation_argument_list comma type_or_type_ref_or_with_ptr",
 /* 311 */ "template_instantiation_argument_list ::= template_instantiation_argument_list comma expr_atom",
 /* 312 */ "template_instantiation_arguments_begin ::= lesser",
 /* 313 */ "template_instantiation_arguments_end ::= greater",
 /* 314 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_arguments_end",
 /* 315 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_argument_list template_instantiation_arguments_end",
 /* 316 */ "builtintype ::= void",
 /* 317 */ "builtintype ::= float",
 /* 318 */ "builtintype ::= double",
 /* 319 */ "builtintype ::= long double",
 /* 320 */ "builtintype ::= char",
 /* 321 */ "builtintype ::= signed char",
 /* 322 */ "builtintype ::= unsigned char",
 /* 323 */ "builtintype ::= int",
 /* 324 */ "builtintype ::= signed int",
 /* 325 */ "builtintype ::= unsigned int",
 /* 326 */ "builtintype ::= short int",
 /* 327 */ "builtintype ::= signed short int",
 /* 328 */ "builtintype ::= unsigned short int",
 /* 329 */ "builtintype ::= long int",
 /* 330 */ "builtintype ::= signed long int",
 /* 331 */ "builtintype ::= unsigned long int",
 /* 332 */ "builtintype ::= long long int",
 /* 333 */ "builtintype ::= signed long long int",
 /* 334 */ "builtintype ::= unsigned long long int",
 /* 335 */ "builtintype ::= short",
 /* 336 */ "builtintype ::= signed short",
 /* 337 */ "builtintype ::= unsigned short",
 /* 338 */ "builtintype ::= long",
 /* 339 */ "builtintype ::= signed long",
 /* 340 */ "builtintype ::= unsigned long",
 /* 341 */ "builtintype ::= long long",
 /* 342 */ "builtintype ::= signed long long",
 /* 343 */ "builtintype ::= unsigned long long",
 /* 344 */ "unsigned ::= UNSIGNED",
 /* 345 */ "unsigned ::= UNSIGNED comment_list",
 /* 346 */ "signed ::= SIGNED",
 /* 347 */ "signed ::= SIGNED comment_list",
 /* 348 */ "long ::= LONG",
 /* 349 */ "long ::= LONG comment_list",
 /* 350 */ "short ::= SHORT",
 /* 351 */ "short ::= SHORT comment_list",
 /* 352 */ "int ::= INT",
 /* 353 */ "int ::= INT comment_list",
 /* 354 */ "char ::= CHAR",
 /* 355 */ "char ::= CHAR comment_list",
 /* 356 */ "double ::= DOUBLE",
 /* 357 */ "double ::= DOUBLE comment_list",
 /* 358 */ "float ::= FLOAT",
 /* 359 */ "float ::= FLOAT comment_list",
 /* 360 */ "void ::= VOID",
 /* 361 */ "void ::= VOID comment_list",
 /* 362 */ "greater ::= GREATER",
 /* 363 */ "greater ::= GREATER comment_list",
 /* 364 */ "comma ::= COMMA",
 /* 365 */ "comma ::= COMMA comment_list",
 /* 366 */ "lesser ::= LESSER",
 /* 367 */ "lesser ::= LESSER comment_list",
 /* 368 */ "multiply ::= MULTIPLY",
 /* 369 */ "multiply ::= MULTIPLY comment_list",
 /* 370 */ "ampersand ::= AMPERSAND",
 /* 371 */ "ampersand ::= AMPERSAND comment_list",
 /* 372 */ "constkwd ::= CONSTKWD",
 /* 373 */ "constkwd ::= CONSTKWD comment_list",
 /* 374 */ "typename ::= TYPENAME",
 /* 375 */ "typename ::= TYPENAME comment_list",
 /* 376 */ "namespace_resolve_terminal ::= NAMESPACE_RESOLVE",
 /* 377 */ "namespace_resolve_terminal ::= NAMESPACE_RESOLVE comment_list",
 /* 378 */ "leftroundbracket ::= LEFTROUNDBRACKET",
 /* 379 */ "leftroundbracket ::= LEFTROUNDBRACKET comment_list",
 /* 380 */ "rightroundbracket ::= RIGHTROUNDBRACKET",
 /* 381 */ "rightroundbracket ::= RIGHTROUNDBRACKET comment_list",
 /* 382 */ "sizeof ::= SIZEOF",
 /* 383 */ "sizeof ::= SIZEOF comment_list",
 /* 384 */ "identifier ::= IDENTIFIER",
 /* 385 */ "identifier ::= IDENTIFIER comment_list",
 /* 386 */ "preprocessor_concat ::= PREPROCESSOR_CONCAT",
 /* 387 */ "preprocessor_concat ::= PREPROCESSOR_CONCAT comment_list",
 /* 388 */ "preprocessor_stringify ::= PREPROCESSOR_STRINGIFY",
 /* 389 */ "preprocessor_stringify ::= PREPROCESSOR_STRINGIFY comment_list",
 /* 390 */ "string ::= STRING",
 /* 391 */ "string ::= STRING comment_list",
 /* 392 */ "string ::= string STRING",
 /* 393 */ "string ::= string STRING comment_list",
 /* 394 */ "character ::= CHARACTER",
 /* 395 */ "character ::= CHARACTER comment_list",
 /* 396 */ "numeric ::= NUMERIC",
 /* 397 */ "numeric ::= NUMERIC comment_list",
 /* 398 */ "leftsquarebracket ::= LEFTSQUAREBRACKET",
 /* 399 */ "leftsquarebracket ::= LEFTSQUAREBRACKET comment_list",
 /* 400 */ "rightsquarebracket ::= RIGHTSQUAREBRACKET",
 /* 401 */ "rightsquarebracket ::= RIGHTSQUAREBRACKET comment_list",
 /* 402 */ "leftfigurebracket ::= LEFTFIGUREBRACKET",
 /* 403 */ "leftfigurebracket ::= LEFTFIGUREBRACKET comment_list",
 /* 404 */ "rightfigurebracket ::= RIGHTFIGUREBRACKET",
 /* 405 */ "rightfigurebracket ::= RIGHTFIGUREBRACKET comment_list",
 /* 406 */ "assign ::= ASSIGN",
 /* 407 */ "assign ::= ASSIGN comment_list",
 /* 408 */ "reinterpret_cast ::= REINTERPRET_CAST",
 /* 409 */ "reinterpret_cast ::= REINTERPRET_CAST comment_list",
 /* 410 */ "dynamic_cast ::= DYNAMIC_CAST",
 /* 411 */ "dynamic_cast ::= DYNAMIC_CAST comment_list",
 /* 412 */ "static_cast ::= STATIC_CAST",
 /* 413 */ "static_cast ::= STATIC_CAST comment_list",
 /* 414 */ "const_cast ::= CONST_CAST",
 /* 415 */ "const_cast ::= CONST_CAST comment_list",
 /* 416 */ "rightarrow ::= RIGHTARROW",
 /* 417 */ "rightarrow ::= RIGHTARROW comment_list",
 /* 418 */ "dot ::= DOT",
 /* 419 */ "dot ::= DOT comment_list",
 /* 420 */ "decrement ::= DECREMENT",
 /* 421 */ "decrement ::= DECREMENT comment_list",
 /* 422 */ "increment ::= INCREMENT",
 /* 423 */ "increment ::= INCREMENT comment_list",
 /* 424 */ "plus ::= PLUS",
 /* 425 */ "plus ::= PLUS comment_list",
 /* 426 */ "minus ::= MINUS",
 /* 427 */ "minus ::= MINUS comment_list",
 /* 428 */ "binarynot ::= BINARYNOT",
 /* 429 */ "binarynot ::= BINARYNOT comment_list",
 /* 430 */ "logicalnot ::= LOGICALNOT",
 /* 431 */ "logicalnot ::= LOGICALNOT comment_list",
 /* 432 */ "division ::= DIVISION",
 /* 433 */ "division ::= DIVISION comment_list",
 /* 434 */ "modulosign ::= MODULOSIGN",
 /* 435 */ "modulosign ::= MODULOSIGN comment_list",
 /* 436 */ "rightshift ::= RIGHTSHIFT",
 /* 437 */ "rightshift ::= RIGHTSHIFT comment_list",
 /* 438 */ "leftshift ::= LEFTSHIFT",
 /* 439 */ "leftshift ::= LEFTSHIFT comment_list",
 /* 440 */ "greater_or_equal ::= GREATER_OR_EQUAL",
 /* 441 */ "greater_or_equal ::= GREATER_OR_EQUAL comment_list",
 /* 442 */ "lesser_or_equal ::= LESSER_OR_EQUAL",
 /* 443 */ "lesser_or_equal ::= LESSER_OR_EQUAL comment_list",
 /* 444 */ "equal ::= EQUAL",
 /* 445 */ "equal ::= EQUAL comment_list",
 /* 446 */ "not_equal ::= NOT_EQUAL",
 /* 447 */ "not_equal ::= NOT_EQUAL comment_list",
 /* 448 */ "binaryor ::= BINARYOR",
 /* 449 */ "binaryor ::= BINARYOR comment_list",
 /* 450 */ "binaryxor ::= BINARYXOR",
 /* 451 */ "binaryxor ::= BINARYXOR comment_list",
 /* 452 */ "logicalor ::= LOGICALOR",
 /* 453 */ "logicalor ::= LOGICALOR comment_list",
 /* 454 */ "logicaland ::= LOGICALAND",
 /* 455 */ "logicaland ::= LOGICALAND comment_list",
 /* 456 */ "minus_assign ::= MINUS_ASSIGN",
 /* 457 */ "minus_assign ::= MINUS_ASSIGN comment_list",
 /* 458 */ "plus_assign ::= PLUS_ASSIGN",
 /* 459 */ "plus_assign ::= PLUS_ASSIGN comment_list",
 /* 460 */ "multiply_assign ::= MULTIPLY_ASSIGN",
 /* 461 */ "multiply_assign ::= MULTIPLY_ASSIGN comment_list",
 /* 462 */ "division_assign ::= DIVISION_ASSIGN",
 /* 463 */ "division_assign ::= DIVISION_ASSIGN comment_list",
 /* 464 */ "modulo_assign ::= MODULO_ASSIGN",
 /* 465 */ "modulo_assign ::= MODULO_ASSIGN comment_list",
 /* 466 */ "leftshift_assign ::= LEFTSHIFT_ASSIGN",
 /* 467 */ "leftshift_assign ::= LEFTSHIFT_ASSIGN comment_list",
 /* 468 */ "rightshift_assign ::= RIGHTSHIFT_ASSIGN",
 /* 469 */ "rightshift_assign ::= RIGHTSHIFT_ASSIGN comment_list",
 /* 470 */ "binaryand_assign ::= BINARYAND_ASSIGN",
 /* 471 */ "binaryand_assign ::= BINARYAND_ASSIGN comment_list",
 /* 472 */ "binaryor_assign ::= BINARYOR_ASSIGN",
 /* 473 */ "binaryor_assign ::= BINARYOR_ASSIGN comment_list",
 /* 474 */ "binaryxor_assign ::= BINARYXOR_ASSIGN",
 /* 475 */ "binaryxor_assign ::= BINARYXOR_ASSIGN comment_list",
 /* 476 */ "friendkwd ::= FRIENDKWD",
 /* 477 */ "friendkwd ::= FRIENDKWD comment_list",
 /* 478 */ "volatilekwd ::= VOLATILEKWD",
 /* 479 */ "volatilekwd ::= VOLATILEKWD comment_list",
 /* 480 */ "registerkwd ::= REGISTERKWD",
 /* 481 */ "registerkwd ::= REGISTERKWD comment_list",
 /* 482 */ "externkwd ::= EXTERNKWD",
 /* 483 */ "externkwd ::= EXTERNKWD comment_list",
 /* 484 */ "statickwd ::= STATICKWD",
 /* 485 */ "statickwd ::= STATICKWD comment_list",
 /* 486 */ "delete ::= DELETE",
 /* 487 */ "delete ::= DELETE comment_list",
 /* 488 */ "newkwd ::= NEWKWD",
 /* 489 */ "newkwd ::= NEWKWD comment_list",
 /* 490 */ "breakkwd ::= BREAKKWD",
 /* 491 */ "breakkwd ::= BREAKKWD comment_list",
 /* 492 */ "typedef ::= TYPEDEF",
 /* 493 */ "typedef ::= TYPEDEF comment_list",
 /* 494 */ "ifkwd ::= IFKWD",
 /* 495 */ "ifkwd ::= IFKWD comment_list",
 /* 496 */ "elsekwd ::= ELSEKWD",
 /* 497 */ "elsekwd ::= ELSEKWD comment_list",
 /* 498 */ "defaultkwd ::= DEFAULTKWD",
 /* 499 */ "defaultkwd ::= DEFAULTKWD comment_list",
 /* 500 */ "casekwd ::= CASEKWD",
 /* 501 */ "casekwd ::= CASEKWD comment_list",
 /* 502 */ "colon ::= COLON",
 /* 503 */ "colon ::= COLON comment_list",
 /* 504 */ "switchkwd ::= SWITCHKWD",
 /* 505 */ "switchkwd ::= SWITCHKWD comment_list",
 /* 506 */ "ellipsis ::= ELLIPSIS",
 /* 507 */ "ellipsis ::= ELLIPSIS comment_list",
 /* 508 */ "catchkwd ::= CATCHKWD",
 /* 509 */ "catchkwd ::= CATCHKWD comment_list",
 /* 510 */ "trykwd ::= TRYKWD",
 /* 511 */ "trykwd ::= TRYKWD comment_list",
 /* 512 */ "gotokwd ::= GOTOKWD",
 /* 513 */ "gotokwd ::= GOTOKWD comment_list",
 /* 514 */ "continuekwd ::= CONTINUEKWD",
 /* 515 */ "continuekwd ::= CONTINUEKWD comment_list",
 /* 516 */ "returnkwd ::= RETURNKWD",
 /* 517 */ "returnkwd ::= RETURNKWD comment_list",
 /* 518 */ "semicolon ::= SEMICOLON",
 /* 519 */ "semicolon ::= SEMICOLON comment_list",
 /* 520 */ "dokwd ::= DOKWD",
 /* 521 */ "dokwd ::= DOKWD comment_list",
 /* 522 */ "whilekwd ::= WHILEKWD",
 /* 523 */ "whilekwd ::= WHILEKWD comment_list",
 /* 524 */ "preprocessor_include ::= PREPROCESSOR_INCLUDE",
 /* 525 */ "preprocessor_include ::= PREPROCESSOR_INCLUDE comment_list",
 /* 526 */ "preprocessor_define ::= PREPROCESSOR_DEFINE",
 /* 527 */ "preprocessor_define ::= PREPROCESSOR_DEFINE comment_list",
 /* 528 */ "preprocessor_if ::= PREPROCESSOR_IF",
 /* 529 */ "preprocessor_if ::= PREPROCESSOR_IF comment_list",
 /* 530 */ "preprocessor_ifdef ::= PREPROCESSOR_IFDEF",
 /* 531 */ "preprocessor_ifdef ::= PREPROCESSOR_IFDEF comment_list",
 /* 532 */ "preprocessor_else_terminal ::= PREPROCESSOR_ELSE",
 /* 533 */ "preprocessor_else_terminal ::= PREPROCESSOR_ELSE comment_list",
 /* 534 */ "preprocessor_elif_terminal ::= PREPROCESSOR_ELIF",
 /* 535 */ "preprocessor_elif_terminal ::= PREPROCESSOR_ELIF comment_list",
 /* 536 */ "preprocessor_endif ::= PREPROCESSOR_ENDIF",
 /* 537 */ "preprocessor_endif ::= PREPROCESSOR_ENDIF comment_list",
 /* 538 */ "outer_constructor_name_terminal ::= OUTER_CONSTRUCTOR_NAME",
 /* 539 */ "outer_constructor_name_terminal ::= OUTER_CONSTRUCTOR_NAME comment_list",
 /* 540 */ "operatoroverloaddeclaration ::= OPERATOROVERLOADDECLARATION",
 /* 541 */ "operatoroverloaddeclaration ::= OPERATOROVERLOADDECLARATION comment_list",
 /* 542 */ "enumkwd ::= ENUMKWD",
 /* 543 */ "enumkwd ::= ENUMKWD comment_list",
 /* 544 */ "slotskwd ::= SLOTSKWD",
 /* 545 */ "slotskwd ::= SLOTSKWD comment_list",
 /* 546 */ "signalskwd ::= SIGNALSKWD",
 /* 547 */ "signalskwd ::= SIGNALSKWD comment_list",
 /* 548 */ "privatekwd ::= PRIVATEKWD",
 /* 549 */ "privatekwd ::= PRIVATEKWD comment_list",
 /* 550 */ "protectedkwd ::= PROTECTEDKWD",
 /* 551 */ "protectedkwd ::= PROTECTEDKWD comment_list",
 /* 552 */ "publickwd ::= PUBLICKWD",
 /* 553 */ "publickwd ::= PUBLICKWD comment_list",
 /* 554 */ "unionkwd ::= UNIONKWD",
 /* 555 */ "unionkwd ::= UNIONKWD comment_list",
 /* 556 */ "structkwd ::= STRUCTKWD",
 /* 557 */ "structkwd ::= STRUCTKWD comment_list",
 /* 558 */ "classkwd ::= CLASSKWD",
 /* 559 */ "classkwd ::= CLASSKWD comment_list",
 /* 560 */ "templatekwd ::= TEMPLATEKWD",
 /* 561 */ "templatekwd ::= TEMPLATEKWD comment_list",
 /* 562 */ "typenamekwd ::= TYPENAMEKWD",
 /* 563 */ "typenamekwd ::= TYPENAMEKWD comment_list",
 /* 564 */ "namespacekwd ::= NAMESPACEKWD",
 /* 565 */ "namespacekwd ::= NAMESPACEKWD comment_list",
 /* 566 */ "comment_list ::= comment_list COMMENT",
 /* 567 */ "comment_list ::= COMMENT",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param block_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new block_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 137, 'rhs' => 5 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 137, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 137, 'rhs' => 5 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 4 ),
  array( 'lhs' => 144, 'rhs' => 4 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 5 ),
  array( 'lhs' => 144, 'rhs' => 5 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 4 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 2 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 162, 'rhs' => 2 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 5 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 5 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 184, 'rhs' => 3 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 192, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 3 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 3 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 2 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 202, 'rhs' => 2 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 2 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 205, 'rhs' => 2 ),
  array( 'lhs' => 204, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 5 ),
  array( 'lhs' => 131, 'rhs' => 7 ),
  array( 'lhs' => 131, 'rhs' => 9 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 2 ),
  array( 'lhs' => 221, 'rhs' => 3 ),
  array( 'lhs' => 221, 'rhs' => 4 ),
  array( 'lhs' => 222, 'rhs' => 2 ),
  array( 'lhs' => 222, 'rhs' => 1 ),
  array( 'lhs' => 224, 'rhs' => 6 ),
  array( 'lhs' => 224, 'rhs' => 7 ),
  array( 'lhs' => 226, 'rhs' => 1 ),
  array( 'lhs' => 226, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 228, 'rhs' => 6 ),
  array( 'lhs' => 228, 'rhs' => 7 ),
  array( 'lhs' => 230, 'rhs' => 1 ),
  array( 'lhs' => 230, 'rhs' => 2 ),
  array( 'lhs' => 231, 'rhs' => 4 ),
  array( 'lhs' => 231, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 3 ),
  array( 'lhs' => 235, 'rhs' => 5 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 5 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 215, 'rhs' => 2 ),
  array( 'lhs' => 215, 'rhs' => 4 ),
  array( 'lhs' => 215, 'rhs' => 2 ),
  array( 'lhs' => 215, 'rhs' => 2 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 245, 'rhs' => 3 ),
  array( 'lhs' => 245, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 246, 'rhs' => 2 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 253, 'rhs' => 3 ),
  array( 'lhs' => 253, 'rhs' => 3 ),
  array( 'lhs' => 253, 'rhs' => 1 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 1 ),
  array( 'lhs' => 268, 'rhs' => 3 ),
  array( 'lhs' => 268, 'rhs' => 3 ),
  array( 'lhs' => 268, 'rhs' => 1 ),
  array( 'lhs' => 271, 'rhs' => 3 ),
  array( 'lhs' => 271, 'rhs' => 3 ),
  array( 'lhs' => 271, 'rhs' => 3 ),
  array( 'lhs' => 271, 'rhs' => 3 ),
  array( 'lhs' => 271, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 276, 'rhs' => 3 ),
  array( 'lhs' => 276, 'rhs' => 3 ),
  array( 'lhs' => 276, 'rhs' => 1 ),
  array( 'lhs' => 279, 'rhs' => 3 ),
  array( 'lhs' => 279, 'rhs' => 3 ),
  array( 'lhs' => 279, 'rhs' => 3 ),
  array( 'lhs' => 279, 'rhs' => 1 ),
  array( 'lhs' => 282, 'rhs' => 3 ),
  array( 'lhs' => 282, 'rhs' => 3 ),
  array( 'lhs' => 282, 'rhs' => 1 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 1 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 4 ),
  array( 'lhs' => 289, 'rhs' => 4 ),
  array( 'lhs' => 289, 'rhs' => 4 ),
  array( 'lhs' => 289, 'rhs' => 3 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 1 ),
  array( 'lhs' => 284, 'rhs' => 2 ),
  array( 'lhs' => 285, 'rhs' => 2 ),
  array( 'lhs' => 292, 'rhs' => 4 ),
  array( 'lhs' => 292, 'rhs' => 4 ),
  array( 'lhs' => 292, 'rhs' => 4 ),
  array( 'lhs' => 292, 'rhs' => 4 ),
  array( 'lhs' => 244, 'rhs' => 1 ),
  array( 'lhs' => 244, 'rhs' => 3 ),
  array( 'lhs' => 299, 'rhs' => 1 ),
  array( 'lhs' => 299, 'rhs' => 3 ),
  array( 'lhs' => 299, 'rhs' => 3 ),
  array( 'lhs' => 300, 'rhs' => 2 ),
  array( 'lhs' => 300, 'rhs' => 3 ),
  array( 'lhs' => 301, 'rhs' => 1 ),
  array( 'lhs' => 301, 'rhs' => 1 ),
  array( 'lhs' => 301, 'rhs' => 3 ),
  array( 'lhs' => 301, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
  array( 'lhs' => 179, 'rhs' => 4 ),
  array( 'lhs' => 302, 'rhs' => 2 ),
  array( 'lhs' => 302, 'rhs' => 1 ),
  array( 'lhs' => 303, 'rhs' => 1 ),
  array( 'lhs' => 303, 'rhs' => 2 ),
  array( 'lhs' => 303, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 305, 'rhs' => 1 ),
  array( 'lhs' => 305, 'rhs' => 1 ),
  array( 'lhs' => 308, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 4 ),
  array( 'lhs' => 174, 'rhs' => 4 ),
  array( 'lhs' => 287, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 312, 'rhs' => 1 ),
  array( 'lhs' => 312, 'rhs' => 1 ),
  array( 'lhs' => 312, 'rhs' => 1 ),
  array( 'lhs' => 313, 'rhs' => 3 ),
  array( 'lhs' => 313, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 318, 'rhs' => 1 ),
  array( 'lhs' => 316, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 319, 'rhs' => 2 ),
  array( 'lhs' => 320, 'rhs' => 1 ),
  array( 'lhs' => 314, 'rhs' => 1 ),
  array( 'lhs' => 314, 'rhs' => 2 ),
  array( 'lhs' => 321, 'rhs' => 2 ),
  array( 'lhs' => 322, 'rhs' => 2 ),
  array( 'lhs' => 323, 'rhs' => 1 ),
  array( 'lhs' => 323, 'rhs' => 1 ),
  array( 'lhs' => 324, 'rhs' => 1 ),
  array( 'lhs' => 324, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 325, 'rhs' => 1 ),
  array( 'lhs' => 325, 'rhs' => 1 ),
  array( 'lhs' => 325, 'rhs' => 3 ),
  array( 'lhs' => 325, 'rhs' => 3 ),
  array( 'lhs' => 326, 'rhs' => 1 ),
  array( 'lhs' => 327, 'rhs' => 1 ),
  array( 'lhs' => 315, 'rhs' => 2 ),
  array( 'lhs' => 315, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 334, 'rhs' => 1 ),
  array( 'lhs' => 334, 'rhs' => 2 ),
  array( 'lhs' => 333, 'rhs' => 1 ),
  array( 'lhs' => 333, 'rhs' => 2 ),
  array( 'lhs' => 331, 'rhs' => 1 ),
  array( 'lhs' => 331, 'rhs' => 2 ),
  array( 'lhs' => 336, 'rhs' => 1 ),
  array( 'lhs' => 336, 'rhs' => 2 ),
  array( 'lhs' => 335, 'rhs' => 1 ),
  array( 'lhs' => 335, 'rhs' => 2 ),
  array( 'lhs' => 332, 'rhs' => 1 ),
  array( 'lhs' => 332, 'rhs' => 2 ),
  array( 'lhs' => 330, 'rhs' => 1 ),
  array( 'lhs' => 330, 'rhs' => 2 ),
  array( 'lhs' => 329, 'rhs' => 1 ),
  array( 'lhs' => 329, 'rhs' => 2 ),
  array( 'lhs' => 328, 'rhs' => 1 ),
  array( 'lhs' => 328, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 2 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 186, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 317, 'rhs' => 1 ),
  array( 'lhs' => 317, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 197, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 311, 'rhs' => 1 ),
  array( 'lhs' => 311, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 310, 'rhs' => 1 ),
  array( 'lhs' => 310, 'rhs' => 2 ),
  array( 'lhs' => 309, 'rhs' => 1 ),
  array( 'lhs' => 309, 'rhs' => 2 ),
  array( 'lhs' => 307, 'rhs' => 1 ),
  array( 'lhs' => 307, 'rhs' => 2 ),
  array( 'lhs' => 307, 'rhs' => 2 ),
  array( 'lhs' => 307, 'rhs' => 3 ),
  array( 'lhs' => 306, 'rhs' => 1 ),
  array( 'lhs' => 306, 'rhs' => 2 ),
  array( 'lhs' => 304, 'rhs' => 1 ),
  array( 'lhs' => 304, 'rhs' => 2 ),
  array( 'lhs' => 242, 'rhs' => 1 ),
  array( 'lhs' => 242, 'rhs' => 2 ),
  array( 'lhs' => 243, 'rhs' => 1 ),
  array( 'lhs' => 243, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 298, 'rhs' => 1 ),
  array( 'lhs' => 298, 'rhs' => 2 ),
  array( 'lhs' => 297, 'rhs' => 1 ),
  array( 'lhs' => 297, 'rhs' => 2 ),
  array( 'lhs' => 296, 'rhs' => 1 ),
  array( 'lhs' => 296, 'rhs' => 2 ),
  array( 'lhs' => 295, 'rhs' => 1 ),
  array( 'lhs' => 295, 'rhs' => 2 ),
  array( 'lhs' => 294, 'rhs' => 1 ),
  array( 'lhs' => 294, 'rhs' => 2 ),
  array( 'lhs' => 293, 'rhs' => 1 ),
  array( 'lhs' => 293, 'rhs' => 2 ),
  array( 'lhs' => 290, 'rhs' => 1 ),
  array( 'lhs' => 290, 'rhs' => 2 ),
  array( 'lhs' => 291, 'rhs' => 1 ),
  array( 'lhs' => 291, 'rhs' => 2 ),
  array( 'lhs' => 280, 'rhs' => 1 ),
  array( 'lhs' => 280, 'rhs' => 2 ),
  array( 'lhs' => 278, 'rhs' => 1 ),
  array( 'lhs' => 278, 'rhs' => 2 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 2 ),
  array( 'lhs' => 288, 'rhs' => 1 ),
  array( 'lhs' => 288, 'rhs' => 2 ),
  array( 'lhs' => 283, 'rhs' => 1 ),
  array( 'lhs' => 283, 'rhs' => 2 ),
  array( 'lhs' => 281, 'rhs' => 1 ),
  array( 'lhs' => 281, 'rhs' => 2 ),
  array( 'lhs' => 277, 'rhs' => 1 ),
  array( 'lhs' => 277, 'rhs' => 2 ),
  array( 'lhs' => 275, 'rhs' => 1 ),
  array( 'lhs' => 275, 'rhs' => 2 ),
  array( 'lhs' => 274, 'rhs' => 1 ),
  array( 'lhs' => 274, 'rhs' => 2 ),
  array( 'lhs' => 273, 'rhs' => 1 ),
  array( 'lhs' => 273, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 1 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 270, 'rhs' => 1 ),
  array( 'lhs' => 270, 'rhs' => 2 ),
  array( 'lhs' => 269, 'rhs' => 1 ),
  array( 'lhs' => 269, 'rhs' => 2 ),
  array( 'lhs' => 267, 'rhs' => 1 ),
  array( 'lhs' => 267, 'rhs' => 2 ),
  array( 'lhs' => 266, 'rhs' => 1 ),
  array( 'lhs' => 266, 'rhs' => 2 ),
  array( 'lhs' => 264, 'rhs' => 1 ),
  array( 'lhs' => 264, 'rhs' => 2 ),
  array( 'lhs' => 263, 'rhs' => 1 ),
  array( 'lhs' => 263, 'rhs' => 2 ),
  array( 'lhs' => 262, 'rhs' => 1 ),
  array( 'lhs' => 262, 'rhs' => 2 ),
  array( 'lhs' => 261, 'rhs' => 1 ),
  array( 'lhs' => 261, 'rhs' => 2 ),
  array( 'lhs' => 260, 'rhs' => 1 ),
  array( 'lhs' => 260, 'rhs' => 2 ),
  array( 'lhs' => 259, 'rhs' => 1 ),
  array( 'lhs' => 259, 'rhs' => 2 ),
  array( 'lhs' => 258, 'rhs' => 1 ),
  array( 'lhs' => 258, 'rhs' => 2 ),
  array( 'lhs' => 257, 'rhs' => 1 ),
  array( 'lhs' => 257, 'rhs' => 2 ),
  array( 'lhs' => 256, 'rhs' => 1 ),
  array( 'lhs' => 256, 'rhs' => 2 ),
  array( 'lhs' => 255, 'rhs' => 1 ),
  array( 'lhs' => 255, 'rhs' => 2 ),
  array( 'lhs' => 254, 'rhs' => 1 ),
  array( 'lhs' => 254, 'rhs' => 2 ),
  array( 'lhs' => 252, 'rhs' => 1 ),
  array( 'lhs' => 252, 'rhs' => 2 ),
  array( 'lhs' => 251, 'rhs' => 1 ),
  array( 'lhs' => 251, 'rhs' => 2 ),
  array( 'lhs' => 250, 'rhs' => 1 ),
  array( 'lhs' => 250, 'rhs' => 2 ),
  array( 'lhs' => 249, 'rhs' => 1 ),
  array( 'lhs' => 249, 'rhs' => 2 ),
  array( 'lhs' => 248, 'rhs' => 1 ),
  array( 'lhs' => 248, 'rhs' => 2 ),
  array( 'lhs' => 241, 'rhs' => 1 ),
  array( 'lhs' => 241, 'rhs' => 2 ),
  array( 'lhs' => 240, 'rhs' => 1 ),
  array( 'lhs' => 240, 'rhs' => 2 ),
  array( 'lhs' => 239, 'rhs' => 1 ),
  array( 'lhs' => 239, 'rhs' => 2 ),
  array( 'lhs' => 238, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 2 ),
  array( 'lhs' => 237, 'rhs' => 1 ),
  array( 'lhs' => 237, 'rhs' => 2 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 236, 'rhs' => 2 ),
  array( 'lhs' => 233, 'rhs' => 1 ),
  array( 'lhs' => 233, 'rhs' => 2 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 229, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 2 ),
  array( 'lhs' => 227, 'rhs' => 1 ),
  array( 'lhs' => 227, 'rhs' => 2 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 2 ),
  array( 'lhs' => 223, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 2 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 2 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 218, 'rhs' => 2 ),
  array( 'lhs' => 217, 'rhs' => 1 ),
  array( 'lhs' => 217, 'rhs' => 2 ),
  array( 'lhs' => 216, 'rhs' => 1 ),
  array( 'lhs' => 216, 'rhs' => 2 ),
  array( 'lhs' => 214, 'rhs' => 1 ),
  array( 'lhs' => 214, 'rhs' => 2 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 210, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 209, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 2 ),
  array( 'lhs' => 206, 'rhs' => 1 ),
  array( 'lhs' => 206, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 2 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 2 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        9 => 7,
        8 => 8,
        10 => 10,
        11 => 11,
        25 => 11,
        33 => 11,
        34 => 11,
        35 => 11,
        36 => 11,
        37 => 11,
        41 => 11,
        42 => 11,
        43 => 11,
        44 => 11,
        47 => 11,
        50 => 11,
        53 => 11,
        54 => 11,
        55 => 11,
        56 => 11,
        61 => 11,
        78 => 11,
        80 => 11,
        83 => 11,
        104 => 11,
        106 => 11,
        170 => 11,
        173 => 11,
        174 => 11,
        246 => 11,
        248 => 11,
        253 => 11,
        254 => 11,
        257 => 11,
        260 => 11,
        261 => 11,
        269 => 11,
        283 => 11,
        284 => 11,
        285 => 11,
        297 => 11,
        301 => 11,
        302 => 11,
        303 => 11,
        304 => 11,
        305 => 11,
        308 => 11,
        309 => 11,
        344 => 11,
        346 => 11,
        348 => 11,
        350 => 11,
        352 => 11,
        354 => 11,
        356 => 11,
        358 => 11,
        360 => 11,
        362 => 11,
        364 => 11,
        366 => 11,
        368 => 11,
        370 => 11,
        372 => 11,
        374 => 11,
        376 => 11,
        378 => 11,
        380 => 11,
        382 => 11,
        384 => 11,
        386 => 11,
        388 => 11,
        390 => 11,
        394 => 11,
        396 => 11,
        398 => 11,
        400 => 11,
        402 => 11,
        404 => 11,
        406 => 11,
        408 => 11,
        410 => 11,
        412 => 11,
        414 => 11,
        416 => 11,
        418 => 11,
        420 => 11,
        422 => 11,
        424 => 11,
        426 => 11,
        428 => 11,
        430 => 11,
        432 => 11,
        434 => 11,
        436 => 11,
        438 => 11,
        440 => 11,
        442 => 11,
        444 => 11,
        446 => 11,
        448 => 11,
        450 => 11,
        490 => 11,
        492 => 11,
        494 => 11,
        496 => 11,
        498 => 11,
        500 => 11,
        502 => 11,
        504 => 11,
        506 => 11,
        508 => 11,
        510 => 11,
        512 => 11,
        514 => 11,
        516 => 11,
        518 => 11,
        520 => 11,
        522 => 11,
        524 => 11,
        526 => 11,
        528 => 11,
        530 => 11,
        532 => 11,
        534 => 11,
        536 => 11,
        538 => 11,
        540 => 11,
        542 => 11,
        544 => 11,
        546 => 11,
        548 => 11,
        550 => 11,
        552 => 11,
        554 => 11,
        556 => 11,
        558 => 11,
        560 => 11,
        562 => 11,
        564 => 11,
        567 => 11,
        12 => 12,
        13 => 13,
        20 => 13,
        14 => 14,
        21 => 14,
        15 => 15,
        22 => 15,
        16 => 16,
        23 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        24 => 24,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 28,
        30 => 30,
        31 => 31,
        32 => 31,
        38 => 38,
        39 => 39,
        40 => 40,
        45 => 45,
        46 => 46,
        48 => 48,
        49 => 49,
        195 => 49,
        199 => 49,
        452 => 49,
        454 => 49,
        456 => 49,
        458 => 49,
        460 => 49,
        462 => 49,
        464 => 49,
        466 => 49,
        468 => 49,
        470 => 49,
        472 => 49,
        474 => 49,
        476 => 49,
        478 => 49,
        480 => 49,
        482 => 49,
        484 => 49,
        486 => 49,
        488 => 49,
        51 => 51,
        52 => 52,
        57 => 57,
        282 => 57,
        58 => 58,
        59 => 59,
        60 => 60,
        62 => 62,
        63 => 63,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        84 => 77,
        79 => 79,
        81 => 81,
        82 => 82,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        105 => 105,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 116,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        133 => 131,
        132 => 132,
        134 => 132,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        155 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        171 => 171,
        172 => 172,
        192 => 172,
        202 => 172,
        207 => 172,
        210 => 172,
        213 => 172,
        217 => 172,
        220 => 172,
        230 => 172,
        175 => 175,
        176 => 176,
        177 => 177,
        178 => 178,
        179 => 179,
        180 => 180,
        181 => 181,
        182 => 182,
        183 => 183,
        184 => 184,
        185 => 185,
        186 => 186,
        187 => 187,
        188 => 188,
        189 => 189,
        190 => 190,
        191 => 191,
        193 => 193,
        194 => 194,
        196 => 196,
        197 => 197,
        198 => 198,
        200 => 200,
        201 => 201,
        203 => 203,
        204 => 204,
        205 => 205,
        206 => 206,
        208 => 208,
        209 => 209,
        211 => 211,
        212 => 212,
        214 => 214,
        215 => 215,
        216 => 216,
        218 => 218,
        219 => 218,
        221 => 221,
        222 => 222,
        223 => 223,
        224 => 224,
        225 => 225,
        226 => 226,
        227 => 227,
        228 => 228,
        229 => 229,
        231 => 231,
        232 => 231,
        233 => 233,
        234 => 234,
        235 => 235,
        236 => 236,
        237 => 237,
        238 => 238,
        239 => 239,
        240 => 240,
        241 => 241,
        242 => 242,
        243 => 243,
        244 => 244,
        245 => 245,
        247 => 247,
        249 => 249,
        250 => 249,
        251 => 251,
        252 => 252,
        255 => 255,
        256 => 255,
        258 => 258,
        259 => 259,
        262 => 262,
        263 => 263,
        264 => 264,
        266 => 264,
        267 => 264,
        268 => 264,
        265 => 265,
        270 => 270,
        271 => 271,
        272 => 272,
        273 => 272,
        274 => 274,
        275 => 274,
        276 => 274,
        277 => 274,
        278 => 278,
        279 => 279,
        280 => 280,
        281 => 281,
        286 => 286,
        287 => 287,
        288 => 288,
        289 => 289,
        290 => 290,
        291 => 291,
        292 => 292,
        293 => 292,
        294 => 294,
        295 => 295,
        296 => 296,
        298 => 298,
        299 => 299,
        300 => 300,
        306 => 306,
        307 => 307,
        310 => 310,
        311 => 311,
        312 => 312,
        313 => 313,
        314 => 314,
        315 => 315,
        316 => 316,
        317 => 317,
        318 => 318,
        319 => 319,
        320 => 320,
        321 => 321,
        322 => 322,
        323 => 323,
        324 => 324,
        325 => 325,
        326 => 326,
        327 => 327,
        328 => 328,
        329 => 329,
        330 => 330,
        331 => 331,
        332 => 332,
        333 => 333,
        334 => 334,
        335 => 335,
        336 => 336,
        337 => 337,
        338 => 338,
        339 => 339,
        340 => 340,
        341 => 341,
        342 => 342,
        343 => 343,
        345 => 345,
        347 => 347,
        349 => 349,
        351 => 351,
        353 => 353,
        355 => 355,
        357 => 357,
        359 => 359,
        361 => 361,
        363 => 363,
        365 => 365,
        367 => 367,
        369 => 369,
        371 => 371,
        373 => 373,
        375 => 375,
        377 => 377,
        379 => 379,
        381 => 381,
        383 => 383,
        385 => 385,
        387 => 387,
        389 => 389,
        391 => 391,
        392 => 391,
        393 => 393,
        395 => 395,
        397 => 397,
        399 => 399,
        401 => 401,
        403 => 403,
        405 => 405,
        407 => 407,
        409 => 409,
        411 => 411,
        413 => 413,
        415 => 415,
        417 => 417,
        419 => 419,
        421 => 421,
        423 => 421,
        425 => 425,
        427 => 427,
        429 => 429,
        431 => 431,
        433 => 433,
        435 => 435,
        437 => 437,
        439 => 439,
        441 => 441,
        443 => 443,
        445 => 445,
        447 => 447,
        449 => 449,
        451 => 449,
        453 => 453,
        455 => 455,
        457 => 457,
        459 => 459,
        461 => 461,
        463 => 463,
        465 => 465,
        467 => 467,
        469 => 469,
        471 => 471,
        473 => 473,
        475 => 475,
        477 => 477,
        479 => 479,
        481 => 479,
        483 => 479,
        485 => 485,
        487 => 487,
        489 => 487,
        491 => 491,
        493 => 493,
        495 => 495,
        497 => 497,
        499 => 499,
        501 => 501,
        503 => 503,
        505 => 505,
        507 => 507,
        509 => 509,
        511 => 511,
        513 => 513,
        515 => 515,
        517 => 517,
        519 => 519,
        521 => 521,
        523 => 523,
        525 => 525,
        527 => 527,
        529 => 529,
        531 => 531,
        533 => 533,
        535 => 535,
        537 => 537,
        539 => 539,
        541 => 541,
        543 => 543,
        545 => 545,
        547 => 547,
        549 => 549,
        551 => 551,
        553 => 553,
        555 => 555,
        557 => 557,
        559 => 559,
        561 => 561,
        563 => 563,
        565 => 565,
        566 => 566,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 88 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 6782 "langs_src/parser_cpp_language.php"
#line 103 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 6798 "langs_src/parser_cpp_language.php"
#line 119 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6804 "langs_src/parser_cpp_language.php"
#line 124 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6810 "langs_src/parser_cpp_language.php"
#line 129 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->mapper->push_anonymous_type();
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6816 "langs_src/parser_cpp_language.php"
#line 134 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6824 "langs_src/parser_cpp_language.php"
#line 141 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('namespace', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6830 "langs_src/parser_cpp_language.php"
#line 146 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6836 "langs_src/parser_cpp_language.php"
#line 151 "langs_src/parser_cpp_language.y"
    function yy_r8(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6842 "langs_src/parser_cpp_language.php"
#line 161 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6848 "langs_src/parser_cpp_language.php"
#line 168 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6853 "langs_src/parser_cpp_language.php"
#line 172 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_constructable($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value(), $this->mapper->extract_template_parameters($this->yystack[$this->yyidx + -1]->minor));
	$this->_retvalue = $this->create_node('identified_type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6861 "langs_src/parser_cpp_language.php"
#line 179 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6867 "langs_src/parser_cpp_language.php"
#line 184 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6873 "langs_src/parser_cpp_language.php"
#line 189 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6879 "langs_src/parser_cpp_language.php"
#line 194 "langs_src/parser_cpp_language.y"
    function yy_r16(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6885 "langs_src/parser_cpp_language.php"
#line 200 "langs_src/parser_cpp_language.y"
    function yy_r17(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6891 "langs_src/parser_cpp_language.php"
#line 205 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6897 "langs_src/parser_cpp_language.php"
#line 210 "langs_src/parser_cpp_language.y"
    function yy_r19(){
	$this->mapper->push_anonymous_type($this->mapper->extract_template_parameters($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6903 "langs_src/parser_cpp_language.php"
#line 240 "langs_src/parser_cpp_language.y"
    function yy_r24(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6909 "langs_src/parser_cpp_language.php"
#line 249 "langs_src/parser_cpp_language.y"
    function yy_r26(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s"));
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6915 "langs_src/parser_cpp_language.php"
#line 254 "langs_src/parser_cpp_language.y"
    function yy_r27(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6922 "langs_src/parser_cpp_language.php"
#line 260 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6929 "langs_src/parser_cpp_language.php"
#line 272 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6936 "langs_src/parser_cpp_language.php"
#line 278 "langs_src/parser_cpp_language.y"
    function yy_r31(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s", "%s", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6943 "langs_src/parser_cpp_language.php"
#line 311 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6949 "langs_src/parser_cpp_language.php"
#line 316 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6955 "langs_src/parser_cpp_language.php"
#line 322 "langs_src/parser_cpp_language.y"
    function yy_r40(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6961 "langs_src/parser_cpp_language.php"
#line 343 "langs_src/parser_cpp_language.y"
    function yy_r45(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6968 "langs_src/parser_cpp_language.php"
#line 349 "langs_src/parser_cpp_language.y"
    function yy_r46(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6975 "langs_src/parser_cpp_language.php"
#line 359 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6981 "langs_src/parser_cpp_language.php"
#line 366 "langs_src/parser_cpp_language.y"
    function yy_r49(){
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6986 "langs_src/parser_cpp_language.php"
#line 374 "langs_src/parser_cpp_language.y"
    function yy_r51(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6992 "langs_src/parser_cpp_language.php"
#line 379 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6998 "langs_src/parser_cpp_language.php"
#line 400 "langs_src/parser_cpp_language.y"
    function yy_r57(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7003 "langs_src/parser_cpp_language.php"
#line 407 "langs_src/parser_cpp_language.y"
    function yy_r58(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7009 "langs_src/parser_cpp_language.php"
#line 412 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7015 "langs_src/parser_cpp_language.php"
#line 417 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7021 "langs_src/parser_cpp_language.php"
#line 426 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7027 "langs_src/parser_cpp_language.php"
#line 431 "langs_src/parser_cpp_language.y"
    function yy_r63(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7033 "langs_src/parser_cpp_language.php"
#line 437 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('enum_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7040 "langs_src/parser_cpp_language.php"
#line 443 "langs_src/parser_cpp_language.y"
    function yy_r65(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7046 "langs_src/parser_cpp_language.php"
#line 448 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7052 "langs_src/parser_cpp_language.php"
#line 453 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7058 "langs_src/parser_cpp_language.php"
#line 458 "langs_src/parser_cpp_language.y"
    function yy_r68(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7064 "langs_src/parser_cpp_language.php"
#line 463 "langs_src/parser_cpp_language.y"
    function yy_r69(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7070 "langs_src/parser_cpp_language.php"
#line 468 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7076 "langs_src/parser_cpp_language.php"
#line 473 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7082 "langs_src/parser_cpp_language.php"
#line 478 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7088 "langs_src/parser_cpp_language.php"
#line 483 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7094 "langs_src/parser_cpp_language.php"
#line 488 "langs_src/parser_cpp_language.y"
    function yy_r74(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7100 "langs_src/parser_cpp_language.php"
#line 495 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7106 "langs_src/parser_cpp_language.php"
#line 500 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7112 "langs_src/parser_cpp_language.php"
#line 505 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('function_definition_without_type', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7118 "langs_src/parser_cpp_language.php"
#line 514 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7124 "langs_src/parser_cpp_language.php"
#line 523 "langs_src/parser_cpp_language.y"
    function yy_r81(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7130 "langs_src/parser_cpp_language.php"
#line 528 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7136 "langs_src/parser_cpp_language.php"
#line 545 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7142 "langs_src/parser_cpp_language.php"
#line 551 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7148 "langs_src/parser_cpp_language.php"
#line 557 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('destructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7154 "langs_src/parser_cpp_language.php"
#line 565 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('outer_constructor_name', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7161 "langs_src/parser_cpp_language.php"
#line 571 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, E));
    }
#line 7168 "langs_src/parser_cpp_language.php"
#line 578 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7175 "langs_src/parser_cpp_language.php"
#line 584 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->mapper->clear_lookup_namespace();
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('outer_destructor_name', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7182 "langs_src/parser_cpp_language.php"
#line 591 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7188 "langs_src/parser_cpp_language.php"
#line 597 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7194 "langs_src/parser_cpp_language.php"
#line 602 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7200 "langs_src/parser_cpp_language.php"
#line 607 "langs_src/parser_cpp_language.y"
    function yy_r95(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7206 "langs_src/parser_cpp_language.php"
#line 612 "langs_src/parser_cpp_language.y"
    function yy_r96(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7212 "langs_src/parser_cpp_language.php"
#line 617 "langs_src/parser_cpp_language.y"
    function yy_r97(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7218 "langs_src/parser_cpp_language.php"
#line 625 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7224 "langs_src/parser_cpp_language.php"
#line 630 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7230 "langs_src/parser_cpp_language.php"
#line 635 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7236 "langs_src/parser_cpp_language.php"
#line 640 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7242 "langs_src/parser_cpp_language.php"
#line 645 "langs_src/parser_cpp_language.y"
    function yy_r102(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7248 "langs_src/parser_cpp_language.php"
#line 650 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7254 "langs_src/parser_cpp_language.php"
#line 659 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7260 "langs_src/parser_cpp_language.php"
#line 671 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7266 "langs_src/parser_cpp_language.php"
#line 676 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7272 "langs_src/parser_cpp_language.php"
#line 681 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7278 "langs_src/parser_cpp_language.php"
#line 686 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7284 "langs_src/parser_cpp_language.php"
#line 691 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7290 "langs_src/parser_cpp_language.php"
#line 696 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7296 "langs_src/parser_cpp_language.php"
#line 701 "langs_src/parser_cpp_language.y"
    function yy_r113(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7302 "langs_src/parser_cpp_language.php"
#line 706 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7308 "langs_src/parser_cpp_language.php"
#line 711 "langs_src/parser_cpp_language.y"
    function yy_r115(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7314 "langs_src/parser_cpp_language.php"
#line 716 "langs_src/parser_cpp_language.y"
    function yy_r116(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 7320 "langs_src/parser_cpp_language.php"
#line 726 "langs_src/parser_cpp_language.y"
    function yy_r118(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 7326 "langs_src/parser_cpp_language.php"
#line 731 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 7332 "langs_src/parser_cpp_language.php"
#line 736 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7338 "langs_src/parser_cpp_language.php"
#line 741 "langs_src/parser_cpp_language.y"
    function yy_r121(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7344 "langs_src/parser_cpp_language.php"
#line 753 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7350 "langs_src/parser_cpp_language.php"
#line 765 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7356 "langs_src/parser_cpp_language.php"
#line 778 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7362 "langs_src/parser_cpp_language.php"
#line 786 "langs_src/parser_cpp_language.y"
    function yy_r125(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7368 "langs_src/parser_cpp_language.php"
#line 791 "langs_src/parser_cpp_language.y"
    function yy_r126(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7374 "langs_src/parser_cpp_language.php"
#line 797 "langs_src/parser_cpp_language.y"
    function yy_r127(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7380 "langs_src/parser_cpp_language.php"
#line 802 "langs_src/parser_cpp_language.y"
    function yy_r128(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7386 "langs_src/parser_cpp_language.php"
#line 810 "langs_src/parser_cpp_language.y"
    function yy_r129(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7392 "langs_src/parser_cpp_language.php"
#line 815 "langs_src/parser_cpp_language.y"
    function yy_r130(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7398 "langs_src/parser_cpp_language.php"
#line 822 "langs_src/parser_cpp_language.y"
    function yy_r131(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7404 "langs_src/parser_cpp_language.php"
#line 827 "langs_src/parser_cpp_language.y"
    function yy_r132(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7410 "langs_src/parser_cpp_language.php"
#line 842 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7416 "langs_src/parser_cpp_language.php"
#line 849 "langs_src/parser_cpp_language.y"
    function yy_r136(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7422 "langs_src/parser_cpp_language.php"
#line 854 "langs_src/parser_cpp_language.y"
    function yy_r137(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7428 "langs_src/parser_cpp_language.php"
#line 859 "langs_src/parser_cpp_language.y"
    function yy_r138(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7434 "langs_src/parser_cpp_language.php"
#line 864 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7440 "langs_src/parser_cpp_language.php"
#line 869 "langs_src/parser_cpp_language.y"
    function yy_r140(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7446 "langs_src/parser_cpp_language.php"
#line 874 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7452 "langs_src/parser_cpp_language.php"
#line 879 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7458 "langs_src/parser_cpp_language.php"
#line 884 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7464 "langs_src/parser_cpp_language.php"
#line 889 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7470 "langs_src/parser_cpp_language.php"
#line 894 "langs_src/parser_cpp_language.y"
    function yy_r145(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7476 "langs_src/parser_cpp_language.php"
#line 901 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7482 "langs_src/parser_cpp_language.php"
#line 906 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7488 "langs_src/parser_cpp_language.php"
#line 913 "langs_src/parser_cpp_language.y"
    function yy_r148(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7494 "langs_src/parser_cpp_language.php"
#line 918 "langs_src/parser_cpp_language.y"
    function yy_r149(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7500 "langs_src/parser_cpp_language.php"
#line 923 "langs_src/parser_cpp_language.y"
    function yy_r150(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7506 "langs_src/parser_cpp_language.php"
#line 928 "langs_src/parser_cpp_language.y"
    function yy_r151(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7512 "langs_src/parser_cpp_language.php"
#line 933 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7518 "langs_src/parser_cpp_language.php"
#line 938 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7524 "langs_src/parser_cpp_language.php"
#line 943 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7530 "langs_src/parser_cpp_language.php"
#line 955 "langs_src/parser_cpp_language.y"
    function yy_r156(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7536 "langs_src/parser_cpp_language.php"
#line 960 "langs_src/parser_cpp_language.y"
    function yy_r157(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7542 "langs_src/parser_cpp_language.php"
#line 965 "langs_src/parser_cpp_language.y"
    function yy_r158(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7548 "langs_src/parser_cpp_language.php"
#line 972 "langs_src/parser_cpp_language.y"
    function yy_r159(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7554 "langs_src/parser_cpp_language.php"
#line 977 "langs_src/parser_cpp_language.y"
    function yy_r160(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 7561 "langs_src/parser_cpp_language.php"
#line 983 "langs_src/parser_cpp_language.y"
    function yy_r161(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
    }
#line 7568 "langs_src/parser_cpp_language.php"
#line 990 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7574 "langs_src/parser_cpp_language.php"
#line 995 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7580 "langs_src/parser_cpp_language.php"
#line 1000 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7586 "langs_src/parser_cpp_language.php"
#line 1005 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7592 "langs_src/parser_cpp_language.php"
#line 1012 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('new_kwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7598 "langs_src/parser_cpp_language.php"
#line 1017 "langs_src/parser_cpp_language.y"
    function yy_r167(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_array', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7604 "langs_src/parser_cpp_language.php"
#line 1022 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_pointer', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7610 "langs_src/parser_cpp_language.php"
#line 1028 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменных", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7616 "langs_src/parser_cpp_language.php"
#line 1039 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7622 "langs_src/parser_cpp_language.php"
#line 1044 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7628 "langs_src/parser_cpp_language.php"
#line 1059 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 7635 "langs_src/parser_cpp_language.php"
#line 1065 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7641 "langs_src/parser_cpp_language.php"
#line 1070 "langs_src/parser_cpp_language.y"
    function yy_r177(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7647 "langs_src/parser_cpp_language.php"
#line 1075 "langs_src/parser_cpp_language.y"
    function yy_r178(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7653 "langs_src/parser_cpp_language.php"
#line 1080 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7659 "langs_src/parser_cpp_language.php"
#line 1085 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7665 "langs_src/parser_cpp_language.php"
#line 1092 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryxor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7671 "langs_src/parser_cpp_language.php"
#line 1097 "langs_src/parser_cpp_language.y"
    function yy_r182(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7677 "langs_src/parser_cpp_language.php"
#line 1102 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryand_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7683 "langs_src/parser_cpp_language.php"
#line 1107 "langs_src/parser_cpp_language.y"
    function yy_r184(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7689 "langs_src/parser_cpp_language.php"
#line 1112 "langs_src/parser_cpp_language.y"
    function yy_r185(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7695 "langs_src/parser_cpp_language.php"
#line 1117 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulo_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7701 "langs_src/parser_cpp_language.php"
#line 1122 "langs_src/parser_cpp_language.y"
    function yy_r187(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7707 "langs_src/parser_cpp_language.php"
#line 1127 "langs_src/parser_cpp_language.y"
    function yy_r188(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7713 "langs_src/parser_cpp_language.php"
#line 1132 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7719 "langs_src/parser_cpp_language.php"
#line 1137 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7725 "langs_src/parser_cpp_language.php"
#line 1142 "langs_src/parser_cpp_language.y"
    function yy_r191(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7731 "langs_src/parser_cpp_language.php"
#line 1154 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7737 "langs_src/parser_cpp_language.php"
#line 1159 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7743 "langs_src/parser_cpp_language.php"
#line 1168 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_xor', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7749 "langs_src/parser_cpp_language.php"
#line 1173 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7755 "langs_src/parser_cpp_language.php"
#line 1178 "langs_src/parser_cpp_language.y"
    function yy_r198(){
	// Well, that's what you get when you mix binary and and adress taking
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7762 "langs_src/parser_cpp_language.php"
#line 1188 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_notequal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7768 "langs_src/parser_cpp_language.php"
#line 1193 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7774 "langs_src/parser_cpp_language.php"
#line 1205 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7780 "langs_src/parser_cpp_language.php"
#line 1210 "langs_src/parser_cpp_language.y"
    function yy_r204(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7786 "langs_src/parser_cpp_language.php"
#line 1215 "langs_src/parser_cpp_language.y"
    function yy_r205(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7792 "langs_src/parser_cpp_language.php"
#line 1220 "langs_src/parser_cpp_language.y"
    function yy_r206(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7798 "langs_src/parser_cpp_language.php"
#line 1232 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7804 "langs_src/parser_cpp_language.php"
#line 1237 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7810 "langs_src/parser_cpp_language.php"
#line 1249 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7816 "langs_src/parser_cpp_language.php"
#line 1254 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7822 "langs_src/parser_cpp_language.php"
#line 1266 "langs_src/parser_cpp_language.y"
    function yy_r214(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulosign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7828 "langs_src/parser_cpp_language.php"
#line 1271 "langs_src/parser_cpp_language.y"
    function yy_r215(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7834 "langs_src/parser_cpp_language.php"
#line 1276 "langs_src/parser_cpp_language.y"
    function yy_r216(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7840 "langs_src/parser_cpp_language.php"
#line 1288 "langs_src/parser_cpp_language.y"
    function yy_r218(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_get_property', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7846 "langs_src/parser_cpp_language.php"
#line 1305 "langs_src/parser_cpp_language.y"
    function yy_r221(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_take_adress', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7852 "langs_src/parser_cpp_language.php"
#line 1310 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_dereference', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7858 "langs_src/parser_cpp_language.php"
#line 1315 "langs_src/parser_cpp_language.y"
    function yy_r223(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_typecast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7864 "langs_src/parser_cpp_language.php"
#line 1320 "langs_src/parser_cpp_language.y"
    function yy_r224(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7870 "langs_src/parser_cpp_language.php"
#line 1325 "langs_src/parser_cpp_language.y"
    function yy_r225(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7876 "langs_src/parser_cpp_language.php"
#line 1330 "langs_src/parser_cpp_language.y"
    function yy_r226(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7882 "langs_src/parser_cpp_language.php"
#line 1335 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7888 "langs_src/parser_cpp_language.php"
#line 1340 "langs_src/parser_cpp_language.y"
    function yy_r228(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7894 "langs_src/parser_cpp_language.php"
#line 1345 "langs_src/parser_cpp_language.y"
    function yy_r229(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7900 "langs_src/parser_cpp_language.php"
#line 1357 "langs_src/parser_cpp_language.y"
    function yy_r231(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_property_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7906 "langs_src/parser_cpp_language.php"
#line 1367 "langs_src/parser_cpp_language.y"
    function yy_r233(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7912 "langs_src/parser_cpp_language.php"
#line 1372 "langs_src/parser_cpp_language.y"
    function yy_r234(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7918 "langs_src/parser_cpp_language.php"
#line 1377 "langs_src/parser_cpp_language.y"
    function yy_r235(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7924 "langs_src/parser_cpp_language.php"
#line 1382 "langs_src/parser_cpp_language.y"
    function yy_r236(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7930 "langs_src/parser_cpp_language.php"
#line 1387 "langs_src/parser_cpp_language.y"
    function yy_r237(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_postfix_increment', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7936 "langs_src/parser_cpp_language.php"
#line 1392 "langs_src/parser_cpp_language.y"
    function yy_r238(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_postfix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7942 "langs_src/parser_cpp_language.php"
#line 1397 "langs_src/parser_cpp_language.y"
    function yy_r239(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7948 "langs_src/parser_cpp_language.php"
#line 1404 "langs_src/parser_cpp_language.y"
    function yy_r240(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7954 "langs_src/parser_cpp_language.php"
#line 1409 "langs_src/parser_cpp_language.y"
    function yy_r241(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7960 "langs_src/parser_cpp_language.php"
#line 1416 "langs_src/parser_cpp_language.y"
    function yy_r242(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_const_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7966 "langs_src/parser_cpp_language.php"
#line 1421 "langs_src/parser_cpp_language.y"
    function yy_r243(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_static_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7972 "langs_src/parser_cpp_language.php"
#line 1426 "langs_src/parser_cpp_language.y"
    function yy_r244(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_dynamic_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7978 "langs_src/parser_cpp_language.php"
#line 1431 "langs_src/parser_cpp_language.y"
    function yy_r245(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_reinterpret_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7984 "langs_src/parser_cpp_language.php"
#line 1442 "langs_src/parser_cpp_language.y"
    function yy_r247(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue_or_assignment_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7990 "langs_src/parser_cpp_language.php"
#line 1451 "langs_src/parser_cpp_language.y"
    function yy_r249(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7996 "langs_src/parser_cpp_language.php"
#line 1461 "langs_src/parser_cpp_language.y"
    function yy_r251(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8002 "langs_src/parser_cpp_language.php"
#line 1466 "langs_src/parser_cpp_language.y"
    function yy_r252(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8008 "langs_src/parser_cpp_language.php"
#line 1480 "langs_src/parser_cpp_language.y"
    function yy_r255(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('initialization_list_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, C));
    }
#line 8014 "langs_src/parser_cpp_language.php"
#line 1494 "langs_src/parser_cpp_language.y"
    function yy_r258(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8020 "langs_src/parser_cpp_language.php"
#line 1499 "langs_src/parser_cpp_language.y"
    function yy_r259(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8026 "langs_src/parser_cpp_language.php"
#line 1512 "langs_src/parser_cpp_language.y"
    function yy_r262(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8032 "langs_src/parser_cpp_language.php"
#line 1517 "langs_src/parser_cpp_language.y"
    function yy_r263(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8038 "langs_src/parser_cpp_language.php"
#line 1525 "langs_src/parser_cpp_language.y"
    function yy_r264(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8044 "langs_src/parser_cpp_language.php"
#line 1530 "langs_src/parser_cpp_language.y"
    function yy_r265(){
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8049 "langs_src/parser_cpp_language.php"
#line 1553 "langs_src/parser_cpp_language.y"
    function yy_r270(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('scoped_identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8055 "langs_src/parser_cpp_language.php"
#line 1559 "langs_src/parser_cpp_language.y"
    function yy_r271(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_brackets', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8061 "langs_src/parser_cpp_language.php"
#line 1564 "langs_src/parser_cpp_language.y"
    function yy_r272(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_stringify', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8067 "langs_src/parser_cpp_language.php"
#line 1574 "langs_src/parser_cpp_language.y"
    function yy_r274(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_concat', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8073 "langs_src/parser_cpp_language.php"
#line 1596 "langs_src/parser_cpp_language.y"
    function yy_r278(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8079 "langs_src/parser_cpp_language.php"
#line 1601 "langs_src/parser_cpp_language.y"
    function yy_r279(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8085 "langs_src/parser_cpp_language.php"
#line 1608 "langs_src/parser_cpp_language.y"
    function yy_r280(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('c_style_typecast_operator', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 8092 "langs_src/parser_cpp_language.php"
#line 1616 "langs_src/parser_cpp_language.y"
    function yy_r281(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8098 "langs_src/parser_cpp_language.php"
#line 1637 "langs_src/parser_cpp_language.y"
    function yy_r286(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8105 "langs_src/parser_cpp_language.php"
#line 1643 "langs_src/parser_cpp_language.y"
    function yy_r287(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -1]->minor,  $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8112 "langs_src/parser_cpp_language.php"
#line 1649 "langs_src/parser_cpp_language.y"
    function yy_r288(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8118 "langs_src/parser_cpp_language.php"
#line 1654 "langs_src/parser_cpp_language.y"
    function yy_r289(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8124 "langs_src/parser_cpp_language.php"
#line 1659 "langs_src/parser_cpp_language.y"
    function yy_r290(){
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8130 "langs_src/parser_cpp_language.php"
#line 1664 "langs_src/parser_cpp_language.y"
    function yy_r291(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8137 "langs_src/parser_cpp_language.php"
#line 1670 "langs_src/parser_cpp_language.y"
    function yy_r292(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8143 "langs_src/parser_cpp_language.php"
#line 1681 "langs_src/parser_cpp_language.y"
    function yy_r294(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8149 "langs_src/parser_cpp_language.php"
#line 1686 "langs_src/parser_cpp_language.y"
    function yy_r295(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8157 "langs_src/parser_cpp_language.php"
#line 1693 "langs_src/parser_cpp_language.y"
    function yy_r296(){
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8164 "langs_src/parser_cpp_language.php"
#line 1705 "langs_src/parser_cpp_language.y"
    function yy_r298(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8170 "langs_src/parser_cpp_language.php"
#line 1713 "langs_src/parser_cpp_language.y"
    function yy_r299(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак  ссылки"));
	$this->_retvalue = $this->create_node('type_ref', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8176 "langs_src/parser_cpp_language.php"
#line 1718 "langs_src/parser_cpp_language.y"
    function yy_r300(){
	$this->yystack[$this->yyidx + -1]->minor->add_child($this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 8182 "langs_src/parser_cpp_language.php"
#line 1743 "langs_src/parser_cpp_language.y"
    function yy_r306(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8188 "langs_src/parser_cpp_language.php"
#line 1748 "langs_src/parser_cpp_language.y"
    function yy_r307(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8194 "langs_src/parser_cpp_language.php"
#line 1763 "langs_src/parser_cpp_language.y"
    function yy_r310(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_instantiation_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8200 "langs_src/parser_cpp_language.php"
#line 1768 "langs_src/parser_cpp_language.y"
    function yy_r311(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8206 "langs_src/parser_cpp_language.php"
#line 1773 "langs_src/parser_cpp_language.y"
    function yy_r312(){
	$this->mapper->start_new_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8212 "langs_src/parser_cpp_language.php"
#line 1778 "langs_src/parser_cpp_language.y"
    function yy_r313(){
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8218 "langs_src/parser_cpp_language.php"
#line 1783 "langs_src/parser_cpp_language.y"
    function yy_r314(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8224 "langs_src/parser_cpp_language.php"
#line 1788 "langs_src/parser_cpp_language.y"
    function yy_r315(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "%ur(именительный)", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8230 "langs_src/parser_cpp_language.php"
#line 1795 "langs_src/parser_cpp_language.y"
    function yy_r316(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя пустого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8236 "langs_src/parser_cpp_language.php"
#line 1803 "langs_src/parser_cpp_language.y"
    function yy_r317(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой одинарной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8242 "langs_src/parser_cpp_language.php"
#line 1808 "langs_src/parser_cpp_language.y"
    function yy_r318(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8248 "langs_src/parser_cpp_language.php"
#line 1813 "langs_src/parser_cpp_language.y"
    function yy_r319(){
    $this->currentrule = new block_formal_langs_description_rule("имя длинного типа c плавающей запятой двойной точности", array("признак длинного числа", "имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8254 "langs_src/parser_cpp_language.php"
#line 1821 "langs_src/parser_cpp_language.y"
    function yy_r320(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя символьного типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8260 "langs_src/parser_cpp_language.php"
#line 1826 "langs_src/parser_cpp_language.y"
    function yy_r321(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый символьный тип", array("признак знаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8266 "langs_src/parser_cpp_language.php"
#line 1831 "langs_src/parser_cpp_language.y"
    function yy_r322(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый символьный тип", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8272 "langs_src/parser_cpp_language.php"
#line 1839 "langs_src/parser_cpp_language.y"
    function yy_r323(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8278 "langs_src/parser_cpp_language.php"
#line 1844 "langs_src/parser_cpp_language.y"
    function yy_r324(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый целый тип", array("признак знаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8284 "langs_src/parser_cpp_language.php"
#line 1849 "langs_src/parser_cpp_language.y"
    function yy_r325(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый целый тип", array("признак беззнаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8290 "langs_src/parser_cpp_language.php"
#line 1854 "langs_src/parser_cpp_language.y"
    function yy_r326(){
    $this->currentrule = new block_formal_langs_description_rule("короткий целый тип", array("признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8296 "langs_src/parser_cpp_language.php"
#line 1859 "langs_src/parser_cpp_language.y"
    function yy_r327(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8302 "langs_src/parser_cpp_language.php"
#line 1864 "langs_src/parser_cpp_language.y"
    function yy_r328(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8308 "langs_src/parser_cpp_language.php"
#line 1869 "langs_src/parser_cpp_language.y"
    function yy_r329(){
    $this->currentrule = new block_formal_langs_description_rule("длинный целый тип", array("признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8314 "langs_src/parser_cpp_language.php"
#line 1874 "langs_src/parser_cpp_language.y"
    function yy_r330(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целый тип", array("признак знаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8320 "langs_src/parser_cpp_language.php"
#line 1879 "langs_src/parser_cpp_language.y"
    function yy_r331(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целый тип", array("признак беззнаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8326 "langs_src/parser_cpp_language.php"
#line 1884 "langs_src/parser_cpp_language.y"
    function yy_r332(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8332 "langs_src/parser_cpp_language.php"
#line 1890 "langs_src/parser_cpp_language.y"
    function yy_r333(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8338 "langs_src/parser_cpp_language.php"
#line 1895 "langs_src/parser_cpp_language.y"
    function yy_r334(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8344 "langs_src/parser_cpp_language.php"
#line 1903 "langs_src/parser_cpp_language.y"
    function yy_r335(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8350 "langs_src/parser_cpp_language.php"
#line 1908 "langs_src/parser_cpp_language.y"
    function yy_r336(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8356 "langs_src/parser_cpp_language.php"
#line 1913 "langs_src/parser_cpp_language.y"
    function yy_r337(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8362 "langs_src/parser_cpp_language.php"
#line 1920 "langs_src/parser_cpp_language.y"
    function yy_r338(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8368 "langs_src/parser_cpp_language.php"
#line 1925 "langs_src/parser_cpp_language.y"
    function yy_r339(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целвый тип", array("признак знаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8374 "langs_src/parser_cpp_language.php"
#line 1930 "langs_src/parser_cpp_language.y"
    function yy_r340(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целвый тип", array("признак беззнаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8380 "langs_src/parser_cpp_language.php"
#line 1937 "langs_src/parser_cpp_language.y"
    function yy_r341(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8386 "langs_src/parser_cpp_language.php"
#line 1942 "langs_src/parser_cpp_language.y"
    function yy_r342(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8392 "langs_src/parser_cpp_language.php"
#line 1947 "langs_src/parser_cpp_language.y"
    function yy_r343(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8398 "langs_src/parser_cpp_language.php"
#line 1960 "langs_src/parser_cpp_language.y"
    function yy_r345(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('unsigned', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8404 "langs_src/parser_cpp_language.php"
#line 1969 "langs_src/parser_cpp_language.y"
    function yy_r347(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('signed', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8410 "langs_src/parser_cpp_language.php"
#line 1978 "langs_src/parser_cpp_language.y"
    function yy_r349(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('long', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8416 "langs_src/parser_cpp_language.php"
#line 1987 "langs_src/parser_cpp_language.y"
    function yy_r351(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('short', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8422 "langs_src/parser_cpp_language.php"
#line 1996 "langs_src/parser_cpp_language.y"
    function yy_r353(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('int', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8428 "langs_src/parser_cpp_language.php"
#line 2005 "langs_src/parser_cpp_language.y"
    function yy_r355(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('char', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8434 "langs_src/parser_cpp_language.php"
#line 2014 "langs_src/parser_cpp_language.y"
    function yy_r357(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('double', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8440 "langs_src/parser_cpp_language.php"
#line 2023 "langs_src/parser_cpp_language.y"
    function yy_r359(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('float', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8446 "langs_src/parser_cpp_language.php"
#line 2032 "langs_src/parser_cpp_language.y"
    function yy_r361(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('void', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8452 "langs_src/parser_cpp_language.php"
#line 2041 "langs_src/parser_cpp_language.y"
    function yy_r363(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('greater', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8458 "langs_src/parser_cpp_language.php"
#line 2050 "langs_src/parser_cpp_language.y"
    function yy_r365(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('comma', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8464 "langs_src/parser_cpp_language.php"
#line 2059 "langs_src/parser_cpp_language.y"
    function yy_r367(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('lesser', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8470 "langs_src/parser_cpp_language.php"
#line 2068 "langs_src/parser_cpp_language.y"
    function yy_r369(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('multiply', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8476 "langs_src/parser_cpp_language.php"
#line 2077 "langs_src/parser_cpp_language.y"
    function yy_r371(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ampersand', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8482 "langs_src/parser_cpp_language.php"
#line 2086 "langs_src/parser_cpp_language.y"
    function yy_r373(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('constkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8488 "langs_src/parser_cpp_language.php"
#line 2095 "langs_src/parser_cpp_language.y"
    function yy_r375(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typename', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8494 "langs_src/parser_cpp_language.php"
#line 2104 "langs_src/parser_cpp_language.y"
    function yy_r377(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('namespace_resolve_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8500 "langs_src/parser_cpp_language.php"
#line 2113 "langs_src/parser_cpp_language.y"
    function yy_r379(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftroundbracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8506 "langs_src/parser_cpp_language.php"
#line 2122 "langs_src/parser_cpp_language.y"
    function yy_r381(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightroundbracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8512 "langs_src/parser_cpp_language.php"
#line 2131 "langs_src/parser_cpp_language.y"
    function yy_r383(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8518 "langs_src/parser_cpp_language.php"
#line 2140 "langs_src/parser_cpp_language.y"
    function yy_r385(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8524 "langs_src/parser_cpp_language.php"
#line 2149 "langs_src/parser_cpp_language.y"
    function yy_r387(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_concat_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8530 "langs_src/parser_cpp_language.php"
#line 2158 "langs_src/parser_cpp_language.y"
    function yy_r389(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_stringify_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8536 "langs_src/parser_cpp_language.php"
#line 2168 "langs_src/parser_cpp_language.y"
    function yy_r391(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('string', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8542 "langs_src/parser_cpp_language.php"
#line 2178 "langs_src/parser_cpp_language.y"
    function yy_r393(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue = $this->create_node('string', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8548 "langs_src/parser_cpp_language.php"
#line 2187 "langs_src/parser_cpp_language.y"
    function yy_r395(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('character', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8554 "langs_src/parser_cpp_language.php"
#line 2196 "langs_src/parser_cpp_language.y"
    function yy_r397(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('numeric', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8560 "langs_src/parser_cpp_language.php"
#line 2205 "langs_src/parser_cpp_language.y"
    function yy_r399(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftsquarebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8566 "langs_src/parser_cpp_language.php"
#line 2214 "langs_src/parser_cpp_language.y"
    function yy_r401(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightsquarebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8572 "langs_src/parser_cpp_language.php"
#line 2223 "langs_src/parser_cpp_language.y"
    function yy_r403(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftfigurebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8578 "langs_src/parser_cpp_language.php"
#line 2232 "langs_src/parser_cpp_language.y"
    function yy_r405(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightfigurebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8584 "langs_src/parser_cpp_language.php"
#line 2241 "langs_src/parser_cpp_language.y"
    function yy_r407(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8590 "langs_src/parser_cpp_language.php"
#line 2250 "langs_src/parser_cpp_language.y"
    function yy_r409(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('reinterpret_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8596 "langs_src/parser_cpp_language.php"
#line 2259 "langs_src/parser_cpp_language.y"
    function yy_r411(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dynamic_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8602 "langs_src/parser_cpp_language.php"
#line 2268 "langs_src/parser_cpp_language.y"
    function yy_r413(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('static_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8608 "langs_src/parser_cpp_language.php"
#line 2277 "langs_src/parser_cpp_language.y"
    function yy_r415(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('const_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8614 "langs_src/parser_cpp_language.php"
#line 2286 "langs_src/parser_cpp_language.y"
    function yy_r417(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightarrow', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8620 "langs_src/parser_cpp_language.php"
#line 2295 "langs_src/parser_cpp_language.y"
    function yy_r419(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8626 "langs_src/parser_cpp_language.php"
#line 2304 "langs_src/parser_cpp_language.y"
    function yy_r421(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8632 "langs_src/parser_cpp_language.php"
#line 2322 "langs_src/parser_cpp_language.y"
    function yy_r425(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8638 "langs_src/parser_cpp_language.php"
#line 2331 "langs_src/parser_cpp_language.y"
    function yy_r427(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8644 "langs_src/parser_cpp_language.php"
#line 2340 "langs_src/parser_cpp_language.y"
    function yy_r429(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binarynot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8650 "langs_src/parser_cpp_language.php"
#line 2349 "langs_src/parser_cpp_language.y"
    function yy_r431(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicalnot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8656 "langs_src/parser_cpp_language.php"
#line 2358 "langs_src/parser_cpp_language.y"
    function yy_r433(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('division', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8662 "langs_src/parser_cpp_language.php"
#line 2367 "langs_src/parser_cpp_language.y"
    function yy_r435(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('modulosign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8668 "langs_src/parser_cpp_language.php"
#line 2376 "langs_src/parser_cpp_language.y"
    function yy_r437(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightshift', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8674 "langs_src/parser_cpp_language.php"
#line 2385 "langs_src/parser_cpp_language.y"
    function yy_r439(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftshift', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8680 "langs_src/parser_cpp_language.php"
#line 2394 "langs_src/parser_cpp_language.y"
    function yy_r441(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('greater_or_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8686 "langs_src/parser_cpp_language.php"
#line 2403 "langs_src/parser_cpp_language.y"
    function yy_r443(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('lesser_or_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8692 "langs_src/parser_cpp_language.php"
#line 2412 "langs_src/parser_cpp_language.y"
    function yy_r445(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8698 "langs_src/parser_cpp_language.php"
#line 2421 "langs_src/parser_cpp_language.y"
    function yy_r447(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('not_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8704 "langs_src/parser_cpp_language.php"
#line 2430 "langs_src/parser_cpp_language.y"
    function yy_r449(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryor', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8710 "langs_src/parser_cpp_language.php"
#line 2448 "langs_src/parser_cpp_language.y"
    function yy_r453(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicalor', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8716 "langs_src/parser_cpp_language.php"
#line 2457 "langs_src/parser_cpp_language.y"
    function yy_r455(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicaland', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8722 "langs_src/parser_cpp_language.php"
#line 2466 "langs_src/parser_cpp_language.y"
    function yy_r457(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('minus_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8728 "langs_src/parser_cpp_language.php"
#line 2475 "langs_src/parser_cpp_language.y"
    function yy_r459(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('plus_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8734 "langs_src/parser_cpp_language.php"
#line 2484 "langs_src/parser_cpp_language.y"
    function yy_r461(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('multiply_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8740 "langs_src/parser_cpp_language.php"
#line 2493 "langs_src/parser_cpp_language.y"
    function yy_r463(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('division_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8746 "langs_src/parser_cpp_language.php"
#line 2502 "langs_src/parser_cpp_language.y"
    function yy_r465(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('modulo_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8752 "langs_src/parser_cpp_language.php"
#line 2511 "langs_src/parser_cpp_language.y"
    function yy_r467(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftshift_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8758 "langs_src/parser_cpp_language.php"
#line 2520 "langs_src/parser_cpp_language.y"
    function yy_r469(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightshift_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8764 "langs_src/parser_cpp_language.php"
#line 2529 "langs_src/parser_cpp_language.y"
    function yy_r471(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryand_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8770 "langs_src/parser_cpp_language.php"
#line 2538 "langs_src/parser_cpp_language.y"
    function yy_r473(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryor_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8776 "langs_src/parser_cpp_language.php"
#line 2547 "langs_src/parser_cpp_language.y"
    function yy_r475(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryxor_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8782 "langs_src/parser_cpp_language.php"
#line 2556 "langs_src/parser_cpp_language.y"
    function yy_r477(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('friendkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8788 "langs_src/parser_cpp_language.php"
#line 2565 "langs_src/parser_cpp_language.y"
    function yy_r479(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('volatilekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8794 "langs_src/parser_cpp_language.php"
#line 2592 "langs_src/parser_cpp_language.y"
    function yy_r485(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('statickwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8800 "langs_src/parser_cpp_language.php"
#line 2601 "langs_src/parser_cpp_language.y"
    function yy_r487(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('delete', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8806 "langs_src/parser_cpp_language.php"
#line 2619 "langs_src/parser_cpp_language.y"
    function yy_r491(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('breakkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8812 "langs_src/parser_cpp_language.php"
#line 2628 "langs_src/parser_cpp_language.y"
    function yy_r493(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typedef', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8818 "langs_src/parser_cpp_language.php"
#line 2637 "langs_src/parser_cpp_language.y"
    function yy_r495(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ifkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8824 "langs_src/parser_cpp_language.php"
#line 2646 "langs_src/parser_cpp_language.y"
    function yy_r497(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('elsekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8830 "langs_src/parser_cpp_language.php"
#line 2655 "langs_src/parser_cpp_language.y"
    function yy_r499(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('defaultkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8836 "langs_src/parser_cpp_language.php"
#line 2664 "langs_src/parser_cpp_language.y"
    function yy_r501(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('casekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8842 "langs_src/parser_cpp_language.php"
#line 2673 "langs_src/parser_cpp_language.y"
    function yy_r503(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('colon', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8848 "langs_src/parser_cpp_language.php"
#line 2682 "langs_src/parser_cpp_language.y"
    function yy_r505(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('switchkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8854 "langs_src/parser_cpp_language.php"
#line 2691 "langs_src/parser_cpp_language.y"
    function yy_r507(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ellipsis', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8860 "langs_src/parser_cpp_language.php"
#line 2700 "langs_src/parser_cpp_language.y"
    function yy_r509(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('catchkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8866 "langs_src/parser_cpp_language.php"
#line 2709 "langs_src/parser_cpp_language.y"
    function yy_r511(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('trykwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8872 "langs_src/parser_cpp_language.php"
#line 2718 "langs_src/parser_cpp_language.y"
    function yy_r513(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('gotokwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8878 "langs_src/parser_cpp_language.php"
#line 2727 "langs_src/parser_cpp_language.y"
    function yy_r515(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('continuekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8884 "langs_src/parser_cpp_language.php"
#line 2736 "langs_src/parser_cpp_language.y"
    function yy_r517(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('returnkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8890 "langs_src/parser_cpp_language.php"
#line 2745 "langs_src/parser_cpp_language.y"
    function yy_r519(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('semicolon', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8896 "langs_src/parser_cpp_language.php"
#line 2754 "langs_src/parser_cpp_language.y"
    function yy_r521(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dokwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8902 "langs_src/parser_cpp_language.php"
#line 2763 "langs_src/parser_cpp_language.y"
    function yy_r523(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('whilekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8908 "langs_src/parser_cpp_language.php"
#line 2772 "langs_src/parser_cpp_language.y"
    function yy_r525(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_include', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8914 "langs_src/parser_cpp_language.php"
#line 2781 "langs_src/parser_cpp_language.y"
    function yy_r527(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_define', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8920 "langs_src/parser_cpp_language.php"
#line 2790 "langs_src/parser_cpp_language.y"
    function yy_r529(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_if', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8926 "langs_src/parser_cpp_language.php"
#line 2799 "langs_src/parser_cpp_language.y"
    function yy_r531(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_ifdef', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8932 "langs_src/parser_cpp_language.php"
#line 2808 "langs_src/parser_cpp_language.y"
    function yy_r533(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_else_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8938 "langs_src/parser_cpp_language.php"
#line 2817 "langs_src/parser_cpp_language.y"
    function yy_r535(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_elif_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8944 "langs_src/parser_cpp_language.php"
#line 2826 "langs_src/parser_cpp_language.y"
    function yy_r537(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_endif', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8950 "langs_src/parser_cpp_language.php"
#line 2835 "langs_src/parser_cpp_language.y"
    function yy_r539(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('outer_constructor_name_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8956 "langs_src/parser_cpp_language.php"
#line 2844 "langs_src/parser_cpp_language.y"
    function yy_r541(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('operatoroverloaddeclaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8962 "langs_src/parser_cpp_language.php"
#line 2853 "langs_src/parser_cpp_language.y"
    function yy_r543(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('enumkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8968 "langs_src/parser_cpp_language.php"
#line 2862 "langs_src/parser_cpp_language.y"
    function yy_r545(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('slotskwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8974 "langs_src/parser_cpp_language.php"
#line 2871 "langs_src/parser_cpp_language.y"
    function yy_r547(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('signalskwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8980 "langs_src/parser_cpp_language.php"
#line 2880 "langs_src/parser_cpp_language.y"
    function yy_r549(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('privatekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8986 "langs_src/parser_cpp_language.php"
#line 2889 "langs_src/parser_cpp_language.y"
    function yy_r551(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('protectedkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8992 "langs_src/parser_cpp_language.php"
#line 2898 "langs_src/parser_cpp_language.y"
    function yy_r553(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('publickwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8998 "langs_src/parser_cpp_language.php"
#line 2907 "langs_src/parser_cpp_language.y"
    function yy_r555(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('unionkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9004 "langs_src/parser_cpp_language.php"
#line 2916 "langs_src/parser_cpp_language.y"
    function yy_r557(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('structkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9010 "langs_src/parser_cpp_language.php"
#line 2925 "langs_src/parser_cpp_language.y"
    function yy_r559(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('classkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9016 "langs_src/parser_cpp_language.php"
#line 2934 "langs_src/parser_cpp_language.y"
    function yy_r561(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('templatekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9022 "langs_src/parser_cpp_language.php"
#line 2943 "langs_src/parser_cpp_language.y"
    function yy_r563(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typenamekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9028 "langs_src/parser_cpp_language.php"
#line 2952 "langs_src/parser_cpp_language.y"
    function yy_r565(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('namespacekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9034 "langs_src/parser_cpp_language.php"
#line 2959 "langs_src/parser_cpp_language.y"
    function yy_r566(){
	$this->currentrule = new block_formal_langs_description_rule("список комментариев", array("%s", "%s"));
	$this->_retvalue = $this->create_node('comment_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9040 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //block_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 40 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 9185 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
