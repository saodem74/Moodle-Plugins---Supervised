<?php
/* Driver template for the PHP_block_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class block_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof block_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof block_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof block_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof block_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class block_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 3 "langs_src/parser_cpp_language.y"

require_once($CFG->dirroot.'/blocks/formal_langs/descriptions/descriptionrule.php');
#line 102 "langs_src/parser_cpp_language.php"

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 107 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 6 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 145 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const NOTEQUAL                       =  3;
    const EQUAL                          =  4;
    const LOGICALAND                     =  5;
    const BINARYAND                      =  6;
    const BINARYOR                       =  7;
    const LOGICALOR                      =  8;
    const AMPERSAND                      =  9;
    const BINARYXOR                      = 10;
    const UINDIRECTION                   = 11;
    const UADRESS                        = 12;
    const NAMESPACE_RESOLVE              = 13;
    const UMINUS                         = 14;
    const UPLUS                          = 15;
    const UBRACKET                       = 16;
    const TYPEUNARY                      = 17;
    const MACROPARAMETERPRIORITY         = 18;
    const NAMESPACEKWD                   = 19;
    const IDENTIFIER                     = 20;
    const LEFTFIGUREBRACKET              = 21;
    const RIGHTFIGUREBRACKET             = 22;
    const SEMICOLON                      = 23;
    const CLASSKWD                       = 24;
    const STRUCTKWD                      = 25;
    const UNIONKWD                       = 26;
    const COLON                          = 27;
    const PUBLICKWD                      = 28;
    const PROTECTEDKWD                   = 29;
    const PRIVATEKWD                     = 30;
    const SIGNALSKWD                     = 31;
    const SLOTSKWD                       = 32;
    const ENUMKWD                        = 33;
    const COMMA                          = 34;
    const ASSIGN                         = 35;
    const CONSTKWD                       = 36;
    const MULTIPLY                       = 37;
    const OPERATOROVERLOADDECLARATION    = 38;
    const LEFTROUNDBRACKET               = 39;
    const RIGHTROUNDBRACKET              = 40;
    const BINARYNOT                      = 41;
    const CUSTOMTYPENAME                 = 42;
    const TEMPLATEKWD                    = 43;
    const LESSER                         = 44;
    const GREATER                        = 45;
    const TYPENAMEKWD                    = 46;
    const PREPROCESSOR_ENDIF             = 47;
    const PREPROCESSOR_ELIF              = 48;
    const PREPROCESSOR_ELSE              = 49;
    const PREPROCESSOR_IFDEF             = 50;
    const PREPROCESSOR_IF                = 51;
    const PREPROCESSOR_DEFINE            = 52;
    const PREPROCESSOR_INCLUDE           = 53;
    const WHILEKWD                       = 54;
    const DOKWD                          = 55;
    const FORKWD                         = 56;
    const RETURNKWD                      = 57;
    const CONTINUEKWD                    = 58;
    const GOTOKWD                        = 59;
    const TRYKWD                         = 60;
    const CATCHKWD                       = 61;
    const ELLIPSIS                       = 62;
    const SWITCHKWD                      = 63;
    const CASEKWD                        = 64;
    const DEFAULTKWD                     = 65;
    const IFKWD                          = 66;
    const TYPEDEF                        = 67;
    const BREAKKWD                       = 68;
    const NEWKWD                         = 69;
    const DELETE                         = 70;
    const LEFTSQUAREBRACKET              = 71;
    const RIGHTSQUAREBRACKET             = 72;
    const STATICKWD                      = 73;
    const EXTERNKWD                      = 74;
    const REGISTERKWD                    = 75;
    const VOLATILEKWD                    = 76;
    const FRIENDKWD                      = 77;
    const BINARYXOR_ASSIGN               = 78;
    const BINARYOR_ASSIGN                = 79;
    const BINARYAND_ASSIGN               = 80;
    const RIGHTSHIFT_ASSIGN              = 81;
    const LEFTSHIFT_ASSIGN               = 82;
    const MODULO_ASSIGN                  = 83;
    const DIVISION_ASSIGN                = 84;
    const MULTIPLY_ASSIGN                = 85;
    const PLUS_ASSIGN                    = 86;
    const MINUS_ASSIGN                   = 87;
    const NOT_EQUAL                      = 88;
    const LESSER_OR_EQUAL                = 89;
    const GREATER_OR_EQUAL               = 90;
    const LEFTSHIFT                      = 91;
    const RIGHTSHIFT                     = 92;
    const MINUS                          = 93;
    const PLUS                           = 94;
    const MODULOSIGN                     = 95;
    const DIVISION                       = 96;
    const LOGICALNOT                     = 97;
    const DECREMENT                      = 98;
    const INCREMENT                      = 99;
    const DOT                            = 100;
    const RIGHTARROW                     = 101;
    const CONST_CAST                     = 102;
    const STATIC_CAST                    = 103;
    const DYNAMIC_CAST                   = 104;
    const REINTERPRET_CAST               = 105;
    const NUMERIC                        = 106;
    const CHARACTER                      = 107;
    const STRING                         = 108;
    const PREPROCESSOR_STRINGIFY         = 109;
    const TYPENAME                       = 110;
    const PREPROCESSOR_CONCAT            = 111;
    const SIZEOF                         = 112;
    const VOID                           = 113;
    const FLOAT                          = 114;
    const DOUBLE                         = 115;
    const LONG                           = 116;
    const CHAR                           = 117;
    const SIGNED                         = 118;
    const UNSIGNED                       = 119;
    const INT                            = 120;
    const SHORT                          = 121;
    const YY_NO_ACTION = 836;
    const YY_ACCEPT_ACTION = 835;
    const YY_ERROR_ACTION = 834;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 5810;
static public $yy_action = array(
 /*     0 */    92,   62,  195,  455,   63,   62,  442,  253,   63,   80,
 /*    10 */   256,  180,   10,  325,  355,  378,  384,  385,  265,  344,
 /*    20 */   339,  338,  438,   99,  143,   72,   70,  103,   94,  477,
 /*    30 */    30,   49,   87,  349,  257,  172,  491,  350,  345,  437,
 /*    40 */   268,  179,  306,  317,  302,  279,   27,  213,   31,  230,
 /*    50 */   181,  229,  453,  250,  239,   42,  522,  211,  102,  216,
 /*    60 */    60,   44,   79,   78,  413,  412,  460,  461,  510,  263,
 /*    70 */    73,   71,  416,  429,   52,   58,   57,   59,   45,   55,
 /*    80 */    56,   47,   51,   48,   98,   97,   53,   50,   89,   93,
 /*    90 */    90,   68,  528,  222,  264,  255,  254,  365,  295,  310,
 /*   100 */   173,  115,  246,  275,  449,  448,  444,  159,  454,  157,
 /*   110 */   153,  441,  269,   92,  511,  513,  508,  410,  378,  384,
 /*   120 */   385,   43,  471,  256,  180,   10,  336,  355,  378,  384,
 /*   130 */   385,  377,  344,  339,  338,  422,  396,  143,  131,  245,
 /*   140 */   103,   94,  456,   30,   53,   87,   86,  257,   41,  422,
 /*   150 */   532,  219,  110,  125,  179,  306,  317,  302,  279,   27,
 /*   160 */   213,   31,  230,  181,  229,  207,  133,  239,   76,   77,
 /*   170 */   211,  102,  216,   60,   44,   69,  439,  413,  412,  460,
 /*   180 */   461,  510,  318,  422,  222,  264,  255,  254,  365,  295,
 /*   190 */   310,  173,  123,  280,  275,  185,  353,   98,   97,  207,
 /*   200 */   133,   89,   93,   90,   84,   85,  222,  264,  255,  254,
 /*   210 */   365,  295,  310,  173,  115,  394,  275,  449,  448,  444,
 /*   220 */   159,  454,  157,  153,  441,  269,   92,  474,   65,  116,
 /*   230 */    66,   64,  462,  490,  467,  220,  256,  180,   10,  274,
 /*   240 */   355,  378,  384,  385,  399,  479,  434,  419,  414,  187,
 /*   250 */   143,  214,  393,  103,   94,  447,   30,  360,   87,  282,
 /*   260 */   257,    5,  289,  387,  292,   13,    9,  179,  306,  317,
 /*   270 */   302,  279,   27,  213,   31,  230,  181,  229,  409,  375,
 /*   280 */   239,  419,  414,  211,  102,  216,   60,   44,  165,  373,
 /*   290 */   413,  412,  460,  461,  510,  127,  390,  397,  404,  106,
 /*   300 */   252,  104,  285,  283,  272,  426,  425,  428,  291,  240,
 /*   310 */    98,   97,  357,  435,   89,   93,   90,  111,  237,  222,
 /*   320 */   264,  255,  254,  365,  295,  310,  173,  115,  422,  275,
 /*   330 */   449,  448,  444,  159,  454,  157,  153,  441,  269,   92,
 /*   340 */   182,  487,  273,  241,  219,  110,  125,  364,   82,  256,
 /*   350 */   180,   10,  321,  355,  378,  384,  385,  127,  390,  397,
 /*   360 */   404,  214,  393,  143,  285,  283,  103,   94,  113,   30,
 /*   370 */   432,   87,  236,  257,  214,  393,  469,  467,  446,  489,
 /*   380 */   179,  306,  317,  302,  279,   27,  213,   31,  230,  181,
 /*   390 */   229,  214,  393,  239,  235,  308,  211,  102,  216,   60,
 /*   400 */    44,  386,  121,  413,  412,  460,  461,  510,  122,  285,
 /*   410 */   283,  449,  448,  444,  159,  454,  157,  153,  441,  269,
 /*   420 */   457,  214,  393,   98,   97,  415,  374,   89,   93,   90,
 /*   430 */   430,  191,  222,  264,  255,  254,  365,  295,  310,  173,
 /*   440 */   115,  136,  275,  449,  448,  444,  159,  454,  157,  153,
 /*   450 */   441,  269,   92,   40,   32,  468,  467,   95,  466,  467,
 /*   460 */   218,  278,  256,  180,   10,  331,  355,  378,  384,  385,
 /*   470 */   223,  266,  214,  393,  343,  112,  143,  434,  459,  103,
 /*   480 */    94,  405,   30,  470,   87,  309,  257,  451,  261,   61,
 /*   490 */   786,   37,  452,  179,  306,  317,  302,  279,   27,  213,
 /*   500 */    31,  230,  181,  229,  421,  138,  239,  420,  316,  211,
 /*   510 */   102,  216,   60,   44,  242,  313,  413,  412,  460,  461,
 /*   520 */   510,  318,  481,  484,  358,   67,  127,  390,  397,  404,
 /*   530 */   303,  485,  298,  285,  283,   40,   98,   97,   95,  367,
 /*   540 */    89,   93,   90,  495,  482,  222,  264,  255,  254,  365,
 /*   550 */   295,  310,  173,  115,  246,  275,  449,  448,  444,  159,
 /*   560 */   454,  157,  153,  441,  269,   92,  106,  252,  458,  366,
 /*   570 */    61,   61,  362,   43,  238,  256,  180,   10,  329,  355,
 /*   580 */   378,  384,  385,   24,  148,  214,  393,  140,  187,  143,
 /*   590 */   450,  315,  103,   94,  443,   30,  242,   87,  440,  257,
 /*   600 */    67,  147,  328,  119,  351,  369,  179,  306,  317,  302,
 /*   610 */   279,   27,  213,   31,  230,  181,  229,  786,  335,  239,
 /*   620 */   488,  273,  211,  102,  216,   60,   44,  386,  121,  413,
 /*   630 */   412,  460,  461,  510,   75,  285,  283,  284,   13,    9,
 /*   640 */   365,  295,  310,  173,  123,  519,  275,   67,  318,   98,
 /*   650 */    97,  130,  330,   89,   93,   90,  781,  270,  222,  264,
 /*   660 */   255,  254,  365,  295,  310,  173,  115,   67,  275,  449,
 /*   670 */   448,  444,  159,  454,  157,  153,  441,  269,   92,  427,
 /*   680 */   315,  118,  299,  300,  190,  521,  132,  318,  256,  180,
 /*   690 */    10,  324,  355,  378,  384,  385,  226,  238,   38,  520,
 /*   700 */     7,   34,  143,  434,  368,  103,   94,    1,   30,  371,
 /*   710 */    87,  464,  257,  135,  119,  144,    1,   33,  301,  179,
 /*   720 */   306,  317,  302,  279,   27,  213,   31,  230,  181,  229,
 /*   730 */   436,  471,  239,  341,   11,  211,  102,  216,   60,   44,
 /*   740 */   227,  361,  413,  412,  460,  461,  510,  481,  484,    8,
 /*   750 */   431,   36,  127,  390,  397,  404,  485,   81,   29,  285,
 /*   760 */   283,  105,   98,   97,  472,   26,   89,   93,   90,  482,
 /*   770 */   126,  222,  264,  255,  254,  365,  295,  310,  173,  115,
 /*   780 */   509,  275,  449,  448,  444,  159,  454,  157,  153,  441,
 /*   790 */   269,   92,  191,  248,  465,  498,   53,   28,   35,  297,
 /*   800 */   307,  256,  180,   10,  486,  355,  378,  384,  385,  411,
 /*   810 */   305,  260,  221,  479,  294,  143,  434,  276,  103,   94,
 /*   820 */   262,   30,    6,   87,    4,  257,  233,   83,  146,  314,
 /*   830 */   514,  323,  179,  306,  317,  302,  279,   27,  213,   31,
 /*   840 */   230,  181,  229,  109,  782,  239,  176,  352,  211,  102,
 /*   850 */   216,   60,   44,  496,  318,  413,  412,  460,  461,  510,
 /*   860 */    54,   95,  420,  145,   46,  127,  390,  397,  404,  137,
 /*   870 */   193,  373,  285,  283,  118,   98,   97,  785,  415,   89,
 /*   880 */    93,   90,  398,  271,  222,  264,  255,  254,  365,  295,
 /*   890 */   310,  173,  115,  319,  275,  449,  448,  444,  159,  454,
 /*   900 */   157,  153,  441,  269,   92,  108,  421,  288,  326,  400,
 /*   910 */   293,  433,  492,  114,  256,  180,   10,  372,  355,  378,
 /*   920 */   384,  385,  287,  483,  395,  196,  381,   74,  143,  518,
 /*   930 */   185,  103,   94,  445,   30,  480,   87,  493,  257,   25,
 /*   940 */   141,  518,  175,  518,  518,  179,  306,  317,  302,  279,
 /*   950 */    27,  213,   31,  230,  181,  229,  518,  518,  239,  518,
 /*   960 */   282,  211,  102,  216,   60,   44,  518,  518,  413,  412,
 /*   970 */   460,  461,  510,  127,  390,  397,  404,  518,  518,  409,
 /*   980 */   285,  283,  419,  414,  518,  518,  518,  518,   98,   97,
 /*   990 */   518,  518,   89,   93,   90,  518,  518,  222,  264,  255,
 /*  1000 */   254,  365,  295,  310,  173,  115,  518,  275,  449,  448,
 /*  1010 */   444,  159,  454,  157,  153,  441,  269,   92,  518,  518,
 /*  1020 */   518,  518,  518,  518,  518,  518,  518,  256,  180,   10,
 /*  1030 */   356,  355,  378,  384,  385,  518,  518,  518,  518,  518,
 /*  1040 */   518,  143,  518,  518,  103,   94,  518,   30,  518,   87,
 /*  1050 */   518,  257,  518,  518,  518,  518,  518,  518,  179,  306,
 /*  1060 */   317,  302,  279,   27,  213,   31,  230,  181,  229,  518,
 /*  1070 */   518,  239,  518,  518,  211,  102,  216,   60,   44,  518,
 /*  1080 */   518,  413,  412,  460,  461,  510,  518,  518,  518,  518,
 /*  1090 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  1100 */   518,   98,   97,  518,  518,   89,   93,   90,  518,  518,
 /*  1110 */   222,  264,  255,  254,  365,  295,  310,  173,  115,  518,
 /*  1120 */   275,  449,  448,  444,  159,  454,  157,  153,  441,  269,
 /*  1130 */    92,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  1140 */   256,  180,   10,  332,  355,  378,  384,  385,  518,  518,
 /*  1150 */   518,  518,  518,  518,  143,  518,  518,  103,   94,  518,
 /*  1160 */    30,  518,   87,  518,  257,  518,  518,  518,  518,  518,
 /*  1170 */   518,  179,  306,  317,  302,  279,   27,  213,   31,  230,
 /*  1180 */   181,  229,  518,  518,  239,  518,  518,  211,  102,  216,
 /*  1190 */    60,   44,  518,  518,  413,  412,  460,  461,  510,  518,
 /*  1200 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  1210 */   518,  518,  518,  518,   98,   97,  518,  518,   89,   93,
 /*  1220 */    90,  518,  518,  222,  264,  255,  254,  365,  295,  310,
 /*  1230 */   173,  115,  518,  275,  449,  448,  444,  159,  454,  157,
 /*  1240 */   153,  441,  269,   92,  518,  518,  518,  518,  518,  518,
 /*  1250 */   518,  518,  518,  256,  180,   10,  342,  355,  378,  384,
 /*  1260 */   385,  518,  518,  518,  518,  518,  518,  143,  518,  518,
 /*  1270 */   103,   94,  518,   30,  518,   87,  518,  257,  518,  518,
 /*  1280 */   518,  518,  518,  518,  179,  306,  317,  302,  279,   27,
 /*  1290 */   213,   31,  230,  181,  229,  518,  518,  239,  518,  518,
 /*  1300 */   211,  102,  216,   60,   44,  518,  518,  413,  412,  460,
 /*  1310 */   461,  510,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  1320 */   518,  518,  518,  518,  518,  518,  518,   98,   97,  518,
 /*  1330 */   518,   89,   93,   90,  518,  518,  222,  264,  255,  254,
 /*  1340 */   365,  295,  310,  173,  115,  518,  275,  449,  448,  444,
 /*  1350 */   159,  454,  157,  153,  441,  269,   92,  518,  518,  518,
 /*  1360 */   518,  518,  518,  518,  518,  518,  256,  180,   10,  274,
 /*  1370 */   355,  378,  384,  385,  518,  518,  434,  518,  518,  518,
 /*  1380 */   143,  518,  518,  103,   94,  518,   30,  518,   87,  518,
 /*  1390 */   257,  518,  518,  518,  518,  518,  518,  179,  306,  317,
 /*  1400 */   302,  279,   27,  213,   31,  230,  181,  229,  518,  518,
 /*  1410 */   239,  518,  518,  211,  102,  216,   60,   44,  170,  518,
 /*  1420 */   413,  412,  460,  461,  510,  127,  390,  397,  404,  518,
 /*  1430 */   518,  518,  285,  283,  272,  426,  425,  428,  518,  518,
 /*  1440 */    98,   97,  518,  518,   89,   93,   90,  518,  518,  222,
 /*  1450 */   264,  255,  254,  365,  295,  310,  173,  115,  518,  275,
 /*  1460 */   449,  448,  444,  159,  454,  157,  153,  441,  269,   92,
 /*  1470 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  256,
 /*  1480 */   180,   10,  274,  355,  378,  384,  385,  518,  382,  434,
 /*  1490 */   124,  518,  518,  462,  490,  467,  103,   94,  518,   30,
 /*  1500 */   518,   88,  518,  257,  518,  518,  518,  518,  518,  518,
 /*  1510 */   518,  518,  518,  302,  279,   27,  213,   31,  230,  181,
 /*  1520 */   229,  518,  518,  239,  518,  518,  211,  102,  216,   60,
 /*  1530 */    44,  162,  518,  413,  412,  460,  461,  510,  127,  390,
 /*  1540 */   397,  404,  419,  414,  518,  285,  283,  272,  426,  425,
 /*  1550 */   428,  518,  518,   98,   97,  518,  518,   89,   93,   90,
 /*  1560 */   518,  518,  222,  264,  255,  254,  365,  295,  310,  173,
 /*  1570 */   115,  518,  275,  449,  448,  444,  159,  454,  157,  153,
 /*  1580 */   441,  269,  348,  311,  518,  320,  142,  518,   96,  370,
 /*  1590 */     3,  337,  346,  129,  518,  518,  518,  518,  406,  100,
 /*  1600 */   518,  286,  518,  518,  406,  518,  518,  518,  434,  518,
 /*  1610 */   518,  518,  518,  518,  518,   12,  518,  518,  518,  518,
 /*  1620 */   515,  217,  363,  128,  518,  518,  518,  354,  518,  518,
 /*  1630 */   380,  251,  518,  243,  408,  101,  149,  163,  203,  156,
 /*  1640 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  1650 */   225,  209,  473,   91,  150,  208,  386,  117,  390,  397,
 /*  1660 */   404,  518,  386,  121,  285,  283,  518,  518,  518,  518,
 /*  1670 */   285,  283,  518,  518,  518,  518,  518,  518,  518,  340,
 /*  1680 */   311,  518,  320,  142,  518,   96,  370,  518,  518,  518,
 /*  1690 */   518,  518,  518,  518,  518,  406,  100,  518,  286,  518,
 /*  1700 */   518,  518,  518,  518,  518,  434,  518,  518,  518,  518,
 /*  1710 */   518,  518,   12,  267,  120,  327,  322,  515,  217,  363,
 /*  1720 */   128,  518,  518,  518,  354,  518,  518,  380,  251,  518,
 /*  1730 */   243,  408,  101,  149,  163,  203,  156,  197,  199,  164,
 /*  1740 */   418,  192,  200,  478,   91,  150,  208,  518,  518,  518,
 /*  1750 */   518,  518,  518,  386,  117,  390,  397,  404,  518,  518,
 /*  1760 */   518,  285,  283,  348,  311,  518,  320,  142,  518,   96,
 /*  1770 */   370,  518,  347,  346,  129,  518,  518,  518,  518,  406,
 /*  1780 */   100,  518,  286,  518,  518,  518,  518,  518,  518,  434,
 /*  1790 */   518,  518,  518,  518,  518,  518,   12,  518,  518,  518,
 /*  1800 */   518,  515,  217,  363,  128,  518,  518,  518,  354,  518,
 /*  1810 */   518,  380,  251,  406,  243,  408,  101,  149,  163,  203,
 /*  1820 */   156,  197,  199,  164,  418,  192,  200,  478,   91,  150,
 /*  1830 */   208,  518,  518,  518,  518,  518,  518,  386,  117,  390,
 /*  1840 */   397,  404,  518,  518,  518,  285,  283,  518,  835,   21,
 /*  1850 */   376,  311,  518,  320,  142,  518,   96,  370,  518,  225,
 /*  1860 */   209,  500,   91,  150,  208,  518,  406,  100,  518,  286,
 /*  1870 */   518,  386,  121,  518,  518,  518,  434,  518,  518,  285,
 /*  1880 */   283,  518,  518,   12,  518,  518,  518,  518,  515,  217,
 /*  1890 */   363,  128,  518,  518,  518,  354,  518,  518,  380,  251,
 /*  1900 */   518,  243,  408,  101,  149,  163,  203,  156,  197,  199,
 /*  1910 */   164,  418,  192,  200,  478,   91,  150,  208,  518,  518,
 /*  1920 */   518,  518,  518,  518,  386,  117,  390,  397,  404,  518,
 /*  1930 */   518,  518,  285,  283,  518,  518,   17,  376,  311,  518,
 /*  1940 */   320,  142,  518,   96,  370,  518,  518,  518,  518,  518,
 /*  1950 */   518,  518,  518,  406,  100,  518,  286,  518,  518,  518,
 /*  1960 */   518,  518,  518,  434,  518,  518,  518,  518,  518,  518,
 /*  1970 */    12,  518,  518,  518,  518,  515,  217,  363,  128,  518,
 /*  1980 */   518,  518,  354,  518,  518,  380,  251,  406,  243,  408,
 /*  1990 */   101,  149,  163,  203,  156,  197,  199,  164,  418,  192,
 /*  2000 */   200,  478,   91,  150,  208,  518,  518,  518,  518,  518,
 /*  2010 */   518,  386,  117,  390,  397,  404,  518,  518,  518,  285,
 /*  2020 */   283,  518,  518,   18,  376,  311,  518,  320,  142,  518,
 /*  2030 */    96,  370,  502,  192,  200,  478,   91,  150,  208,  518,
 /*  2040 */   406,  100,  518,  286,  518,  386,  121,  518,  518,  518,
 /*  2050 */   434,  518,  518,  285,  283,  518,  518,   12,  518,  518,
 /*  2060 */   518,  518,  515,  217,  363,  128,  518,  518,  518,  354,
 /*  2070 */   518,  518,  380,  251,  406,  243,  408,  101,  149,  163,
 /*  2080 */   203,  156,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  2090 */   150,  208,  518,  518,  518,  518,  518,  518,  386,  117,
 /*  2100 */   390,  397,  404,  518,  518,  518,  285,  283,  518,  518,
 /*  2110 */    16,  376,  311,  518,  320,  142,  518,   96,  370,  529,
 /*  2120 */   192,  200,  478,   91,  150,  208,  518,  406,  100,  518,
 /*  2130 */   286,  518,  386,  121,  518,  518,  518,  434,  518,  518,
 /*  2140 */   285,  283,  518,  518,   12,  518,  518,  518,  518,  515,
 /*  2150 */   217,  363,  128,  518,  518,  518,  354,  518,  518,  380,
 /*  2160 */   251,  406,  243,  408,  101,  149,  163,  203,  156,  197,
 /*  2170 */   199,  164,  418,  192,  200,  478,   91,  150,  208,  518,
 /*  2180 */   518,  518,  518,  518,  518,  386,  117,  390,  397,  404,
 /*  2190 */   518,  518,  518,  285,  283,  518,  518,    2,  376,  311,
 /*  2200 */   518,  320,  142,  518,   96,  370,  494,  192,  200,  478,
 /*  2210 */    91,  150,  208,  518,  406,  100,  518,  286,  518,  386,
 /*  2220 */   121,  518,  518,  518,  434,  518,  518,  285,  283,  518,
 /*  2230 */   518,   12,  518,  518,  518,  518,  515,  217,  363,  128,
 /*  2240 */   518,  518,  518,  354,  518,  518,  380,  251,  406,  243,
 /*  2250 */   408,  101,  149,  163,  203,  156,  197,  199,  164,  418,
 /*  2260 */   192,  200,  478,   91,  150,  208,  518,  518,  518,  518,
 /*  2270 */   518,  518,  386,  117,  390,  397,  404,  518,  518,  518,
 /*  2280 */   285,  283,  518,  518,   22,  376,  311,  518,  320,  142,
 /*  2290 */   518,   96,  370,  518,  225,  209,  525,   91,  150,  208,
 /*  2300 */   518,  406,  100,  518,  286,  518,  386,  121,  518,  518,
 /*  2310 */   518,  434,  518,  518,  285,  283,  518,  518,   12,  518,
 /*  2320 */   518,  518,  518,  515,  217,  363,  128,  518,  518,  518,
 /*  2330 */   354,  518,  518,  380,  251,  406,  243,  408,  101,  149,
 /*  2340 */   163,  203,  156,  197,  199,  164,  418,  192,  200,  478,
 /*  2350 */    91,  150,  208,  518,  518,  518,  518,  518,  518,  386,
 /*  2360 */   117,  390,  397,  404,  518,  518,  518,  285,  283,  518,
 /*  2370 */   518,   14,  376,  311,  518,  320,  142,  518,   96,  370,
 /*  2380 */   518,  225,  209,  523,   91,  150,  208,  518,  406,  100,
 /*  2390 */   518,  286,  518,  386,  121,  518,  518,  518,  434,  518,
 /*  2400 */   518,  285,  283,  518,  518,   12,  518,  518,  518,  518,
 /*  2410 */   515,  217,  363,  128,  518,  518,  518,  354,  518,  518,
 /*  2420 */   380,  251,  406,  243,  408,  101,  149,  163,  203,  156,
 /*  2430 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  2440 */   518,  518,  518,  518,  518,  518,  386,  117,  390,  397,
 /*  2450 */   404,  518,  518,  518,  285,  283,  518,  518,   19,  376,
 /*  2460 */   311,  518,  320,  142,  518,   96,  370,  518,  225,  209,
 /*  2470 */   475,   91,  150,  208,  518,  406,  100,  518,  286,  518,
 /*  2480 */   386,  121,  518,  518,  518,  434,  518,  518,  285,  283,
 /*  2490 */   518,  518,   12,  518,  518,  518,  518,  515,  217,  363,
 /*  2500 */   128,  518,  518,  518,  354,  518,  518,  380,  251,  406,
 /*  2510 */   243,  408,  101,  149,  163,  203,  156,  197,  199,  164,
 /*  2520 */   418,  192,  200,  478,   91,  150,  208,  518,  518,  518,
 /*  2530 */   518,  518,  518,  386,  117,  390,  397,  404,  518,  518,
 /*  2540 */   518,  285,  283,  518,  518,   15,  376,  311,  518,  320,
 /*  2550 */   142,  518,   96,  370,  518,  225,  209,  497,   91,  150,
 /*  2560 */   208,  518,  406,  100,  518,  286,  518,  386,  121,  518,
 /*  2570 */   518,  518,  434,  518,  518,  285,  283,  518,  518,   12,
 /*  2580 */   518,  518,  518,  518,  515,  217,  363,  128,  518,  518,
 /*  2590 */   518,  354,  518,  518,  380,  251,  406,  243,  408,  101,
 /*  2600 */   149,  163,  203,  156,  197,  199,  164,  418,  192,  200,
 /*  2610 */   478,   91,  150,  208,  518,  518,  518,  518,  518,  518,
 /*  2620 */   386,  117,  390,  397,  404,  518,  518,  518,  285,  283,
 /*  2630 */   518,  518,   23,  376,  311,  518,  320,  142,  518,   96,
 /*  2640 */   370,  518,  225,  209,  506,   91,  150,  208,  518,  406,
 /*  2650 */   100,  518,  286,  518,  386,  121,  518,  518,  518,  434,
 /*  2660 */   518,  518,  285,  283,  518,  518,   12,  518,  518,  518,
 /*  2670 */   518,  515,  217,  363,  128,  518,  518,  518,  354,  518,
 /*  2680 */   518,  380,  251,  406,  243,  408,  101,  149,  163,  203,
 /*  2690 */   156,  197,  199,  164,  418,  192,  200,  478,   91,  150,
 /*  2700 */   208,  518,  518,  518,  518,  518,  518,  386,  117,  390,
 /*  2710 */   397,  404,  518,  518,  518,  285,  283,  518,  518,   20,
 /*  2720 */   376,  311,  518,  320,  142,  518,   96,  370,  518,  225,
 /*  2730 */   209,  518,  518,  151,  208,  518,  406,  100,  518,  286,
 /*  2740 */   518,  386,  121,  518,  518,  518,  434,  518,  518,  285,
 /*  2750 */   283,  518,  518,   12,  518,  518,  518,  518,  515,  217,
 /*  2760 */   363,  128,  518,  518,  518,  354,  406,  518,  380,  251,
 /*  2770 */   518,  243,  408,  101,  149,  163,  203,  156,  197,  199,
 /*  2780 */   164,  418,  192,  200,  478,   91,  150,  208,  518,  518,
 /*  2790 */   518,  518,  518,  518,  386,  117,  390,  397,  404,  518,
 /*  2800 */   518,  518,  285,  283,  340,  311,  518,  320,  142,  518,
 /*  2810 */    96,  370,  225,  209,  518,  518,  152,  208,  518,  518,
 /*  2820 */   406,  100,  518,  286,  386,  121,  518,  518,  518,  518,
 /*  2830 */   434,  518,  285,  283,  518,  518,  518,   12,  518,  518,
 /*  2840 */   518,  518,  515,  217,  363,  128,  518,  518,  518,  354,
 /*  2850 */   518,  406,  380,  251,  518,  243,  408,  101,  149,  163,
 /*  2860 */   203,  156,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  2870 */   150,  208,  518,  518,  518,  518,  518,  518,  386,  117,
 /*  2880 */   390,  397,  404,  518,  518,  518,  285,  283,  304,  518,
 /*  2890 */   320,  142,  518,  134,  370,  169,  418,  192,  200,  478,
 /*  2900 */    91,  150,  208,  406,  107,  518,  407,  518,  518,  386,
 /*  2910 */   121,  518,  518,  434,  518,  518,  518,  285,  283,  518,
 /*  2920 */   518,  518,  518,  518,  518,  515,  217,  363,  128,  518,
 /*  2930 */   518,  518,  354,  518,  518,  380,  251,  518,  243,  408,
 /*  2940 */   101,  149,  163,  203,  156,  197,  199,  164,  418,  192,
 /*  2950 */   200,  478,   91,  150,  208,  518,  518,  518,  518,  518,
 /*  2960 */   518,  386,  117,  390,  397,  404,  518,  518,  518,  285,
 /*  2970 */   283,  379,  518,  320,  142,  518,  134,  370,  518,  518,
 /*  2980 */   518,  518,  518,  518,  518,  518,  406,  107,  518,  407,
 /*  2990 */   518,  518,  518,  518,  518,  518,  434,  518,  518,  518,
 /*  3000 */   518,  518,  518,  518,  518,  518,  518,  518,  515,  217,
 /*  3010 */   363,  128,  518,  518,  518,  354,  518,  518,  380,  251,
 /*  3020 */   518,  243,  408,  101,  149,  163,  203,  156,  197,  199,
 /*  3030 */   164,  418,  192,  200,  478,   91,  150,  208,  518,  518,
 /*  3040 */   518,  518,  518,  518,  386,  117,  390,  397,  404,  518,
 /*  3050 */   518,  518,  285,  283,  215,  518,  320,  142,  518,  134,
 /*  3060 */   370,  518,  518,  518,  518,  518,  518,  518,  518,  406,
 /*  3070 */   107,  518,  407,  518,  518,  518,  518,  518,  518,  434,
 /*  3080 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  3090 */   518,  515,  217,  363,  128,  518,  518,  518,  354,  518,
 /*  3100 */   518,  380,  251,  518,  243,  408,  101,  149,  163,  203,
 /*  3110 */   156,  197,  199,  164,  418,  192,  200,  478,   91,  150,
 /*  3120 */   208,  518,  518,  518,  518,  518,  518,  386,  117,  390,
 /*  3130 */   397,  404,  518,  518,  518,  285,  283,  383,  518,  320,
 /*  3140 */   142,  518,  134,  370,  518,  518,  518,  518,  518,  518,
 /*  3150 */   518,  518,  406,  107,  518,  407,  518,  518,  518,  518,
 /*  3160 */   518,  518,  434,  518,  518,  518,  518,  518,  518,  518,
 /*  3170 */   518,  518,  518,  518,  515,  217,  363,  128,  518,  518,
 /*  3180 */   518,  354,  518,  518,  380,  251,  518,  243,  408,  101,
 /*  3190 */   149,  163,  203,  156,  197,  199,  164,  418,  192,  200,
 /*  3200 */   478,   91,  150,  208,  518,  518,  518,  518,  518,  518,
 /*  3210 */   386,  117,  390,  397,  404,  518,  518,  518,  285,  283,
 /*  3220 */   296,  518,  320,  142,  518,  134,  370,  518,  518,  518,
 /*  3230 */   103,  518,  518,  518,  476,  406,  107,  518,  407,  378,
 /*  3240 */   384,  385,  518,  518,  518,  434,  518,  518,  518,  518,
 /*  3250 */   518,  103,  518,  518,  518,  518,  259,  515,  217,  363,
 /*  3260 */   128,  518,  518,  518,  354,  518,  518,  380,  251,  518,
 /*  3270 */   243,  408,  101,  149,  163,  203,  156,  197,  199,  164,
 /*  3280 */   418,  192,  200,  478,   91,  150,  208,  518,  518,   92,
 /*  3290 */   518,  518,  518,  386,  117,  390,  397,  404,  518,  518,
 /*  3300 */   246,  285,  283,  312,  122,  518,  518,  449,  448,  444,
 /*  3310 */   159,  454,  157,  153,  441,  269,  103,   94,  518,   30,
 /*  3320 */   518,   88,  246,  518,  518,  122,  518,  518,  449,  448,
 /*  3330 */   444,  159,  454,  157,  153,  441,  269,  518,  103,  518,
 /*  3340 */   518,   43,  518,  518,  518,  518,  518,  519,  518,   60,
 /*  3350 */    44,  518,  518,  413,  412,  460,  461,  510,  518,  103,
 /*  3360 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  3370 */   518,  518,  518,   98,   97,  518,  518,   89,   93,   90,
 /*  3380 */   518,  518,  222,  264,  255,  254,  365,  295,  310,  173,
 /*  3390 */   115,  518,  275,  449,  448,  444,  159,  454,  157,  153,
 /*  3400 */   441,  269,   92,  518,  518,  518,  518,  518,  365,  295,
 /*  3410 */   310,  173,  115,  246,  275,  449,  448,  444,  159,  454,
 /*  3420 */   157,  153,  441,  269,  518,  518,  518,  518,  518,  103,
 /*  3430 */    94,  518,   30,  122,   88,  246,  449,  448,  444,  159,
 /*  3440 */   454,  157,  153,  441,  269,  518,  518,  518,  518,  518,
 /*  3450 */   518,  103,  518,  518,   43,  333,  518,  518,  518,  518,
 /*  3460 */   518,  518,   60,   44,  518,  518,  413,  412,  460,  461,
 /*  3470 */   510,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  3480 */   518,  518,  518,  518,  518,  518,   98,   97,  518,  518,
 /*  3490 */    89,   93,   90,  518,  518,  222,  264,  255,  254,  365,
 /*  3500 */   295,  310,  173,  115,  518,  275,  449,  448,  444,  159,
 /*  3510 */   454,  157,  153,  441,  269,   92,  518,  518,  518,  406,
 /*  3520 */   518,  365,  295,  310,  173,  115,  246,  275,  449,  448,
 /*  3530 */   444,  159,  454,  157,  153,  441,  269,  518,  518,  518,
 /*  3540 */   518,  391,  103,   94,  518,   30,  518,   88,  518,  518,
 /*  3550 */   518,  518,  518,  518,  518,  518,  518,  149,  163,  203,
 /*  3560 */   156,  197,  199,  164,  418,  192,  200,  478,   91,  150,
 /*  3570 */   208,  518,  518,  392,  186,   60,   44,  386,  121,  413,
 /*  3580 */   412,  460,  461,  510,  223,  285,  283,  518,  518,  518,
 /*  3590 */   518,  434,  518,  518,  518,  518,  174,  463,  518,   98,
 /*  3600 */    97,  518,  518,   89,   93,   90,  518,  518,  222,  264,
 /*  3610 */   255,  254,  365,  295,  310,  173,  115,  518,  275,  449,
 /*  3620 */   448,  444,  159,  454,  157,  153,  441,  269,  406,  107,
 /*  3630 */   518,  407,  518,  518,  518,  518,  518,  518,  434,  518,
 /*  3640 */   127,  390,  397,  404,  518,  518,  518,  285,  283,  518,
 /*  3650 */   515,  334,  406,  518,  518,  518,  234,  518,  518,  518,
 /*  3660 */   518,  518,  518,  243,  408,  101,  149,  163,  203,  156,
 /*  3670 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  3680 */   518,  518,  518,  518,  518,  518,  386,  117,  390,  397,
 /*  3690 */   404,  518,  518,  518,  285,  283,  171,  418,  192,  200,
 /*  3700 */   478,   91,  150,  208,  518,   92,  518,  518,  518,  518,
 /*  3710 */   386,  121,  518,  518,  518,  518,  246,  406,  285,  283,
 /*  3720 */   274,  518,  518,  518,  518,  518,  518,  434,  518,  518,
 /*  3730 */   518,  518,  103,   94,  518,   30,  518,   88,  518,  515,
 /*  3740 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  3750 */   518,  518,  202,  518,  518,  149,  163,  203,  156,  197,
 /*  3760 */   199,  164,  418,  192,  200,  478,   91,  150,  208,  160,
 /*  3770 */   518,  518,  518,  518,  518,  386,  117,  390,  397,  404,
 /*  3780 */   518,  518,  518,  285,  283,  272,  426,  425,  428,   98,
 /*  3790 */    97,  518,  518,   89,   93,   90,  518,  518,  222,  264,
 /*  3800 */   255,  254,  365,  295,  310,  173,  115,  518,  275,  449,
 /*  3810 */   448,  444,  159,  454,  157,  153,  441,  269,  406,  107,
 /*  3820 */   518,  407,  518,  518,  518,  518,  518,  518,  434,  518,
 /*  3830 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  3840 */   515,  224,  274,  518,  518,  518,  518,  518,  518,  434,
 /*  3850 */   518,  518,  518,  243,  408,  101,  149,  163,  203,  156,
 /*  3860 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  3870 */   518,  518,  518,  518,  518,  518,  386,  117,  390,  397,
 /*  3880 */   404,  518,  518,  518,  285,  283,  518,  518,  518,  518,
 /*  3890 */   518,  166,  518,  518,  406,  107,  518,  407,  127,  390,
 /*  3900 */   397,  404,  518,  518,  434,  285,  283,  272,  426,  425,
 /*  3910 */   428,  518,  518,  518,  518,  518,  515,  249,  518,  518,
 /*  3920 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  243,
 /*  3930 */   408,  101,  149,  163,  203,  156,  197,  199,  164,  418,
 /*  3940 */   192,  200,  478,   91,  150,  208,  518,  406,  107,  518,
 /*  3950 */   407,  518,  386,  117,  390,  397,  404,  434,  518,  518,
 /*  3960 */   285,  283,  518,  518,  518,  518,  518,  518,  518,  515,
 /*  3970 */   247,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  3980 */   518,  518,  243,  408,  101,  149,  163,  203,  156,  197,
 /*  3990 */   199,  164,  418,  192,  200,  478,   91,  150,  208,  518,
 /*  4000 */   406,  107,  518,  407,  518,  386,  117,  390,  397,  404,
 /*  4010 */   434,  518,  518,  285,  283,  518,  518,  518,  531,  518,
 /*  4020 */   518,  274,  515,  228,  518,  518,  518,  518,  434,  518,
 /*  4030 */   518,  518,  518,  518,  518,  243,  408,  101,  149,  163,
 /*  4040 */   203,  156,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  4050 */   150,  208,  518,  518,  518,  518,  518,  518,  386,  117,
 /*  4060 */   390,  397,  404,  518,  518,  518,  285,  283,  518,  518,
 /*  4070 */   177,  406,  107,  518,  407,  518,  386,  117,  390,  397,
 /*  4080 */   404,  434,  518,  518,  285,  283,  272,  426,  425,  428,
 /*  4090 */   139,  518,  517,  515,  231,  518,  518,  518,  518,  518,
 /*  4100 */   518,  518,  518,  518,  518,  518,  243,  408,  101,  149,
 /*  4110 */   163,  203,  156,  197,  199,  164,  418,  192,  200,  478,
 /*  4120 */    91,  150,  208,  518,  406,  107,  518,  407,  518,  386,
 /*  4130 */   117,  390,  397,  404,  434,  518,  518,  285,  283,  518,
 /*  4140 */   518,  518,  518,  518,  518,  518,  515,  210,  518,  518,
 /*  4150 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  243,
 /*  4160 */   408,  101,  149,  163,  203,  156,  197,  199,  164,  418,
 /*  4170 */   192,  200,  478,   91,  150,  208,  518,  406,  107,  518,
 /*  4180 */   407,  518,  386,  117,  390,  397,  404,  434,  518,  518,
 /*  4190 */   285,  283,  518,  518,  518,  518,  518,  518,  518,  515,
 /*  4200 */   244,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  4210 */   518,  518,  243,  408,  101,  149,  163,  203,  156,  197,
 /*  4220 */   199,  164,  418,  192,  200,  478,   91,  150,  208,  518,
 /*  4230 */   518,  518,  518,  518,   92,  386,  117,  390,  397,  404,
 /*  4240 */   518,  518,  518,  285,  283,  246,   39,  403,  406,  107,
 /*  4250 */   518,  407,  518,  518,  518,  518,  518,  518,  434,  518,
 /*  4260 */   518,  518,   94,  518,   30,  518,   88,  518,  518,  518,
 /*  4270 */   515,  212,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  4280 */   518,  518,  518,  243,  408,  101,  149,  163,  203,  156,
 /*  4290 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  4300 */   518,  518,  518,  406,  518,  518,  386,  117,  390,  397,
 /*  4310 */   404,  518,  518,  518,  285,  283,  518,  518,   98,   97,
 /*  4320 */   518,  518,   89,   93,   90,  515,  518,  222,  264,  255,
 /*  4330 */   254,  365,  295,  310,  173,  123,  518,  275,  206,  518,
 /*  4340 */   518,  149,  163,  203,  156,  197,  199,  164,  418,  192,
 /*  4350 */   200,  478,   91,  150,  208,  406,   92,  518,  518,  518,
 /*  4360 */   518,  386,  121,  518,  518,  518,  518,  246,  518,  285,
 /*  4370 */   283,  518,  518,  518,  518,  518,  518,  515,  518,  518,
 /*  4380 */   518,  518,  518,  518,   94,  518,   30,  512,   88,  518,
 /*  4390 */   202,  518,  518,  149,  163,  203,  156,  197,  199,  164,
 /*  4400 */   418,  192,  200,  478,   91,  150,  208,   92,  518,  518,
 /*  4410 */   518,  518,  518,  386,  121,  518,  518,  518,  246,  518,
 /*  4420 */   518,  285,  283,  518,  518,  518,  518,  406,  518,  518,
 /*  4430 */   518,  518,   92,  518,  518,   94,  518,   30,  518,   88,
 /*  4440 */    98,   97,  518,  246,   89,   93,   90,  518,  518,  222,
 /*  4450 */   264,  255,  254,  365,  295,  310,  173,  123,  518,  275,
 /*  4460 */    94,  518,   30,  518,   88,  258,  518,  518,  518,  281,
 /*  4470 */   205,  164,  418,  192,  200,  478,   91,  150,  208,  518,
 /*  4480 */   518,  518,  518,  518,  518,  386,  121,  518,  518,  518,
 /*  4490 */   518,   98,   97,  285,  283,   89,   93,   90,  518,  518,
 /*  4500 */   222,  264,  255,  254,  365,  295,  310,  173,  123,  518,
 /*  4510 */   275,  518,   92,  518,  518,  518,   98,   97,  518,  406,
 /*  4520 */    89,   93,   90,  246,   39,  222,  264,  255,  254,  365,
 /*  4530 */   295,  310,  173,  123,  518,  275,  518,  518,  518,  518,
 /*  4540 */    94,  401,   30,  518,   88,  518,  518,  518,  518,  518,
 /*  4550 */   518,  518,  518,  518,  518,  518,  518,  149,  163,  203,
 /*  4560 */   156,  197,  199,  164,  418,  192,  200,  478,   91,  150,
 /*  4570 */   208,  518,  518,  402,  518,  518,  518,  386,  121,  518,
 /*  4580 */   518,  406,  518,  518,  518,  285,  283,  518,  518,  518,
 /*  4590 */   518,  518,  518,  518,  518,  518,   98,   97,  518,  518,
 /*  4600 */    89,   93,   90,  389,  518,  222,  264,  255,  254,  365,
 /*  4610 */   295,  310,  173,  123,  518,  275,  518,  518,  518,  149,
 /*  4620 */   163,  203,  156,  197,  199,  164,  418,  192,  200,  478,
 /*  4630 */    91,  150,  208,   92,  406,  388,  518,  518,  518,  386,
 /*  4640 */   121,  518,  518,  518,  246,  518,  518,  285,  283,  518,
 /*  4650 */   518,  518,  518,  518,  518,  518,  499,  518,  518,  518,
 /*  4660 */   518,   94,  518,   30,  518,   88,  518,  518,  518,  518,
 /*  4670 */   518,  518,  149,  163,  203,  156,  197,  199,  164,  418,
 /*  4680 */   192,  200,  478,   91,  150,  208,  518,  518,  518,  518,
 /*  4690 */   518,  518,  386,  121,  518,  518,  518,  518,  518,  518,
 /*  4700 */   285,  283,  406,  518,  290,  518,  518,  274,  518,  518,
 /*  4710 */   518,  518,  518,  518,  434,  518,  518,   98,   97,  518,
 /*  4720 */   518,   89,   93,   90,  417,  518,  222,  264,  255,  254,
 /*  4730 */   365,  295,  310,  173,  123,  518,  275,  518,  518,  518,
 /*  4740 */   149,  163,  203,  156,  197,  199,  164,  418,  192,  200,
 /*  4750 */   478,   91,  150,  208,  406,  518,  158,  518,  518,  518,
 /*  4760 */   386,  121,  386,  117,  390,  397,  404,  518,  285,  283,
 /*  4770 */   285,  283,  272,  426,  425,  428,  507,  518,  518,  518,
 /*  4780 */   518,  518,  518,  518,  518,  518,  406,  518,  518,  518,
 /*  4790 */   518,  518,  149,  163,  203,  156,  197,  199,  164,  418,
 /*  4800 */   192,  200,  478,   91,  150,  208,  518,  518,  232,  518,
 /*  4810 */   518,  518,  386,  121,  518,  518,  406,  518,  518,  518,
 /*  4820 */   285,  283,  518,  518,  149,  163,  203,  156,  197,  199,
 /*  4830 */   164,  418,  192,  200,  478,   91,  150,  208,  533,  518,
 /*  4840 */   518,  518,  518,  518,  386,  121,  518,  518,  518,  518,
 /*  4850 */   518,  518,  285,  283,  149,  163,  203,  156,  197,  199,
 /*  4860 */   164,  418,  192,  200,  478,   91,  150,  208,  406,  518,
 /*  4870 */   518,  518,  518,  518,  386,  121,  518,  518,  518,  518,
 /*  4880 */   518,  518,  285,  283,  518,  518,  518,  518,  518,  518,
 /*  4890 */   423,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  4900 */   518,  518,  406,  518,  518,  518,  149,  163,  203,  156,
 /*  4910 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  4920 */   518,  518,  518,  518,  530,  518,  386,  121,  518,  518,
 /*  4930 */   518,  518,  518,  518,  285,  283,  406,  518,  518,  518,
 /*  4940 */   149,  163,  203,  156,  197,  199,  164,  418,  192,  200,
 /*  4950 */   478,   91,  150,  208,  518,  518,  518,  518,  503,  518,
 /*  4960 */   386,  121,  518,  518,  518,  518,  406,  518,  285,  283,
 /*  4970 */   518,  518,  518,  518,  149,  163,  203,  156,  197,  199,
 /*  4980 */   164,  418,  192,  200,  478,   91,  150,  208,  277,  518,
 /*  4990 */   518,  518,  518,  518,  386,  121,  406,  518,  518,  518,
 /*  5000 */   518,  518,  285,  283,  149,  163,  203,  156,  197,  199,
 /*  5010 */   164,  418,  192,  200,  478,   91,  150,  208,  526,  518,
 /*  5020 */   518,  518,  518,  518,  386,  121,  518,  518,  518,  518,
 /*  5030 */   518,  518,  285,  283,  149,  163,  203,  156,  197,  199,
 /*  5040 */   164,  418,  192,  200,  478,   91,  150,  208,  406,  518,
 /*  5050 */   518,  518,  518,  518,  386,  121,  518,  518,  518,  518,
 /*  5060 */   518,  518,  285,  283,  518,  518,  518,  518,  518,  518,
 /*  5070 */   516,  518,  518,  518,  518,  518,  518,  518,  406,  518,
 /*  5080 */   518,  518,  518,  518,  518,  518,  149,  163,  203,  156,
 /*  5090 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  5100 */   527,  518,  518,  518,  518,  518,  386,  121,  406,  518,
 /*  5110 */   518,  518,  518,  518,  285,  283,  149,  163,  203,  156,
 /*  5120 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  5130 */   504,  518,  518,  518,  518,  518,  386,  121,  406,  518,
 /*  5140 */   518,  518,  518,  518,  285,  283,  149,  163,  203,  156,
 /*  5150 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  5160 */   501,  518,  518,  518,  518,  518,  386,  121,  518,  518,
 /*  5170 */   518,  518,  518,  518,  285,  283,  149,  163,  203,  156,
 /*  5180 */   197,  199,  164,  418,  192,  200,  478,   91,  150,  208,
 /*  5190 */   406,  518,  518,  518,  518,  518,  386,  121,  518,  518,
 /*  5200 */   518,  518,  518,  518,  285,  283,  518,  518,  518,  518,
 /*  5210 */   518,  518,  424,  518,  518,  518,  518,  518,  518,  518,
 /*  5220 */   406,  518,  518,  518,  518,  518,  518,  518,  149,  163,
 /*  5230 */   203,  156,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  5240 */   150,  208,  505,  518,  518,  518,  518,  518,  386,  121,
 /*  5250 */   406,  518,  518,  518,  518,  518,  285,  283,  149,  163,
 /*  5260 */   203,  156,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  5270 */   150,  208,  359,  518,  518,  518,  518,  518,  386,  121,
 /*  5280 */   406,  518,  518,  518,  518,  518,  285,  283,  149,  163,
 /*  5290 */   203,  156,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  5300 */   150,  208,  518,  518,  518,  518,  518,  518,  386,  121,
 /*  5310 */   518,  518,  518,  518,  518,  518,  285,  283,  168,  163,
 /*  5320 */   203,  156,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  5330 */   150,  208,  406,  518,  518,  518,  518,  518,  386,  121,
 /*  5340 */   518,  518,  518,  518,  518,  518,  285,  283,  518,  518,
 /*  5350 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5360 */   518,  518,  406,  518,  518,  518,  518,  518,  518,  518,
 /*  5370 */   518,  167,  203,  156,  197,  199,  164,  418,  192,  200,
 /*  5380 */   478,   91,  150,  208,  518,  518,  518,  518,  518,  518,
 /*  5390 */   386,  121,  406,  518,  518,  518,  518,  518,  285,  283,
 /*  5400 */   518,  161,  203,  156,  197,  199,  164,  418,  192,  200,
 /*  5410 */   478,   91,  150,  208,  518,  518,  518,  518,  518,  518,
 /*  5420 */   386,  121,  406,  518,  518,  518,  518,  518,  285,  283,
 /*  5430 */   518,  518,  189,  156,  197,  199,  164,  418,  192,  200,
 /*  5440 */   478,   91,  150,  208,  518,  518,  518,  518,  518,  518,
 /*  5450 */   386,  121,  518,  518,  518,  518,  518,  518,  285,  283,
 /*  5460 */   406,  518,  183,  156,  197,  199,  164,  418,  192,  200,
 /*  5470 */   478,   91,  150,  208,  518,  518,  518,  518,  518,  518,
 /*  5480 */   386,  121,  518,  518,  518,  518,  518,  518,  285,  283,
 /*  5490 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5500 */   188,  156,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  5510 */   150,  208,  518,  406,  518,  518,  518,  518,  386,  121,
 /*  5520 */   518,  518,  518,  518,  518,  518,  285,  283,  518,  518,
 /*  5530 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5540 */   406,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5550 */   518,  518,  518,  518,  155,  197,  199,  164,  418,  192,
 /*  5560 */   200,  478,   91,  150,  208,  518,  518,  518,  518,  518,
 /*  5570 */   406,  386,  121,  518,  518,  518,  518,  518,  518,  285,
 /*  5580 */   283,  154,  197,  199,  164,  418,  192,  200,  478,   91,
 /*  5590 */   150,  208,  518,  518,  518,  518,  518,  518,  386,  121,
 /*  5600 */   406,  518,  518,  518,  518,  518,  285,  283,  518,  518,
 /*  5610 */   518,  518,  204,  199,  164,  418,  192,  200,  478,   91,
 /*  5620 */   150,  208,  518,  518,  518,  518,  518,  518,  386,  121,
 /*  5630 */   406,  518,  518,  518,  518,  518,  285,  283,  518,  518,
 /*  5640 */   518,  518,  201,  199,  164,  418,  192,  200,  478,   91,
 /*  5650 */   150,  208,  524,  518,  518,  274,  518,  518,  386,  121,
 /*  5660 */   518,  518,  434,  518,  518,  518,  285,  283,  518,  518,
 /*  5670 */   518,  518,  178,  199,  164,  418,  192,  200,  478,   91,
 /*  5680 */   150,  208,  406,  518,  518,  518,  518,  518,  386,  121,
 /*  5690 */   518,  518,  518,  518,  518,  518,  285,  283,  518,  518,
 /*  5700 */   518,  518,  518,  518,  184,  518,  518,  518,  518,  518,
 /*  5710 */   386,  117,  390,  397,  404,  518,  518,  518,  285,  283,
 /*  5720 */   272,  426,  425,  428,  194,  199,  164,  418,  192,  200,
 /*  5730 */   478,   91,  150,  208,  518,  518,  518,  518,  518,  518,
 /*  5740 */   386,  121,  406,  518,  518,  518,  518,  518,  285,  283,
 /*  5750 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5760 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5770 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5780 */   518,  518,  518,  518,  518,  198,  164,  418,  192,  200,
 /*  5790 */   478,   91,  150,  208,  518,  518,  518,  518,  518,  518,
 /*  5800 */   386,  121,  518,  518,  518,  518,  518,  518,  285,  283,
    );
    static public $yy_lookahead = array(
 /*     0 */     9,    5,  116,  117,    8,    5,  120,  121,    8,   44,
 /*    10 */    19,   20,   21,   22,   23,   24,   25,   26,  116,   28,
 /*    20 */    29,   30,  120,   34,   33,   44,   45,   36,   37,   40,
 /*    30 */    39,   35,   41,   27,   43,  116,  117,   31,   32,  120,
 /*    40 */   121,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*    50 */    59,   60,   20,   20,   63,   39,   23,   66,   67,   68,
 /*    60 */    69,   70,   93,   94,   73,   74,   75,   76,   77,  116,
 /*    70 */    89,   90,   72,  120,   78,   79,   80,   81,   82,   83,
 /*    80 */    84,   85,   86,   87,   93,   94,   34,   71,   97,   98,
 /*    90 */    99,    4,   40,  102,  103,  104,  105,  106,  107,  108,
 /*   100 */   109,  110,   20,  112,  113,  114,  115,  116,  117,  118,
 /*   110 */   119,  120,  121,    9,   98,   99,  100,  101,   24,   25,
 /*   120 */    26,   39,   20,   19,   20,   21,   22,   23,   24,   25,
 /*   130 */    26,   23,   28,   29,   30,   20,   22,   33,    9,   37,
 /*   140 */    36,   37,  110,   39,   34,   41,   37,   43,   34,   20,
 /*   150 */    40,   36,   37,   38,   50,   51,   52,   53,   54,   55,
 /*   160 */    56,   57,   58,   59,   60,   36,   37,   63,   91,   92,
 /*   170 */    66,   67,   68,   69,   70,   88,  120,   73,   74,   75,
 /*   180 */    76,   77,   44,   20,  102,  103,  104,  105,  106,  107,
 /*   190 */   108,  109,  110,   20,  112,  145,   23,   93,   94,   36,
 /*   200 */    37,   97,   98,   99,   95,   96,  102,  103,  104,  105,
 /*   210 */   106,  107,  108,  109,  110,   37,  112,  113,  114,  115,
 /*   220 */   116,  117,  118,  119,  120,  121,    9,  143,    7,  145,
 /*   230 */     9,   10,  148,  149,  150,   54,   19,   20,   21,  144,
 /*   240 */    23,   24,   25,   26,  194,   20,  151,  197,  198,  111,
 /*   250 */    33,   36,   37,   36,   37,   40,   39,   22,   41,  175,
 /*   260 */    43,   21,   37,   23,   47,   48,   49,   50,   51,   52,
 /*   270 */    53,   54,   55,   56,   57,   58,   59,   60,  194,   23,
 /*   280 */    63,  197,  198,   66,   67,   68,   69,   70,  193,  132,
 /*   290 */    73,   74,   75,   76,   77,  200,  201,  202,  203,   64,
 /*   300 */    65,  144,  207,  208,  209,  210,  211,  212,  151,   20,
 /*   310 */    93,   94,   23,  120,   97,   98,   99,    9,   61,  102,
 /*   320 */   103,  104,  105,  106,  107,  108,  109,  110,   20,  112,
 /*   330 */   113,  114,  115,  116,  117,  118,  119,  120,  121,    9,
 /*   340 */   152,  153,  154,  141,   36,   37,   38,   27,   44,   19,
 /*   350 */    20,   21,   22,   23,   24,   25,   26,  200,  201,  202,
 /*   360 */   203,   36,   37,   33,  207,  208,   36,   37,   34,   39,
 /*   370 */    45,   41,   20,   43,   36,   37,  149,  150,   40,   45,
 /*   380 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   390 */    60,   36,   37,   63,   42,   20,   66,   67,   68,   69,
 /*   400 */    70,  199,  200,   73,   74,   75,   76,   77,  110,  207,
 /*   410 */   208,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*   420 */   120,   36,   37,   93,   94,  198,   23,   97,   98,   99,
 /*   430 */    45,  111,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   440 */   110,   40,  112,  113,  114,  115,  116,  117,  118,  119,
 /*   450 */   120,  121,    9,   35,   39,  149,  150,   39,  149,  150,
 /*   460 */   205,  206,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   470 */   144,   20,   36,   37,   23,   37,   33,  151,   20,   36,
 /*   480 */    37,   45,   39,  157,   41,  110,   43,  115,  116,   71,
 /*   490 */    13,   39,  120,   50,   51,   52,   53,   54,   55,   56,
 /*   500 */    57,   58,   59,   60,  198,  146,   63,  198,   20,   66,
 /*   510 */    67,   68,   69,   70,  155,  204,   73,   74,   75,   76,
 /*   520 */    77,   44,   24,   25,   22,  214,  200,  201,  202,  203,
 /*   530 */    42,   33,   13,  207,  208,   35,   93,   94,   39,  140,
 /*   540 */    97,   98,   99,   45,   46,  102,  103,  104,  105,  106,
 /*   550 */   107,  108,  109,  110,   20,  112,  113,  114,  115,  116,
 /*   560 */   117,  118,  119,  120,  121,    9,   64,   65,  110,  141,
 /*   570 */    71,   71,   22,   39,   20,   19,   20,   21,   22,   23,
 /*   580 */    24,   25,   26,   40,   34,   36,   37,  146,  111,   33,
 /*   590 */   204,   20,   36,   37,   45,   39,  155,   41,  120,   43,
 /*   600 */   214,  167,  168,   21,   27,   23,   50,   51,   52,   53,
 /*   610 */    54,   55,   56,   57,   58,   59,   60,   13,  127,   63,
 /*   620 */   153,  154,   66,   67,   68,   69,   70,  199,  200,   73,
 /*   630 */    74,   75,   76,   77,   34,  207,  208,  204,   48,   49,
 /*   640 */   106,  107,  108,  109,  110,   45,  112,  214,   44,   93,
 /*   650 */    94,  171,  172,   97,   98,   99,   13,  204,  102,  103,
 /*   660 */   104,  105,  106,  107,  108,  109,  110,  214,  112,  113,
 /*   670 */   114,  115,  116,  117,  118,  119,  120,  121,    9,    9,
 /*   680 */    20,  110,  161,  162,  139,  140,   37,   44,   19,   20,
 /*   690 */    21,   22,   23,   24,   25,   26,  144,   20,   39,   22,
 /*   700 */    21,   39,   33,  151,  168,   36,   37,   21,   39,   23,
 /*   710 */    41,   20,   43,   20,   21,   20,   21,   23,   47,   50,
 /*   720 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   730 */   120,   20,   63,   23,   27,   66,   67,   68,   69,   70,
 /*   740 */    40,   23,   73,   74,   75,   76,   77,   24,   25,   27,
 /*   750 */   120,   39,  200,  201,  202,  203,   33,   44,   39,  207,
 /*   760 */   208,   35,   93,   94,   36,    2,   97,   98,   99,   46,
 /*   770 */   110,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   780 */    40,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   790 */   121,    9,  111,   40,   20,   23,   34,   40,   23,   23,
 /*   800 */    23,   19,   20,   21,   22,   23,   24,   25,   26,  144,
 /*   810 */    23,   42,   20,   20,   23,   33,  151,   39,   36,   37,
 /*   820 */    39,   39,   21,   41,   21,   43,   40,   44,   20,   23,
 /*   830 */    72,  147,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   840 */    58,   59,   60,   44,   13,   63,  130,   23,   66,   67,
 /*   850 */    68,   69,   70,  147,   44,   73,   74,   75,   76,   77,
 /*   860 */    72,   39,  198,   40,   39,  200,  201,  202,  203,   40,
 /*   870 */   138,  132,  207,  208,  110,   93,   94,   13,  198,   97,
 /*   880 */    98,   99,   13,  137,  102,  103,  104,  105,  106,  107,
 /*   890 */   108,  109,  110,  172,  112,  113,  114,  115,  116,  117,
 /*   900 */   118,  119,  120,  121,    9,   34,  198,   39,  147,   13,
 /*   910 */    13,    9,  147,   21,   19,   20,   21,   22,   23,   24,
 /*   920 */    25,   26,   39,   20,  151,  130,  147,   39,   33,  215,
 /*   930 */   145,   36,   37,   40,   39,   20,   41,  147,   43,   40,
 /*   940 */    40,  216,  138,  216,  216,   50,   51,   52,   53,   54,
 /*   950 */    55,   56,   57,   58,   59,   60,  216,  216,   63,  216,
 /*   960 */   175,   66,   67,   68,   69,   70,  216,  216,   73,   74,
 /*   970 */    75,   76,   77,  200,  201,  202,  203,  216,  216,  194,
 /*   980 */   207,  208,  197,  198,  216,  216,  216,  216,   93,   94,
 /*   990 */   216,  216,   97,   98,   99,  216,  216,  102,  103,  104,
 /*  1000 */   105,  106,  107,  108,  109,  110,  216,  112,  113,  114,
 /*  1010 */   115,  116,  117,  118,  119,  120,  121,    9,  216,  216,
 /*  1020 */   216,  216,  216,  216,  216,  216,  216,   19,   20,   21,
 /*  1030 */    22,   23,   24,   25,   26,  216,  216,  216,  216,  216,
 /*  1040 */   216,   33,  216,  216,   36,   37,  216,   39,  216,   41,
 /*  1050 */   216,   43,  216,  216,  216,  216,  216,  216,   50,   51,
 /*  1060 */    52,   53,   54,   55,   56,   57,   58,   59,   60,  216,
 /*  1070 */   216,   63,  216,  216,   66,   67,   68,   69,   70,  216,
 /*  1080 */   216,   73,   74,   75,   76,   77,  216,  216,  216,  216,
 /*  1090 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  1100 */   216,   93,   94,  216,  216,   97,   98,   99,  216,  216,
 /*  1110 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  216,
 /*  1120 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  1130 */     9,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  1140 */    19,   20,   21,   22,   23,   24,   25,   26,  216,  216,
 /*  1150 */   216,  216,  216,  216,   33,  216,  216,   36,   37,  216,
 /*  1160 */    39,  216,   41,  216,   43,  216,  216,  216,  216,  216,
 /*  1170 */   216,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*  1180 */    59,   60,  216,  216,   63,  216,  216,   66,   67,   68,
 /*  1190 */    69,   70,  216,  216,   73,   74,   75,   76,   77,  216,
 /*  1200 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  1210 */   216,  216,  216,  216,   93,   94,  216,  216,   97,   98,
 /*  1220 */    99,  216,  216,  102,  103,  104,  105,  106,  107,  108,
 /*  1230 */   109,  110,  216,  112,  113,  114,  115,  116,  117,  118,
 /*  1240 */   119,  120,  121,    9,  216,  216,  216,  216,  216,  216,
 /*  1250 */   216,  216,  216,   19,   20,   21,   22,   23,   24,   25,
 /*  1260 */    26,  216,  216,  216,  216,  216,  216,   33,  216,  216,
 /*  1270 */    36,   37,  216,   39,  216,   41,  216,   43,  216,  216,
 /*  1280 */   216,  216,  216,  216,   50,   51,   52,   53,   54,   55,
 /*  1290 */    56,   57,   58,   59,   60,  216,  216,   63,  216,  216,
 /*  1300 */    66,   67,   68,   69,   70,  216,  216,   73,   74,   75,
 /*  1310 */    76,   77,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  1320 */   216,  216,  216,  216,  216,  216,  216,   93,   94,  216,
 /*  1330 */   216,   97,   98,   99,  216,  216,  102,  103,  104,  105,
 /*  1340 */   106,  107,  108,  109,  110,  216,  112,  113,  114,  115,
 /*  1350 */   116,  117,  118,  119,  120,  121,    9,  216,  216,  216,
 /*  1360 */   216,  216,  216,  216,  216,  216,   19,   20,   21,  144,
 /*  1370 */    23,   24,   25,   26,  216,  216,  151,  216,  216,  216,
 /*  1380 */    33,  216,  216,   36,   37,  216,   39,  216,   41,  216,
 /*  1390 */    43,  216,  216,  216,  216,  216,  216,   50,   51,   52,
 /*  1400 */    53,   54,   55,   56,   57,   58,   59,   60,  216,  216,
 /*  1410 */    63,  216,  216,   66,   67,   68,   69,   70,  193,  216,
 /*  1420 */    73,   74,   75,   76,   77,  200,  201,  202,  203,  216,
 /*  1430 */   216,  216,  207,  208,  209,  210,  211,  212,  216,  216,
 /*  1440 */    93,   94,  216,  216,   97,   98,   99,  216,  216,  102,
 /*  1450 */   103,  104,  105,  106,  107,  108,  109,  110,  216,  112,
 /*  1460 */   113,  114,  115,  116,  117,  118,  119,  120,  121,    9,
 /*  1470 */   216,  216,  216,  216,  216,  216,  216,  216,  216,   19,
 /*  1480 */    20,   21,  144,   23,   24,   25,   26,  216,  143,  151,
 /*  1490 */   145,  216,  216,  148,  149,  150,   36,   37,  216,   39,
 /*  1500 */   216,   41,  216,   43,  216,  216,  216,  216,  216,  216,
 /*  1510 */   216,  216,  216,   53,   54,   55,   56,   57,   58,   59,
 /*  1520 */    60,  216,  216,   63,  216,  216,   66,   67,   68,   69,
 /*  1530 */    70,  193,  216,   73,   74,   75,   76,   77,  200,  201,
 /*  1540 */   202,  203,  197,  198,  216,  207,  208,  209,  210,  211,
 /*  1550 */   212,  216,  216,   93,   94,  216,  216,   97,   98,   99,
 /*  1560 */   216,  216,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1570 */   110,  216,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  1580 */   120,  121,  125,  126,  216,  128,  129,  216,  131,  132,
 /*  1590 */   133,  134,  135,  136,  216,  216,  216,  216,  141,  142,
 /*  1600 */   216,  144,  216,  216,  141,  216,  216,  216,  151,  216,
 /*  1610 */   216,  216,  216,  216,  216,  158,  216,  216,  216,  216,
 /*  1620 */   163,  164,  165,  166,  216,  216,  216,  170,  216,  216,
 /*  1630 */   173,  174,  216,  176,  177,  178,  179,  180,  181,  182,
 /*  1640 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  1650 */   187,  188,  189,  190,  191,  192,  199,  200,  201,  202,
 /*  1660 */   203,  216,  199,  200,  207,  208,  216,  216,  216,  216,
 /*  1670 */   207,  208,  216,  216,  216,  216,  216,  216,  216,  125,
 /*  1680 */   126,  216,  128,  129,  216,  131,  132,  216,  216,  216,
 /*  1690 */   216,  216,  216,  216,  216,  141,  142,  216,  144,  216,
 /*  1700 */   216,  216,  216,  216,  216,  151,  216,  216,  216,  216,
 /*  1710 */   216,  216,  158,  159,  160,  161,  162,  163,  164,  165,
 /*  1720 */   166,  216,  216,  216,  170,  216,  216,  173,  174,  216,
 /*  1730 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
 /*  1740 */   186,  187,  188,  189,  190,  191,  192,  216,  216,  216,
 /*  1750 */   216,  216,  216,  199,  200,  201,  202,  203,  216,  216,
 /*  1760 */   216,  207,  208,  125,  126,  216,  128,  129,  216,  131,
 /*  1770 */   132,  216,  134,  135,  136,  216,  216,  216,  216,  141,
 /*  1780 */   142,  216,  144,  216,  216,  216,  216,  216,  216,  151,
 /*  1790 */   216,  216,  216,  216,  216,  216,  158,  216,  216,  216,
 /*  1800 */   216,  163,  164,  165,  166,  216,  216,  216,  170,  216,
 /*  1810 */   216,  173,  174,  141,  176,  177,  178,  179,  180,  181,
 /*  1820 */   182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
 /*  1830 */   192,  216,  216,  216,  216,  216,  216,  199,  200,  201,
 /*  1840 */   202,  203,  216,  216,  216,  207,  208,  216,  123,  124,
 /*  1850 */   125,  126,  216,  128,  129,  216,  131,  132,  216,  187,
 /*  1860 */   188,  189,  190,  191,  192,  216,  141,  142,  216,  144,
 /*  1870 */   216,  199,  200,  216,  216,  216,  151,  216,  216,  207,
 /*  1880 */   208,  216,  216,  158,  216,  216,  216,  216,  163,  164,
 /*  1890 */   165,  166,  216,  216,  216,  170,  216,  216,  173,  174,
 /*  1900 */   216,  176,  177,  178,  179,  180,  181,  182,  183,  184,
 /*  1910 */   185,  186,  187,  188,  189,  190,  191,  192,  216,  216,
 /*  1920 */   216,  216,  216,  216,  199,  200,  201,  202,  203,  216,
 /*  1930 */   216,  216,  207,  208,  216,  216,  124,  125,  126,  216,
 /*  1940 */   128,  129,  216,  131,  132,  216,  216,  216,  216,  216,
 /*  1950 */   216,  216,  216,  141,  142,  216,  144,  216,  216,  216,
 /*  1960 */   216,  216,  216,  151,  216,  216,  216,  216,  216,  216,
 /*  1970 */   158,  216,  216,  216,  216,  163,  164,  165,  166,  216,
 /*  1980 */   216,  216,  170,  216,  216,  173,  174,  141,  176,  177,
 /*  1990 */   178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
 /*  2000 */   188,  189,  190,  191,  192,  216,  216,  216,  216,  216,
 /*  2010 */   216,  199,  200,  201,  202,  203,  216,  216,  216,  207,
 /*  2020 */   208,  216,  216,  124,  125,  126,  216,  128,  129,  216,
 /*  2030 */   131,  132,  186,  187,  188,  189,  190,  191,  192,  216,
 /*  2040 */   141,  142,  216,  144,  216,  199,  200,  216,  216,  216,
 /*  2050 */   151,  216,  216,  207,  208,  216,  216,  158,  216,  216,
 /*  2060 */   216,  216,  163,  164,  165,  166,  216,  216,  216,  170,
 /*  2070 */   216,  216,  173,  174,  141,  176,  177,  178,  179,  180,
 /*  2080 */   181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  2090 */   191,  192,  216,  216,  216,  216,  216,  216,  199,  200,
 /*  2100 */   201,  202,  203,  216,  216,  216,  207,  208,  216,  216,
 /*  2110 */   124,  125,  126,  216,  128,  129,  216,  131,  132,  186,
 /*  2120 */   187,  188,  189,  190,  191,  192,  216,  141,  142,  216,
 /*  2130 */   144,  216,  199,  200,  216,  216,  216,  151,  216,  216,
 /*  2140 */   207,  208,  216,  216,  158,  216,  216,  216,  216,  163,
 /*  2150 */   164,  165,  166,  216,  216,  216,  170,  216,  216,  173,
 /*  2160 */   174,  141,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  2170 */   184,  185,  186,  187,  188,  189,  190,  191,  192,  216,
 /*  2180 */   216,  216,  216,  216,  216,  199,  200,  201,  202,  203,
 /*  2190 */   216,  216,  216,  207,  208,  216,  216,  124,  125,  126,
 /*  2200 */   216,  128,  129,  216,  131,  132,  186,  187,  188,  189,
 /*  2210 */   190,  191,  192,  216,  141,  142,  216,  144,  216,  199,
 /*  2220 */   200,  216,  216,  216,  151,  216,  216,  207,  208,  216,
 /*  2230 */   216,  158,  216,  216,  216,  216,  163,  164,  165,  166,
 /*  2240 */   216,  216,  216,  170,  216,  216,  173,  174,  141,  176,
 /*  2250 */   177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
 /*  2260 */   187,  188,  189,  190,  191,  192,  216,  216,  216,  216,
 /*  2270 */   216,  216,  199,  200,  201,  202,  203,  216,  216,  216,
 /*  2280 */   207,  208,  216,  216,  124,  125,  126,  216,  128,  129,
 /*  2290 */   216,  131,  132,  216,  187,  188,  189,  190,  191,  192,
 /*  2300 */   216,  141,  142,  216,  144,  216,  199,  200,  216,  216,
 /*  2310 */   216,  151,  216,  216,  207,  208,  216,  216,  158,  216,
 /*  2320 */   216,  216,  216,  163,  164,  165,  166,  216,  216,  216,
 /*  2330 */   170,  216,  216,  173,  174,  141,  176,  177,  178,  179,
 /*  2340 */   180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
 /*  2350 */   190,  191,  192,  216,  216,  216,  216,  216,  216,  199,
 /*  2360 */   200,  201,  202,  203,  216,  216,  216,  207,  208,  216,
 /*  2370 */   216,  124,  125,  126,  216,  128,  129,  216,  131,  132,
 /*  2380 */   216,  187,  188,  189,  190,  191,  192,  216,  141,  142,
 /*  2390 */   216,  144,  216,  199,  200,  216,  216,  216,  151,  216,
 /*  2400 */   216,  207,  208,  216,  216,  158,  216,  216,  216,  216,
 /*  2410 */   163,  164,  165,  166,  216,  216,  216,  170,  216,  216,
 /*  2420 */   173,  174,  141,  176,  177,  178,  179,  180,  181,  182,
 /*  2430 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  2440 */   216,  216,  216,  216,  216,  216,  199,  200,  201,  202,
 /*  2450 */   203,  216,  216,  216,  207,  208,  216,  216,  124,  125,
 /*  2460 */   126,  216,  128,  129,  216,  131,  132,  216,  187,  188,
 /*  2470 */   189,  190,  191,  192,  216,  141,  142,  216,  144,  216,
 /*  2480 */   199,  200,  216,  216,  216,  151,  216,  216,  207,  208,
 /*  2490 */   216,  216,  158,  216,  216,  216,  216,  163,  164,  165,
 /*  2500 */   166,  216,  216,  216,  170,  216,  216,  173,  174,  141,
 /*  2510 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
 /*  2520 */   186,  187,  188,  189,  190,  191,  192,  216,  216,  216,
 /*  2530 */   216,  216,  216,  199,  200,  201,  202,  203,  216,  216,
 /*  2540 */   216,  207,  208,  216,  216,  124,  125,  126,  216,  128,
 /*  2550 */   129,  216,  131,  132,  216,  187,  188,  189,  190,  191,
 /*  2560 */   192,  216,  141,  142,  216,  144,  216,  199,  200,  216,
 /*  2570 */   216,  216,  151,  216,  216,  207,  208,  216,  216,  158,
 /*  2580 */   216,  216,  216,  216,  163,  164,  165,  166,  216,  216,
 /*  2590 */   216,  170,  216,  216,  173,  174,  141,  176,  177,  178,
 /*  2600 */   179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  2610 */   189,  190,  191,  192,  216,  216,  216,  216,  216,  216,
 /*  2620 */   199,  200,  201,  202,  203,  216,  216,  216,  207,  208,
 /*  2630 */   216,  216,  124,  125,  126,  216,  128,  129,  216,  131,
 /*  2640 */   132,  216,  187,  188,  189,  190,  191,  192,  216,  141,
 /*  2650 */   142,  216,  144,  216,  199,  200,  216,  216,  216,  151,
 /*  2660 */   216,  216,  207,  208,  216,  216,  158,  216,  216,  216,
 /*  2670 */   216,  163,  164,  165,  166,  216,  216,  216,  170,  216,
 /*  2680 */   216,  173,  174,  141,  176,  177,  178,  179,  180,  181,
 /*  2690 */   182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
 /*  2700 */   192,  216,  216,  216,  216,  216,  216,  199,  200,  201,
 /*  2710 */   202,  203,  216,  216,  216,  207,  208,  216,  216,  124,
 /*  2720 */   125,  126,  216,  128,  129,  216,  131,  132,  216,  187,
 /*  2730 */   188,  216,  216,  191,  192,  216,  141,  142,  216,  144,
 /*  2740 */   216,  199,  200,  216,  216,  216,  151,  216,  216,  207,
 /*  2750 */   208,  216,  216,  158,  216,  216,  216,  216,  163,  164,
 /*  2760 */   165,  166,  216,  216,  216,  170,  141,  216,  173,  174,
 /*  2770 */   216,  176,  177,  178,  179,  180,  181,  182,  183,  184,
 /*  2780 */   185,  186,  187,  188,  189,  190,  191,  192,  216,  216,
 /*  2790 */   216,  216,  216,  216,  199,  200,  201,  202,  203,  216,
 /*  2800 */   216,  216,  207,  208,  125,  126,  216,  128,  129,  216,
 /*  2810 */   131,  132,  187,  188,  216,  216,  191,  192,  216,  216,
 /*  2820 */   141,  142,  216,  144,  199,  200,  216,  216,  216,  216,
 /*  2830 */   151,  216,  207,  208,  216,  216,  216,  158,  216,  216,
 /*  2840 */   216,  216,  163,  164,  165,  166,  216,  216,  216,  170,
 /*  2850 */   216,  141,  173,  174,  216,  176,  177,  178,  179,  180,
 /*  2860 */   181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  2870 */   191,  192,  216,  216,  216,  216,  216,  216,  199,  200,
 /*  2880 */   201,  202,  203,  216,  216,  216,  207,  208,  126,  216,
 /*  2890 */   128,  129,  216,  131,  132,  185,  186,  187,  188,  189,
 /*  2900 */   190,  191,  192,  141,  142,  216,  144,  216,  216,  199,
 /*  2910 */   200,  216,  216,  151,  216,  216,  216,  207,  208,  216,
 /*  2920 */   216,  216,  216,  216,  216,  163,  164,  165,  166,  216,
 /*  2930 */   216,  216,  170,  216,  216,  173,  174,  216,  176,  177,
 /*  2940 */   178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
 /*  2950 */   188,  189,  190,  191,  192,  216,  216,  216,  216,  216,
 /*  2960 */   216,  199,  200,  201,  202,  203,  216,  216,  216,  207,
 /*  2970 */   208,  126,  216,  128,  129,  216,  131,  132,  216,  216,
 /*  2980 */   216,  216,  216,  216,  216,  216,  141,  142,  216,  144,
 /*  2990 */   216,  216,  216,  216,  216,  216,  151,  216,  216,  216,
 /*  3000 */   216,  216,  216,  216,  216,  216,  216,  216,  163,  164,
 /*  3010 */   165,  166,  216,  216,  216,  170,  216,  216,  173,  174,
 /*  3020 */   216,  176,  177,  178,  179,  180,  181,  182,  183,  184,
 /*  3030 */   185,  186,  187,  188,  189,  190,  191,  192,  216,  216,
 /*  3040 */   216,  216,  216,  216,  199,  200,  201,  202,  203,  216,
 /*  3050 */   216,  216,  207,  208,  126,  216,  128,  129,  216,  131,
 /*  3060 */   132,  216,  216,  216,  216,  216,  216,  216,  216,  141,
 /*  3070 */   142,  216,  144,  216,  216,  216,  216,  216,  216,  151,
 /*  3080 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  3090 */   216,  163,  164,  165,  166,  216,  216,  216,  170,  216,
 /*  3100 */   216,  173,  174,  216,  176,  177,  178,  179,  180,  181,
 /*  3110 */   182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
 /*  3120 */   192,  216,  216,  216,  216,  216,  216,  199,  200,  201,
 /*  3130 */   202,  203,  216,  216,  216,  207,  208,  126,  216,  128,
 /*  3140 */   129,  216,  131,  132,  216,  216,  216,  216,  216,  216,
 /*  3150 */   216,  216,  141,  142,  216,  144,  216,  216,  216,  216,
 /*  3160 */   216,  216,  151,  216,  216,  216,  216,  216,  216,  216,
 /*  3170 */   216,  216,  216,  216,  163,  164,  165,  166,  216,  216,
 /*  3180 */   216,  170,  216,  216,  173,  174,  216,  176,  177,  178,
 /*  3190 */   179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  3200 */   189,  190,  191,  192,  216,  216,  216,  216,  216,  216,
 /*  3210 */   199,  200,  201,  202,  203,  216,  216,  216,  207,  208,
 /*  3220 */   126,  216,  128,  129,  216,  131,  132,  216,  216,  216,
 /*  3230 */    36,  216,  216,  216,   40,  141,  142,  216,  144,   24,
 /*  3240 */    25,   26,  216,  216,  216,  151,  216,  216,  216,  216,
 /*  3250 */   216,   36,  216,  216,  216,  216,   41,  163,  164,  165,
 /*  3260 */   166,  216,  216,  216,  170,  216,  216,  173,  174,  216,
 /*  3270 */   176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
 /*  3280 */   186,  187,  188,  189,  190,  191,  192,  216,  216,    9,
 /*  3290 */   216,  216,  216,  199,  200,  201,  202,  203,  216,  216,
 /*  3300 */    20,  207,  208,   23,  110,  216,  216,  113,  114,  115,
 /*  3310 */   116,  117,  118,  119,  120,  121,   36,   37,  216,   39,
 /*  3320 */   216,   41,   20,  216,  216,  110,  216,  216,  113,  114,
 /*  3330 */   115,  116,  117,  118,  119,  120,  121,  216,   36,  216,
 /*  3340 */   216,   39,  216,  216,  216,  216,  216,   45,  216,   69,
 /*  3350 */    70,  216,  216,   73,   74,   75,   76,   77,  216,   36,
 /*  3360 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  3370 */   216,  216,  216,   93,   94,  216,  216,   97,   98,   99,
 /*  3380 */   216,  216,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  3390 */   110,  216,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  3400 */   120,  121,    9,  216,  216,  216,  216,  216,  106,  107,
 /*  3410 */   108,  109,  110,   20,  112,  113,  114,  115,  116,  117,
 /*  3420 */   118,  119,  120,  121,  216,  216,  216,  216,  216,   36,
 /*  3430 */    37,  216,   39,  110,   41,   20,  113,  114,  115,  116,
 /*  3440 */   117,  118,  119,  120,  121,  216,  216,  216,  216,  216,
 /*  3450 */   216,   36,  216,  216,   39,   62,  216,  216,  216,  216,
 /*  3460 */   216,  216,   69,   70,  216,  216,   73,   74,   75,   76,
 /*  3470 */    77,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  3480 */   216,  216,  216,  216,  216,  216,   93,   94,  216,  216,
 /*  3490 */    97,   98,   99,  216,  216,  102,  103,  104,  105,  106,
 /*  3500 */   107,  108,  109,  110,  216,  112,  113,  114,  115,  116,
 /*  3510 */   117,  118,  119,  120,  121,    9,  216,  216,  216,  141,
 /*  3520 */   216,  106,  107,  108,  109,  110,   20,  112,  113,  114,
 /*  3530 */   115,  116,  117,  118,  119,  120,  121,  216,  216,  216,
 /*  3540 */   216,  163,   36,   37,  216,   39,  216,   41,  216,  216,
 /*  3550 */   216,  216,  216,  216,  216,  216,  216,  179,  180,  181,
 /*  3560 */   182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
 /*  3570 */   192,  216,  216,  195,  196,   69,   70,  199,  200,   73,
 /*  3580 */    74,   75,   76,   77,  144,  207,  208,  216,  216,  216,
 /*  3590 */   216,  151,  216,  216,  216,  216,  156,  157,  216,   93,
 /*  3600 */    94,  216,  216,   97,   98,   99,  216,  216,  102,  103,
 /*  3610 */   104,  105,  106,  107,  108,  109,  110,  216,  112,  113,
 /*  3620 */   114,  115,  116,  117,  118,  119,  120,  121,  141,  142,
 /*  3630 */   216,  144,  216,  216,  216,  216,  216,  216,  151,  216,
 /*  3640 */   200,  201,  202,  203,  216,  216,  216,  207,  208,  216,
 /*  3650 */   163,  164,  141,  216,  216,  216,  169,  216,  216,  216,
 /*  3660 */   216,  216,  216,  176,  177,  178,  179,  180,  181,  182,
 /*  3670 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  3680 */   216,  216,  216,  216,  216,  216,  199,  200,  201,  202,
 /*  3690 */   203,  216,  216,  216,  207,  208,  185,  186,  187,  188,
 /*  3700 */   189,  190,  191,  192,  216,    9,  216,  216,  216,  216,
 /*  3710 */   199,  200,  216,  216,  216,  216,   20,  141,  207,  208,
 /*  3720 */   144,  216,  216,  216,  216,  216,  216,  151,  216,  216,
 /*  3730 */   216,  216,   36,   37,  216,   39,  216,   41,  216,  163,
 /*  3740 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  3750 */   216,  216,  176,  216,  216,  179,  180,  181,  182,  183,
 /*  3760 */   184,  185,  186,  187,  188,  189,  190,  191,  192,  193,
 /*  3770 */   216,  216,  216,  216,  216,  199,  200,  201,  202,  203,
 /*  3780 */   216,  216,  216,  207,  208,  209,  210,  211,  212,   93,
 /*  3790 */    94,  216,  216,   97,   98,   99,  216,  216,  102,  103,
 /*  3800 */   104,  105,  106,  107,  108,  109,  110,  216,  112,  113,
 /*  3810 */   114,  115,  116,  117,  118,  119,  120,  121,  141,  142,
 /*  3820 */   216,  144,  216,  216,  216,  216,  216,  216,  151,  216,
 /*  3830 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  3840 */   163,  164,  144,  216,  216,  216,  216,  216,  216,  151,
 /*  3850 */   216,  216,  216,  176,  177,  178,  179,  180,  181,  182,
 /*  3860 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  3870 */   216,  216,  216,  216,  216,  216,  199,  200,  201,  202,
 /*  3880 */   203,  216,  216,  216,  207,  208,  216,  216,  216,  216,
 /*  3890 */   216,  193,  216,  216,  141,  142,  216,  144,  200,  201,
 /*  3900 */   202,  203,  216,  216,  151,  207,  208,  209,  210,  211,
 /*  3910 */   212,  216,  216,  216,  216,  216,  163,  164,  216,  216,
 /*  3920 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  176,
 /*  3930 */   177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
 /*  3940 */   187,  188,  189,  190,  191,  192,  216,  141,  142,  216,
 /*  3950 */   144,  216,  199,  200,  201,  202,  203,  151,  216,  216,
 /*  3960 */   207,  208,  216,  216,  216,  216,  216,  216,  216,  163,
 /*  3970 */   164,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  3980 */   216,  216,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  3990 */   184,  185,  186,  187,  188,  189,  190,  191,  192,  216,
 /*  4000 */   141,  142,  216,  144,  216,  199,  200,  201,  202,  203,
 /*  4010 */   151,  216,  216,  207,  208,  216,  216,  216,  141,  216,
 /*  4020 */   216,  144,  163,  164,  216,  216,  216,  216,  151,  216,
 /*  4030 */   216,  216,  216,  216,  216,  176,  177,  178,  179,  180,
 /*  4040 */   181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  4050 */   191,  192,  216,  216,  216,  216,  216,  216,  199,  200,
 /*  4060 */   201,  202,  203,  216,  216,  216,  207,  208,  216,  216,
 /*  4070 */   193,  141,  142,  216,  144,  216,  199,  200,  201,  202,
 /*  4080 */   203,  151,  216,  216,  207,  208,  209,  210,  211,  212,
 /*  4090 */   213,  216,  215,  163,  164,  216,  216,  216,  216,  216,
 /*  4100 */   216,  216,  216,  216,  216,  216,  176,  177,  178,  179,
 /*  4110 */   180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
 /*  4120 */   190,  191,  192,  216,  141,  142,  216,  144,  216,  199,
 /*  4130 */   200,  201,  202,  203,  151,  216,  216,  207,  208,  216,
 /*  4140 */   216,  216,  216,  216,  216,  216,  163,  164,  216,  216,
 /*  4150 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  176,
 /*  4160 */   177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
 /*  4170 */   187,  188,  189,  190,  191,  192,  216,  141,  142,  216,
 /*  4180 */   144,  216,  199,  200,  201,  202,  203,  151,  216,  216,
 /*  4190 */   207,  208,  216,  216,  216,  216,  216,  216,  216,  163,
 /*  4200 */   164,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  4210 */   216,  216,  176,  177,  178,  179,  180,  181,  182,  183,
 /*  4220 */   184,  185,  186,  187,  188,  189,  190,  191,  192,  216,
 /*  4230 */   216,  216,  216,  216,    9,  199,  200,  201,  202,  203,
 /*  4240 */   216,  216,  216,  207,  208,   20,   21,   22,  141,  142,
 /*  4250 */   216,  144,  216,  216,  216,  216,  216,  216,  151,  216,
 /*  4260 */   216,  216,   37,  216,   39,  216,   41,  216,  216,  216,
 /*  4270 */   163,  164,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  4280 */   216,  216,  216,  176,  177,  178,  179,  180,  181,  182,
 /*  4290 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  4300 */   216,  216,  216,  141,  216,  216,  199,  200,  201,  202,
 /*  4310 */   203,  216,  216,  216,  207,  208,  216,  216,   93,   94,
 /*  4320 */   216,  216,   97,   98,   99,  163,  216,  102,  103,  104,
 /*  4330 */   105,  106,  107,  108,  109,  110,  216,  112,  176,  216,
 /*  4340 */   216,  179,  180,  181,  182,  183,  184,  185,  186,  187,
 /*  4350 */   188,  189,  190,  191,  192,  141,    9,  216,  216,  216,
 /*  4360 */   216,  199,  200,  216,  216,  216,  216,   20,  216,  207,
 /*  4370 */   208,  216,  216,  216,  216,  216,  216,  163,  216,  216,
 /*  4380 */   216,  216,  216,  216,   37,  216,   39,   40,   41,  216,
 /*  4390 */   176,  216,  216,  179,  180,  181,  182,  183,  184,  185,
 /*  4400 */   186,  187,  188,  189,  190,  191,  192,    9,  216,  216,
 /*  4410 */   216,  216,  216,  199,  200,  216,  216,  216,   20,  216,
 /*  4420 */   216,  207,  208,  216,  216,  216,  216,  141,  216,  216,
 /*  4430 */   216,  216,    9,  216,  216,   37,  216,   39,  216,   41,
 /*  4440 */    93,   94,  216,   20,   97,   98,   99,  216,  216,  102,
 /*  4450 */   103,  104,  105,  106,  107,  108,  109,  110,  216,  112,
 /*  4460 */    37,  216,   39,  216,   41,   42,  216,  216,  216,   71,
 /*  4470 */   184,  185,  186,  187,  188,  189,  190,  191,  192,  216,
 /*  4480 */   216,  216,  216,  216,  216,  199,  200,  216,  216,  216,
 /*  4490 */   216,   93,   94,  207,  208,   97,   98,   99,  216,  216,
 /*  4500 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  216,
 /*  4510 */   112,  216,    9,  216,  216,  216,   93,   94,  216,  141,
 /*  4520 */    97,   98,   99,   20,   21,  102,  103,  104,  105,  106,
 /*  4530 */   107,  108,  109,  110,  216,  112,  216,  216,  216,  216,
 /*  4540 */    37,  163,   39,  216,   41,  216,  216,  216,  216,  216,
 /*  4550 */   216,  216,  216,  216,  216,  216,  216,  179,  180,  181,
 /*  4560 */   182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
 /*  4570 */   192,  216,  216,  195,  216,  216,  216,  199,  200,  216,
 /*  4580 */   216,  141,  216,  216,  216,  207,  208,  216,  216,  216,
 /*  4590 */   216,  216,  216,  216,  216,  216,   93,   94,  216,  216,
 /*  4600 */    97,   98,   99,  163,  216,  102,  103,  104,  105,  106,
 /*  4610 */   107,  108,  109,  110,  216,  112,  216,  216,  216,  179,
 /*  4620 */   180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
 /*  4630 */   190,  191,  192,    9,  141,  195,  216,  216,  216,  199,
 /*  4640 */   200,  216,  216,  216,   20,  216,  216,  207,  208,  216,
 /*  4650 */   216,  216,  216,  216,  216,  216,  163,  216,  216,  216,
 /*  4660 */   216,   37,  216,   39,  216,   41,  216,  216,  216,  216,
 /*  4670 */   216,  216,  179,  180,  181,  182,  183,  184,  185,  186,
 /*  4680 */   187,  188,  189,  190,  191,  192,  216,  216,  216,  216,
 /*  4690 */   216,  216,  199,  200,  216,  216,  216,  216,  216,  216,
 /*  4700 */   207,  208,  141,  216,  141,  216,  216,  144,  216,  216,
 /*  4710 */   216,  216,  216,  216,  151,  216,  216,   93,   94,  216,
 /*  4720 */   216,   97,   98,   99,  163,  216,  102,  103,  104,  105,
 /*  4730 */   106,  107,  108,  109,  110,  216,  112,  216,  216,  216,
 /*  4740 */   179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  4750 */   189,  190,  191,  192,  141,  216,  193,  216,  216,  216,
 /*  4760 */   199,  200,  199,  200,  201,  202,  203,  216,  207,  208,
 /*  4770 */   207,  208,  209,  210,  211,  212,  163,  216,  216,  216,
 /*  4780 */   216,  216,  216,  216,  216,  216,  141,  216,  216,  216,
 /*  4790 */   216,  216,  179,  180,  181,  182,  183,  184,  185,  186,
 /*  4800 */   187,  188,  189,  190,  191,  192,  216,  216,  163,  216,
 /*  4810 */   216,  216,  199,  200,  216,  216,  141,  216,  216,  216,
 /*  4820 */   207,  208,  216,  216,  179,  180,  181,  182,  183,  184,
 /*  4830 */   185,  186,  187,  188,  189,  190,  191,  192,  163,  216,
 /*  4840 */   216,  216,  216,  216,  199,  200,  216,  216,  216,  216,
 /*  4850 */   216,  216,  207,  208,  179,  180,  181,  182,  183,  184,
 /*  4860 */   185,  186,  187,  188,  189,  190,  191,  192,  141,  216,
 /*  4870 */   216,  216,  216,  216,  199,  200,  216,  216,  216,  216,
 /*  4880 */   216,  216,  207,  208,  216,  216,  216,  216,  216,  216,
 /*  4890 */   163,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  4900 */   216,  216,  141,  216,  216,  216,  179,  180,  181,  182,
 /*  4910 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  4920 */   216,  216,  216,  216,  163,  216,  199,  200,  216,  216,
 /*  4930 */   216,  216,  216,  216,  207,  208,  141,  216,  216,  216,
 /*  4940 */   179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  4950 */   189,  190,  191,  192,  216,  216,  216,  216,  163,  216,
 /*  4960 */   199,  200,  216,  216,  216,  216,  141,  216,  207,  208,
 /*  4970 */   216,  216,  216,  216,  179,  180,  181,  182,  183,  184,
 /*  4980 */   185,  186,  187,  188,  189,  190,  191,  192,  163,  216,
 /*  4990 */   216,  216,  216,  216,  199,  200,  141,  216,  216,  216,
 /*  5000 */   216,  216,  207,  208,  179,  180,  181,  182,  183,  184,
 /*  5010 */   185,  186,  187,  188,  189,  190,  191,  192,  163,  216,
 /*  5020 */   216,  216,  216,  216,  199,  200,  216,  216,  216,  216,
 /*  5030 */   216,  216,  207,  208,  179,  180,  181,  182,  183,  184,
 /*  5040 */   185,  186,  187,  188,  189,  190,  191,  192,  141,  216,
 /*  5050 */   216,  216,  216,  216,  199,  200,  216,  216,  216,  216,
 /*  5060 */   216,  216,  207,  208,  216,  216,  216,  216,  216,  216,
 /*  5070 */   163,  216,  216,  216,  216,  216,  216,  216,  141,  216,
 /*  5080 */   216,  216,  216,  216,  216,  216,  179,  180,  181,  182,
 /*  5090 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  5100 */   163,  216,  216,  216,  216,  216,  199,  200,  141,  216,
 /*  5110 */   216,  216,  216,  216,  207,  208,  179,  180,  181,  182,
 /*  5120 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  5130 */   163,  216,  216,  216,  216,  216,  199,  200,  141,  216,
 /*  5140 */   216,  216,  216,  216,  207,  208,  179,  180,  181,  182,
 /*  5150 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  5160 */   163,  216,  216,  216,  216,  216,  199,  200,  216,  216,
 /*  5170 */   216,  216,  216,  216,  207,  208,  179,  180,  181,  182,
 /*  5180 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  5190 */   141,  216,  216,  216,  216,  216,  199,  200,  216,  216,
 /*  5200 */   216,  216,  216,  216,  207,  208,  216,  216,  216,  216,
 /*  5210 */   216,  216,  163,  216,  216,  216,  216,  216,  216,  216,
 /*  5220 */   141,  216,  216,  216,  216,  216,  216,  216,  179,  180,
 /*  5230 */   181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5240 */   191,  192,  163,  216,  216,  216,  216,  216,  199,  200,
 /*  5250 */   141,  216,  216,  216,  216,  216,  207,  208,  179,  180,
 /*  5260 */   181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5270 */   191,  192,  163,  216,  216,  216,  216,  216,  199,  200,
 /*  5280 */   141,  216,  216,  216,  216,  216,  207,  208,  179,  180,
 /*  5290 */   181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5300 */   191,  192,  216,  216,  216,  216,  216,  216,  199,  200,
 /*  5310 */   216,  216,  216,  216,  216,  216,  207,  208,  179,  180,
 /*  5320 */   181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5330 */   191,  192,  141,  216,  216,  216,  216,  216,  199,  200,
 /*  5340 */   216,  216,  216,  216,  216,  216,  207,  208,  216,  216,
 /*  5350 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  5360 */   216,  216,  141,  216,  216,  216,  216,  216,  216,  216,
 /*  5370 */   216,  180,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  5380 */   189,  190,  191,  192,  216,  216,  216,  216,  216,  216,
 /*  5390 */   199,  200,  141,  216,  216,  216,  216,  216,  207,  208,
 /*  5400 */   216,  180,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  5410 */   189,  190,  191,  192,  216,  216,  216,  216,  216,  216,
 /*  5420 */   199,  200,  141,  216,  216,  216,  216,  216,  207,  208,
 /*  5430 */   216,  216,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  5440 */   189,  190,  191,  192,  216,  216,  216,  216,  216,  216,
 /*  5450 */   199,  200,  216,  216,  216,  216,  216,  216,  207,  208,
 /*  5460 */   141,  216,  181,  182,  183,  184,  185,  186,  187,  188,
 /*  5470 */   189,  190,  191,  192,  216,  216,  216,  216,  216,  216,
 /*  5480 */   199,  200,  216,  216,  216,  216,  216,  216,  207,  208,
 /*  5490 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  5500 */   181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5510 */   191,  192,  216,  141,  216,  216,  216,  216,  199,  200,
 /*  5520 */   216,  216,  216,  216,  216,  216,  207,  208,  216,  216,
 /*  5530 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  5540 */   141,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  5550 */   216,  216,  216,  216,  182,  183,  184,  185,  186,  187,
 /*  5560 */   188,  189,  190,  191,  192,  216,  216,  216,  216,  216,
 /*  5570 */   141,  199,  200,  216,  216,  216,  216,  216,  216,  207,
 /*  5580 */   208,  182,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5590 */   191,  192,  216,  216,  216,  216,  216,  216,  199,  200,
 /*  5600 */   141,  216,  216,  216,  216,  216,  207,  208,  216,  216,
 /*  5610 */   216,  216,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5620 */   191,  192,  216,  216,  216,  216,  216,  216,  199,  200,
 /*  5630 */   141,  216,  216,  216,  216,  216,  207,  208,  216,  216,
 /*  5640 */   216,  216,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5650 */   191,  192,  141,  216,  216,  144,  216,  216,  199,  200,
 /*  5660 */   216,  216,  151,  216,  216,  216,  207,  208,  216,  216,
 /*  5670 */   216,  216,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  5680 */   191,  192,  141,  216,  216,  216,  216,  216,  199,  200,
 /*  5690 */   216,  216,  216,  216,  216,  216,  207,  208,  216,  216,
 /*  5700 */   216,  216,  216,  216,  193,  216,  216,  216,  216,  216,
 /*  5710 */   199,  200,  201,  202,  203,  216,  216,  216,  207,  208,
 /*  5720 */   209,  210,  211,  212,  183,  184,  185,  186,  187,  188,
 /*  5730 */   189,  190,  191,  192,  216,  216,  216,  216,  216,  216,
 /*  5740 */   199,  200,  141,  216,  216,  216,  216,  216,  207,  208,
 /*  5750 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  5760 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  5770 */   216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
 /*  5780 */   216,  216,  216,  216,  216,  184,  185,  186,  187,  188,
 /*  5790 */   189,  190,  191,  192,  216,  216,  216,  216,  216,  216,
 /*  5800 */   199,  200,  216,  216,  216,  216,  216,  216,  207,  208,
);
    const YY_SHIFT_USE_DFLT = -115;
    const YY_SHIFT_MAX = 291;
    static public $yy_shift_ofst = array(
 /*     0 */  1347,   -9,  217,  104, 1121,  330,  556, 1234, 1347, 1347,
 /*    10 */  1347, 1347, 1347, 1347, 1008,  895,  669,  782,  443, 1347,
 /*    20 */  1347, 1347, 1347, 1347, 1460, 1460, 1460, 1460, 1460, 3393,
 /*    30 */  3696, 3280, 3506, 3506, 3506, 3506, 3506, 3506, 3506, 4225,
 /*    40 */  4503, 4503, 4347, 4624, 4398, 4624, 4624, 4624, 4624, 4624,
 /*    50 */  4624, 4624, 4624, 4624, 4624, 4624, 4624, 4624, 4624, 4624,
 /*    60 */  4624, 4624, 4624, 4624, 4624, 4624, 4624, 3302, 4624, 4624,
 /*    70 */  4624, 4624, 4624, 4624, 3415, 3415, 4624, 4624, 4624, 4624,
 /*    80 */  3323, 3323, 3323, 3323, 4624, 4624, 4624, 4423, 4624, 4624,
 /*    90 */  4624, 4624, 4624, 4624, 4624, 3194, 3215,   82,   82, 3323,
 /*   100 */   308, 3323, 3323,  298,  308,  534,  534,  129,  129,  498,
 /*   110 */   115,  115,  115,  723,  502,  477,  418,  571,  643,  677,
 /*   120 */   590,  660,  604,  138,  499,  822,  810,  764,  257,    6,
 /*   130 */   235,  163,  163,  163,   94,  582,  240,  240,  240,  600,
 /*   140 */   240,  240,  695,  693,  686,  240,  679,  257,  554,   -4,
 /*   150 */    16,   16,   16,  -81,  -19,  -19,  -19, -114,  338,  372,
 /*   160 */   215,  221,  549,  221,  109,  325,  385,  221,    0,  109,
 /*   170 */   436,  109,  -98,   32,  -11,   33,  451,  355,   77,  488,
 /*   180 */   320,  352,  334,   87,  355,  500,  114,  458,   87,   87,
 /*   190 */   550,  375,  225,  289,   77,  -47,  173,   77,  -31,  -31,
 /*   200 */   102,   77,  110,   87,   77,  -31,   52,  649,  659,  711,
 /*   210 */   694,  662,  543,  415,  178,  181,  256,  108,  519,  438,
 /*   220 */   452,  403,  304,  691,  700,  793,  792,  787,  757,  801,
 /*   230 */   791,  806,  758,  803,  786,  777,  776,  719,  726,  712,
 /*   240 */   718,  722,  728,  762,  775,  774,  681,  753,  892,  740,
 /*   250 */   772,  763,  707,  630,  713,  783,  808,  799,  778,  769,
 /*   260 */   781,  300,  401,  193,  -35,   56,  710,  671,  610,  478,
 /*   270 */   831,  577,  670,  903,  902,  888,  900,  899,  897,  825,
 /*   280 */   824,  788,  871,  896,  864,  869,  868,  823,  829,  915,
 /*   290 */   893,  883,
);
    const YY_REDUCE_USE_DFLT = -1;
    const YY_REDUCE_MAX = 148;
    static public $yy_reduce_ofst = array(
 /*     0 */  1725, 1457, 1554, 1638, 1899, 1812, 2247, 1986, 2595, 2334,
 /*    10 */  2421, 2160, 2073, 2508, 2679, 2679, 2679, 2679, 2679, 2679,
 /*    20 */  2679, 2679, 2679, 2679, 2845, 3094, 3011, 2928, 2762, 3487,
 /*    30 */  3576, 3930, 3983, 4036, 4107, 3859, 3806, 3677, 3753, 3378,
 /*    40 */  4378, 4440, 4162, 4214, 4727, 4795, 4825, 4907, 4855, 4761,
 /*    50 */  4645, 4937, 4675, 5109, 5049, 5079, 4967, 4997, 4613, 4493,
 /*    60 */  4561, 5139, 5221, 5191, 5251, 5281, 5319, 3877, 5399, 5372,
 /*    70 */  5429, 5459, 5489, 5541, 4563, 5511, 5601, 4286, 3511, 2710,
 /*    80 */    95, 1338, 1225, 3698, 2020, 1933, 1846, 2107, 2107, 2194,
 /*    90 */  2455, 2368, 2281, 1672, 1463, 3440,  157, 2625, 2542,  326,
 /*   100 */    84,  665,  552,  773, 1345,  428,  202,  785,   50,  188,
 /*   110 */   306,  309,  227,  467,  480,  433,  441,  255,  453,  545,
 /*   120 */   521,  255,  433,  386,  441,  359,  311,  255,  434,  746,
 /*   130 */   721,  664,  680,  708,  739,  732,  761,  790,  765,  714,
 /*   140 */   779,  706,  716,  804,  795,  684,  491,  536,  399,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 1 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 2 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 3 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 4 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 5 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 6 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 7 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 8 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 9 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 10 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 11 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 12 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 13 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 14 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 15 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 16 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 17 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 18 */ array(9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 19 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 20 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 21 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 22 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 23 */ array(9, 19, 20, 21, 23, 24, 25, 26, 33, 36, 37, 39, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 24 */ array(9, 19, 20, 21, 23, 24, 25, 26, 36, 37, 39, 41, 43, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 25 */ array(9, 19, 20, 21, 23, 24, 25, 26, 36, 37, 39, 41, 43, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 26 */ array(9, 19, 20, 21, 23, 24, 25, 26, 36, 37, 39, 41, 43, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 27 */ array(9, 19, 20, 21, 23, 24, 25, 26, 36, 37, 39, 41, 43, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 28 */ array(9, 19, 20, 21, 23, 24, 25, 26, 36, 37, 39, 41, 43, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 29 */ array(9, 20, 36, 37, 39, 41, 62, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 30 */ array(9, 20, 36, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 31 */ array(9, 20, 23, 36, 37, 39, 41, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 32 */ array(9, 20, 36, 37, 39, 41, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 33 */ array(9, 20, 36, 37, 39, 41, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 34 */ array(9, 20, 36, 37, 39, 41, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 35 */ array(9, 20, 36, 37, 39, 41, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 36 */ array(9, 20, 36, 37, 39, 41, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 37 */ array(9, 20, 36, 37, 39, 41, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 38 */ array(9, 20, 36, 37, 39, 41, 69, 70, 73, 74, 75, 76, 77, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 39 */ array(9, 20, 21, 22, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 40 */ array(9, 20, 21, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 41 */ array(9, 20, 21, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 42 */ array(9, 20, 37, 39, 40, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 43 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 44 */ array(9, 20, 37, 39, 41, 71, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 45 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 46 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 47 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 48 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 49 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 50 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 51 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 52 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 53 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 54 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 55 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 56 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 57 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 58 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 59 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 60 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 61 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 62 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 63 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 64 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 65 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 66 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 67 */ array(20, 36, 39, 45, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 68 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 69 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 70 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 71 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 72 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 73 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 74 */ array(20, 36, 39, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 75 */ array(20, 36, 39, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 76 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 77 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 78 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 79 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 80 */ array(36, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 81 */ array(36, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 82 */ array(36, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 83 */ array(36, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 84 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 85 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 86 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 87 */ array(9, 20, 37, 39, 41, 42, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 88 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 89 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 90 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 91 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 92 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 93 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 94 */ array(9, 20, 37, 39, 41, 93, 94, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 95 */ array(36, 40, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 96 */ array(24, 25, 26, 36, 41, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 97 */ array(20, 39, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 98 */ array(20, 39, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, ),
        /* 99 */ array(36, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 100 */ array(9, 20, 36, 37, 38, ),
        /* 101 */ array(36, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 102 */ array(36, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 103 */ array(110, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 104 */ array(9, 20, 36, 37, 38, ),
        /* 105 */ array(20, 39, 106, 107, 108, 109, 110, 112, ),
        /* 106 */ array(20, 39, 106, 107, 108, 109, 110, 112, ),
        /* 107 */ array(9, 20, 36, 37, ),
        /* 108 */ array(9, 20, 36, 37, ),
        /* 109 */ array(24, 25, 33, 45, 46, ),
        /* 110 */ array(20, 36, 37, 38, ),
        /* 111 */ array(20, 36, 37, 38, ),
        /* 112 */ array(20, 36, 37, 38, ),
        /* 113 */ array(24, 25, 33, 46, ),
        /* 114 */ array(22, 64, 65, ),
        /* 115 */ array(13, 44, 111, ),
        /* 116 */ array(35, 39, 71, ),
        /* 117 */ array(20, 110, ),
        /* 118 */ array(13, 44, ),
        /* 119 */ array(20, 22, ),
        /* 120 */ array(48, 49, ),
        /* 121 */ array(20, 110, ),
        /* 122 */ array(13, 44, ),
        /* 123 */ array(44, 111, ),
        /* 124 */ array(39, 71, ),
        /* 125 */ array(39, ),
        /* 126 */ array(44, ),
        /* 127 */ array(110, ),
        /* 128 */ array(61, ),
        /* 129 */ array(27, 31, 32, ),
        /* 130 */ array(22, 64, 65, ),
        /* 131 */ array(20, 36, 37, ),
        /* 132 */ array(20, 36, 37, ),
        /* 133 */ array(20, 36, 37, ),
        /* 134 */ array(24, 25, 26, ),
        /* 135 */ array(21, 23, ),
        /* 136 */ array(21, 23, ),
        /* 137 */ array(21, 23, ),
        /* 138 */ array(21, 23, ),
        /* 139 */ array(34, 45, ),
        /* 140 */ array(21, 23, ),
        /* 141 */ array(21, 23, ),
        /* 142 */ array(20, 21, ),
        /* 143 */ array(20, 21, ),
        /* 144 */ array(21, 23, ),
        /* 145 */ array(21, 23, ),
        /* 146 */ array(21, ),
        /* 147 */ array(61, ),
        /* 148 */ array(20, ),
        /* 149 */ array(5, 8, 35, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, ),
        /* 150 */ array(39, 71, 98, 99, 100, 101, ),
        /* 151 */ array(39, 71, 98, 99, 100, 101, ),
        /* 152 */ array(39, 71, 98, 99, 100, 101, ),
        /* 153 */ array(116, 117, 120, 121, ),
        /* 154 */ array(44, 45, 89, 90, ),
        /* 155 */ array(44, 45, 89, 90, ),
        /* 156 */ array(44, 45, 89, 90, ),
        /* 157 */ array(116, 117, 120, 121, ),
        /* 158 */ array(36, 37, 40, ),
        /* 159 */ array(115, 116, 120, ),
        /* 160 */ array(36, 37, 40, ),
        /* 161 */ array(7, 9, 10, ),
        /* 162 */ array(36, 37, 45, ),
        /* 163 */ array(7, 9, 10, ),
        /* 164 */ array(37, 95, 96, ),
        /* 165 */ array(36, 37, 45, ),
        /* 166 */ array(36, 37, 45, ),
        /* 167 */ array(7, 9, 10, ),
        /* 168 */ array(5, 8, 72, ),
        /* 169 */ array(37, 95, 96, ),
        /* 170 */ array(36, 37, 45, ),
        /* 171 */ array(37, 95, 96, ),
        /* 172 */ array(116, 120, ),
        /* 173 */ array(20, 110, ),
        /* 174 */ array(34, 40, ),
        /* 175 */ array(20, 23, ),
        /* 176 */ array(20, 23, ),
        /* 177 */ array(36, 37, ),
        /* 178 */ array(91, 92, ),
        /* 179 */ array(20, 42, ),
        /* 180 */ array(27, 111, ),
        /* 181 */ array(20, 42, ),
        /* 182 */ array(34, 45, ),
        /* 183 */ array(4, 88, ),
        /* 184 */ array(36, 37, ),
        /* 185 */ array(35, 71, ),
        /* 186 */ array(22, 34, ),
        /* 187 */ array(20, 110, ),
        /* 188 */ array(4, 88, ),
        /* 189 */ array(4, 88, ),
        /* 190 */ array(22, 34, ),
        /* 191 */ array(20, 110, ),
        /* 192 */ array(20, 37, ),
        /* 193 */ array(20, 23, ),
        /* 194 */ array(91, 92, ),
        /* 195 */ array(116, 120, ),
        /* 196 */ array(20, 23, ),
        /* 197 */ array(91, 92, ),
        /* 198 */ array(93, 94, ),
        /* 199 */ array(93, 94, ),
        /* 200 */ array(20, 37, ),
        /* 201 */ array(91, 92, ),
        /* 202 */ array(34, 40, ),
        /* 203 */ array(4, 88, ),
        /* 204 */ array(91, 92, ),
        /* 205 */ array(93, 94, ),
        /* 206 */ array(34, 40, ),
        /* 207 */ array(37, ),
        /* 208 */ array(39, ),
        /* 209 */ array(20, ),
        /* 210 */ array(23, ),
        /* 211 */ array(39, ),
        /* 212 */ array(40, ),
        /* 213 */ array(39, ),
        /* 214 */ array(37, ),
        /* 215 */ array(54, ),
        /* 216 */ array(23, ),
        /* 217 */ array(23, ),
        /* 218 */ array(13, ),
        /* 219 */ array(37, ),
        /* 220 */ array(39, ),
        /* 221 */ array(23, ),
        /* 222 */ array(44, ),
        /* 223 */ array(20, ),
        /* 224 */ array(40, ),
        /* 225 */ array(20, ),
        /* 226 */ array(20, ),
        /* 227 */ array(23, ),
        /* 228 */ array(40, ),
        /* 229 */ array(21, ),
        /* 230 */ array(23, ),
        /* 231 */ array(23, ),
        /* 232 */ array(72, ),
        /* 233 */ array(21, ),
        /* 234 */ array(40, ),
        /* 235 */ array(23, ),
        /* 236 */ array(23, ),
        /* 237 */ array(39, ),
        /* 238 */ array(35, ),
        /* 239 */ array(39, ),
        /* 240 */ array(23, ),
        /* 241 */ array(27, ),
        /* 242 */ array(36, ),
        /* 243 */ array(34, ),
        /* 244 */ array(23, ),
        /* 245 */ array(20, ),
        /* 246 */ array(111, ),
        /* 247 */ array(40, ),
        /* 248 */ array(21, ),
        /* 249 */ array(40, ),
        /* 250 */ array(23, ),
        /* 251 */ array(2, ),
        /* 252 */ array(27, ),
        /* 253 */ array(120, ),
        /* 254 */ array(44, ),
        /* 255 */ array(44, ),
        /* 256 */ array(20, ),
        /* 257 */ array(44, ),
        /* 258 */ array(39, ),
        /* 259 */ array(42, ),
        /* 260 */ array(39, ),
        /* 261 */ array(120, ),
        /* 262 */ array(40, ),
        /* 263 */ array(120, ),
        /* 264 */ array(44, ),
        /* 265 */ array(120, ),
        /* 266 */ array(23, ),
        /* 267 */ array(47, ),
        /* 268 */ array(120, ),
        /* 269 */ array(120, ),
        /* 270 */ array(13, ),
        /* 271 */ array(27, ),
        /* 272 */ array(9, ),
        /* 273 */ array(20, ),
        /* 274 */ array(9, ),
        /* 275 */ array(39, ),
        /* 276 */ array(40, ),
        /* 277 */ array(40, ),
        /* 278 */ array(13, ),
        /* 279 */ array(39, ),
        /* 280 */ array(23, ),
        /* 281 */ array(72, ),
        /* 282 */ array(34, ),
        /* 283 */ array(13, ),
        /* 284 */ array(13, ),
        /* 285 */ array(13, ),
        /* 286 */ array(39, ),
        /* 287 */ array(40, ),
        /* 288 */ array(40, ),
        /* 289 */ array(20, ),
        /* 290 */ array(40, ),
        /* 291 */ array(39, ),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
        /* 398 */ array(),
        /* 399 */ array(),
        /* 400 */ array(),
        /* 401 */ array(),
        /* 402 */ array(),
        /* 403 */ array(),
        /* 404 */ array(),
        /* 405 */ array(),
        /* 406 */ array(),
        /* 407 */ array(),
        /* 408 */ array(),
        /* 409 */ array(),
        /* 410 */ array(),
        /* 411 */ array(),
        /* 412 */ array(),
        /* 413 */ array(),
        /* 414 */ array(),
        /* 415 */ array(),
        /* 416 */ array(),
        /* 417 */ array(),
        /* 418 */ array(),
        /* 419 */ array(),
        /* 420 */ array(),
        /* 421 */ array(),
        /* 422 */ array(),
        /* 423 */ array(),
        /* 424 */ array(),
        /* 425 */ array(),
        /* 426 */ array(),
        /* 427 */ array(),
        /* 428 */ array(),
        /* 429 */ array(),
        /* 430 */ array(),
        /* 431 */ array(),
        /* 432 */ array(),
        /* 433 */ array(),
        /* 434 */ array(),
        /* 435 */ array(),
        /* 436 */ array(),
        /* 437 */ array(),
        /* 438 */ array(),
        /* 439 */ array(),
        /* 440 */ array(),
        /* 441 */ array(),
        /* 442 */ array(),
        /* 443 */ array(),
        /* 444 */ array(),
        /* 445 */ array(),
        /* 446 */ array(),
        /* 447 */ array(),
        /* 448 */ array(),
        /* 449 */ array(),
        /* 450 */ array(),
        /* 451 */ array(),
        /* 452 */ array(),
        /* 453 */ array(),
        /* 454 */ array(),
        /* 455 */ array(),
        /* 456 */ array(),
        /* 457 */ array(),
        /* 458 */ array(),
        /* 459 */ array(),
        /* 460 */ array(),
        /* 461 */ array(),
        /* 462 */ array(),
        /* 463 */ array(),
        /* 464 */ array(),
        /* 465 */ array(),
        /* 466 */ array(),
        /* 467 */ array(),
        /* 468 */ array(),
        /* 469 */ array(),
        /* 470 */ array(),
        /* 471 */ array(),
        /* 472 */ array(),
        /* 473 */ array(),
        /* 474 */ array(),
        /* 475 */ array(),
        /* 476 */ array(),
        /* 477 */ array(),
        /* 478 */ array(),
        /* 479 */ array(),
        /* 480 */ array(),
        /* 481 */ array(),
        /* 482 */ array(),
        /* 483 */ array(),
        /* 484 */ array(),
        /* 485 */ array(),
        /* 486 */ array(),
        /* 487 */ array(),
        /* 488 */ array(),
        /* 489 */ array(),
        /* 490 */ array(),
        /* 491 */ array(),
        /* 492 */ array(),
        /* 493 */ array(),
        /* 494 */ array(),
        /* 495 */ array(),
        /* 496 */ array(),
        /* 497 */ array(),
        /* 498 */ array(),
        /* 499 */ array(),
        /* 500 */ array(),
        /* 501 */ array(),
        /* 502 */ array(),
        /* 503 */ array(),
        /* 504 */ array(),
        /* 505 */ array(),
        /* 506 */ array(),
        /* 507 */ array(),
        /* 508 */ array(),
        /* 509 */ array(),
        /* 510 */ array(),
        /* 511 */ array(),
        /* 512 */ array(),
        /* 513 */ array(),
        /* 514 */ array(),
        /* 515 */ array(),
        /* 516 */ array(),
        /* 517 */ array(),
        /* 518 */ array(),
        /* 519 */ array(),
        /* 520 */ array(),
        /* 521 */ array(),
        /* 522 */ array(),
        /* 523 */ array(),
        /* 524 */ array(),
        /* 525 */ array(),
        /* 526 */ array(),
        /* 527 */ array(),
        /* 528 */ array(),
        /* 529 */ array(),
        /* 530 */ array(),
        /* 531 */ array(),
        /* 532 */ array(),
        /* 533 */ array(),
);
    static public $yy_default = array(
 /*     0 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*    10 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  616,
 /*    20 */   648,  534,  649,  615,  834,  834,  834,  834,  834,  834,
 /*    30 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*    40 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*    50 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*    60 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*    70 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*    80 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*    90 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*   100 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*   110 */   834,  834,  834,  834,  834,  787,  740,  834,  778,  834,
 /*   120 */   611,  834,  787,  786,  834,  834,  781,  834,  834,  834,
 /*   130 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*   140 */   834,  834,  834,  834,  834,  834,  834,  633,  834,  684,
 /*   150 */   722,  718,  719,  834,  693,  692,  694,  834,  834,  828,
 /*   160 */   834,  685,  834,  687,  705,  834,  834,  686,  834,  703,
 /*   170 */   834,  704,  830,  834,  834,  834,  834,  798,  698,  834,
 /*   180 */   760,  834,  834,  689,  800,  740,  834,  834,  690,  688,
 /*   190 */   834,  834,  834,  834,  695,  829,  834,  699,  700,  702,
 /*   200 */   834,  696,  834,  691,  697,  701,  834,  834,  834,  834,
 /*   210 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*   220 */   834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
 /*   230 */   834,  834,  834,  834,  834,  834,  834,  834,  573,  834,
 /*   240 */   834,  834,  601,  662,  834,  834,  760,  834,  834,  834,
 /*   250 */   834,  651,  834,  826,  834,  834,  834,  834,  834,  834,
 /*   260 */   834,  831,  834,  832,  834,  833,  834,  834,  827,  825,
 /*   270 */   777,  834,  791,  834,  793,  834,  834,  834,  834,  834,
 /*   280 */   834,  834,  661,  834,  788,  834,  666,  834,  834,  834,
 /*   290 */   834,  773,  608,  780,  628,  758,  623,  629,  779,  610,
 /*   300 */   613,  609,  622,  618,  625,  624,  619,  630,  765,  766,
 /*   310 */   759,  621,  627,  782,  626,  761,  617,  620,  802,  647,
 /*   320 */   540,  599,  614,  585,  539,  551,  587,  612,  637,  634,
 /*   330 */   646,  639,  638,  641,  640,  537,  552,  553,  561,  560,
 /*   340 */   535,  544,  538,  545,  559,  563,  555,  554,  556,  557,
 /*   350 */   562,  558,  541,  542,  643,  642,  635,  565,  644,  663,
 /*   360 */   645,  567,  569,  632,  631,  756,  574,  571,  636,  564,
 /*   370 */   547,  543,  654,  546,  655,  656,  536,  657,  548,  653,
 /*   380 */   650,  577,  576,  652,  549,  550,  757,  600,  748,  747,
 /*   390 */   774,  745,  746,  796,  797,  772,  744,  775,  783,  739,
 /*   400 */   784,  741,  742,  743,  776,  734,  731,  666,  665,  738,
 /*   410 */   733,  667,  669,  668,  752,  755,  750,  658,  709,  749,
 /*   420 */   751,  754,  753,  660,  659,  794,  792,  790,  795,  820,
 /*   430 */   736,  817,  735,  789,  773,  823,  818,  815,  821,  824,
 /*   440 */   816,  813,  814,  737,  808,  770,  769,  771,  807,  806,
 /*   450 */   785,  809,  819,  763,  810,  811,  764,  822,  768,  767,
 /*   460 */   670,  671,  578,  605,  607,  711,  579,  583,  582,  581,
 /*   470 */   606,  724,  602,  714,  575,  713,  603,  604,  712,  723,
 /*   480 */   710,  595,  594,  593,  596,  597,  598,  592,  591,  590,
 /*   490 */   580,  812,  584,  586,  706,  589,  588,  715,  568,  676,
 /*   500 */   720,  675,  708,  677,  679,  678,  721,  674,  732,  725,
 /*   510 */   672,  730,  728,  729,  726,  664,  680,  804,  805,  803,
 /*   520 */   570,  572,  566,  716,  801,  717,  682,  681,  727,  707,
 /*   530 */   683,  799,  762,  673,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 217;
    const YYSTACKDEPTH = 100;
    const block_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 534;
    const YYNRULE = 300;
    const YYERRORSYMBOL = 122;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'NOTEQUAL',    
  'EQUAL',         'LOGICALAND',    'BINARYAND',     'BINARYOR',    
  'LOGICALOR',     'AMPERSAND',     'BINARYXOR',     'UINDIRECTION',
  'UADRESS',       'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',       
  'UBRACKET',      'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',
  'IDENTIFIER',    'LEFTFIGUREBRACKET',  'RIGHTFIGUREBRACKET',  'SEMICOLON',   
  'CLASSKWD',      'STRUCTKWD',     'UNIONKWD',      'COLON',       
  'PUBLICKWD',     'PROTECTEDKWD',  'PRIVATEKWD',    'SIGNALSKWD',  
  'SLOTSKWD',      'ENUMKWD',       'COMMA',         'ASSIGN',      
  'CONSTKWD',      'MULTIPLY',      'OPERATOROVERLOADDECLARATION',  'LEFTROUNDBRACKET',
  'RIGHTROUNDBRACKET',  'BINARYNOT',     'CUSTOMTYPENAME',  'TEMPLATEKWD', 
  'LESSER',        'GREATER',       'TYPENAMEKWD',   'PREPROCESSOR_ENDIF',
  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ELSE',  'PREPROCESSOR_IFDEF',  'PREPROCESSOR_IF',
  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_INCLUDE',  'WHILEKWD',      'DOKWD',       
  'FORKWD',        'RETURNKWD',     'CONTINUEKWD',   'GOTOKWD',     
  'TRYKWD',        'CATCHKWD',      'ELLIPSIS',      'SWITCHKWD',   
  'CASEKWD',       'DEFAULTKWD',    'IFKWD',         'TYPEDEF',     
  'BREAKKWD',      'NEWKWD',        'DELETE',        'LEFTSQUAREBRACKET',
  'RIGHTSQUAREBRACKET',  'STATICKWD',     'EXTERNKWD',     'REGISTERKWD', 
  'VOLATILEKWD',   'FRIENDKWD',     'BINARYXOR_ASSIGN',  'BINARYOR_ASSIGN',
  'BINARYAND_ASSIGN',  'RIGHTSHIFT_ASSIGN',  'LEFTSHIFT_ASSIGN',  'MODULO_ASSIGN',
  'DIVISION_ASSIGN',  'MULTIPLY_ASSIGN',  'PLUS_ASSIGN',   'MINUS_ASSIGN',
  'NOT_EQUAL',     'LESSER_OR_EQUAL',  'GREATER_OR_EQUAL',  'LEFTSHIFT',   
  'RIGHTSHIFT',    'MINUS',         'PLUS',          'MODULOSIGN',  
  'DIVISION',      'LOGICALNOT',    'DECREMENT',     'INCREMENT',   
  'DOT',           'RIGHTARROW',    'CONST_CAST',    'STATIC_CAST', 
  'DYNAMIC_CAST',  'REINTERPRET_CAST',  'NUMERIC',       'CHARACTER',   
  'STRING',        'PREPROCESSOR_STRINGIFY',  'TYPENAME',      'PREPROCESSOR_CONCAT',
  'SIZEOF',        'VOID',          'FLOAT',         'DOUBLE',      
  'LONG',          'CHAR',          'SIGNED',        'UNSIGNED',    
  'INT',           'SHORT',         'error',         'program',     
  'stmt_list',     'stmt_or_defined_macro',  'stmt',          'namespace_body',
  'class_or_union_or_struct',  'type_meta_specifier_with_template_def',  'structure_body',  'template_def',
  'type_meta_specifier',  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',  'visibility_spec_full',
  'visibility_spec',  'signal_slots',  'enum_body',     'enum_value_list',
  'enum_value',    'expr_atom',     'type_or_type_with_qualifier',  'function_definition_without_type',
  'type',          'lvalue',        'formal_args_list_with_or_without_const',  'function_body',
  'operator_overload_declaration_type_modificators',  'operator_overload_declaration_ptr',  'operator_overload_declaration_without_type',  'non_const_type',
  'template_spec_list',  'template_spec',  'template_typename',  'formal_args_list',
  'arg_list',      'arg',           'preprocessor_cond',  'preprocessor_else_clauses',
  'preprocessor_elif_list',  'preprocessor_else',  'preprocessor_elif',  'expr_prec_10',
  'expr_prec_11',  'try_catch',     'try',           'catch_list',  
  'catch',         'expr_prec_11_or_ellipsis',  'switch_stmt',   'switch_case_list',
  'case',          'if_then_else',  'if_then',       'lvalue_or_assignment_list',
  'expr_list',     'type_with_qualifier',  'varqualifier',  'expr_prec_9', 
  'expr_binary_ops',  'expr_or_equal',  'expr_prec_8',   'expr_prec_7', 
  'expr_prec_6',   'expr_prec_5',   'expr_prec_4',   'try_value_access',
  'try_pointer_access',  'expr_prec_3',   'typecast',      'expr_prec_2', 
  'cpp_style_cast',  'type_or_type_ref_or_with_ptr',  'lvalue_or_assignment',  'initialization_list',
  'initialization_list_argument_list',  'possibly_identifier_preceded_ref',  'possibly_idenitifer_preceded_ptrs',  'assignable',  
  'namespace_resolve',  'builtintype',   'scoped_type',   'typename_or_instantiated_template_type',
  'template_instantiation_arguments',  'instantiated_template_type_on_in_namespace_resolve',  'typename_in_namespace_resolve',  'instantiated_template_type_on_start_of_namespace_resolve',
  'typename_on_start_of_namespace_resolve',  'type_ref_one',  'type_ref_two',  'type_ref',    
  'type_or_type_ref',  'template_instantiation_argument_list',  'template_instantiation_arguments_begin',  'template_instantiation_arguments_end',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "stmt ::= NAMESPACEKWD IDENTIFIER namespace_body",
 /*   4 */ "namespace_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*   5 */ "namespace_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*   6 */ "stmt ::= class_or_union_or_struct",
 /*   7 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body IDENTIFIER SEMICOLON",
 /*   8 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body SEMICOLON",
 /*   9 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER SEMICOLON",
 /*  10 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  11 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  12 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  13 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  14 */ "type_meta_specifier ::= CLASSKWD",
 /*  15 */ "type_meta_specifier ::= STRUCTKWD",
 /*  16 */ "type_meta_specifier ::= UNIONKWD",
 /*  17 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  18 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  19 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  20 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  21 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  22 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  23 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  24 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  25 */ "visibility_spec ::= PUBLICKWD",
 /*  26 */ "visibility_spec ::= PROTECTEDKWD",
 /*  27 */ "visibility_spec ::= PRIVATEKWD",
 /*  28 */ "signal_slots ::= SIGNALSKWD",
 /*  29 */ "signal_slots ::= SLOTSKWD",
 /*  30 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER SEMICOLON",
 /*  31 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body SEMICOLON",
 /*  32 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  33 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body IDENTIFIER SEMICOLON",
 /*  34 */ "stmt_or_defined_macro ::= ENUMKWD enum_body IDENTIFIER SEMICOLON",
 /*  35 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  36 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  37 */ "enum_value_list ::= enum_value_list COMMA enum_value",
 /*  38 */ "enum_value_list ::= enum_value",
 /*  39 */ "enum_value ::= IDENTIFIER",
 /*  40 */ "enum_value ::= IDENTIFIER ASSIGN expr_atom",
 /*  41 */ "stmt_or_defined_macro ::= type_or_type_with_qualifier function_definition_without_type",
 /*  42 */ "stmt_or_defined_macro ::= template_def type function_definition_without_type",
 /*  43 */ "function_definition_without_type ::= lvalue formal_args_list_with_or_without_const function_body",
 /*  44 */ "function_definition_without_type ::= operator_overload_declaration_type_modificators",
 /*  45 */ "operator_overload_declaration_type_modificators ::= AMPERSAND operator_overload_declaration_ptr",
 /*  46 */ "operator_overload_declaration_type_modificators ::= operator_overload_declaration_ptr",
 /*  47 */ "operator_overload_declaration_ptr ::= CONSTKWD MULTIPLY operator_overload_declaration_ptr",
 /*  48 */ "operator_overload_declaration_ptr ::= MULTIPLY operator_overload_declaration_ptr",
 /*  49 */ "operator_overload_declaration_ptr ::= operator_overload_declaration_without_type",
 /*  50 */ "operator_overload_declaration_without_type ::= OPERATOROVERLOADDECLARATION formal_args_list_with_or_without_const function_body",
 /*  51 */ "stmt_or_defined_macro ::= template_def non_const_type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  52 */ "stmt_or_defined_macro ::= type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  53 */ "stmt_or_defined_macro ::= template_def BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  54 */ "stmt_or_defined_macro ::= BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  55 */ "template_def ::= TEMPLATEKWD LESSER GREATER",
 /*  56 */ "template_def ::= TEMPLATEKWD LESSER template_spec_list GREATER",
 /*  57 */ "template_spec_list ::= template_spec_list COMMA template_spec",
 /*  58 */ "template_spec_list ::= template_spec",
 /*  59 */ "template_spec ::= template_typename IDENTIFIER",
 /*  60 */ "template_typename ::= TYPENAMEKWD",
 /*  61 */ "template_typename ::= CLASSKWD",
 /*  62 */ "template_typename ::= STRUCTKWD",
 /*  63 */ "template_typename ::= ENUMKWD",
 /*  64 */ "function_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  65 */ "function_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  66 */ "function_body ::= SEMICOLON",
 /*  67 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  68 */ "formal_args_list_with_or_without_const ::= formal_args_list CONSTKWD",
 /*  69 */ "formal_args_list ::= LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /*  70 */ "formal_args_list ::= LEFTROUNDBRACKET arg_list RIGHTROUNDBRACKET",
 /*  71 */ "arg_list ::= arg",
 /*  72 */ "arg_list ::= arg_list COMMA arg",
 /*  73 */ "arg ::= type IDENTIFIER",
 /*  74 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list PREPROCESSOR_ENDIF",
 /*  75 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses PREPROCESSOR_ENDIF",
 /*  76 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  77 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  78 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  79 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  80 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  81 */ "preprocessor_elif ::= PREPROCESSOR_ELIF stmt_list",
 /*  82 */ "preprocessor_else ::= PREPROCESSOR_ELSE stmt_list",
 /*  83 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF IDENTIFIER",
 /*  84 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF CUSTOMTYPENAME",
 /*  85 */ "preprocessor_cond ::= PREPROCESSOR_IF",
 /*  86 */ "stmt_or_defined_macro ::= PREPROCESSOR_DEFINE",
 /*  87 */ "stmt_or_defined_macro ::= stmt",
 /*  88 */ "stmt ::= PREPROCESSOR_INCLUDE",
 /*  89 */ "stmt ::= WHILEKWD LEFTROUNDBRACKET expr_prec_10 RIGHTROUNDBRACKET stmt",
 /*  90 */ "stmt ::= DOKWD stmt WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET SEMICOLON",
 /*  91 */ "stmt ::= FORKWD LEFTROUNDBRACKET expr_prec_11 SEMICOLON expr_prec_11 SEMICOLON expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  92 */ "stmt ::= RETURNKWD expr_prec_11 SEMICOLON",
 /*  93 */ "stmt ::= RETURNKWD SEMICOLON",
 /*  94 */ "stmt ::= CONTINUEKWD SEMICOLON",
 /*  95 */ "stmt ::= GOTOKWD IDENTIFIER SEMICOLON",
 /*  96 */ "stmt ::= GOTOKWD CUSTOMTYPENAME SEMICOLON",
 /*  97 */ "stmt ::= IDENTIFIER COLON",
 /*  98 */ "stmt ::= try_catch",
 /*  99 */ "try_catch ::= try catch_list",
 /* 100 */ "try ::= TRYKWD LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 101 */ "try ::= TRYKWD LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 102 */ "catch_list ::= catch_list catch",
 /* 103 */ "catch_list ::= catch",
 /* 104 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 105 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 106 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 107 */ "expr_prec_11_or_ellipsis ::= ELLIPSIS",
 /* 108 */ "stmt ::= SEMICOLON",
 /* 109 */ "stmt ::= switch_stmt",
 /* 110 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 111 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET switch_case_list RIGHTFIGUREBRACKET",
 /* 112 */ "switch_case_list ::= case",
 /* 113 */ "switch_case_list ::= switch_case_list case",
 /* 114 */ "case ::= CASEKWD expr_atom COLON stmt_list",
 /* 115 */ "case ::= DEFAULTKWD COLON stmt_list",
 /* 116 */ "stmt ::= if_then_else",
 /* 117 */ "if_then_else ::= if_then",
 /* 118 */ "if_then_else ::= if_then ELSEKWD stmt",
 /* 119 */ "if_then ::= IFKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 120 */ "stmt ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 121 */ "stmt ::= TYPEDEF type IDENTIFIER SEMICOLON",
 /* 122 */ "stmt ::= BREAKKWD SEMICOLON",
 /* 123 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 124 */ "expr_prec_11 ::= NEWKWD expr_prec_10",
 /* 125 */ "expr_prec_11 ::= DELETE LEFTSQUAREBRACKET RIGHTSQUAREBRACKET expr_prec_10",
 /* 126 */ "expr_prec_11 ::= DELETE expr_prec_10",
 /* 127 */ "expr_prec_11 ::= type_or_type_with_qualifier lvalue_or_assignment_list",
 /* 128 */ "expr_prec_11 ::= expr_list",
 /* 129 */ "expr_list ::= expr_list COMMA expr_prec_10",
 /* 130 */ "expr_list ::= expr_prec_10",
 /* 131 */ "type_or_type_with_qualifier ::= type_with_qualifier",
 /* 132 */ "type_or_type_with_qualifier ::= type",
 /* 133 */ "type_with_qualifier ::= varqualifier type",
 /* 134 */ "varqualifier ::= STATICKWD",
 /* 135 */ "varqualifier ::= EXTERNKWD",
 /* 136 */ "varqualifier ::= REGISTERKWD",
 /* 137 */ "varqualifier ::= VOLATILEKWD",
 /* 138 */ "varqualifier ::= FRIENDKWD",
 /* 139 */ "expr_prec_10 ::= expr_prec_9 BINARYXOR_ASSIGN expr_prec_10",
 /* 140 */ "expr_prec_10 ::= expr_prec_9 BINARYOR_ASSIGN expr_prec_10",
 /* 141 */ "expr_prec_10 ::= expr_prec_9 BINARYAND_ASSIGN expr_prec_10",
 /* 142 */ "expr_prec_10 ::= expr_prec_9 RIGHTSHIFT_ASSIGN expr_prec_10",
 /* 143 */ "expr_prec_10 ::= expr_prec_9 LEFTSHIFT_ASSIGN expr_prec_10",
 /* 144 */ "expr_prec_10 ::= expr_prec_9 MODULO_ASSIGN expr_prec_10",
 /* 145 */ "expr_prec_10 ::= expr_prec_9 DIVISION_ASSIGN expr_prec_10",
 /* 146 */ "expr_prec_10 ::= expr_prec_9 MULTIPLY_ASSIGN expr_prec_10",
 /* 147 */ "expr_prec_10 ::= expr_prec_9 PLUS_ASSIGN expr_prec_10",
 /* 148 */ "expr_prec_10 ::= expr_prec_9 MINUS_ASSIGN expr_prec_10",
 /* 149 */ "expr_prec_10 ::= expr_prec_9 ASSIGN expr_prec_10",
 /* 150 */ "expr_prec_10 ::= expr_prec_9",
 /* 151 */ "expr_prec_9 ::= expr_prec_9 LOGICALAND expr_binary_ops",
 /* 152 */ "expr_prec_9 ::= expr_prec_9 LOGICALOR expr_binary_ops",
 /* 153 */ "expr_prec_9 ::= expr_binary_ops",
 /* 154 */ "expr_binary_ops ::= expr_binary_ops BINARYXOR expr_or_equal",
 /* 155 */ "expr_binary_ops ::= expr_binary_ops BINARYOR expr_or_equal",
 /* 156 */ "expr_binary_ops ::= expr_binary_ops AMPERSAND expr_or_equal",
 /* 157 */ "expr_binary_ops ::= expr_or_equal",
 /* 158 */ "expr_or_equal ::= expr_or_equal NOT_EQUAL expr_prec_8",
 /* 159 */ "expr_or_equal ::= expr_or_equal EQUAL expr_prec_8",
 /* 160 */ "expr_or_equal ::= expr_prec_8",
 /* 161 */ "expr_prec_8 ::= expr_prec_8 LESSER_OR_EQUAL expr_prec_7",
 /* 162 */ "expr_prec_8 ::= expr_prec_8 GREATER_OR_EQUAL expr_prec_7",
 /* 163 */ "expr_prec_8 ::= expr_prec_8 GREATER expr_prec_7",
 /* 164 */ "expr_prec_8 ::= expr_prec_8 LESSER expr_prec_7",
 /* 165 */ "expr_prec_8 ::= expr_prec_7",
 /* 166 */ "expr_prec_7 ::= expr_prec_7 LEFTSHIFT expr_prec_6",
 /* 167 */ "expr_prec_7 ::= expr_prec_7 RIGHTSHIFT expr_prec_6",
 /* 168 */ "expr_prec_7 ::= expr_prec_6",
 /* 169 */ "expr_prec_6 ::= expr_prec_6 MINUS expr_prec_5",
 /* 170 */ "expr_prec_6 ::= expr_prec_6 PLUS expr_prec_5",
 /* 171 */ "expr_prec_6 ::= expr_prec_5",
 /* 172 */ "expr_prec_5 ::= expr_prec_5 MODULOSIGN expr_prec_4",
 /* 173 */ "expr_prec_5 ::= expr_prec_5 DIVISION expr_prec_4",
 /* 174 */ "expr_prec_5 ::= expr_prec_5 MULTIPLY expr_prec_4",
 /* 175 */ "expr_prec_5 ::= expr_prec_4",
 /* 176 */ "expr_prec_4 ::= try_value_access MULTIPLY IDENTIFIER",
 /* 177 */ "expr_prec_4 ::= try_pointer_access MULTIPLY IDENTIFIER",
 /* 178 */ "expr_prec_4 ::= expr_prec_3",
 /* 179 */ "expr_prec_3 ::= AMPERSAND expr_prec_3",
 /* 180 */ "expr_prec_3 ::= MULTIPLY expr_prec_3",
 /* 181 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 182 */ "expr_prec_3 ::= LOGICALNOT expr_prec_3",
 /* 183 */ "expr_prec_3 ::= BINARYNOT expr_prec_3",
 /* 184 */ "expr_prec_3 ::= MINUS expr_prec_2",
 /* 185 */ "expr_prec_3 ::= PLUS expr_prec_2",
 /* 186 */ "expr_prec_3 ::= DECREMENT expr_prec_3",
 /* 187 */ "expr_prec_3 ::= INCREMENT expr_prec_3",
 /* 188 */ "expr_prec_3 ::= expr_prec_2",
 /* 189 */ "expr_prec_2 ::= try_value_access IDENTIFIER",
 /* 190 */ "expr_prec_2 ::= try_pointer_access IDENTIFIER",
 /* 191 */ "expr_prec_2 ::= cpp_style_cast LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 192 */ "expr_prec_2 ::= expr_prec_2 LEFTSQUAREBRACKET expr_prec_10 RIGHTSQUAREBRACKET",
 /* 193 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET expr_list RIGHTROUNDBRACKET",
 /* 194 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /* 195 */ "expr_prec_2 ::= expr_prec_2 INCREMENT",
 /* 196 */ "expr_prec_2 ::= expr_prec_2 DECREMENT",
 /* 197 */ "expr_prec_2 ::= expr_atom",
 /* 198 */ "try_value_access ::= expr_prec_2 DOT",
 /* 199 */ "try_pointer_access ::= expr_prec_2 RIGHTARROW",
 /* 200 */ "cpp_style_cast ::= CONST_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 201 */ "cpp_style_cast ::= STATIC_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 202 */ "cpp_style_cast ::= DYNAMIC_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 203 */ "cpp_style_cast ::= REINTERPRET_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 204 */ "lvalue_or_assignment_list ::= lvalue_or_assignment",
 /* 205 */ "lvalue_or_assignment_list ::= lvalue_or_assignment_list COMMA lvalue_or_assignment",
 /* 206 */ "lvalue_or_assignment ::= lvalue",
 /* 207 */ "lvalue_or_assignment ::= lvalue ASSIGN expr_prec_10",
 /* 208 */ "lvalue_or_assignment ::= lvalue ASSIGN initialization_list",
 /* 209 */ "initialization_list ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 210 */ "initialization_list ::= LEFTFIGUREBRACKET initialization_list_argument_list RIGHTFIGUREBRACKET",
 /* 211 */ "initialization_list_argument_list ::= expr_prec_10",
 /* 212 */ "initialization_list_argument_list ::= initialization_list",
 /* 213 */ "initialization_list_argument_list ::= initialization_list_argument_list COMMA expr_prec_10",
 /* 214 */ "initialization_list_argument_list ::= initialization_list_argument_list COMMA initialization_list",
 /* 215 */ "lvalue ::= possibly_identifier_preceded_ref",
 /* 216 */ "lvalue ::= lvalue LEFTSQUAREBRACKET expr_prec_9 RIGHTSQUAREBRACKET",
 /* 217 */ "possibly_identifier_preceded_ref ::= AMPERSAND possibly_idenitifer_preceded_ptrs",
 /* 218 */ "possibly_identifier_preceded_ref ::= possibly_idenitifer_preceded_ptrs",
 /* 219 */ "possibly_idenitifer_preceded_ptrs ::= IDENTIFIER",
 /* 220 */ "possibly_idenitifer_preceded_ptrs ::= MULTIPLY possibly_idenitifer_preceded_ptrs",
 /* 221 */ "possibly_idenitifer_preceded_ptrs ::= CONSTKWD MULTIPLY possibly_idenitifer_preceded_ptrs",
 /* 222 */ "expr_atom ::= NUMERIC",
 /* 223 */ "expr_atom ::= assignable",
 /* 224 */ "expr_atom ::= CHARACTER",
 /* 225 */ "expr_atom ::= STRING",
 /* 226 */ "assignable ::= IDENTIFIER",
 /* 227 */ "assignable ::= namespace_resolve IDENTIFIER",
 /* 228 */ "expr_atom ::= LEFTROUNDBRACKET expr_list RIGHTROUNDBRACKET",
 /* 229 */ "expr_atom ::= PREPROCESSOR_STRINGIFY IDENTIFIER",
 /* 230 */ "expr_atom ::= PREPROCESSOR_STRINGIFY TYPENAME",
 /* 231 */ "expr_atom ::= IDENTIFIER PREPROCESSOR_CONCAT IDENTIFIER",
 /* 232 */ "expr_atom ::= IDENTIFIER PREPROCESSOR_CONCAT TYPENAME",
 /* 233 */ "expr_atom ::= TYPENAME PREPROCESSOR_CONCAT IDENTIFIER",
 /* 234 */ "expr_atom ::= TYPENAME PREPROCESSOR_CONCAT TYPENAME",
 /* 235 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET type_or_type_ref_or_with_ptr RIGHTROUNDBRACKET",
 /* 236 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET expr_atom RIGHTROUNDBRACKET",
 /* 237 */ "typecast ::= LEFTROUNDBRACKET type_or_type_ref_or_with_ptr RIGHTROUNDBRACKET",
 /* 238 */ "type ::= CONSTKWD non_const_type",
 /* 239 */ "type ::= non_const_type",
 /* 240 */ "non_const_type ::= builtintype",
 /* 241 */ "non_const_type ::= scoped_type",
 /* 242 */ "non_const_type ::= typename_or_instantiated_template_type",
 /* 243 */ "scoped_type ::= namespace_resolve TYPENAME template_instantiation_arguments",
 /* 244 */ "scoped_type ::= namespace_resolve TYPENAME",
 /* 245 */ "namespace_resolve ::= namespace_resolve instantiated_template_type_on_in_namespace_resolve NAMESPACE_RESOLVE",
 /* 246 */ "namespace_resolve ::= namespace_resolve typename_in_namespace_resolve NAMESPACE_RESOLVE",
 /* 247 */ "typename_in_namespace_resolve ::= TYPENAME",
 /* 248 */ "instantiated_template_type_on_in_namespace_resolve ::= TYPENAME template_instantiation_arguments",
 /* 249 */ "namespace_resolve ::= instantiated_template_type_on_start_of_namespace_resolve NAMESPACE_RESOLVE",
 /* 250 */ "namespace_resolve ::= typename_on_start_of_namespace_resolve NAMESPACE_RESOLVE",
 /* 251 */ "instantiated_template_type_on_start_of_namespace_resolve ::= TYPENAME template_instantiation_arguments",
 /* 252 */ "typename_on_start_of_namespace_resolve ::= TYPENAME",
 /* 253 */ "typename_or_instantiated_template_type ::= TYPENAME",
 /* 254 */ "typename_or_instantiated_template_type ::= TYPENAME template_instantiation_arguments",
 /* 255 */ "type_ref_one ::= type AMPERSAND",
 /* 256 */ "type_ref_two ::= type_ref_one AMPERSAND",
 /* 257 */ "type_ref ::= type_ref_one",
 /* 258 */ "type_ref ::= type_ref_two",
 /* 259 */ "type_or_type_ref ::= type",
 /* 260 */ "type_or_type_ref ::= type_ref",
 /* 261 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref",
 /* 262 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr MULTIPLY",
 /* 263 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr CONSTKWD MULTIPLY",
 /* 264 */ "template_instantiation_argument_list ::= type_or_type_ref_or_with_ptr",
 /* 265 */ "template_instantiation_argument_list ::= expr_atom",
 /* 266 */ "template_instantiation_argument_list ::= template_instantiation_argument_list COMMA type_or_type_ref_or_with_ptr",
 /* 267 */ "template_instantiation_argument_list ::= template_instantiation_argument_list COMMA expr_atom",
 /* 268 */ "template_instantiation_arguments_begin ::= LESSER",
 /* 269 */ "template_instantiation_arguments_end ::= GREATER",
 /* 270 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_arguments_end",
 /* 271 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_argument_list template_instantiation_arguments_end",
 /* 272 */ "builtintype ::= VOID",
 /* 273 */ "builtintype ::= FLOAT",
 /* 274 */ "builtintype ::= DOUBLE",
 /* 275 */ "builtintype ::= LONG DOUBLE",
 /* 276 */ "builtintype ::= CHAR",
 /* 277 */ "builtintype ::= SIGNED CHAR",
 /* 278 */ "builtintype ::= UNSIGNED CHAR",
 /* 279 */ "builtintype ::= INT",
 /* 280 */ "builtintype ::= SIGNED INT",
 /* 281 */ "builtintype ::= UNSIGNED INT",
 /* 282 */ "builtintype ::= SHORT INT",
 /* 283 */ "builtintype ::= SIGNED SHORT INT",
 /* 284 */ "builtintype ::= UNSIGNED SHORT INT",
 /* 285 */ "builtintype ::= LONG INT",
 /* 286 */ "builtintype ::= SIGNED LONG INT",
 /* 287 */ "builtintype ::= UNSIGNED LONG INT",
 /* 288 */ "builtintype ::= LONG LONG INT",
 /* 289 */ "builtintype ::= SIGNED LONG LONG INT",
 /* 290 */ "builtintype ::= UNSIGNED LONG LONG INT",
 /* 291 */ "builtintype ::= SHORT",
 /* 292 */ "builtintype ::= SIGNED SHORT",
 /* 293 */ "builtintype ::= UNSIGNED SHORT",
 /* 294 */ "builtintype ::= LONG",
 /* 295 */ "builtintype ::= SIGNED LONG",
 /* 296 */ "builtintype ::= UNSIGNED LONG",
 /* 297 */ "builtintype ::= LONG LONG",
 /* 298 */ "builtintype ::= SIGNED LONG LONG",
 /* 299 */ "builtintype ::= UNSIGNED LONG LONG",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param block_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new block_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 123, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 2 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 5 ),
  array( 'lhs' => 128, 'rhs' => 4 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 4 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 5 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 143, 'rhs' => 3 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 2 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 5 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 125, 'rhs' => 6 ),
  array( 'lhs' => 125, 'rhs' => 5 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 3 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 162, 'rhs' => 2 ),
  array( 'lhs' => 161, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 5 ),
  array( 'lhs' => 126, 'rhs' => 7 ),
  array( 'lhs' => 126, 'rhs' => 9 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 4 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 6 ),
  array( 'lhs' => 168, 'rhs' => 7 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 6 ),
  array( 'lhs' => 170, 'rhs' => 7 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 4 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 5 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 4 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 179, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 3 ),
  array( 'lhs' => 180, 'rhs' => 3 ),
  array( 'lhs' => 180, 'rhs' => 3 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 3 ),
  array( 'lhs' => 182, 'rhs' => 3 ),
  array( 'lhs' => 182, 'rhs' => 3 ),
  array( 'lhs' => 182, 'rhs' => 3 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 3 ),
  array( 'lhs' => 183, 'rhs' => 3 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 184, 'rhs' => 3 ),
  array( 'lhs' => 184, 'rhs' => 3 ),
  array( 'lhs' => 184, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 2 ),
  array( 'lhs' => 191, 'rhs' => 2 ),
  array( 'lhs' => 191, 'rhs' => 4 ),
  array( 'lhs' => 191, 'rhs' => 4 ),
  array( 'lhs' => 191, 'rhs' => 4 ),
  array( 'lhs' => 191, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 2 ),
  array( 'lhs' => 191, 'rhs' => 2 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 2 ),
  array( 'lhs' => 192, 'rhs' => 4 ),
  array( 'lhs' => 192, 'rhs' => 4 ),
  array( 'lhs' => 192, 'rhs' => 4 ),
  array( 'lhs' => 192, 'rhs' => 4 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 4 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 197, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 2 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 2 ),
  array( 'lhs' => 141, 'rhs' => 2 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 4 ),
  array( 'lhs' => 141, 'rhs' => 4 ),
  array( 'lhs' => 190, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 3 ),
  array( 'lhs' => 202, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 3 ),
  array( 'lhs' => 200, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 1 ),
  array( 'lhs' => 205, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 207, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 2 ),
  array( 'lhs' => 209, 'rhs' => 2 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 214, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 204, 'rhs' => 2 ),
  array( 'lhs' => 204, 'rhs' => 3 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
  array( 'lhs' => 201, 'rhs' => 4 ),
  array( 'lhs' => 201, 'rhs' => 4 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        50 => 43,
        44 => 44,
        46 => 44,
        49 => 44,
        128 => 44,
        131 => 44,
        132 => 44,
        204 => 44,
        206 => 44,
        211 => 44,
        212 => 44,
        215 => 44,
        218 => 44,
        219 => 44,
        240 => 44,
        241 => 44,
        242 => 44,
        253 => 44,
        257 => 44,
        258 => 44,
        259 => 44,
        260 => 44,
        261 => 44,
        264 => 44,
        265 => 44,
        45 => 45,
        47 => 47,
        48 => 48,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        58 => 58,
        59 => 59,
        60 => 60,
        61 => 61,
        62 => 62,
        63 => 63,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 83,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 95,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        116 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        129 => 129,
        130 => 130,
        150 => 130,
        160 => 130,
        165 => 130,
        168 => 130,
        171 => 130,
        175 => 130,
        178 => 130,
        188 => 130,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        151 => 151,
        152 => 152,
        153 => 153,
        157 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        158 => 158,
        159 => 159,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        166 => 166,
        167 => 167,
        169 => 169,
        170 => 170,
        172 => 172,
        173 => 173,
        174 => 174,
        176 => 176,
        177 => 176,
        179 => 179,
        180 => 180,
        181 => 181,
        182 => 182,
        183 => 183,
        184 => 184,
        185 => 185,
        186 => 186,
        187 => 187,
        189 => 189,
        190 => 189,
        191 => 191,
        192 => 192,
        193 => 193,
        194 => 194,
        195 => 195,
        196 => 196,
        197 => 197,
        198 => 198,
        199 => 199,
        200 => 200,
        201 => 201,
        202 => 202,
        203 => 203,
        205 => 205,
        207 => 207,
        208 => 207,
        209 => 209,
        210 => 210,
        213 => 213,
        214 => 213,
        216 => 216,
        217 => 217,
        220 => 220,
        221 => 221,
        222 => 222,
        224 => 222,
        225 => 222,
        226 => 222,
        223 => 223,
        227 => 227,
        228 => 228,
        229 => 229,
        230 => 229,
        231 => 231,
        232 => 231,
        233 => 231,
        234 => 231,
        235 => 235,
        236 => 236,
        237 => 237,
        238 => 238,
        239 => 239,
        243 => 243,
        244 => 244,
        245 => 245,
        246 => 246,
        247 => 247,
        248 => 248,
        249 => 249,
        250 => 249,
        251 => 251,
        252 => 252,
        254 => 254,
        255 => 255,
        256 => 256,
        262 => 262,
        263 => 263,
        266 => 266,
        267 => 267,
        268 => 268,
        269 => 269,
        270 => 270,
        271 => 271,
        272 => 272,
        273 => 273,
        274 => 274,
        275 => 275,
        276 => 276,
        277 => 277,
        278 => 278,
        279 => 279,
        280 => 280,
        281 => 281,
        282 => 282,
        283 => 283,
        284 => 284,
        285 => 285,
        286 => 286,
        287 => 287,
        288 => 288,
        289 => 289,
        290 => 290,
        291 => 291,
        292 => 292,
        293 => 293,
        294 => 294,
        295 => 295,
        296 => 296,
        297 => 297,
        298 => 298,
        299 => 299,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 88 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 3603 "langs_src/parser_cpp_language.php"
#line 104 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3609 "langs_src/parser_cpp_language.php"
#line 109 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3615 "langs_src/parser_cpp_language.php"
#line 114 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "идентификатор", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3622 "langs_src/parser_cpp_language.php"
#line 120 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3628 "langs_src/parser_cpp_language.php"
#line 125 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3634 "langs_src/parser_cpp_language.php"
#line 132 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3640 "langs_src/parser_cpp_language.php"
#line 137 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3647 "langs_src/parser_cpp_language.php"
#line 143 "langs_src/parser_cpp_language.y"
    function yy_r8(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3654 "langs_src/parser_cpp_language.php"
#line 149 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3661 "langs_src/parser_cpp_language.php"
#line 155 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3667 "langs_src/parser_cpp_language.php"
#line 160 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3673 "langs_src/parser_cpp_language.php"
#line 165 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array(A, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3679 "langs_src/parser_cpp_language.php"
#line 170 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3685 "langs_src/parser_cpp_language.php"
#line 175 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления класса"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3691 "langs_src/parser_cpp_language.php"
#line 180 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления структуры"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3697 "langs_src/parser_cpp_language.php"
#line 185 "langs_src/parser_cpp_language.y"
    function yy_r16(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления объединения"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3703 "langs_src/parser_cpp_language.php"
#line 190 "langs_src/parser_cpp_language.y"
    function yy_r17(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3709 "langs_src/parser_cpp_language.php"
#line 195 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3715 "langs_src/parser_cpp_language.php"
#line 200 "langs_src/parser_cpp_language.y"
    function yy_r19(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3721 "langs_src/parser_cpp_language.php"
#line 205 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3727 "langs_src/parser_cpp_language.php"
#line 212 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3734 "langs_src/parser_cpp_language.php"
#line 218 "langs_src/parser_cpp_language.y"
    function yy_r22(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3740 "langs_src/parser_cpp_language.php"
#line 223 "langs_src/parser_cpp_language.y"
    function yy_r23(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3746 "langs_src/parser_cpp_language.php"
#line 228 "langs_src/parser_cpp_language.y"
    function yy_r24(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3752 "langs_src/parser_cpp_language.php"
#line 233 "langs_src/parser_cpp_language.y"
    function yy_r25(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово открытой видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3758 "langs_src/parser_cpp_language.php"
#line 238 "langs_src/parser_cpp_language.y"
    function yy_r26(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово защищенной видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3764 "langs_src/parser_cpp_language.php"
#line 243 "langs_src/parser_cpp_language.y"
    function yy_r27(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово скрытой видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3770 "langs_src/parser_cpp_language.php"
#line 248 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления сигнала"));
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3776 "langs_src/parser_cpp_language.php"
#line 253 "langs_src/parser_cpp_language.y"
    function yy_r29(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления слота"));
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3782 "langs_src/parser_cpp_language.php"
#line 260 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3789 "langs_src/parser_cpp_language.php"
#line 266 "langs_src/parser_cpp_language.y"
    function yy_r31(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "%ur(именительный)", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3796 "langs_src/parser_cpp_language.php"
#line 272 "langs_src/parser_cpp_language.y"
    function yy_r32(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3802 "langs_src/parser_cpp_language.php"
#line 277 "langs_src/parser_cpp_language.y"
    function yy_r33(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3809 "langs_src/parser_cpp_language.php"
#line 283 "langs_src/parser_cpp_language.y"
    function yy_r34(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3815 "langs_src/parser_cpp_language.php"
#line 288 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3821 "langs_src/parser_cpp_language.php"
#line 293 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3827 "langs_src/parser_cpp_language.php"
#line 298 "langs_src/parser_cpp_language.y"
    function yy_r37(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3833 "langs_src/parser_cpp_language.php"
#line 303 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3839 "langs_src/parser_cpp_language.php"
#line 308 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3845 "langs_src/parser_cpp_language.php"
#line 313 "langs_src/parser_cpp_language.y"
    function yy_r40(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3851 "langs_src/parser_cpp_language.php"
#line 320 "langs_src/parser_cpp_language.y"
    function yy_r41(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3857 "langs_src/parser_cpp_language.php"
#line 325 "langs_src/parser_cpp_language.y"
    function yy_r42(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3863 "langs_src/parser_cpp_language.php"
#line 330 "langs_src/parser_cpp_language.y"
    function yy_r43(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('function_definition_without_type', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3869 "langs_src/parser_cpp_language.php"
#line 335 "langs_src/parser_cpp_language.y"
    function yy_r44(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3874 "langs_src/parser_cpp_language.php"
#line 339 "langs_src/parser_cpp_language.y"
    function yy_r45(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3880 "langs_src/parser_cpp_language.php"
#line 348 "langs_src/parser_cpp_language.y"
    function yy_r47(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3886 "langs_src/parser_cpp_language.php"
#line 353 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3892 "langs_src/parser_cpp_language.php"
#line 368 "langs_src/parser_cpp_language.y"
    function yy_r51(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor));
    }
#line 3898 "langs_src/parser_cpp_language.php"
#line 374 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("тип", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3904 "langs_src/parser_cpp_language.php"
#line 379 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "тильда", "%s", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3910 "langs_src/parser_cpp_language.php"
#line 391 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("тильда", "%s", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3916 "langs_src/parser_cpp_language.php"
#line 409 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3922 "langs_src/parser_cpp_language.php"
#line 414 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3928 "langs_src/parser_cpp_language.php"
#line 419 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3934 "langs_src/parser_cpp_language.php"
#line 424 "langs_src/parser_cpp_language.y"
    function yy_r58(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3940 "langs_src/parser_cpp_language.php"
#line 429 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3947 "langs_src/parser_cpp_language.php"
#line 436 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово имени типа"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3953 "langs_src/parser_cpp_language.php"
#line 441 "langs_src/parser_cpp_language.y"
    function yy_r61(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления класса"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3959 "langs_src/parser_cpp_language.php"
#line 446 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления структуры"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3965 "langs_src/parser_cpp_language.php"
#line 451 "langs_src/parser_cpp_language.y"
    function yy_r63(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово перечисления"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3971 "langs_src/parser_cpp_language.php"
#line 457 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3977 "langs_src/parser_cpp_language.php"
#line 462 "langs_src/parser_cpp_language.y"
    function yy_r65(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3983 "langs_src/parser_cpp_language.php"
#line 467 "langs_src/parser_cpp_language.y"
    function yy_r66(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3989 "langs_src/parser_cpp_language.php"
#line 475 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3995 "langs_src/parser_cpp_language.php"
#line 480 "langs_src/parser_cpp_language.y"
    function yy_r68(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4001 "langs_src/parser_cpp_language.php"
#line 485 "langs_src/parser_cpp_language.y"
    function yy_r69(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4007 "langs_src/parser_cpp_language.php"
#line 490 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4013 "langs_src/parser_cpp_language.php"
#line 495 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4019 "langs_src/parser_cpp_language.php"
#line 500 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4025 "langs_src/parser_cpp_language.php"
#line 505 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4031 "langs_src/parser_cpp_language.php"
#line 512 "langs_src/parser_cpp_language.y"
    function yy_r74(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4037 "langs_src/parser_cpp_language.php"
#line 517 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4043 "langs_src/parser_cpp_language.php"
#line 522 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4049 "langs_src/parser_cpp_language.php"
#line 527 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4055 "langs_src/parser_cpp_language.php"
#line 532 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4061 "langs_src/parser_cpp_language.php"
#line 537 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4067 "langs_src/parser_cpp_language.php"
#line 542 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4073 "langs_src/parser_cpp_language.php"
#line 547 "langs_src/parser_cpp_language.y"
    function yy_r81(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4079 "langs_src/parser_cpp_language.php"
#line 552 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4085 "langs_src/parser_cpp_language.php"
#line 557 "langs_src/parser_cpp_language.y"
    function yy_r83(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 4091 "langs_src/parser_cpp_language.php"
#line 567 "langs_src/parser_cpp_language.y"
    function yy_r85(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 4097 "langs_src/parser_cpp_language.php"
#line 572 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 4103 "langs_src/parser_cpp_language.php"
#line 577 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4109 "langs_src/parser_cpp_language.php"
#line 582 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4115 "langs_src/parser_cpp_language.php"
#line 594 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4121 "langs_src/parser_cpp_language.php"
#line 606 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4127 "langs_src/parser_cpp_language.php"
#line 619 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4133 "langs_src/parser_cpp_language.php"
#line 627 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4139 "langs_src/parser_cpp_language.php"
#line 632 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4145 "langs_src/parser_cpp_language.php"
#line 640 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4151 "langs_src/parser_cpp_language.php"
#line 647 "langs_src/parser_cpp_language.y"
    function yy_r95(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4157 "langs_src/parser_cpp_language.php"
#line 657 "langs_src/parser_cpp_language.y"
    function yy_r97(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4163 "langs_src/parser_cpp_language.php"
#line 664 "langs_src/parser_cpp_language.y"
    function yy_r98(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4169 "langs_src/parser_cpp_language.php"
#line 669 "langs_src/parser_cpp_language.y"
    function yy_r99(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4175 "langs_src/parser_cpp_language.php"
#line 674 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4181 "langs_src/parser_cpp_language.php"
#line 679 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4187 "langs_src/parser_cpp_language.php"
#line 684 "langs_src/parser_cpp_language.y"
    function yy_r102(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4193 "langs_src/parser_cpp_language.php"
#line 689 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4199 "langs_src/parser_cpp_language.php"
#line 694 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4205 "langs_src/parser_cpp_language.php"
#line 699 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4211 "langs_src/parser_cpp_language.php"
#line 704 "langs_src/parser_cpp_language.y"
    function yy_r106(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4217 "langs_src/parser_cpp_language.php"
#line 709 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4223 "langs_src/parser_cpp_language.php"
#line 716 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4229 "langs_src/parser_cpp_language.php"
#line 723 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4235 "langs_src/parser_cpp_language.php"
#line 728 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4241 "langs_src/parser_cpp_language.php"
#line 733 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4247 "langs_src/parser_cpp_language.php"
#line 738 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4253 "langs_src/parser_cpp_language.php"
#line 743 "langs_src/parser_cpp_language.y"
    function yy_r113(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4259 "langs_src/parser_cpp_language.php"
#line 748 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4265 "langs_src/parser_cpp_language.php"
#line 753 "langs_src/parser_cpp_language.y"
    function yy_r115(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4271 "langs_src/parser_cpp_language.php"
#line 765 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4277 "langs_src/parser_cpp_language.php"
#line 770 "langs_src/parser_cpp_language.y"
    function yy_r118(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4283 "langs_src/parser_cpp_language.php"
#line 775 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4289 "langs_src/parser_cpp_language.php"
#line 782 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4295 "langs_src/parser_cpp_language.php"
#line 787 "langs_src/parser_cpp_language.y"
    function yy_r121(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 4302 "langs_src/parser_cpp_language.php"
#line 794 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4308 "langs_src/parser_cpp_language.php"
#line 799 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4314 "langs_src/parser_cpp_language.php"
#line 806 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('new_kwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4320 "langs_src/parser_cpp_language.php"
#line 811 "langs_src/parser_cpp_language.y"
    function yy_r125(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_array', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4326 "langs_src/parser_cpp_language.php"
#line 816 "langs_src/parser_cpp_language.y"
    function yy_r126(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_pointer', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4332 "langs_src/parser_cpp_language.php"
#line 822 "langs_src/parser_cpp_language.y"
    function yy_r127(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменных", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4338 "langs_src/parser_cpp_language.php"
#line 833 "langs_src/parser_cpp_language.y"
    function yy_r129(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4344 "langs_src/parser_cpp_language.php"
#line 838 "langs_src/parser_cpp_language.y"
    function yy_r130(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4350 "langs_src/parser_cpp_language.php"
#line 853 "langs_src/parser_cpp_language.y"
    function yy_r133(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 4357 "langs_src/parser_cpp_language.php"
#line 859 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4363 "langs_src/parser_cpp_language.php"
#line 864 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4369 "langs_src/parser_cpp_language.php"
#line 869 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4375 "langs_src/parser_cpp_language.php"
#line 874 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4381 "langs_src/parser_cpp_language.php"
#line 879 "langs_src/parser_cpp_language.y"
    function yy_r138(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4387 "langs_src/parser_cpp_language.php"
#line 886 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryxor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4393 "langs_src/parser_cpp_language.php"
#line 891 "langs_src/parser_cpp_language.y"
    function yy_r140(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4399 "langs_src/parser_cpp_language.php"
#line 896 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryand_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4405 "langs_src/parser_cpp_language.php"
#line 901 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4411 "langs_src/parser_cpp_language.php"
#line 906 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4417 "langs_src/parser_cpp_language.php"
#line 911 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulo_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4423 "langs_src/parser_cpp_language.php"
#line 916 "langs_src/parser_cpp_language.y"
    function yy_r145(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4429 "langs_src/parser_cpp_language.php"
#line 921 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4435 "langs_src/parser_cpp_language.php"
#line 926 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4441 "langs_src/parser_cpp_language.php"
#line 931 "langs_src/parser_cpp_language.y"
    function yy_r148(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4447 "langs_src/parser_cpp_language.php"
#line 936 "langs_src/parser_cpp_language.y"
    function yy_r149(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4453 "langs_src/parser_cpp_language.php"
#line 948 "langs_src/parser_cpp_language.y"
    function yy_r151(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4459 "langs_src/parser_cpp_language.php"
#line 953 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4465 "langs_src/parser_cpp_language.php"
#line 958 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4470 "langs_src/parser_cpp_language.php"
#line 962 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_xor', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4476 "langs_src/parser_cpp_language.php"
#line 967 "langs_src/parser_cpp_language.y"
    function yy_r155(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4482 "langs_src/parser_cpp_language.php"
#line 972 "langs_src/parser_cpp_language.y"
    function yy_r156(){
	// Well, that's what you get when you mix binary and and adress taking
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4489 "langs_src/parser_cpp_language.php"
#line 982 "langs_src/parser_cpp_language.y"
    function yy_r158(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_notequal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4495 "langs_src/parser_cpp_language.php"
#line 987 "langs_src/parser_cpp_language.y"
    function yy_r159(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4501 "langs_src/parser_cpp_language.php"
#line 999 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4507 "langs_src/parser_cpp_language.php"
#line 1004 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4513 "langs_src/parser_cpp_language.php"
#line 1009 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4519 "langs_src/parser_cpp_language.php"
#line 1014 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4525 "langs_src/parser_cpp_language.php"
#line 1026 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4531 "langs_src/parser_cpp_language.php"
#line 1031 "langs_src/parser_cpp_language.y"
    function yy_r167(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4537 "langs_src/parser_cpp_language.php"
#line 1043 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4543 "langs_src/parser_cpp_language.php"
#line 1048 "langs_src/parser_cpp_language.y"
    function yy_r170(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4549 "langs_src/parser_cpp_language.php"
#line 1060 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulosign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4555 "langs_src/parser_cpp_language.php"
#line 1065 "langs_src/parser_cpp_language.y"
    function yy_r173(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4561 "langs_src/parser_cpp_language.php"
#line 1070 "langs_src/parser_cpp_language.y"
    function yy_r174(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4567 "langs_src/parser_cpp_language.php"
#line 1082 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_get_property', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4573 "langs_src/parser_cpp_language.php"
#line 1099 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_take_adress', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4579 "langs_src/parser_cpp_language.php"
#line 1104 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_dereference', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4585 "langs_src/parser_cpp_language.php"
#line 1109 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_typecast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4591 "langs_src/parser_cpp_language.php"
#line 1114 "langs_src/parser_cpp_language.y"
    function yy_r182(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4597 "langs_src/parser_cpp_language.php"
#line 1119 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4603 "langs_src/parser_cpp_language.php"
#line 1124 "langs_src/parser_cpp_language.y"
    function yy_r184(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4609 "langs_src/parser_cpp_language.php"
#line 1129 "langs_src/parser_cpp_language.y"
    function yy_r185(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4615 "langs_src/parser_cpp_language.php"
#line 1134 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4621 "langs_src/parser_cpp_language.php"
#line 1139 "langs_src/parser_cpp_language.y"
    function yy_r187(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4627 "langs_src/parser_cpp_language.php"
#line 1151 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_property_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4633 "langs_src/parser_cpp_language.php"
#line 1161 "langs_src/parser_cpp_language.y"
    function yy_r191(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4639 "langs_src/parser_cpp_language.php"
#line 1166 "langs_src/parser_cpp_language.y"
    function yy_r192(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4645 "langs_src/parser_cpp_language.php"
#line 1171 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4651 "langs_src/parser_cpp_language.php"
#line 1176 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4657 "langs_src/parser_cpp_language.php"
#line 1181 "langs_src/parser_cpp_language.y"
    function yy_r195(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_postfix_increment', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4663 "langs_src/parser_cpp_language.php"
#line 1186 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_postfix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4669 "langs_src/parser_cpp_language.php"
#line 1191 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4675 "langs_src/parser_cpp_language.php"
#line 1198 "langs_src/parser_cpp_language.y"
    function yy_r198(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4681 "langs_src/parser_cpp_language.php"
#line 1203 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4687 "langs_src/parser_cpp_language.php"
#line 1210 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_const_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4693 "langs_src/parser_cpp_language.php"
#line 1215 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_static_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4699 "langs_src/parser_cpp_language.php"
#line 1220 "langs_src/parser_cpp_language.y"
    function yy_r202(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_dynamic_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4705 "langs_src/parser_cpp_language.php"
#line 1225 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_reinterpret_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4711 "langs_src/parser_cpp_language.php"
#line 1236 "langs_src/parser_cpp_language.y"
    function yy_r205(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue_or_assignment_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4717 "langs_src/parser_cpp_language.php"
#line 1245 "langs_src/parser_cpp_language.y"
    function yy_r207(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4723 "langs_src/parser_cpp_language.php"
#line 1255 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4729 "langs_src/parser_cpp_language.php"
#line 1260 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4735 "langs_src/parser_cpp_language.php"
#line 1274 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('initialization_list_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, C));
    }
#line 4741 "langs_src/parser_cpp_language.php"
#line 1288 "langs_src/parser_cpp_language.y"
    function yy_r216(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4747 "langs_src/parser_cpp_language.php"
#line 1293 "langs_src/parser_cpp_language.y"
    function yy_r217(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4753 "langs_src/parser_cpp_language.php"
#line 1306 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4759 "langs_src/parser_cpp_language.php"
#line 1311 "langs_src/parser_cpp_language.y"
    function yy_r221(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4765 "langs_src/parser_cpp_language.php"
#line 1319 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4771 "langs_src/parser_cpp_language.php"
#line 1324 "langs_src/parser_cpp_language.y"
    function yy_r223(){
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4776 "langs_src/parser_cpp_language.php"
#line 1343 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('scoped_idetifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4782 "langs_src/parser_cpp_language.php"
#line 1349 "langs_src/parser_cpp_language.y"
    function yy_r228(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_brackets', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4788 "langs_src/parser_cpp_language.php"
#line 1354 "langs_src/parser_cpp_language.y"
    function yy_r229(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_stringify', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4794 "langs_src/parser_cpp_language.php"
#line 1364 "langs_src/parser_cpp_language.y"
    function yy_r231(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_concat', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4800 "langs_src/parser_cpp_language.php"
#line 1386 "langs_src/parser_cpp_language.y"
    function yy_r235(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4806 "langs_src/parser_cpp_language.php"
#line 1391 "langs_src/parser_cpp_language.y"
    function yy_r236(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4812 "langs_src/parser_cpp_language.php"
#line 1398 "langs_src/parser_cpp_language.y"
    function yy_r237(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('c_style_typecast_operator', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 4819 "langs_src/parser_cpp_language.php"
#line 1406 "langs_src/parser_cpp_language.y"
    function yy_r238(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4825 "langs_src/parser_cpp_language.php"
#line 1411 "langs_src/parser_cpp_language.y"
    function yy_r239(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4830 "langs_src/parser_cpp_language.php"
#line 1427 "langs_src/parser_cpp_language.y"
    function yy_r243(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4837 "langs_src/parser_cpp_language.php"
#line 1433 "langs_src/parser_cpp_language.y"
    function yy_r244(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -1]->minor,  $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4844 "langs_src/parser_cpp_language.php"
#line 1439 "langs_src/parser_cpp_language.y"
    function yy_r245(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4850 "langs_src/parser_cpp_language.php"
#line 1444 "langs_src/parser_cpp_language.y"
    function yy_r246(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4856 "langs_src/parser_cpp_language.php"
#line 1449 "langs_src/parser_cpp_language.y"
    function yy_r247(){
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4862 "langs_src/parser_cpp_language.php"
#line 1454 "langs_src/parser_cpp_language.y"
    function yy_r248(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4869 "langs_src/parser_cpp_language.php"
#line 1460 "langs_src/parser_cpp_language.y"
    function yy_r249(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4875 "langs_src/parser_cpp_language.php"
#line 1471 "langs_src/parser_cpp_language.y"
    function yy_r251(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4883 "langs_src/parser_cpp_language.php"
#line 1478 "langs_src/parser_cpp_language.y"
    function yy_r252(){
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4890 "langs_src/parser_cpp_language.php"
#line 1490 "langs_src/parser_cpp_language.y"
    function yy_r254(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4896 "langs_src/parser_cpp_language.php"
#line 1498 "langs_src/parser_cpp_language.y"
    function yy_r255(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак  ссылки"));
	$this->_retvalue = $this->create_node('type_ref', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4902 "langs_src/parser_cpp_language.php"
#line 1503 "langs_src/parser_cpp_language.y"
    function yy_r256(){
	$this->yystack[$this->yyidx + -1]->minor->add_child($this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 4908 "langs_src/parser_cpp_language.php"
#line 1528 "langs_src/parser_cpp_language.y"
    function yy_r262(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4914 "langs_src/parser_cpp_language.php"
#line 1533 "langs_src/parser_cpp_language.y"
    function yy_r263(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4920 "langs_src/parser_cpp_language.php"
#line 1548 "langs_src/parser_cpp_language.y"
    function yy_r266(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_instantiation_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4926 "langs_src/parser_cpp_language.php"
#line 1553 "langs_src/parser_cpp_language.y"
    function yy_r267(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4932 "langs_src/parser_cpp_language.php"
#line 1558 "langs_src/parser_cpp_language.y"
    function yy_r268(){
	$this->mapper->start_new_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4938 "langs_src/parser_cpp_language.php"
#line 1563 "langs_src/parser_cpp_language.y"
    function yy_r269(){
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4944 "langs_src/parser_cpp_language.php"
#line 1568 "langs_src/parser_cpp_language.y"
    function yy_r270(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4950 "langs_src/parser_cpp_language.php"
#line 1573 "langs_src/parser_cpp_language.y"
    function yy_r271(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "%ur(именительный)", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4956 "langs_src/parser_cpp_language.php"
#line 1580 "langs_src/parser_cpp_language.y"
    function yy_r272(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя пустого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4962 "langs_src/parser_cpp_language.php"
#line 1588 "langs_src/parser_cpp_language.y"
    function yy_r273(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой одинарной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4968 "langs_src/parser_cpp_language.php"
#line 1593 "langs_src/parser_cpp_language.y"
    function yy_r274(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4974 "langs_src/parser_cpp_language.php"
#line 1598 "langs_src/parser_cpp_language.y"
    function yy_r275(){
    $this->currentrule = new block_formal_langs_description_rule("имя длинного типа c плавающей запятой двойной точности", array("признак длинного числа", "имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4980 "langs_src/parser_cpp_language.php"
#line 1606 "langs_src/parser_cpp_language.y"
    function yy_r276(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя символьного типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4986 "langs_src/parser_cpp_language.php"
#line 1611 "langs_src/parser_cpp_language.y"
    function yy_r277(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый символьный тип", array("признак знаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4992 "langs_src/parser_cpp_language.php"
#line 1616 "langs_src/parser_cpp_language.y"
    function yy_r278(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый символьный тип", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4998 "langs_src/parser_cpp_language.php"
#line 1624 "langs_src/parser_cpp_language.y"
    function yy_r279(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5004 "langs_src/parser_cpp_language.php"
#line 1629 "langs_src/parser_cpp_language.y"
    function yy_r280(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый целый тип", array("признак знаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5010 "langs_src/parser_cpp_language.php"
#line 1634 "langs_src/parser_cpp_language.y"
    function yy_r281(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый целый тип", array("признак беззнаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5016 "langs_src/parser_cpp_language.php"
#line 1639 "langs_src/parser_cpp_language.y"
    function yy_r282(){
    $this->currentrule = new block_formal_langs_description_rule("короткий целый тип", array("признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5022 "langs_src/parser_cpp_language.php"
#line 1644 "langs_src/parser_cpp_language.y"
    function yy_r283(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5028 "langs_src/parser_cpp_language.php"
#line 1649 "langs_src/parser_cpp_language.y"
    function yy_r284(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5034 "langs_src/parser_cpp_language.php"
#line 1654 "langs_src/parser_cpp_language.y"
    function yy_r285(){
    $this->currentrule = new block_formal_langs_description_rule("длинный целый тип", array("признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5040 "langs_src/parser_cpp_language.php"
#line 1659 "langs_src/parser_cpp_language.y"
    function yy_r286(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целый тип", array("признак знаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5046 "langs_src/parser_cpp_language.php"
#line 1664 "langs_src/parser_cpp_language.y"
    function yy_r287(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целый тип", array("признак беззнаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5052 "langs_src/parser_cpp_language.php"
#line 1669 "langs_src/parser_cpp_language.y"
    function yy_r288(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5058 "langs_src/parser_cpp_language.php"
#line 1675 "langs_src/parser_cpp_language.y"
    function yy_r289(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5064 "langs_src/parser_cpp_language.php"
#line 1680 "langs_src/parser_cpp_language.y"
    function yy_r290(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5070 "langs_src/parser_cpp_language.php"
#line 1688 "langs_src/parser_cpp_language.y"
    function yy_r291(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5076 "langs_src/parser_cpp_language.php"
#line 1693 "langs_src/parser_cpp_language.y"
    function yy_r292(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5082 "langs_src/parser_cpp_language.php"
#line 1698 "langs_src/parser_cpp_language.y"
    function yy_r293(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5088 "langs_src/parser_cpp_language.php"
#line 1705 "langs_src/parser_cpp_language.y"
    function yy_r294(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5094 "langs_src/parser_cpp_language.php"
#line 1710 "langs_src/parser_cpp_language.y"
    function yy_r295(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целвый тип", array("признак знаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5100 "langs_src/parser_cpp_language.php"
#line 1715 "langs_src/parser_cpp_language.y"
    function yy_r296(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целвый тип", array("признак беззнаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5106 "langs_src/parser_cpp_language.php"
#line 1722 "langs_src/parser_cpp_language.y"
    function yy_r297(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5112 "langs_src/parser_cpp_language.php"
#line 1727 "langs_src/parser_cpp_language.y"
    function yy_r298(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5118 "langs_src/parser_cpp_language.php"
#line 1732 "langs_src/parser_cpp_language.y"
    function yy_r299(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5124 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //block_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 40 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 5269 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
