<?php
/* Driver template for the PHP_block_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class block_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof block_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof block_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof block_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof block_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class block_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 3 "langs_src/parser_cpp_language.y"

require_once($CFG->dirroot.'/blocks/formal_langs/descriptions/descriptionrule.php');
#line 102 "langs_src/parser_cpp_language.php"

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 107 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 6 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 145 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const NOTEQUAL                       =  3;
    const EQUAL                          =  4;
    const LOGICALAND                     =  5;
    const BINARYAND                      =  6;
    const BINARYOR                       =  7;
    const LOGICALOR                      =  8;
    const AMPERSAND                      =  9;
    const BINARYXOR                      = 10;
    const UINDIRECTION                   = 11;
    const UADRESS                        = 12;
    const NAMESPACE_RESOLVE              = 13;
    const UMINUS                         = 14;
    const UPLUS                          = 15;
    const UBRACKET                       = 16;
    const TYPEUNARY                      = 17;
    const MACROPARAMETERPRIORITY         = 18;
    const NAMESPACEKWD                   = 19;
    const IDENTIFIER                     = 20;
    const LEFTFIGUREBRACKET              = 21;
    const RIGHTFIGUREBRACKET             = 22;
    const SEMICOLON                      = 23;
    const COMMA                          = 24;
    const TYPENAMEKWD                    = 25;
    const CLASSKWD                       = 26;
    const STRUCTKWD                      = 27;
    const ENUMKWD                        = 28;
    const TEMPLATEKWD                    = 29;
    const LESSER                         = 30;
    const GREATER                        = 31;
    const UNIONKWD                       = 32;
    const COLON                          = 33;
    const PUBLICKWD                      = 34;
    const PROTECTEDKWD                   = 35;
    const PRIVATEKWD                     = 36;
    const SIGNALSKWD                     = 37;
    const SLOTSKWD                       = 38;
    const ASSIGN                         = 39;
    const CONSTKWD                       = 40;
    const MULTIPLY                       = 41;
    const OPERATOROVERLOADDECLARATION    = 42;
    const TYPENAME                       = 43;
    const BINARYNOT                      = 44;
    const OUTER_CONSTRUCTOR_NAME         = 45;
    const LEFTROUNDBRACKET               = 46;
    const RIGHTROUNDBRACKET              = 47;
    const PREPROCESSOR_ENDIF             = 48;
    const PREPROCESSOR_ELIF              = 49;
    const PREPROCESSOR_ELSE              = 50;
    const PREPROCESSOR_IFDEF             = 51;
    const CUSTOMTYPENAME                 = 52;
    const PREPROCESSOR_IF                = 53;
    const PREPROCESSOR_DEFINE            = 54;
    const PREPROCESSOR_INCLUDE           = 55;
    const WHILEKWD                       = 56;
    const DOKWD                          = 57;
    const FORKWD                         = 58;
    const RETURNKWD                      = 59;
    const CONTINUEKWD                    = 60;
    const GOTOKWD                        = 61;
    const TRYKWD                         = 62;
    const CATCHKWD                       = 63;
    const ELLIPSIS                       = 64;
    const SWITCHKWD                      = 65;
    const CASEKWD                        = 66;
    const DEFAULTKWD                     = 67;
    const IFKWD                          = 68;
    const TYPEDEF                        = 69;
    const BREAKKWD                       = 70;
    const NEWKWD                         = 71;
    const DELETE                         = 72;
    const LEFTSQUAREBRACKET              = 73;
    const RIGHTSQUAREBRACKET             = 74;
    const STATICKWD                      = 75;
    const EXTERNKWD                      = 76;
    const REGISTERKWD                    = 77;
    const VOLATILEKWD                    = 78;
    const FRIENDKWD                      = 79;
    const BINARYXOR_ASSIGN               = 80;
    const BINARYOR_ASSIGN                = 81;
    const BINARYAND_ASSIGN               = 82;
    const RIGHTSHIFT_ASSIGN              = 83;
    const LEFTSHIFT_ASSIGN               = 84;
    const MODULO_ASSIGN                  = 85;
    const DIVISION_ASSIGN                = 86;
    const MULTIPLY_ASSIGN                = 87;
    const PLUS_ASSIGN                    = 88;
    const MINUS_ASSIGN                   = 89;
    const NOT_EQUAL                      = 90;
    const LESSER_OR_EQUAL                = 91;
    const GREATER_OR_EQUAL               = 92;
    const LEFTSHIFT                      = 93;
    const RIGHTSHIFT                     = 94;
    const MINUS                          = 95;
    const PLUS                           = 96;
    const MODULOSIGN                     = 97;
    const DIVISION                       = 98;
    const LOGICALNOT                     = 99;
    const DECREMENT                      = 100;
    const INCREMENT                      = 101;
    const DOT                            = 102;
    const RIGHTARROW                     = 103;
    const CONST_CAST                     = 104;
    const STATIC_CAST                    = 105;
    const DYNAMIC_CAST                   = 106;
    const REINTERPRET_CAST               = 107;
    const NUMERIC                        = 108;
    const CHARACTER                      = 109;
    const STRING                         = 110;
    const PREPROCESSOR_STRINGIFY         = 111;
    const PREPROCESSOR_CONCAT            = 112;
    const SIZEOF                         = 113;
    const VOID                           = 114;
    const FLOAT                          = 115;
    const DOUBLE                         = 116;
    const LONG                           = 117;
    const CHAR                           = 118;
    const SIGNED                         = 119;
    const UNSIGNED                       = 120;
    const INT                            = 121;
    const SHORT                          = 122;
    const YY_NO_ACTION = 862;
    const YY_ACCEPT_ACTION = 861;
    const YY_ERROR_ACTION = 860;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 6441;
static public $yy_action = array(
 /*     0 */    91,  453,   64,  125,   66,   65,  548,  326,  316,   40,
 /*    10 */   244,  192,   11,  321,  333,  288,   68,  440,  455,  147,
 /*    20 */   293,   79,   78,  454,  132,  357,  365,  335,  175,  315,
 /*    30 */   316,  104,   90,  230,  111,   94,  485,   30,  420,  419,
 /*    40 */   423,  424,  217,   61,  353,  352,  340,  224,   25,  235,
 /*    50 */    31,  297,  186,  255,  533,  506,  257,   73,   72,  270,
 /*    60 */   102,  262,   57,   44,   80,   81,  474,  478,  479,  482,
 /*    70 */   481,  524,  416,  415,  414,  305,  316,  536,  259,  256,
 /*    80 */   290,  510,  509,  508,  196,  404,   98,   99,  403,  292,
 /*    90 */    92,   96,   95,  513,  149,  247,  282,  279,  294,  458,
 /*   100 */   450,  444,  188,  277,  271,  400,  399,  398,  174,  405,
 /*   110 */   168,  166,  526,  284,   91,  139,  527,  124,   75,   74,
 /*   120 */   191,  109,  537,  534,  244,  192,   11,  318,  333,  445,
 /*   130 */   495,  440,  455,  147,  293,  280,    4,  454,  327,  357,
 /*   140 */   365,  335,  226,  112,  134,  104,   90,  540,  111,   94,
 /*   150 */   237,   30,  123,  229,  302,   70,  217,   67,  353,  352,
 /*   160 */   340,  224,   25,  235,   31,  297,  186,  255,  505,  409,
 /*   170 */   257,  533,  506,  270,  102,  262,   57,   44,  276,  408,
 /*   180 */   474,  478,  479,  482,  481,  410,  240,  492,  400,  399,
 /*   190 */   398,  174,  405,  168,  166,  526,  284,  128,  129,  494,
 /*   200 */    98,   99,  328,  316,   92,   96,   95,  276,  408,  247,
 /*   210 */   282,  279,  294,  458,  450,  444,  188,   37,  271,  400,
 /*   220 */   399,  398,  174,  405,  168,  166,  526,  284,   91,  202,
 /*   230 */   179,  411,  212,  206,  391,   89,  164,  249,  244,  192,
 /*   240 */    11,   69,  333,  451,  441,  440,  455,  147,  293,  812,
 /*   250 */   535,  454,  259,  256,  276,  408,  132,  276,  408,  104,
 /*   260 */    90,  541,  111,   94,  528,   30,  447,  363,   13,    9,
 /*   270 */   217,  303,  353,  352,  340,  224,   25,  235,   31,  297,
 /*   280 */   186,  255,   68,  812,  257,  118,   68,  270,  102,  262,
 /*   290 */    57,   44,  427,  542,  474,  478,  479,  482,  481,  410,
 /*   300 */   447,  447,  370,  413,  416,  415,  414,  187,  426,  281,
 /*   310 */   259,  256,  129,   61,   98,   99,   68,   68,   92,   96,
 /*   320 */    95,  350,  139,  247,  282,  279,  294,  458,  450,  444,
 /*   330 */   188,   59,  271,  400,  399,  398,  174,  405,  168,  166,
 /*   340 */   526,  284,   91,  211,  179,  411,  212,  206,  391,   89,
 /*   350 */   164,  249,  244,  192,   11,  355,  333,  451,  441,  440,
 /*   360 */   455,  147,  293,  156,  323,  454,  259,  256,  410,  420,
 /*   370 */   419,  423,  424,  104,   90,  425,  111,   94,  337,   30,
 /*   380 */   336,  129,  189,  189,  217,   58,  353,  352,  340,  224,
 /*   390 */    25,  235,   31,  297,  186,  255,  239,  511,  257,  502,
 /*   400 */   205,  270,  102,  262,   57,   44,  276,  408,  474,  478,
 /*   410 */   479,  482,  481,  185,  411,  212,  206,  391,   89,  164,
 /*   420 */   249,   61,  107,  252,  107,  252,  451,  441,   98,   99,
 /*   430 */    38,  153,   92,   96,   95,  259,  256,  247,  282,  279,
 /*   440 */   294,  458,  450,  444,  188,  114,  271,  400,  399,  398,
 /*   450 */   174,  405,  168,  166,  526,  284,   91,  194,  520,   24,
 /*   460 */   537,  519,  286,  123,  229,  302,  244,  192,   11,  307,
 /*   470 */   333,  440,  455,  440,  455,  147,  293,  454,  387,  454,
 /*   480 */   223,  138,  410,  248,  254,  295,  437,  104,   90,  462,
 /*   490 */   111,   94,  298,   30,   67,  129,  319,  304,  217,  264,
 /*   500 */   353,  352,  340,  224,   25,  235,   31,  297,  186,  255,
 /*   510 */    63,  278,  257,   62,  429,  270,  102,  262,   57,   44,
 /*   520 */    32,   82,  474,  478,  479,  482,  481,  177,  411,  212,
 /*   530 */   206,  391,   89,  164,  249,  285,  538,   40,   42,  522,
 /*   540 */   451,  441,   98,   99,   35,  146,   92,   96,   95,  259,
 /*   550 */   256,  247,  282,  279,  294,  458,  450,  444,  188,  812,
 /*   560 */   271,  400,  399,  398,  174,  405,  168,  166,  526,  284,
 /*   570 */    91,   61,    1,  260,  428,  501,  447,   83,   84,  529,
 /*   580 */   244,  192,   11,  299,  333,  268,  267,  440,  455,  147,
 /*   590 */   293,  372,  369,  454,  397,  275,  410,  386,  254,  401,
 /*   600 */   540,  104,   90,  447,  111,   94,   56,   30,   67,  129,
 /*   610 */    67,  457,  217,  155,  353,  352,  340,  224,   25,  235,
 /*   620 */    31,  297,  186,  255,  436,  507,  257,   71,  515,  270,
 /*   630 */   102,  262,   57,   44,  276,  408,  474,  478,  479,  482,
 /*   640 */   481,  191,  375,  212,  206,  391,   89,  164,  249,  448,
 /*   650 */   490,  514,  203,  504,  451,  441,   98,   99,  189,   67,
 /*   660 */    92,   96,   95,  259,  256,  247,  282,  279,  294,  458,
 /*   670 */   450,  444,  188,   85,  271,  400,  399,  398,  174,  405,
 /*   680 */   168,  166,  526,  284,   91,  189,  445,  421,   56,  547,
 /*   690 */   445,  351,  533,  506,  244,  192,   11,  430,  333,  288,
 /*   700 */   145,  440,  455,  147,  293,  231,  366,  454,  132,  131,
 /*   710 */   246,  484,  173,  123,  254,  104,   90,  266,  111,   94,
 /*   720 */   142,   30,  317,  129,   67,  231,  217,   67,  353,  352,
 /*   730 */   340,  224,   25,  235,   31,  297,  186,  255,  367,  512,
 /*   740 */   257,  422,  281,  270,  102,  262,   57,   44,  276,  408,
 /*   750 */   474,  478,  479,  482,  481,  524,  416,  415,  414,  140,
 /*   760 */   306,   86,  259,  256,  290,  510,  509,  508,  451,  441,
 /*   770 */    98,   99,  276,  408,   92,   96,   95,  259,  256,  247,
 /*   780 */   282,  279,  294,  458,  450,  444,  188,  348,  271,  400,
 /*   790 */   399,  398,  174,  405,  168,  166,  526,  284,   91,   13,
 /*   800 */     9,  435,    1,  807,  443,   77,  812,   76,  244,  192,
 /*   810 */    11,  334,  333,  288,  497,  440,  455,  147,  293,  412,
 /*   820 */   447,  454,  132,  447,  459,  241,  183,  442,  488,  104,
 /*   830 */    90,  390,  111,   94,   34,   30,  205,  129,  503,  128,
 /*   840 */   217,   28,  353,  352,  340,  224,   25,  235,   31,  297,
 /*   850 */   186,  255,  263,   87,  257,  402,  525,  270,  102,  262,
 /*   860 */    57,   44,  523,   56,  474,  478,  479,  482,  481,  524,
 /*   870 */   416,  415,  414,  110,  521,   29,  259,  256,  290,  510,
 /*   880 */   509,  508,  451,  441,   98,   99,  377,  343,   92,   96,
 /*   890 */    95,  259,  256,  247,  282,  279,  294,  458,  450,  444,
 /*   900 */   188,  461,  271,  400,  399,  398,  174,  405,  168,  166,
 /*   910 */   526,  284,   91,   26,  345,  517,  518,  245,  516,  358,
 /*   920 */   446,   36,  244,  192,   11,  329,  333,  438,  387,  440,
 /*   930 */   455,  147,  293,  390,    8,  454,  472,  487,  410,  480,
 /*   940 */    88,  432,  388,  104,   90,   12,  111,   94,    7,   30,
 /*   950 */   119,  129,  811,  362,  217,  360,  353,  352,  340,  224,
 /*   960 */    25,  235,   31,  297,  186,  255,  808,  449,  257,   27,
 /*   970 */   106,  270,  102,  262,   57,   44,  406,    6,  474,  478,
 /*   980 */   479,  482,  481,   33,  389,  212,  206,  391,   89,  164,
 /*   990 */   249,  253,  407,  347,  269,  260,  451,  441,   98,   99,
 /*  1000 */   460,  296,   92,   96,   95,  259,  256,  247,  282,  279,
 /*  1010 */   294,  458,  450,  444,  188,  310,  271,  400,  399,  398,
 /*  1020 */   174,  405,  168,  166,  526,  284,   91,  324,  361,  219,
 /*  1030 */   311,  342,    5,   68,  431,  144,  244,  192,   11,  308,
 /*  1040 */   333,  288,  154,  440,  455,  147,  293,  150,  301,  454,
 /*  1050 */   132,  190,  536,  439,  181,  534,  447,  104,   90,  283,
 /*  1060 */   111,   94,  535,   30,  123,  339,  200,  199,  217,  496,
 /*  1070 */   353,  352,  340,  224,   25,  235,   31,  297,  186,  255,
 /*  1080 */   452,  536,  257,  151,  536,  270,  102,  262,   57,   44,
 /*  1090 */   313,  536,  474,  478,  479,  482,  481,  524,  416,  415,
 /*  1100 */   414,  359,  320,  536,  259,  256,  290,  510,  509,  508,
 /*  1110 */   536,  536,   98,   99,  536,  536,   92,   96,   95,  536,
 /*  1120 */   536,  247,  282,  279,  294,  458,  450,  444,  188,  536,
 /*  1130 */   271,  400,  399,  398,  174,  405,  168,  166,  526,  284,
 /*  1140 */    91,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  1150 */   244,  192,   11,  356,  333,  536,  536,  440,  455,  147,
 /*  1160 */   293,  536,  536,  454,  536,  536,  410,  536,  536,  536,
 /*  1170 */   536,  104,   90,  536,  111,   94,  536,   30,  536,  129,
 /*  1180 */   536,  536,  217,  536,  353,  352,  340,  224,   25,  235,
 /*  1190 */    31,  297,  186,  255,  536,  536,  257,  536,  536,  270,
 /*  1200 */   102,  262,   57,   44,  536,  536,  474,  478,  479,  482,
 /*  1210 */   481,  536,  378,  212,  206,  391,   89,  164,  249,  536,
 /*  1220 */   536,  536,  536,  536,  451,  441,   98,   99,  536,  536,
 /*  1230 */    92,   96,   95,  259,  256,  247,  282,  279,  294,  458,
 /*  1240 */   450,  444,  188,  536,  271,  400,  399,  398,  174,  405,
 /*  1250 */   168,  166,  526,  284,   91,  536,  536,  536,  536,  536,
 /*  1260 */   536,  536,  536,  536,  244,  192,   11,  354,  333,  536,
 /*  1270 */   536,  440,  455,  147,  293,  536,  536,  454,  536,  536,
 /*  1280 */   410,  536,  536,  536,  536,  104,   90,  536,  111,   94,
 /*  1290 */   536,   30,  536,  129,  536,  536,  217,  536,  353,  352,
 /*  1300 */   340,  224,   25,  235,   31,  297,  186,  255,  536,  536,
 /*  1310 */   257,  536,  536,  270,  102,  262,   57,   44,  536,  536,
 /*  1320 */   474,  478,  479,  482,  481,  536,  536,  250,  251,  380,
 /*  1330 */    89,  164,  249,  536,  536,  536,  536,  536,  451,  441,
 /*  1340 */    98,   99,  536,  536,   92,   96,   95,  259,  256,  247,
 /*  1350 */   282,  279,  294,  458,  450,  444,  188,  536,  271,  400,
 /*  1360 */   399,  398,  174,  405,  168,  166,  526,  284,   91,  536,
 /*  1370 */   536,  536,  536,  536,  536,  536,  536,  536,  244,  192,
 /*  1380 */    11,  536,  333,  536,  536,  440,  455,  147,  293,  536,
 /*  1390 */   536,  454,  536,  536,  410,  536,  536,  536,  536,  104,
 /*  1400 */    90,  536,  111,   94,  536,   30,  536,  129,  536,  536,
 /*  1410 */   217,  536,  353,  352,  340,  224,   25,  235,   31,  297,
 /*  1420 */   186,  255,  536,  536,  257,  536,  536,  270,  102,  262,
 /*  1430 */    57,   44,  536,  536,  474,  478,  479,  482,  481,  536,
 /*  1440 */   536,  250,  251,  379,   89,  164,  249,  536,  536,  536,
 /*  1450 */   536,  536,  451,  441,   98,   99,  536,  536,   92,   96,
 /*  1460 */    95,  259,  256,  247,  282,  279,  294,  458,  450,  444,
 /*  1470 */   188,  536,  271,  400,  399,  398,  174,  405,  168,  166,
 /*  1480 */   526,  284,   91,  536,  536,  536,  536,  536,  536,  536,
 /*  1490 */   536,  536,  244,  192,   11,  536,  333,  536,  536,  440,
 /*  1500 */   455,  536,  293,  536,  536,  454,  536,  536,  410,  536,
 /*  1510 */   536,  536,  536,  104,   90,  135,  120,   93,  536,   30,
 /*  1520 */   536,  129,  536,  536,  536,  536,  537,  536,  340,  224,
 /*  1530 */    25,  235,   31,  297,  186,  255,  536,  536,  257,  536,
 /*  1540 */   536,  270,  102,  262,   57,   44,  223,  138,  474,  478,
 /*  1550 */   479,  482,  481,  536,  536,  250,  251,  384,   89,  164,
 /*  1560 */   249,  536,  536,  536,  536,  536,  451,  441,   98,   99,
 /*  1570 */   536,  536,   92,   96,   95,  259,  256,  247,  282,  279,
 /*  1580 */   294,  458,  450,  444,  188,  536,  271,  400,  399,  398,
 /*  1590 */   174,  405,  168,  166,  526,  284,  309,  157,  338,  273,
 /*  1600 */   434,  148,  143,  536,  536,  113,  536,   97,  456,    3,
 /*  1610 */   368,  312,  136,  536,  536,  536,  537,  410,  152,  100,
 /*  1620 */   536,  476,  130,  536,  536,   43,  536,  536,  536,  158,
 /*  1630 */   117,  159,  536,  536,  536,   10,  226,  112,  134,  536,
 /*  1640 */   376,  265,  349,  133,  536,  536,  536,  332,  536,  536,
 /*  1650 */   371,  261,  536,  222,  477,  101,  162,  184,  198,  170,
 /*  1660 */   197,  218,  179,  411,  212,  206,  391,   89,  164,  249,
 /*  1670 */   536,  536,  536,  536,  536,  451,  441,  524,  416,  415,
 /*  1680 */   414,  536,  536,  536,  259,  256,  536,  458,  450,  444,
 /*  1690 */   188,  536,  271,  536,  536,  433,  157,  338,  536,  434,
 /*  1700 */   148,  143,  536,  536,  536,  536,   97,  456,  536,  536,
 /*  1710 */   536,  536,  536,  536,  536,  536,  410,  152,  100,  536,
 /*  1720 */   476,  536,  536,  536,  536,  536,  536,  536,  158,  117,
 /*  1730 */   159,  536,  536,  536,   10,  236,  126,  322,  325,  376,
 /*  1740 */   265,  349,  133,  536,  536,  536,  332,  536,  536,  371,
 /*  1750 */   261,  536,  222,  477,  101,  162,  184,  198,  170,  197,
 /*  1760 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  1770 */   536,  536,  536,  536,  451,  441,  524,  416,  415,  414,
 /*  1780 */   536,  536,  536,  259,  256,  309,  157,  338,  536,  434,
 /*  1790 */   148,  143,  536,  536,  536,  536,   97,  456,  536,  314,
 /*  1800 */   312,  136,  536,  536,  536,  536,  410,  152,  100,  536,
 /*  1810 */   476,  536,  536,  536,  536,  536,  536,  536,  158,  117,
 /*  1820 */   159,  536,  536,  536,   10,  536,  536,  536,  274,  376,
 /*  1830 */   265,  349,  133,  536,  536,  536,  332,  132,  536,  371,
 /*  1840 */   261,  536,  222,  477,  101,  162,  184,  198,  170,  197,
 /*  1850 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  1860 */   536,  536,  536,  536,  451,  441,  524,  416,  415,  414,
 /*  1870 */   536,  536,  536,  259,  256,  861,   22,  373,  157,  338,
 /*  1880 */   536,  434,  148,  143,  524,  416,  415,  414,   97,  456,
 /*  1890 */   536,  259,  256,  536,  536,  536,  536,  536,  410,  152,
 /*  1900 */   100,  536,  476,  536,  536,  536,  536,  536,  536,  536,
 /*  1910 */   158,  117,  159,  536,  536,  536,   10,  536,  536,  536,
 /*  1920 */   475,  376,  265,  349,  133,  536,  536,  536,  332,  132,
 /*  1930 */   536,  371,  261,  536,  222,  477,  101,  162,  184,  198,
 /*  1940 */   170,  197,  218,  179,  411,  212,  206,  391,   89,  164,
 /*  1950 */   249,  536,  536,  536,  536,  536,  451,  441,  524,  416,
 /*  1960 */   415,  414,  536,  536,  536,  259,  256,  536,    2,  373,
 /*  1970 */   157,  338,  536,  434,  148,  143,  524,  416,  415,  414,
 /*  1980 */    97,  456,  536,  259,  256,  536,  536,  536,  536,  536,
 /*  1990 */   410,  152,  100,  536,  476,  536,  536,  536,  536,  536,
 /*  2000 */   536,  536,  158,  117,  159,  536,  536,  536,   10,  536,
 /*  2010 */   536,  536,  536,  376,  265,  349,  133,  536,  536,  536,
 /*  2020 */   332,  536,  536,  371,  261,  536,  222,  477,  101,  162,
 /*  2030 */   184,  198,  170,  197,  218,  179,  411,  212,  206,  391,
 /*  2040 */    89,  164,  249,  536,  536,  536,  536,  536,  451,  441,
 /*  2050 */   524,  416,  415,  414,  536,  536,  536,  259,  256,  536,
 /*  2060 */    17,  373,  157,  338,  536,  434,  148,  143,  536,  536,
 /*  2070 */   536,  536,   97,  456,  536,  536,  536,  536,  536,  536,
 /*  2080 */   536,  536,  410,  152,  100,  536,  476,  536,  536,  536,
 /*  2090 */   536,  536,  536,  536,  158,  117,  159,  536,  536,  536,
 /*  2100 */    10,  536,  536,  536,  536,  376,  265,  349,  133,  536,
 /*  2110 */   536,  536,  332,  536,  536,  371,  261,  536,  222,  477,
 /*  2120 */   101,  162,  184,  198,  170,  197,  218,  179,  411,  212,
 /*  2130 */   206,  391,   89,  164,  249,  536,  536,  536,  536,  536,
 /*  2140 */   451,  441,  524,  416,  415,  414,  536,  536,  536,  259,
 /*  2150 */   256,  536,   18,  373,  157,  338,  536,  434,  148,  143,
 /*  2160 */   536,  536,  536,  536,   97,  456,  536,  536,  536,  536,
 /*  2170 */   536,  536,  536,  536,  410,  152,  100,  536,  476,  536,
 /*  2180 */   536,  536,  536,  536,  536,  536,  158,  117,  159,  536,
 /*  2190 */   536,  536,   10,  536,  536,  536,  536,  376,  265,  349,
 /*  2200 */   133,  536,  536,  536,  332,  536,  536,  371,  261,  536,
 /*  2210 */   222,  477,  101,  162,  184,  198,  170,  197,  218,  179,
 /*  2220 */   411,  212,  206,  391,   89,  164,  249,  536,  536,  536,
 /*  2230 */   536,  536,  451,  441,  524,  416,  415,  414,  536,  536,
 /*  2240 */   536,  259,  256,  536,   16,  373,  157,  338,  536,  434,
 /*  2250 */   148,  143,  536,  536,  536,  536,   97,  456,  536,  536,
 /*  2260 */   536,  536,  536,  536,  536,  536,  410,  152,  100,  536,
 /*  2270 */   476,  536,  536,  536,  536,  536,  536,  536,  158,  117,
 /*  2280 */   159,  536,  536,  536,   10,  536,  536,  536,  536,  376,
 /*  2290 */   265,  349,  133,  536,  536,  536,  332,  536,  536,  371,
 /*  2300 */   261,  536,  222,  477,  101,  162,  184,  198,  170,  197,
 /*  2310 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  2320 */   536,  536,  536,  536,  451,  441,  524,  416,  415,  414,
 /*  2330 */   536,  536,  536,  259,  256,  536,   15,  373,  157,  338,
 /*  2340 */   536,  434,  148,  143,  536,  536,  536,  536,   97,  456,
 /*  2350 */   536,  536,  536,  536,  536,  536,  536,  536,  410,  152,
 /*  2360 */   100,  536,  476,  536,  536,  536,  536,  536,  536,  536,
 /*  2370 */   158,  117,  159,  536,  536,  536,   10,  536,  536,  536,
 /*  2380 */   536,  376,  265,  349,  133,  536,  536,  536,  332,  536,
 /*  2390 */   536,  371,  261,  536,  222,  477,  101,  162,  184,  198,
 /*  2400 */   170,  197,  218,  179,  411,  212,  206,  391,   89,  164,
 /*  2410 */   249,  536,  536,  536,  536,  536,  451,  441,  524,  416,
 /*  2420 */   415,  414,  536,  536,  536,  259,  256,  536,   21,  373,
 /*  2430 */   157,  338,  536,  434,  148,  143,  536,  536,  536,  536,
 /*  2440 */    97,  456,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  2450 */   410,  152,  100,  536,  476,  536,  536,  536,  536,  536,
 /*  2460 */   536,  536,  158,  117,  159,  536,  536,  536,   10,  536,
 /*  2470 */   536,  536,  536,  376,  265,  349,  133,  536,  536,  536,
 /*  2480 */   332,  536,  536,  371,  261,  536,  222,  477,  101,  162,
 /*  2490 */   184,  198,  170,  197,  218,  179,  411,  212,  206,  391,
 /*  2500 */    89,  164,  249,  536,  536,  536,  536,  536,  451,  441,
 /*  2510 */   524,  416,  415,  414,  536,  536,  536,  259,  256,  536,
 /*  2520 */    23,  373,  157,  338,  536,  434,  148,  143,  536,  536,
 /*  2530 */   536,  536,   97,  456,  536,  536,  536,  536,  536,  536,
 /*  2540 */   536,  536,  410,  152,  100,  536,  476,  536,  536,  536,
 /*  2550 */   536,  536,  536,  536,  158,  117,  159,  536,  536,  536,
 /*  2560 */    10,  536,  536,  536,  536,  376,  265,  349,  133,  536,
 /*  2570 */   536,  536,  332,  536,  536,  371,  261,  536,  222,  477,
 /*  2580 */   101,  162,  184,  198,  170,  197,  218,  179,  411,  212,
 /*  2590 */   206,  391,   89,  164,  249,  536,  536,  536,  536,  536,
 /*  2600 */   451,  441,  524,  416,  415,  414,  536,  536,  536,  259,
 /*  2610 */   256,  536,   19,  373,  157,  338,  536,  434,  148,  143,
 /*  2620 */   536,  536,  536,  536,   97,  456,  536,  536,  536,  536,
 /*  2630 */   536,  536,  536,  536,  410,  152,  100,  536,  476,  536,
 /*  2640 */   536,  536,  536,  536,  536,  536,  158,  117,  159,  536,
 /*  2650 */   536,  536,   10,  536,  536,  536,  536,  376,  265,  349,
 /*  2660 */   133,  536,  536,  536,  332,  536,  536,  371,  261,  536,
 /*  2670 */   222,  477,  101,  162,  184,  198,  170,  197,  218,  179,
 /*  2680 */   411,  212,  206,  391,   89,  164,  249,  536,  536,  536,
 /*  2690 */   536,  536,  451,  441,  524,  416,  415,  414,  536,  536,
 /*  2700 */   536,  259,  256,  536,   14,  373,  157,  338,  536,  434,
 /*  2710 */   148,  143,  536,  536,  536,  536,   97,  456,  536,  536,
 /*  2720 */   536,  536,  536,  536,  536,  536,  410,  152,  100,  536,
 /*  2730 */   476,  536,  536,  536,  536,  536,  536,  536,  158,  117,
 /*  2740 */   159,  536,  536,  536,   10,  536,  536,  536,  536,  376,
 /*  2750 */   265,  349,  133,  536,  536,  536,  332,  536,  536,  371,
 /*  2760 */   261,  536,  222,  477,  101,  162,  184,  198,  170,  197,
 /*  2770 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  2780 */   536,  536,  536,  536,  451,  441,  524,  416,  415,  414,
 /*  2790 */   536,  536,  536,  259,  256,  536,   20,  373,  157,  338,
 /*  2800 */   536,  434,  148,  143,  536,  536,  536,  536,   97,  456,
 /*  2810 */   536,  536,  536,  536,  536,  536,  536,  536,  410,  152,
 /*  2820 */   100,  536,  476,  536,  536,  536,  536,  536,  536,  536,
 /*  2830 */   158,  117,  159,  536,  536,  536,   10,  536,  536,  536,
 /*  2840 */   536,  376,  265,  349,  133,  536,   41,  536,  332,  536,
 /*  2850 */   536,  371,  261,  536,  222,  477,  101,  162,  184,  198,
 /*  2860 */   170,  197,  218,  179,  411,  212,  206,  391,   89,  164,
 /*  2870 */   249,  536,  536,   55,  536,  536,  451,  441,  524,  416,
 /*  2880 */   415,  414,  536,  536,  536,  259,  256,  433,  157,  338,
 /*  2890 */   536,  434,  148,  143,  536,  536,  536,  536,   97,  456,
 /*  2900 */   382,  383,  381,  395,  536,  536,  536,  536,  410,  152,
 /*  2910 */   100,  536,  476,  536,  536,  536,  536,  536,  536,  536,
 /*  2920 */   158,  117,  159,  536,  536,  536,   10,  536,  536,  536,
 /*  2930 */   536,  376,  265,  349,  133,  536,  536,  536,  332,  536,
 /*  2940 */   536,  371,  261,  536,  222,  477,  101,  162,  184,  198,
 /*  2950 */   170,  197,  218,  179,  411,  212,  206,  391,   89,  164,
 /*  2960 */   249,  536,  536,  536,  536,  536,  451,  441,  524,  416,
 /*  2970 */   415,  414,  536,  536,  536,  259,  256,  536,  536,  157,
 /*  2980 */   341,  536,  434,  148,  143,  536,  536,  536,  536,  137,
 /*  2990 */   456,  536,  536,  536,  536,  536,  536,  536,  536,  410,
 /*  3000 */   536,  108,  536,  476,  536,  536,  536,  536,  536,  536,
 /*  3010 */   536,  536,  127,  536,  536,  536,  536,  536,  536,  536,
 /*  3020 */   536,  536,  376,  265,  349,  133,  536,  536,  536,  332,
 /*  3030 */   536,  536,  371,  261,  536,  222,  477,  101,  162,  184,
 /*  3040 */   198,  170,  197,  218,  179,  411,  212,  206,  391,   89,
 /*  3050 */   164,  249,  536,  536,  536,  536,  536,  451,  441,  524,
 /*  3060 */   416,  415,  414,  536,  536,  536,  259,  256,  536,  157,
 /*  3070 */   331,  536,  434,  148,  143,  536,  536,  536,  536,  137,
 /*  3080 */   456,  536,  536,  536,  536,  536,  536,  536,  536,  410,
 /*  3090 */   536,  108,  536,  476,  536,  536,  536,  536,  536,  536,
 /*  3100 */   536,  536,  127,  536,  536,  536,  536,  536,  536,  536,
 /*  3110 */   536,  536,  376,  265,  349,  133,  536,  536,  536,  332,
 /*  3120 */   536,  536,  371,  261,  536,  222,  477,  101,  162,  184,
 /*  3130 */   198,  170,  197,  218,  179,  411,  212,  206,  391,   89,
 /*  3140 */   164,  249,  536,  536,  536,  536,  536,  451,  441,  524,
 /*  3150 */   416,  415,  414,  536,  536,  536,  259,  256,  536,  536,
 /*  3160 */   157,  364,  536,  434,  148,  143,  536,  536,  536,  536,
 /*  3170 */   137,  456,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  3180 */   410,  536,  108,  536,  476,  536,  536,  536,  536,  536,
 /*  3190 */   536,  536,  536,  127,  536,  536,  536,  536,  536,  536,
 /*  3200 */   536,  536,  536,  376,  265,  349,  133,  536,  536,  536,
 /*  3210 */   332,  536,  536,  371,  261,  536,  222,  477,  101,  162,
 /*  3220 */   184,  198,  170,  197,  218,  179,  411,  212,  206,  391,
 /*  3230 */    89,  164,  249,  536,  536,  536,  536,  536,  451,  441,
 /*  3240 */   524,  416,  415,  414,  536,  536,  536,  259,  256,  536,
 /*  3250 */   157,  346,  536,  434,  148,  143,  536,  536,  536,  536,
 /*  3260 */   137,  456,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  3270 */   410,  536,  108,  536,  476,  536,  536,  536,  536,  536,
 /*  3280 */   536,  536,  536,  127,  536,  536,  536,  536,  536,  536,
 /*  3290 */   536,  536,  536,  376,  265,  349,  133,  536,  536,  536,
 /*  3300 */   332,  536,  536,  371,  261,  536,  222,  477,  101,  162,
 /*  3310 */   184,  198,  170,  197,  218,  179,  411,  212,  206,  391,
 /*  3320 */    89,  164,  249,  536,  536,  135,  536,  536,  451,  441,
 /*  3330 */   524,  416,  415,  414,  536,  536,  537,  259,  256,  536,
 /*  3340 */   536,  157,  221,  536,  434,  148,  143,  536,  536,  536,
 /*  3350 */   536,  137,  456,  536,  536,  536,  103,  138,  536,  124,
 /*  3360 */   536,  410,  536,  108,  536,  476,  536,  536,  536,  536,
 /*  3370 */   536,  536,  536,  536,  127,  536,  536,  536,  104,  536,
 /*  3380 */   536,  124,  536,  536,  376,  265,  349,  133,  536,  536,
 /*  3390 */   536,  332,  536,  536,  371,  261,  536,  222,  477,  101,
 /*  3400 */   162,  184,  198,  170,  197,  218,  179,  411,  212,  206,
 /*  3410 */   391,   89,  164,  249,   91,  536,  536,  536,  124,  451,
 /*  3420 */   441,  524,  416,  415,  414,  273,  536,  536,  259,  256,
 /*  3430 */   400,  399,  398,  174,  405,  168,  166,  526,  284,  536,
 /*  3440 */   536,  536,  536,  536,  536,  104,   90,  536,  120,   93,
 /*  3450 */   536,   30,  400,  399,  398,  174,  405,  168,  166,  526,
 /*  3460 */   284,  536,  536,  536,  536,  536,  536,  536,  536,  330,
 /*  3470 */   536,  536,  536,  536,  536,  536,   57,   44,  536,  536,
 /*  3480 */   474,  478,  479,  482,  481,  536,  536,  536,  536,  400,
 /*  3490 */   399,  398,  174,  405,  168,  166,  526,  284,  536,  536,
 /*  3500 */    98,   99,  536,  536,   92,   96,   95,  536,  536,  247,
 /*  3510 */   282,  279,  294,  458,  450,  444,  188,  536,  271,  400,
 /*  3520 */   399,  398,  174,  405,  168,  166,  526,  284,   91,  536,
 /*  3530 */   536,  536,  536,  536,  410,  536,  536,  536,  536,  273,
 /*  3540 */   536,  536,  344,  536,  536,  536,  536,  129,  536,  536,
 /*  3550 */   536,  536,  536,  536,  536,  536,  536,  530,  536,  104,
 /*  3560 */    90,  536,  120,   93,  536,   30,  536,  536,  536,  536,
 /*  3570 */   536,  536,  536,  162,  184,  198,  170,  197,  218,  179,
 /*  3580 */   411,  212,  206,  391,   89,  164,  249,  439,  374,  193,
 /*  3590 */    57,   44,  451,  441,  474,  478,  479,  482,  481,  536,
 /*  3600 */   105,  259,  256,  536,  536,  536,  536,  536,  161,  122,
 /*  3610 */   160,  536,  536,  536,   98,   99,  536,  536,   92,   96,
 /*  3620 */    95,  536,  536,  247,  282,  279,  294,  458,  450,  444,
 /*  3630 */   188,  536,  271,  400,  399,  398,  174,  405,  168,  166,
 /*  3640 */   526,  284,   91,  536,  536,  536,  536,  536,  410,  536,
 /*  3650 */   536,  536,  536,  273,  536,  536,  524,  416,  415,  414,
 /*  3660 */   536,  129,  536,  259,  256,  536,  536,  536,  536,  536,
 /*  3670 */   536,  376,  536,  104,   90,  536,  120,   93,  536,   30,
 /*  3680 */   536,  536,  536,  536,  209,  536,  536,  162,  184,  198,
 /*  3690 */   170,  197,  218,  179,  411,  212,  206,  391,   89,  164,
 /*  3700 */   249,  536,  536,  536,   57,   44,  451,  441,  474,  478,
 /*  3710 */   479,  482,  481,  536,  536,  259,  256,  536,  536,  536,
 /*  3720 */   536,  536,  410,  536,  536,  536,  536,  536,   98,   99,
 /*  3730 */   536,  536,   92,   96,   95,  129,  536,  247,  282,  279,
 /*  3740 */   294,  458,  450,  444,  188,  536,  271,  400,  399,  398,
 /*  3750 */   174,  405,  168,  166,  526,  284,  536,  536,  536,  536,
 /*  3760 */   536,  536,  410,  536,  536,  536,  288,  536,  536,  250,
 /*  3770 */   251,  385,   89,  164,  249,  127,  536,  536,  499,  182,
 /*  3780 */   451,  441,  288,  536,  536,  376,  536,  536,  536,  259,
 /*  3790 */   256,  127,  536,  536,  536,  207,  536,  536,  209,  536,
 /*  3800 */   536,  162,  184,  198,  170,  197,  218,  179,  411,  212,
 /*  3810 */   206,  391,   89,  164,  249,  536,  536,  536,  536,  536,
 /*  3820 */   451,  441,  524,  416,  415,  414,  536,  536,  536,  259,
 /*  3830 */   256,  290,  510,  509,  508,  536,  451,  441,  524,  416,
 /*  3840 */   415,  414,  536,  536,  273,  259,  256,  290,  510,  509,
 /*  3850 */   508,  141,  410,  500,  108,  536,  476,  536,  536,  536,
 /*  3860 */   440,  455,  536,  536,  536,  127,  454,  130,  536,  536,
 /*  3870 */    43,  536,  536,  536,  104,  376,  300,  116,  536,  536,
 /*  3880 */   536,  289,  536,  536,  536,  536,  536,  536,  222,  477,
 /*  3890 */   101,  162,  184,  198,  170,  197,  218,  179,  411,  212,
 /*  3900 */   206,  391,   89,  164,  249,  536,  536,  536,  536,  536,
 /*  3910 */   451,  441,  524,  416,  415,  414,  536,  536,  536,  259,
 /*  3920 */   256,  536,  536,  410,  536,  108,  536,  476,  247,  282,
 /*  3930 */   279,  294,  458,  450,  444,  188,  127,  271,  536,  536,
 /*  3940 */   536,  536,  536,  536,  536,  536,  376,  243,  400,  399,
 /*  3950 */   398,  174,  405,  168,  166,  526,  284,  536,  536,  222,
 /*  3960 */   477,  101,  162,  184,  198,  170,  197,  218,  179,  411,
 /*  3970 */   212,  206,  391,   89,  164,  249,  536,  536,  536,  536,
 /*  3980 */   536,  451,  441,  524,  416,  415,  414,  536,  536,  536,
 /*  3990 */   259,  256,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  4000 */   410,  536,  108,  536,  476,  536,  536,  536,  536,  536,
 /*  4010 */   536,  536,  536,  127,  536,  536,  536,  536,  410,  536,
 /*  4020 */   536,  536,  536,  376,  238,  536,  536,  536,  536,  536,
 /*  4030 */   536,  129,  536,  536,  536,  536,  222,  477,  101,  162,
 /*  4040 */   184,  198,  170,  197,  218,  179,  411,  212,  206,  391,
 /*  4050 */    89,  164,  249,  536,  536,  536,  536,  536,  451,  441,
 /*  4060 */   524,  416,  415,  414,  536,  250,  251,  259,  256,  163,
 /*  4070 */   249,  410,  536,  108,  536,  476,  451,  441,  536,  536,
 /*  4080 */   536,  536,  536,  536,  127,  259,  256,  536,  536,  536,
 /*  4090 */   536,  536,  536,  536,  376,  291,  536,  536,  536,  536,
 /*  4100 */   536,  536,  536,  536,  536,  536,  536,  222,  477,  101,
 /*  4110 */   162,  184,  198,  170,  197,  218,  179,  411,  212,  206,
 /*  4120 */   391,   89,  164,  249,  536,  536,  536,  536,  536,  451,
 /*  4130 */   441,  524,  416,  415,  414,  536,  536,  536,  259,  256,
 /*  4140 */   536,  536,  536,  536,  536,  536,  536,  536,  410,  536,
 /*  4150 */   108,  536,  476,  536,  536,  536,  536,  536,  536,  536,
 /*  4160 */   536,  127,  536,  536,  536,  536,  410,  536,  536,  536,
 /*  4170 */   536,  376,  232,  536,  536,  536,  536,  536,  536,  129,
 /*  4180 */   536,  536,  536,  536,  222,  477,  101,  162,  184,  198,
 /*  4190 */   170,  197,  218,  179,  411,  212,  206,  391,   89,  164,
 /*  4200 */   249,  536,  536,  536,  536,  536,  451,  441,  524,  416,
 /*  4210 */   415,  414,  536,  250,  251,  259,  256,  165,  249,  410,
 /*  4220 */   536,  108,  536,  476,  451,  441,  536,  536,  536,  536,
 /*  4230 */   536,  536,  127,  259,  256,  536,  536,  536,  536,  536,
 /*  4240 */   536,  536,  376,  227,  536,  536,  536,  536,  536,  536,
 /*  4250 */   536,  536,  536,  536,  536,  222,  477,  101,  162,  184,
 /*  4260 */   198,  170,  197,  218,  179,  411,  212,  206,  391,   89,
 /*  4270 */   164,  249,  536,  536,  536,  536,  536,  451,  441,  524,
 /*  4280 */   416,  415,  414,  536,  536,  536,  259,  256,  536,  536,
 /*  4290 */   536,  536,  536,  536,  536,  536,  410,  536,  108,  536,
 /*  4300 */   476,  536,  536,  536,  536,  536,  536,  536,  536,  127,
 /*  4310 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  376,
 /*  4320 */   258,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  4330 */   536,  536,  222,  477,  101,  162,  184,  198,  170,  197,
 /*  4340 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  4350 */   536,  536,  536,  536,  451,  441,  524,  416,  415,  414,
 /*  4360 */   536,  536,  536,  259,  256,  536,  536,  410,  536,  108,
 /*  4370 */   536,  476,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  4380 */   127,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  4390 */   376,  272,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  4400 */   536,  536,  536,  222,  477,  101,  162,  184,  198,  170,
 /*  4410 */   197,  218,  179,  411,  212,  206,  391,   89,  164,  249,
 /*  4420 */   536,  536,  536,  536,  536,  451,  441,  524,  416,  415,
 /*  4430 */   414,  536,  536,  536,  259,  256,  536,  536,   91,  536,
 /*  4440 */   536,  536,  536,  536,  410,  536,  108,  536,  476,  273,
 /*  4450 */   536,  536,  536,  536,  536,  536,  536,  127,  536,  536,
 /*  4460 */   536,  536,  536,  536,  536,  536,  536,  376,  287,  104,
 /*  4470 */    90,  536,  120,   93,  536,   30,  536,  536,  536,  536,
 /*  4480 */   222,  477,  101,  162,  184,  198,  170,  197,  218,  179,
 /*  4490 */   411,  212,  206,  391,   89,  164,  249,  536,  536,  536,
 /*  4500 */   536,  536,  451,  441,  524,  416,  415,  414,  536,  536,
 /*  4510 */   536,  259,  256,  536,  536,  536,  536,  536,  536,  536,
 /*  4520 */   536,  536,  536,  536,   98,   99,  536,  536,   92,   96,
 /*  4530 */    95,  536,  536,  247,  282,  279,  294,  458,  450,  444,
 /*  4540 */   188,  536,  271,  400,  399,  398,  174,  405,  168,  166,
 /*  4550 */   526,  284,  410,  536,  498,  536,   63,  536,  288,   62,
 /*  4560 */   536,  536,  536,  536,  536,  129,  536,  127,  536,  536,
 /*  4570 */   536,  213,  536,  536,  536,  376,  536,  536,  536,  536,
 /*  4580 */   536,  536,  536,  536,  536,  536,  536,  536,  215,  536,
 /*  4590 */    50,  162,  184,  198,  170,  197,  218,  179,  411,  212,
 /*  4600 */   206,  391,   89,  164,  249,  410,  536,  536,  536,  536,
 /*  4610 */   451,  441,  451,  441,  524,  416,  415,  414,  129,  259,
 /*  4620 */   256,  259,  256,  290,  510,  509,  508,  536,  532,  536,
 /*  4630 */   536,   52,   47,   46,   45,   48,   49,   54,   53,   51,
 /*  4640 */    60,  536,  536,  536,  162,  184,  198,  170,  197,  218,
 /*  4650 */   179,  411,  212,  206,  391,   89,  164,  249,  536,  531,
 /*  4660 */   536,  536,  536,  451,  441,  536,   91,  536,  536,  536,
 /*  4670 */   536,  536,  259,  256,  536,  536,  410,  273,   39,  539,
 /*  4680 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  129,
 /*  4690 */   536,  536,  536,  536,  536,  536,  536,  536,   90,  546,
 /*  4700 */   130,   93,  536,   30,  536,  536,  536,  536,  536,  536,
 /*  4710 */   536,  536,  536,  536,  536,  162,  184,  198,  170,  197,
 /*  4720 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  4730 */   545,  536,  536,  536,  451,  441,  410,  536,  536,  536,
 /*  4740 */   536,  536,  536,  259,  256,  536,  536,  536,  536,  129,
 /*  4750 */   536,  536,   98,   99,  536,  536,   92,   96,   95,  417,
 /*  4760 */   536,  247,  282,  279,  294,  458,  450,  444,  188,  536,
 /*  4770 */   271,  536,  536,  536,  536,  162,  184,  198,  170,  197,
 /*  4780 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  4790 */   536,  536,  410,  536,  451,  441,  536,  536,  536,  536,
 /*  4800 */   536,  536,  536,  259,  256,  129,  536,  536,  536,  536,
 /*  4810 */   536,  288,  233,  536,  536,  471,  536,  536,  536,  536,
 /*  4820 */   132,  536,  195,  491,  171,  536,  536,  536,  536,  536,
 /*  4830 */   536,  162,  184,  198,  170,  197,  218,  179,  411,  212,
 /*  4840 */   206,  391,   89,  164,  249,  536,  536,  536,  410,  536,
 /*  4850 */   451,  441,  536,  536,  536,  536,  536,  536,  536,  259,
 /*  4860 */   256,  129,  536,  533,  506,  536,  536,  524,  416,  415,
 /*  4870 */   414,  242,  536,  536,  259,  256,  290,  510,  509,  508,
 /*  4880 */   536,  536,  536,  536,  536,  536,  536,  162,  184,  198,
 /*  4890 */   170,  197,  218,  179,  411,  212,  206,  391,   89,  164,
 /*  4900 */   249,  410,  536,  536,  536,  536,  451,  441,  536,  536,
 /*  4910 */   536,  536,  536,  536,  129,  259,  256,  536,  536,  536,
 /*  4920 */   536,  536,  536,  410,  470,  536,  536,  536,  536,  536,
 /*  4930 */   536,  536,  536,  536,  536,  536,  129,  536,  536,  536,
 /*  4940 */   162,  184,  198,  170,  197,  218,  179,  411,  212,  206,
 /*  4950 */   391,   89,  164,  249,  536,  536,  536,  536,  536,  451,
 /*  4960 */   441,  536,  536,  410,  536,  536,  536,  536,  259,  256,
 /*  4970 */   250,  251,  393,   89,  164,  249,  129,  536,  536,  536,
 /*  4980 */   536,  451,  441,  536,  536,  536,  483,  288,  233,  536,
 /*  4990 */   259,  256,  536,  536,  536,  536,  132,  536,  536,  493,
 /*  5000 */   171,  536,  162,  184,  198,  170,  197,  218,  179,  411,
 /*  5010 */   212,  206,  391,   89,  164,  249,  536,  536,  536,  410,
 /*  5020 */   536,  451,  441,  536,  536,  536,  536,  536,  536,  536,
 /*  5030 */   259,  256,  129,  536,  536,  536,  536,  536,  536,  533,
 /*  5040 */   506,  536,  467,  524,  416,  415,  414,  536,  536,  536,
 /*  5050 */   259,  256,  290,  510,  509,  508,  536,  536,  162,  184,
 /*  5060 */   198,  170,  197,  218,  179,  411,  212,  206,  391,   89,
 /*  5070 */   164,  249,  410,  536,  536,  536,  536,  451,  441,  536,
 /*  5080 */   536,  536,  536,  536,  536,  129,  259,  256,  536,  536,
 /*  5090 */   536,  536,  228,  536,  536,  463,  288,  536,  536,  536,
 /*  5100 */   536,  536,  536,  536,  536,  127,  536,  536,  536,  178,
 /*  5110 */   536,  162,  184,  198,  170,  197,  218,  179,  411,  212,
 /*  5120 */   206,  391,   89,  164,  249,  536,  536,  536,  536,  536,
 /*  5130 */   451,  441,  536,  536,  410,  536,  536,  536,  536,  259,
 /*  5140 */   256,  536,  536,  536,  536,  536,  536,  129,  536,  536,
 /*  5150 */   451,  441,  524,  416,  415,  414,  536,  469,  410,  259,
 /*  5160 */   256,  290,  510,  509,  508,  536,  536,  536,  536,  536,
 /*  5170 */   536,  129,  536,  162,  184,  198,  170,  197,  218,  179,
 /*  5180 */   411,  212,  206,  391,   89,  164,  249,  536,  536,  536,
 /*  5190 */   410,  536,  451,  441,  536,  536,  536,  536,  536,  536,
 /*  5200 */   536,  259,  256,  129,  536,  250,  251,  394,   89,  164,
 /*  5210 */   249,  536,  536,  543,  536,  536,  451,  441,  536,  536,
 /*  5220 */   536,  536,  536,  536,  536,  259,  256,  536,  536,  162,
 /*  5230 */   184,  198,  170,  197,  218,  179,  411,  212,  206,  391,
 /*  5240 */    89,  164,  249,  410,  536,  536,  536,  536,  451,  441,
 /*  5250 */   536,  536,  536,  536,  536,  536,  129,  259,  256,  536,
 /*  5260 */   536,  536,  536,  536,  536,  410,  225,  536,  536,  536,
 /*  5270 */   536,  536,  536,  536,  536,  536,  536,  536,  129,  536,
 /*  5280 */   536,  536,  162,  184,  198,  170,  197,  218,  179,  411,
 /*  5290 */   212,  206,  391,   89,  164,  249,  536,  536,  536,  536,
 /*  5300 */   536,  451,  441,  536,  536,  410,  536,  536,  536,  536,
 /*  5310 */   259,  256,  250,  251,  392,   89,  164,  249,  129,  536,
 /*  5320 */   536,  536,  536,  451,  441,  536,  536,  536,  396,  536,
 /*  5330 */   536,  536,  259,  256,  536,  486,  536,  121,  536,  536,
 /*  5340 */   548,  326,  316,  536,  162,  184,  198,  170,  197,  218,
 /*  5350 */   179,  411,  212,  206,  391,   89,  164,  249,  536,  536,
 /*  5360 */   536,  410,  536,  451,  441,  536,  536,  237,  536,  536,
 /*  5370 */   536,  536,  259,  256,  129,  536,  536,  536,  536,  536,
 /*  5380 */   536,  536,  536,  536,  418,  505,  536,  536,  533,  506,
 /*  5390 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  5400 */   162,  184,  198,  170,  197,  218,  179,  411,  212,  206,
 /*  5410 */   391,   89,  164,  249,  410,  536,  536,  536,  536,  451,
 /*  5420 */   441,  536,  536,  536,  536,  536,  536,  129,  259,  256,
 /*  5430 */   536,  536,  536,  536,  536,  536,  536,  468,  536,  536,
 /*  5440 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  5450 */   536,  536,  536,  162,  184,  198,  170,  197,  218,  179,
 /*  5460 */   411,  212,  206,  391,   89,  164,  249,   91,  536,  536,
 /*  5470 */   536,  536,  451,  441,  536,  536,  536,  536,  273,   39,
 /*  5480 */   536,  259,  256,  536,  536,  536,  536,  536,  536,   91,
 /*  5490 */   536,  536,  536,  410,  536,  536,  536,  536,  536,   90,
 /*  5500 */   273,  130,   93,  536,   30,  536,  129,  536,  536,  536,
 /*  5510 */   536,  536,  536,  536,  536,  536,  465,  536,  536,  536,
 /*  5520 */   536,   90,  536,  130,   93,  536,   30,  473,  536,  536,
 /*  5530 */   536,  536,  162,  184,  198,  170,  197,  218,  179,  411,
 /*  5540 */   212,  206,  391,   89,  164,  249,  536,  536,  536,  536,
 /*  5550 */   536,  451,  441,   98,   99,  536,  536,   92,   96,   95,
 /*  5560 */   259,  256,  247,  282,  279,  294,  458,  450,  444,  188,
 /*  5570 */   536,  271,  536,  536,  536,   98,   99,  536,  536,   92,
 /*  5580 */    96,   95,  536,  536,  247,  282,  279,  294,  458,  450,
 /*  5590 */   444,  188,  536,  271,  536,  536,  536,  536,  536,  536,
 /*  5600 */   536,  410,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  5610 */   536,  536,  536,  536,  129,  536,  536,  536,  536,  536,
 /*  5620 */   536,  536,  536,  536,  544,  536,  536,  536,  536,  536,
 /*  5630 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  5640 */   162,  184,  198,  170,  197,  218,  179,  411,  212,  206,
 /*  5650 */   391,   89,  164,  249,  410,  536,  536,  536,  536,  451,
 /*  5660 */   441,  536,  536,  536,  536,  536,  536,  129,  259,  256,
 /*  5670 */   536,  536,  536,  536,  536,  536,  536,  464,  536,  536,
 /*  5680 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  5690 */   536,  536,  536,  162,  184,  198,  170,  197,  218,  179,
 /*  5700 */   411,  212,  206,  391,   89,  164,  249,  410,   91,  536,
 /*  5710 */   536,  536,  451,  441,  536,  536,  536,  536,  536,  273,
 /*  5720 */   129,  259,  256,  536,  536,  536,  536,  536,  536,  536,
 /*  5730 */   466,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  5740 */    90,  273,  130,   93,  536,   30,  162,  184,  198,  170,
 /*  5750 */   197,  218,  179,  411,  212,  206,  391,   89,  164,  249,
 /*  5760 */   536,  104,  536,  536,  120,  451,  441,   43,  536,  536,
 /*  5770 */   536,  536,  234,  536,  259,  256,  536,  536,  536,  536,
 /*  5780 */   536,  536,   91,  536,  536,  536,  536,  536,  536,  536,
 /*  5790 */   536,  536,  536,  273,   98,   99,  536,  536,   92,   96,
 /*  5800 */    95,  536,  536,  247,  282,  279,  294,  458,  450,  444,
 /*  5810 */   188,  536,  271,   91,   90,  536,  130,   93,  536,   30,
 /*  5820 */   536,  536,  536,  536,  273,  536,  536,  536,  536,  458,
 /*  5830 */   450,  444,  188,  536,  271,  400,  399,  398,  174,  405,
 /*  5840 */   168,  166,  526,  284,  536,   90,  536,  115,   93,  536,
 /*  5850 */    30,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*  5860 */   536,  536,  536,  536,  536,  536,  536,  536,   98,   99,
 /*  5870 */   536,  536,   92,   96,   95,  536,  536,  247,  282,  279,
 /*  5880 */   294,  458,  450,  444,  188,  536,  271,  536,  410,  536,
 /*  5890 */   536,  536,  536,  536,  536,  536,  536,  536,  536,   98,
 /*  5900 */    99,  129,  536,   92,   96,   95,  536,  536,  247,  282,
 /*  5910 */   279,  294,  458,  450,  444,  188,  536,  271,  536,  536,
 /*  5920 */   536,  536,  536,  536,  536,  536,  536,  180,  184,  198,
 /*  5930 */   170,  197,  218,  179,  411,  212,  206,  391,   89,  164,
 /*  5940 */   249,  410,  536,  536,  536,  536,  451,  441,  273,  536,
 /*  5950 */   536,  536,  536,  536,  129,  259,  256,  536,  536,  497,
 /*  5960 */   536,  536,  536,  536,  536,  536,  536,  536,  104,  536,
 /*  5970 */   536,  120,  536,  536,   43,  536,  536,  536,  536,  536,
 /*  5980 */   536,  172,  198,  170,  197,  218,  179,  411,  212,  206,
 /*  5990 */   391,   89,  164,  249,  135,  536,  536,  536,  536,  451,
 /*  6000 */   441,  536,  536,  536,  536,  537,  536,  536,  259,  256,
 /*  6010 */   536,  536,  536,  536,  536,  536,  410,  536,  536,  536,
 /*  6020 */   536,  536,  536,  536,  536,  103,  138,  536,  124,  129,
 /*  6030 */   536,  536,  489,  536,  536,  536,  458,  450,  444,  188,
 /*  6040 */   536,  271,  400,  399,  398,  174,  405,  168,  166,  526,
 /*  6050 */   284,  536,  536,  536,  536,  536,  176,  198,  170,  197,
 /*  6060 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  6070 */   536,  536,  536,  536,  451,  441,  410,  536,  536,  536,
 /*  6080 */   536,  536,  536,  259,  256,  536,  536,  536,  536,  129,
 /*  6090 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  400,
 /*  6100 */   399,  398,  174,  405,  168,  166,  526,  284,  536,  536,
 /*  6110 */   536,  536,  536,  536,  536,  536,  410,  208,  170,  197,
 /*  6120 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  129,
 /*  6130 */   536,  536,  536,  536,  451,  441,  536,  536,  536,  536,
 /*  6140 */   536,  536,  536,  259,  256,  536,  536,  536,  536,  536,
 /*  6150 */   536,  536,  536,  536,  536,  536,  410,  220,  170,  197,
 /*  6160 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  129,
 /*  6170 */   536,  536,  536,  536,  451,  441,  536,  536,  536,  536,
 /*  6180 */   536,  536,  536,  259,  256,  536,  536,  536,  536,  536,
 /*  6190 */   536,  536,  536,  536,  536,  536,  410,  204,  170,  197,
 /*  6200 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  129,
 /*  6210 */   536,  536,  536,  536,  451,  441,  536,  536,  536,  536,
 /*  6220 */   536,  536,  536,  259,  256,  536,  536,  536,  536,  536,
 /*  6230 */   536,  536,  536,  536,  536,  536,  536,  410,  167,  197,
 /*  6240 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  6250 */   129,  536,  536,  536,  451,  441,  536,  536,  536,  536,
 /*  6260 */   536,  536,  536,  259,  256,  410,  536,  536,  536,  536,
 /*  6270 */   536,  536,  536,  536,  536,  536,  536,  536,  129,  169,
 /*  6280 */   197,  218,  179,  411,  212,  206,  391,   89,  164,  249,
 /*  6290 */   536,  536,  536,  536,  536,  451,  441,  536,  536,  536,
 /*  6300 */   536,  536,  536,  536,  259,  256,  410,  536,  210,  218,
 /*  6310 */   179,  411,  212,  206,  391,   89,  164,  249,  536,  129,
 /*  6320 */   536,  536,  536,  451,  441,  536,  536,  536,  536,  536,
 /*  6330 */   536,  536,  259,  256,  536,  536,  536,  536,  536,  536,
 /*  6340 */   536,  536,  536,  536,  536,  536,  410,  536,  536,  214,
 /*  6350 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  129,
 /*  6360 */   536,  536,  536,  536,  451,  441,  536,  536,  536,  536,
 /*  6370 */   536,  536,  410,  259,  256,  536,  536,  536,  536,  536,
 /*  6380 */   536,  536,  536,  536,  536,  129,  536,  536,  536,  216,
 /*  6390 */   218,  179,  411,  212,  206,  391,   89,  164,  249,  536,
 /*  6400 */   536,  536,  536,  536,  451,  441,  536,  536,  536,  536,
 /*  6410 */   536,  536,  536,  259,  256,  201,  218,  179,  411,  212,
 /*  6420 */   206,  391,   89,  164,  249,  536,  536,  536,  536,  536,
 /*  6430 */   451,  441,  536,  536,  536,  536,  536,  536,  536,  259,
 /*  6440 */   256,
    );
    static public $yy_lookahead = array(
 /*     0 */     9,  150,    7,  152,    9,   10,  155,  156,  157,   39,
 /*    10 */    19,   20,   21,   22,   23,  151,   46,   26,   27,   28,
 /*    20 */    29,   93,   94,   32,  160,   34,   35,   36,  164,  156,
 /*    30 */   157,   40,   41,   56,   43,   44,   40,   46,   25,   26,
 /*    40 */    27,   28,   51,   73,   53,   54,   55,   56,   57,   58,
 /*    50 */    59,   60,   61,   62,  203,  204,   65,   30,   31,   68,
 /*    60 */    69,   70,   71,   72,   95,   96,   75,   76,   77,   78,
 /*    70 */    79,  207,  208,  209,  210,  156,  157,  204,  214,  215,
 /*    80 */   216,  217,  218,  219,  117,  118,   95,   96,  121,  122,
 /*    90 */    99,  100,  101,   20,  158,  104,  105,  106,  107,  108,
 /*   100 */   109,  110,  111,   20,  113,  114,  115,  116,  117,  118,
 /*   110 */   119,  120,  121,  122,    9,   41,   43,   43,   91,   92,
 /*   120 */   152,   24,   20,  204,   19,   20,   21,   22,   23,   20,
 /*   130 */    23,   26,   27,   28,   29,   52,   21,   32,   23,   34,
 /*   140 */    35,   36,   40,   41,   42,   40,   41,  211,   43,   44,
 /*   150 */   182,   46,   43,   44,   45,    4,   51,  221,   53,   54,
 /*   160 */    55,   56,   57,   58,   59,   60,   61,   62,  200,   31,
 /*   170 */    65,  203,  204,   68,   69,   70,   71,   72,   40,   41,
 /*   180 */    75,   76,   77,   78,   79,  147,   47,   20,  114,  115,
 /*   190 */   116,  117,  118,  119,  120,  121,  122,   21,  160,   23,
 /*   200 */    95,   96,  156,  157,   99,  100,  101,   40,   41,  104,
 /*   210 */   105,  106,  107,  108,  109,  110,  111,   46,  113,  114,
 /*   220 */   115,  116,  117,  118,  119,  120,  121,  122,    9,  191,
 /*   230 */   192,  193,  194,  195,  196,  197,  198,  199,   19,   20,
 /*   240 */    21,   90,   23,  205,  206,   26,   27,   28,   29,   13,
 /*   250 */   204,   32,  214,  215,   40,   41,  160,   40,   41,   40,
 /*   260 */    41,   47,   43,   44,   47,   46,   30,   48,   49,   50,
 /*   270 */    51,   45,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   280 */    61,   62,   46,   13,   65,   24,   46,   68,   69,   70,
 /*   290 */    71,   72,   31,   47,   75,   76,   77,   78,   79,  147,
 /*   300 */    30,   30,   48,  207,  208,  209,  210,  134,  135,  136,
 /*   310 */   214,  215,  160,   73,   95,   96,   46,   46,   99,  100,
 /*   320 */   101,   33,   41,  104,  105,  106,  107,  108,  109,  110,
 /*   330 */   111,   74,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   340 */   121,  122,    9,  191,  192,  193,  194,  195,  196,  197,
 /*   350 */   198,  199,   19,   20,   21,   22,   23,  205,  206,   26,
 /*   360 */    27,   28,   29,  174,  175,   32,  214,  215,  147,   25,
 /*   370 */    26,   27,   28,   40,   41,   31,   43,   44,   22,   46,
 /*   380 */    22,  160,  112,  112,   51,   46,   53,   54,   55,   56,
 /*   390 */    57,   58,   59,   60,   61,   62,   20,   31,   65,   23,
 /*   400 */   112,   68,   69,   70,   71,   72,   40,   41,   75,   76,
 /*   410 */    77,   78,   79,  192,  193,  194,  195,  196,  197,  198,
 /*   420 */   199,   73,   66,   67,   66,   67,  205,  206,   95,   96,
 /*   430 */    46,  158,   99,  100,  101,  214,  215,  104,  105,  106,
 /*   440 */   107,  108,  109,  110,  111,   41,  113,  114,  115,  116,
 /*   450 */   117,  118,  119,  120,  121,  122,    9,  117,  118,   47,
 /*   460 */    20,  121,  122,   43,   44,   45,   19,   20,   21,   22,
 /*   470 */    23,   26,   27,   26,   27,   28,   29,   32,   20,   32,
 /*   480 */    40,   41,  147,   20,  211,  117,   23,   40,   41,  121,
 /*   490 */    43,   44,   33,   46,  221,  160,   37,   38,   51,   41,
 /*   500 */    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*   510 */     5,   20,   65,    8,   23,   68,   69,   70,   71,   72,
 /*   520 */    23,   41,   75,   76,   77,   78,   79,  192,  193,  194,
 /*   530 */   195,  196,  197,  198,  199,  117,   22,   39,   24,  121,
 /*   540 */   205,  206,   95,   96,   23,  158,   99,  100,  101,  214,
 /*   550 */   215,  104,  105,  106,  107,  108,  109,  110,  111,   13,
 /*   560 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*   570 */     9,   73,   21,   20,   23,   22,   30,   97,   98,   74,
 /*   580 */    19,   20,   21,   22,   23,  212,  213,   26,   27,   28,
 /*   590 */    29,  168,  169,   32,  116,  117,  147,   20,  211,  121,
 /*   600 */   211,   40,   41,   30,   43,   44,   24,   46,  221,  160,
 /*   610 */   221,   22,   51,   24,   53,   54,   55,   56,   57,   58,
 /*   620 */    59,   60,   61,   62,   23,   31,   65,   24,   20,   68,
 /*   630 */    69,   70,   71,   72,   40,   41,   75,   76,   77,   78,
 /*   640 */    79,  152,  193,  194,  195,  196,  197,  198,  199,  211,
 /*   650 */    47,   43,  145,  146,  205,  206,   95,   96,  112,  221,
 /*   660 */    99,  100,  101,  214,  215,  104,  105,  106,  107,  108,
 /*   670 */   109,  110,  111,   30,  113,  114,  115,  116,  117,  118,
 /*   680 */   119,  120,  121,  122,    9,  112,   20,   20,   24,  200,
 /*   690 */    20,   23,  203,  204,   19,   20,   21,   22,   23,  151,
 /*   700 */   153,   26,   27,   28,   29,  158,   20,   32,  160,   43,
 /*   710 */   147,   47,  164,   43,  211,   40,   41,  211,   43,   44,
 /*   720 */   153,   46,   33,  160,  221,  158,   51,  221,   53,   54,
 /*   730 */    55,   56,   57,   58,   59,   60,   61,   62,   52,   31,
 /*   740 */    65,  135,  136,   68,   69,   70,   71,   72,   40,   41,
 /*   750 */    75,   76,   77,   78,   79,  207,  208,  209,  210,  178,
 /*   760 */   179,   30,  214,  215,  216,  217,  218,  219,  205,  206,
 /*   770 */    95,   96,   40,   41,   99,  100,  101,  214,  215,  104,
 /*   780 */   105,  106,  107,  108,  109,  110,  111,   23,  113,  114,
 /*   790 */   115,  116,  117,  118,  119,  120,  121,  122,    9,   49,
 /*   800 */    50,   20,   21,   13,   20,   46,   13,   24,   19,   20,
 /*   810 */    21,   22,   23,  151,   31,   26,   27,   28,   29,   41,
 /*   820 */    30,   32,  160,   30,  147,   20,  164,   43,   23,   40,
 /*   830 */    41,   20,   43,   44,   46,   46,  112,  160,   20,   21,
 /*   840 */    51,   47,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   850 */    61,   62,   41,   30,   65,  121,  121,   68,   69,   70,
 /*   860 */    71,   72,  121,   24,   75,   76,   77,   78,   79,  207,
 /*   870 */   208,  209,  210,   30,  121,   46,  214,  215,  216,  217,
 /*   880 */   218,  219,  205,  206,   95,   96,   47,   23,   99,  100,
 /*   890 */   101,  214,  215,  104,  105,  106,  107,  108,  109,  110,
 /*   900 */   111,  121,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   910 */   121,  122,    9,   47,   23,    9,  121,   47,    9,   23,
 /*   920 */    13,   46,   19,   20,   21,   22,   23,   23,   20,   26,
 /*   930 */    27,   28,   29,   20,   33,   32,   74,   23,  147,   47,
 /*   940 */    30,   20,   20,   40,   41,   33,   43,   44,   21,   46,
 /*   950 */    21,  160,   13,   23,   51,   23,   53,   54,   55,   56,
 /*   960 */    57,   58,   59,   60,   61,   62,   13,   13,   65,    2,
 /*   970 */    39,   68,   69,   70,   71,   72,   13,   21,   75,   76,
 /*   980 */    77,   78,   79,   46,  193,  194,  195,  196,  197,  198,
 /*   990 */   199,   47,   13,   23,   20,   20,  205,  206,   95,   96,
 /*  1000 */   146,   63,   99,  100,  101,  214,  215,  104,  105,  106,
 /*  1010 */   107,  108,  109,  110,  111,  154,  113,  114,  115,  116,
 /*  1020 */   117,  118,  119,  120,  121,  122,    9,  154,  154,  144,
 /*  1030 */   154,  175,   21,   46,  129,  158,   19,   20,   21,   22,
 /*  1040 */    23,  151,  158,   26,   27,   28,   29,  158,  154,   32,
 /*  1050 */   160,  133,  204,  138,  164,  204,   30,   40,   41,  143,
 /*  1060 */    43,   44,  204,   46,   43,  179,  133,  144,   51,  222,
 /*  1070 */    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*  1080 */   154,  223,   65,  158,  223,   68,   69,   70,   71,   72,
 /*  1090 */   154,  223,   75,   76,   77,   78,   79,  207,  208,  209,
 /*  1100 */   210,  154,  154,  223,  214,  215,  216,  217,  218,  219,
 /*  1110 */   223,  223,   95,   96,  223,  223,   99,  100,  101,  223,
 /*  1120 */   223,  104,  105,  106,  107,  108,  109,  110,  111,  223,
 /*  1130 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1140 */     9,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  1150 */    19,   20,   21,   22,   23,  223,  223,   26,   27,   28,
 /*  1160 */    29,  223,  223,   32,  223,  223,  147,  223,  223,  223,
 /*  1170 */   223,   40,   41,  223,   43,   44,  223,   46,  223,  160,
 /*  1180 */   223,  223,   51,  223,   53,   54,   55,   56,   57,   58,
 /*  1190 */    59,   60,   61,   62,  223,  223,   65,  223,  223,   68,
 /*  1200 */    69,   70,   71,   72,  223,  223,   75,   76,   77,   78,
 /*  1210 */    79,  223,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  1220 */   223,  223,  223,  223,  205,  206,   95,   96,  223,  223,
 /*  1230 */    99,  100,  101,  214,  215,  104,  105,  106,  107,  108,
 /*  1240 */   109,  110,  111,  223,  113,  114,  115,  116,  117,  118,
 /*  1250 */   119,  120,  121,  122,    9,  223,  223,  223,  223,  223,
 /*  1260 */   223,  223,  223,  223,   19,   20,   21,   22,   23,  223,
 /*  1270 */   223,   26,   27,   28,   29,  223,  223,   32,  223,  223,
 /*  1280 */   147,  223,  223,  223,  223,   40,   41,  223,   43,   44,
 /*  1290 */   223,   46,  223,  160,  223,  223,   51,  223,   53,   54,
 /*  1300 */    55,   56,   57,   58,   59,   60,   61,   62,  223,  223,
 /*  1310 */    65,  223,  223,   68,   69,   70,   71,   72,  223,  223,
 /*  1320 */    75,   76,   77,   78,   79,  223,  223,  194,  195,  196,
 /*  1330 */   197,  198,  199,  223,  223,  223,  223,  223,  205,  206,
 /*  1340 */    95,   96,  223,  223,   99,  100,  101,  214,  215,  104,
 /*  1350 */   105,  106,  107,  108,  109,  110,  111,  223,  113,  114,
 /*  1360 */   115,  116,  117,  118,  119,  120,  121,  122,    9,  223,
 /*  1370 */   223,  223,  223,  223,  223,  223,  223,  223,   19,   20,
 /*  1380 */    21,  223,   23,  223,  223,   26,   27,   28,   29,  223,
 /*  1390 */   223,   32,  223,  223,  147,  223,  223,  223,  223,   40,
 /*  1400 */    41,  223,   43,   44,  223,   46,  223,  160,  223,  223,
 /*  1410 */    51,  223,   53,   54,   55,   56,   57,   58,   59,   60,
 /*  1420 */    61,   62,  223,  223,   65,  223,  223,   68,   69,   70,
 /*  1430 */    71,   72,  223,  223,   75,   76,   77,   78,   79,  223,
 /*  1440 */   223,  194,  195,  196,  197,  198,  199,  223,  223,  223,
 /*  1450 */   223,  223,  205,  206,   95,   96,  223,  223,   99,  100,
 /*  1460 */   101,  214,  215,  104,  105,  106,  107,  108,  109,  110,
 /*  1470 */   111,  223,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  1480 */   121,  122,    9,  223,  223,  223,  223,  223,  223,  223,
 /*  1490 */   223,  223,   19,   20,   21,  223,   23,  223,  223,   26,
 /*  1500 */    27,  223,   29,  223,  223,   32,  223,  223,  147,  223,
 /*  1510 */   223,  223,  223,   40,   41,    9,   43,   44,  223,   46,
 /*  1520 */   223,  160,  223,  223,  223,  223,   20,  223,   55,   56,
 /*  1530 */    57,   58,   59,   60,   61,   62,  223,  223,   65,  223,
 /*  1540 */   223,   68,   69,   70,   71,   72,   40,   41,   75,   76,
 /*  1550 */    77,   78,   79,  223,  223,  194,  195,  196,  197,  198,
 /*  1560 */   199,  223,  223,  223,  223,  223,  205,  206,   95,   96,
 /*  1570 */   223,  223,   99,  100,  101,  214,  215,  104,  105,  106,
 /*  1580 */   107,  108,  109,  110,  111,  223,  113,  114,  115,  116,
 /*  1590 */   117,  118,  119,  120,  121,  122,  126,  127,  128,   20,
 /*  1600 */   130,  131,  132,  223,  223,    9,  223,  137,  138,  139,
 /*  1610 */   140,  141,  142,  223,  223,  223,   20,  147,  148,  149,
 /*  1620 */   223,  151,   43,  223,  223,   46,  223,  223,  223,  159,
 /*  1630 */   160,  161,  223,  223,  223,  165,   40,   41,   42,  223,
 /*  1640 */   170,  171,  172,  173,  223,  223,  223,  177,  223,  223,
 /*  1650 */   180,  181,  223,  183,  184,  185,  186,  187,  188,  189,
 /*  1660 */   190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  1670 */   223,  223,  223,  223,  223,  205,  206,  207,  208,  209,
 /*  1680 */   210,  223,  223,  223,  214,  215,  223,  108,  109,  110,
 /*  1690 */   111,  223,  113,  223,  223,  126,  127,  128,  223,  130,
 /*  1700 */   131,  132,  223,  223,  223,  223,  137,  138,  223,  223,
 /*  1710 */   223,  223,  223,  223,  223,  223,  147,  148,  149,  223,
 /*  1720 */   151,  223,  223,  223,  223,  223,  223,  223,  159,  160,
 /*  1730 */   161,  223,  223,  223,  165,  166,  167,  168,  169,  170,
 /*  1740 */   171,  172,  173,  223,  223,  223,  177,  223,  223,  180,
 /*  1750 */   181,  223,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  1760 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  1770 */   223,  223,  223,  223,  205,  206,  207,  208,  209,  210,
 /*  1780 */   223,  223,  223,  214,  215,  126,  127,  128,  223,  130,
 /*  1790 */   131,  132,  223,  223,  223,  223,  137,  138,  223,  140,
 /*  1800 */   141,  142,  223,  223,  223,  223,  147,  148,  149,  223,
 /*  1810 */   151,  223,  223,  223,  223,  223,  223,  223,  159,  160,
 /*  1820 */   161,  223,  223,  223,  165,  223,  223,  223,  151,  170,
 /*  1830 */   171,  172,  173,  223,  223,  223,  177,  160,  223,  180,
 /*  1840 */   181,  223,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  1850 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  1860 */   223,  223,  223,  223,  205,  206,  207,  208,  209,  210,
 /*  1870 */   223,  223,  223,  214,  215,  124,  125,  126,  127,  128,
 /*  1880 */   223,  130,  131,  132,  207,  208,  209,  210,  137,  138,
 /*  1890 */   223,  214,  215,  223,  223,  223,  223,  223,  147,  148,
 /*  1900 */   149,  223,  151,  223,  223,  223,  223,  223,  223,  223,
 /*  1910 */   159,  160,  161,  223,  223,  223,  165,  223,  223,  223,
 /*  1920 */   151,  170,  171,  172,  173,  223,  223,  223,  177,  160,
 /*  1930 */   223,  180,  181,  223,  183,  184,  185,  186,  187,  188,
 /*  1940 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  1950 */   199,  223,  223,  223,  223,  223,  205,  206,  207,  208,
 /*  1960 */   209,  210,  223,  223,  223,  214,  215,  223,  125,  126,
 /*  1970 */   127,  128,  223,  130,  131,  132,  207,  208,  209,  210,
 /*  1980 */   137,  138,  223,  214,  215,  223,  223,  223,  223,  223,
 /*  1990 */   147,  148,  149,  223,  151,  223,  223,  223,  223,  223,
 /*  2000 */   223,  223,  159,  160,  161,  223,  223,  223,  165,  223,
 /*  2010 */   223,  223,  223,  170,  171,  172,  173,  223,  223,  223,
 /*  2020 */   177,  223,  223,  180,  181,  223,  183,  184,  185,  186,
 /*  2030 */   187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  2040 */   197,  198,  199,  223,  223,  223,  223,  223,  205,  206,
 /*  2050 */   207,  208,  209,  210,  223,  223,  223,  214,  215,  223,
 /*  2060 */   125,  126,  127,  128,  223,  130,  131,  132,  223,  223,
 /*  2070 */   223,  223,  137,  138,  223,  223,  223,  223,  223,  223,
 /*  2080 */   223,  223,  147,  148,  149,  223,  151,  223,  223,  223,
 /*  2090 */   223,  223,  223,  223,  159,  160,  161,  223,  223,  223,
 /*  2100 */   165,  223,  223,  223,  223,  170,  171,  172,  173,  223,
 /*  2110 */   223,  223,  177,  223,  223,  180,  181,  223,  183,  184,
 /*  2120 */   185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
 /*  2130 */   195,  196,  197,  198,  199,  223,  223,  223,  223,  223,
 /*  2140 */   205,  206,  207,  208,  209,  210,  223,  223,  223,  214,
 /*  2150 */   215,  223,  125,  126,  127,  128,  223,  130,  131,  132,
 /*  2160 */   223,  223,  223,  223,  137,  138,  223,  223,  223,  223,
 /*  2170 */   223,  223,  223,  223,  147,  148,  149,  223,  151,  223,
 /*  2180 */   223,  223,  223,  223,  223,  223,  159,  160,  161,  223,
 /*  2190 */   223,  223,  165,  223,  223,  223,  223,  170,  171,  172,
 /*  2200 */   173,  223,  223,  223,  177,  223,  223,  180,  181,  223,
 /*  2210 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  2220 */   193,  194,  195,  196,  197,  198,  199,  223,  223,  223,
 /*  2230 */   223,  223,  205,  206,  207,  208,  209,  210,  223,  223,
 /*  2240 */   223,  214,  215,  223,  125,  126,  127,  128,  223,  130,
 /*  2250 */   131,  132,  223,  223,  223,  223,  137,  138,  223,  223,
 /*  2260 */   223,  223,  223,  223,  223,  223,  147,  148,  149,  223,
 /*  2270 */   151,  223,  223,  223,  223,  223,  223,  223,  159,  160,
 /*  2280 */   161,  223,  223,  223,  165,  223,  223,  223,  223,  170,
 /*  2290 */   171,  172,  173,  223,  223,  223,  177,  223,  223,  180,
 /*  2300 */   181,  223,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  2310 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  2320 */   223,  223,  223,  223,  205,  206,  207,  208,  209,  210,
 /*  2330 */   223,  223,  223,  214,  215,  223,  125,  126,  127,  128,
 /*  2340 */   223,  130,  131,  132,  223,  223,  223,  223,  137,  138,
 /*  2350 */   223,  223,  223,  223,  223,  223,  223,  223,  147,  148,
 /*  2360 */   149,  223,  151,  223,  223,  223,  223,  223,  223,  223,
 /*  2370 */   159,  160,  161,  223,  223,  223,  165,  223,  223,  223,
 /*  2380 */   223,  170,  171,  172,  173,  223,  223,  223,  177,  223,
 /*  2390 */   223,  180,  181,  223,  183,  184,  185,  186,  187,  188,
 /*  2400 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  2410 */   199,  223,  223,  223,  223,  223,  205,  206,  207,  208,
 /*  2420 */   209,  210,  223,  223,  223,  214,  215,  223,  125,  126,
 /*  2430 */   127,  128,  223,  130,  131,  132,  223,  223,  223,  223,
 /*  2440 */   137,  138,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  2450 */   147,  148,  149,  223,  151,  223,  223,  223,  223,  223,
 /*  2460 */   223,  223,  159,  160,  161,  223,  223,  223,  165,  223,
 /*  2470 */   223,  223,  223,  170,  171,  172,  173,  223,  223,  223,
 /*  2480 */   177,  223,  223,  180,  181,  223,  183,  184,  185,  186,
 /*  2490 */   187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  2500 */   197,  198,  199,  223,  223,  223,  223,  223,  205,  206,
 /*  2510 */   207,  208,  209,  210,  223,  223,  223,  214,  215,  223,
 /*  2520 */   125,  126,  127,  128,  223,  130,  131,  132,  223,  223,
 /*  2530 */   223,  223,  137,  138,  223,  223,  223,  223,  223,  223,
 /*  2540 */   223,  223,  147,  148,  149,  223,  151,  223,  223,  223,
 /*  2550 */   223,  223,  223,  223,  159,  160,  161,  223,  223,  223,
 /*  2560 */   165,  223,  223,  223,  223,  170,  171,  172,  173,  223,
 /*  2570 */   223,  223,  177,  223,  223,  180,  181,  223,  183,  184,
 /*  2580 */   185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
 /*  2590 */   195,  196,  197,  198,  199,  223,  223,  223,  223,  223,
 /*  2600 */   205,  206,  207,  208,  209,  210,  223,  223,  223,  214,
 /*  2610 */   215,  223,  125,  126,  127,  128,  223,  130,  131,  132,
 /*  2620 */   223,  223,  223,  223,  137,  138,  223,  223,  223,  223,
 /*  2630 */   223,  223,  223,  223,  147,  148,  149,  223,  151,  223,
 /*  2640 */   223,  223,  223,  223,  223,  223,  159,  160,  161,  223,
 /*  2650 */   223,  223,  165,  223,  223,  223,  223,  170,  171,  172,
 /*  2660 */   173,  223,  223,  223,  177,  223,  223,  180,  181,  223,
 /*  2670 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  2680 */   193,  194,  195,  196,  197,  198,  199,  223,  223,  223,
 /*  2690 */   223,  223,  205,  206,  207,  208,  209,  210,  223,  223,
 /*  2700 */   223,  214,  215,  223,  125,  126,  127,  128,  223,  130,
 /*  2710 */   131,  132,  223,  223,  223,  223,  137,  138,  223,  223,
 /*  2720 */   223,  223,  223,  223,  223,  223,  147,  148,  149,  223,
 /*  2730 */   151,  223,  223,  223,  223,  223,  223,  223,  159,  160,
 /*  2740 */   161,  223,  223,  223,  165,  223,  223,  223,  223,  170,
 /*  2750 */   171,  172,  173,  223,  223,  223,  177,  223,  223,  180,
 /*  2760 */   181,  223,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  2770 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  2780 */   223,  223,  223,  223,  205,  206,  207,  208,  209,  210,
 /*  2790 */   223,  223,  223,  214,  215,  223,  125,  126,  127,  128,
 /*  2800 */   223,  130,  131,  132,  223,  223,  223,  223,  137,  138,
 /*  2810 */   223,  223,  223,  223,  223,  223,  223,  223,  147,  148,
 /*  2820 */   149,  223,  151,  223,  223,  223,  223,  223,  223,  223,
 /*  2830 */   159,  160,  161,  223,  223,  223,  165,  223,  223,  223,
 /*  2840 */   223,  170,  171,  172,  173,  223,   46,  223,  177,  223,
 /*  2850 */   223,  180,  181,  223,  183,  184,  185,  186,  187,  188,
 /*  2860 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  2870 */   199,  223,  223,   73,  223,  223,  205,  206,  207,  208,
 /*  2880 */   209,  210,  223,  223,  223,  214,  215,  126,  127,  128,
 /*  2890 */   223,  130,  131,  132,  223,  223,  223,  223,  137,  138,
 /*  2900 */   100,  101,  102,  103,  223,  223,  223,  223,  147,  148,
 /*  2910 */   149,  223,  151,  223,  223,  223,  223,  223,  223,  223,
 /*  2920 */   159,  160,  161,  223,  223,  223,  165,  223,  223,  223,
 /*  2930 */   223,  170,  171,  172,  173,  223,  223,  223,  177,  223,
 /*  2940 */   223,  180,  181,  223,  183,  184,  185,  186,  187,  188,
 /*  2950 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  2960 */   199,  223,  223,  223,  223,  223,  205,  206,  207,  208,
 /*  2970 */   209,  210,  223,  223,  223,  214,  215,  223,  223,  127,
 /*  2980 */   128,  223,  130,  131,  132,  223,  223,  223,  223,  137,
 /*  2990 */   138,  223,  223,  223,  223,  223,  223,  223,  223,  147,
 /*  3000 */   223,  149,  223,  151,  223,  223,  223,  223,  223,  223,
 /*  3010 */   223,  223,  160,  223,  223,  223,  223,  223,  223,  223,
 /*  3020 */   223,  223,  170,  171,  172,  173,  223,  223,  223,  177,
 /*  3030 */   223,  223,  180,  181,  223,  183,  184,  185,  186,  187,
 /*  3040 */   188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
 /*  3050 */   198,  199,  223,  223,  223,  223,  223,  205,  206,  207,
 /*  3060 */   208,  209,  210,  223,  223,  223,  214,  215,  223,  127,
 /*  3070 */   128,  223,  130,  131,  132,  223,  223,  223,  223,  137,
 /*  3080 */   138,  223,  223,  223,  223,  223,  223,  223,  223,  147,
 /*  3090 */   223,  149,  223,  151,  223,  223,  223,  223,  223,  223,
 /*  3100 */   223,  223,  160,  223,  223,  223,  223,  223,  223,  223,
 /*  3110 */   223,  223,  170,  171,  172,  173,  223,  223,  223,  177,
 /*  3120 */   223,  223,  180,  181,  223,  183,  184,  185,  186,  187,
 /*  3130 */   188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
 /*  3140 */   198,  199,  223,  223,  223,  223,  223,  205,  206,  207,
 /*  3150 */   208,  209,  210,  223,  223,  223,  214,  215,  223,  223,
 /*  3160 */   127,  128,  223,  130,  131,  132,  223,  223,  223,  223,
 /*  3170 */   137,  138,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  3180 */   147,  223,  149,  223,  151,  223,  223,  223,  223,  223,
 /*  3190 */   223,  223,  223,  160,  223,  223,  223,  223,  223,  223,
 /*  3200 */   223,  223,  223,  170,  171,  172,  173,  223,  223,  223,
 /*  3210 */   177,  223,  223,  180,  181,  223,  183,  184,  185,  186,
 /*  3220 */   187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  3230 */   197,  198,  199,  223,  223,  223,  223,  223,  205,  206,
 /*  3240 */   207,  208,  209,  210,  223,  223,  223,  214,  215,  223,
 /*  3250 */   127,  128,  223,  130,  131,  132,  223,  223,  223,  223,
 /*  3260 */   137,  138,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  3270 */   147,  223,  149,  223,  151,  223,  223,  223,  223,  223,
 /*  3280 */   223,  223,  223,  160,  223,  223,  223,  223,  223,  223,
 /*  3290 */   223,  223,  223,  170,  171,  172,  173,  223,  223,  223,
 /*  3300 */   177,  223,  223,  180,  181,  223,  183,  184,  185,  186,
 /*  3310 */   187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  3320 */   197,  198,  199,  223,  223,    9,  223,  223,  205,  206,
 /*  3330 */   207,  208,  209,  210,  223,  223,   20,  214,  215,  223,
 /*  3340 */   223,  127,  128,  223,  130,  131,  132,  223,  223,  223,
 /*  3350 */   223,  137,  138,  223,  223,  223,   40,   41,  223,   43,
 /*  3360 */   223,  147,  223,  149,  223,  151,  223,  223,  223,  223,
 /*  3370 */   223,  223,  223,  223,  160,  223,  223,  223,   40,  223,
 /*  3380 */   223,   43,  223,  223,  170,  171,  172,  173,  223,  223,
 /*  3390 */   223,  177,  223,  223,  180,  181,  223,  183,  184,  185,
 /*  3400 */   186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  3410 */   196,  197,  198,  199,    9,  223,  223,  223,   43,  205,
 /*  3420 */   206,  207,  208,  209,  210,   20,  223,  223,  214,  215,
 /*  3430 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  223,
 /*  3440 */   223,  223,  223,  223,  223,   40,   41,  223,   43,   44,
 /*  3450 */   223,   46,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  3460 */   122,  223,  223,  223,  223,  223,  223,  223,  223,   64,
 /*  3470 */   223,  223,  223,  223,  223,  223,   71,   72,  223,  223,
 /*  3480 */    75,   76,   77,   78,   79,  223,  223,  223,  223,  114,
 /*  3490 */   115,  116,  117,  118,  119,  120,  121,  122,  223,  223,
 /*  3500 */    95,   96,  223,  223,   99,  100,  101,  223,  223,  104,
 /*  3510 */   105,  106,  107,  108,  109,  110,  111,  223,  113,  114,
 /*  3520 */   115,  116,  117,  118,  119,  120,  121,  122,    9,  223,
 /*  3530 */   223,  223,  223,  223,  147,  223,  223,  223,  223,   20,
 /*  3540 */   223,  223,   23,  223,  223,  223,  223,  160,  223,  223,
 /*  3550 */   223,  223,  223,  223,  223,  223,  223,  170,  223,   40,
 /*  3560 */    41,  223,   43,   44,  223,   46,  223,  223,  223,  223,
 /*  3570 */   223,  223,  223,  186,  187,  188,  189,  190,  191,  192,
 /*  3580 */   193,  194,  195,  196,  197,  198,  199,  138,  201,  202,
 /*  3590 */    71,   72,  205,  206,   75,   76,   77,   78,   79,  223,
 /*  3600 */   151,  214,  215,  223,  223,  223,  223,  223,  159,  160,
 /*  3610 */   161,  223,  223,  223,   95,   96,  223,  223,   99,  100,
 /*  3620 */   101,  223,  223,  104,  105,  106,  107,  108,  109,  110,
 /*  3630 */   111,  223,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  3640 */   121,  122,    9,  223,  223,  223,  223,  223,  147,  223,
 /*  3650 */   223,  223,  223,   20,  223,  223,  207,  208,  209,  210,
 /*  3660 */   223,  160,  223,  214,  215,  223,  223,  223,  223,  223,
 /*  3670 */   223,  170,  223,   40,   41,  223,   43,   44,  223,   46,
 /*  3680 */   223,  223,  223,  223,  183,  223,  223,  186,  187,  188,
 /*  3690 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  3700 */   199,  223,  223,  223,   71,   72,  205,  206,   75,   76,
 /*  3710 */    77,   78,   79,  223,  223,  214,  215,  223,  223,  223,
 /*  3720 */   223,  223,  147,  223,  223,  223,  223,  223,   95,   96,
 /*  3730 */   223,  223,   99,  100,  101,  160,  223,  104,  105,  106,
 /*  3740 */   107,  108,  109,  110,  111,  223,  113,  114,  115,  116,
 /*  3750 */   117,  118,  119,  120,  121,  122,  223,  223,  223,  223,
 /*  3760 */   223,  223,  147,  223,  223,  223,  151,  223,  223,  194,
 /*  3770 */   195,  196,  197,  198,  199,  160,  223,  223,  147,  164,
 /*  3780 */   205,  206,  151,  223,  223,  170,  223,  223,  223,  214,
 /*  3790 */   215,  160,  223,  223,  223,  164,  223,  223,  183,  223,
 /*  3800 */   223,  186,  187,  188,  189,  190,  191,  192,  193,  194,
 /*  3810 */   195,  196,  197,  198,  199,  223,  223,  223,  223,  223,
 /*  3820 */   205,  206,  207,  208,  209,  210,  223,  223,  223,  214,
 /*  3830 */   215,  216,  217,  218,  219,  223,  205,  206,  207,  208,
 /*  3840 */   209,  210,  223,  223,   20,  214,  215,  216,  217,  218,
 /*  3850 */   219,  220,  147,  222,  149,  223,  151,  223,  223,  223,
 /*  3860 */    26,   27,  223,  223,  223,  160,   32,   43,  223,  223,
 /*  3870 */    46,  223,  223,  223,   40,  170,  171,   43,  223,  223,
 /*  3880 */   223,  176,  223,  223,  223,  223,  223,  223,  183,  184,
 /*  3890 */   185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
 /*  3900 */   195,  196,  197,  198,  199,  223,  223,  223,  223,  223,
 /*  3910 */   205,  206,  207,  208,  209,  210,  223,  223,  223,  214,
 /*  3920 */   215,  223,  223,  147,  223,  149,  223,  151,  104,  105,
 /*  3930 */   106,  107,  108,  109,  110,  111,  160,  113,  223,  223,
 /*  3940 */   223,  223,  223,  223,  223,  223,  170,  171,  114,  115,
 /*  3950 */   116,  117,  118,  119,  120,  121,  122,  223,  223,  183,
 /*  3960 */   184,  185,  186,  187,  188,  189,  190,  191,  192,  193,
 /*  3970 */   194,  195,  196,  197,  198,  199,  223,  223,  223,  223,
 /*  3980 */   223,  205,  206,  207,  208,  209,  210,  223,  223,  223,
 /*  3990 */   214,  215,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  4000 */   147,  223,  149,  223,  151,  223,  223,  223,  223,  223,
 /*  4010 */   223,  223,  223,  160,  223,  223,  223,  223,  147,  223,
 /*  4020 */   223,  223,  223,  170,  171,  223,  223,  223,  223,  223,
 /*  4030 */   223,  160,  223,  223,  223,  223,  183,  184,  185,  186,
 /*  4040 */   187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  4050 */   197,  198,  199,  223,  223,  223,  223,  223,  205,  206,
 /*  4060 */   207,  208,  209,  210,  223,  194,  195,  214,  215,  198,
 /*  4070 */   199,  147,  223,  149,  223,  151,  205,  206,  223,  223,
 /*  4080 */   223,  223,  223,  223,  160,  214,  215,  223,  223,  223,
 /*  4090 */   223,  223,  223,  223,  170,  171,  223,  223,  223,  223,
 /*  4100 */   223,  223,  223,  223,  223,  223,  223,  183,  184,  185,
 /*  4110 */   186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  4120 */   196,  197,  198,  199,  223,  223,  223,  223,  223,  205,
 /*  4130 */   206,  207,  208,  209,  210,  223,  223,  223,  214,  215,
 /*  4140 */   223,  223,  223,  223,  223,  223,  223,  223,  147,  223,
 /*  4150 */   149,  223,  151,  223,  223,  223,  223,  223,  223,  223,
 /*  4160 */   223,  160,  223,  223,  223,  223,  147,  223,  223,  223,
 /*  4170 */   223,  170,  171,  223,  223,  223,  223,  223,  223,  160,
 /*  4180 */   223,  223,  223,  223,  183,  184,  185,  186,  187,  188,
 /*  4190 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  4200 */   199,  223,  223,  223,  223,  223,  205,  206,  207,  208,
 /*  4210 */   209,  210,  223,  194,  195,  214,  215,  198,  199,  147,
 /*  4220 */   223,  149,  223,  151,  205,  206,  223,  223,  223,  223,
 /*  4230 */   223,  223,  160,  214,  215,  223,  223,  223,  223,  223,
 /*  4240 */   223,  223,  170,  171,  223,  223,  223,  223,  223,  223,
 /*  4250 */   223,  223,  223,  223,  223,  183,  184,  185,  186,  187,
 /*  4260 */   188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
 /*  4270 */   198,  199,  223,  223,  223,  223,  223,  205,  206,  207,
 /*  4280 */   208,  209,  210,  223,  223,  223,  214,  215,  223,  223,
 /*  4290 */   223,  223,  223,  223,  223,  223,  147,  223,  149,  223,
 /*  4300 */   151,  223,  223,  223,  223,  223,  223,  223,  223,  160,
 /*  4310 */   223,  223,  223,  223,  223,  223,  223,  223,  223,  170,
 /*  4320 */   171,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  4330 */   223,  223,  183,  184,  185,  186,  187,  188,  189,  190,
 /*  4340 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  4350 */   223,  223,  223,  223,  205,  206,  207,  208,  209,  210,
 /*  4360 */   223,  223,  223,  214,  215,  223,  223,  147,  223,  149,
 /*  4370 */   223,  151,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  4380 */   160,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  4390 */   170,  171,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  4400 */   223,  223,  223,  183,  184,  185,  186,  187,  188,  189,
 /*  4410 */   190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  4420 */   223,  223,  223,  223,  223,  205,  206,  207,  208,  209,
 /*  4430 */   210,  223,  223,  223,  214,  215,  223,  223,    9,  223,
 /*  4440 */   223,  223,  223,  223,  147,  223,  149,  223,  151,   20,
 /*  4450 */   223,  223,  223,  223,  223,  223,  223,  160,  223,  223,
 /*  4460 */   223,  223,  223,  223,  223,  223,  223,  170,  171,   40,
 /*  4470 */    41,  223,   43,   44,  223,   46,  223,  223,  223,  223,
 /*  4480 */   183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
 /*  4490 */   193,  194,  195,  196,  197,  198,  199,  223,  223,  223,
 /*  4500 */   223,  223,  205,  206,  207,  208,  209,  210,  223,  223,
 /*  4510 */   223,  214,  215,  223,  223,  223,  223,  223,  223,  223,
 /*  4520 */   223,  223,  223,  223,   95,   96,  223,  223,   99,  100,
 /*  4530 */   101,  223,  223,  104,  105,  106,  107,  108,  109,  110,
 /*  4540 */   111,  223,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  4550 */   121,  122,  147,  223,  147,  223,    5,  223,  151,    8,
 /*  4560 */   223,  223,  223,  223,  223,  160,  223,  160,  223,  223,
 /*  4570 */   223,  164,  223,  223,  223,  170,  223,  223,  223,  223,
 /*  4580 */   223,  223,  223,  223,  223,  223,  223,  223,  183,  223,
 /*  4590 */    39,  186,  187,  188,  189,  190,  191,  192,  193,  194,
 /*  4600 */   195,  196,  197,  198,  199,  147,  223,  223,  223,  223,
 /*  4610 */   205,  206,  205,  206,  207,  208,  209,  210,  160,  214,
 /*  4620 */   215,  214,  215,  216,  217,  218,  219,  223,  170,  223,
 /*  4630 */   223,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*  4640 */    89,  223,  223,  223,  186,  187,  188,  189,  190,  191,
 /*  4650 */   192,  193,  194,  195,  196,  197,  198,  199,  223,  201,
 /*  4660 */   223,  223,  223,  205,  206,  223,    9,  223,  223,  223,
 /*  4670 */   223,  223,  214,  215,  223,  223,  147,   20,   21,   22,
 /*  4680 */   223,  223,  223,  223,  223,  223,  223,  223,  223,  160,
 /*  4690 */   223,  223,  223,  223,  223,  223,  223,  223,   41,  170,
 /*  4700 */    43,   44,  223,   46,  223,  223,  223,  223,  223,  223,
 /*  4710 */   223,  223,  223,  223,  223,  186,  187,  188,  189,  190,
 /*  4720 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  4730 */   201,  223,  223,  223,  205,  206,  147,  223,  223,  223,
 /*  4740 */   223,  223,  223,  214,  215,  223,  223,  223,  223,  160,
 /*  4750 */   223,  223,   95,   96,  223,  223,   99,  100,  101,  170,
 /*  4760 */   223,  104,  105,  106,  107,  108,  109,  110,  111,  223,
 /*  4770 */   113,  223,  223,  223,  223,  186,  187,  188,  189,  190,
 /*  4780 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  4790 */   223,  223,  147,  223,  205,  206,  223,  223,  223,  223,
 /*  4800 */   223,  223,  223,  214,  215,  160,  223,  223,  223,  223,
 /*  4810 */   223,  151,  152,  223,  223,  170,  223,  223,  223,  223,
 /*  4820 */   160,  223,  162,  163,  164,  223,  223,  223,  223,  223,
 /*  4830 */   223,  186,  187,  188,  189,  190,  191,  192,  193,  194,
 /*  4840 */   195,  196,  197,  198,  199,  223,  223,  223,  147,  223,
 /*  4850 */   205,  206,  223,  223,  223,  223,  223,  223,  223,  214,
 /*  4860 */   215,  160,  223,  203,  204,  223,  223,  207,  208,  209,
 /*  4870 */   210,  170,  223,  223,  214,  215,  216,  217,  218,  219,
 /*  4880 */   223,  223,  223,  223,  223,  223,  223,  186,  187,  188,
 /*  4890 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  4900 */   199,  147,  223,  223,  223,  223,  205,  206,  223,  223,
 /*  4910 */   223,  223,  223,  223,  160,  214,  215,  223,  223,  223,
 /*  4920 */   223,  223,  223,  147,  170,  223,  223,  223,  223,  223,
 /*  4930 */   223,  223,  223,  223,  223,  223,  160,  223,  223,  223,
 /*  4940 */   186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  4950 */   196,  197,  198,  199,  223,  223,  223,  223,  223,  205,
 /*  4960 */   206,  223,  223,  147,  223,  223,  223,  223,  214,  215,
 /*  4970 */   194,  195,  196,  197,  198,  199,  160,  223,  223,  223,
 /*  4980 */   223,  205,  206,  223,  223,  223,  170,  151,  152,  223,
 /*  4990 */   214,  215,  223,  223,  223,  223,  160,  223,  223,  163,
 /*  5000 */   164,  223,  186,  187,  188,  189,  190,  191,  192,  193,
 /*  5010 */   194,  195,  196,  197,  198,  199,  223,  223,  223,  147,
 /*  5020 */   223,  205,  206,  223,  223,  223,  223,  223,  223,  223,
 /*  5030 */   214,  215,  160,  223,  223,  223,  223,  223,  223,  203,
 /*  5040 */   204,  223,  170,  207,  208,  209,  210,  223,  223,  223,
 /*  5050 */   214,  215,  216,  217,  218,  219,  223,  223,  186,  187,
 /*  5060 */   188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
 /*  5070 */   198,  199,  147,  223,  223,  223,  223,  205,  206,  223,
 /*  5080 */   223,  223,  223,  223,  223,  160,  214,  215,  223,  223,
 /*  5090 */   223,  223,  147,  223,  223,  170,  151,  223,  223,  223,
 /*  5100 */   223,  223,  223,  223,  223,  160,  223,  223,  223,  164,
 /*  5110 */   223,  186,  187,  188,  189,  190,  191,  192,  193,  194,
 /*  5120 */   195,  196,  197,  198,  199,  223,  223,  223,  223,  223,
 /*  5130 */   205,  206,  223,  223,  147,  223,  223,  223,  223,  214,
 /*  5140 */   215,  223,  223,  223,  223,  223,  223,  160,  223,  223,
 /*  5150 */   205,  206,  207,  208,  209,  210,  223,  170,  147,  214,
 /*  5160 */   215,  216,  217,  218,  219,  223,  223,  223,  223,  223,
 /*  5170 */   223,  160,  223,  186,  187,  188,  189,  190,  191,  192,
 /*  5180 */   193,  194,  195,  196,  197,  198,  199,  223,  223,  223,
 /*  5190 */   147,  223,  205,  206,  223,  223,  223,  223,  223,  223,
 /*  5200 */   223,  214,  215,  160,  223,  194,  195,  196,  197,  198,
 /*  5210 */   199,  223,  223,  170,  223,  223,  205,  206,  223,  223,
 /*  5220 */   223,  223,  223,  223,  223,  214,  215,  223,  223,  186,
 /*  5230 */   187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  5240 */   197,  198,  199,  147,  223,  223,  223,  223,  205,  206,
 /*  5250 */   223,  223,  223,  223,  223,  223,  160,  214,  215,  223,
 /*  5260 */   223,  223,  223,  223,  223,  147,  170,  223,  223,  223,
 /*  5270 */   223,  223,  223,  223,  223,  223,  223,  223,  160,  223,
 /*  5280 */   223,  223,  186,  187,  188,  189,  190,  191,  192,  193,
 /*  5290 */   194,  195,  196,  197,  198,  199,  223,  223,  223,  223,
 /*  5300 */   223,  205,  206,  223,  223,  147,  223,  223,  223,  223,
 /*  5310 */   214,  215,  194,  195,  196,  197,  198,  199,  160,  223,
 /*  5320 */   223,  223,  223,  205,  206,  223,  223,  223,  170,  223,
 /*  5330 */   223,  223,  214,  215,  223,  150,  223,  152,  223,  223,
 /*  5340 */   155,  156,  157,  223,  186,  187,  188,  189,  190,  191,
 /*  5350 */   192,  193,  194,  195,  196,  197,  198,  199,  223,  223,
 /*  5360 */   223,  147,  223,  205,  206,  223,  223,  182,  223,  223,
 /*  5370 */   223,  223,  214,  215,  160,  223,  223,  223,  223,  223,
 /*  5380 */   223,  223,  223,  223,  170,  200,  223,  223,  203,  204,
 /*  5390 */   223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  5400 */   186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  5410 */   196,  197,  198,  199,  147,  223,  223,  223,  223,  205,
 /*  5420 */   206,  223,  223,  223,  223,  223,  223,  160,  214,  215,
 /*  5430 */   223,  223,  223,  223,  223,  223,  223,  170,  223,  223,
 /*  5440 */   223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  5450 */   223,  223,  223,  186,  187,  188,  189,  190,  191,  192,
 /*  5460 */   193,  194,  195,  196,  197,  198,  199,    9,  223,  223,
 /*  5470 */   223,  223,  205,  206,  223,  223,  223,  223,   20,   21,
 /*  5480 */   223,  214,  215,  223,  223,  223,  223,  223,  223,    9,
 /*  5490 */   223,  223,  223,  147,  223,  223,  223,  223,  223,   41,
 /*  5500 */    20,   43,   44,  223,   46,  223,  160,  223,  223,  223,
 /*  5510 */   223,  223,  223,  223,  223,  223,  170,  223,  223,  223,
 /*  5520 */   223,   41,  223,   43,   44,  223,   46,   47,  223,  223,
 /*  5530 */   223,  223,  186,  187,  188,  189,  190,  191,  192,  193,
 /*  5540 */   194,  195,  196,  197,  198,  199,  223,  223,  223,  223,
 /*  5550 */   223,  205,  206,   95,   96,  223,  223,   99,  100,  101,
 /*  5560 */   214,  215,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  5570 */   223,  113,  223,  223,  223,   95,   96,  223,  223,   99,
 /*  5580 */   100,  101,  223,  223,  104,  105,  106,  107,  108,  109,
 /*  5590 */   110,  111,  223,  113,  223,  223,  223,  223,  223,  223,
 /*  5600 */   223,  147,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  5610 */   223,  223,  223,  223,  160,  223,  223,  223,  223,  223,
 /*  5620 */   223,  223,  223,  223,  170,  223,  223,  223,  223,  223,
 /*  5630 */   223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  5640 */   186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  5650 */   196,  197,  198,  199,  147,  223,  223,  223,  223,  205,
 /*  5660 */   206,  223,  223,  223,  223,  223,  223,  160,  214,  215,
 /*  5670 */   223,  223,  223,  223,  223,  223,  223,  170,  223,  223,
 /*  5680 */   223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  5690 */   223,  223,  223,  186,  187,  188,  189,  190,  191,  192,
 /*  5700 */   193,  194,  195,  196,  197,  198,  199,  147,    9,  223,
 /*  5710 */   223,  223,  205,  206,  223,  223,  223,  223,  223,   20,
 /*  5720 */   160,  214,  215,  223,  223,  223,  223,  223,  223,  223,
 /*  5730 */   170,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  5740 */    41,   20,   43,   44,  223,   46,  186,  187,  188,  189,
 /*  5750 */   190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  5760 */   223,   40,  223,  223,   43,  205,  206,   46,  223,  223,
 /*  5770 */   223,  223,   73,  223,  214,  215,  223,  223,  223,  223,
 /*  5780 */   223,  223,    9,  223,  223,  223,  223,  223,  223,  223,
 /*  5790 */   223,  223,  223,   20,   95,   96,  223,  223,   99,  100,
 /*  5800 */   101,  223,  223,  104,  105,  106,  107,  108,  109,  110,
 /*  5810 */   111,  223,  113,    9,   41,  223,   43,   44,  223,   46,
 /*  5820 */   223,  223,  223,  223,   20,  223,  223,  223,  223,  108,
 /*  5830 */   109,  110,  111,  223,  113,  114,  115,  116,  117,  118,
 /*  5840 */   119,  120,  121,  122,  223,   41,  223,   43,   44,  223,
 /*  5850 */    46,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*  5860 */   223,  223,  223,  223,  223,  223,  223,  223,   95,   96,
 /*  5870 */   223,  223,   99,  100,  101,  223,  223,  104,  105,  106,
 /*  5880 */   107,  108,  109,  110,  111,  223,  113,  223,  147,  223,
 /*  5890 */   223,  223,  223,  223,  223,  223,  223,  223,  223,   95,
 /*  5900 */    96,  160,  223,   99,  100,  101,  223,  223,  104,  105,
 /*  5910 */   106,  107,  108,  109,  110,  111,  223,  113,  223,  223,
 /*  5920 */   223,  223,  223,  223,  223,  223,  223,  186,  187,  188,
 /*  5930 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  5940 */   199,  147,  223,  223,  223,  223,  205,  206,   20,  223,
 /*  5950 */   223,  223,  223,  223,  160,  214,  215,  223,  223,   31,
 /*  5960 */   223,  223,  223,  223,  223,  223,  223,  223,   40,  223,
 /*  5970 */   223,   43,  223,  223,   46,  223,  223,  223,  223,  223,
 /*  5980 */   223,  187,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  5990 */   196,  197,  198,  199,    9,  223,  223,  223,  223,  205,
 /*  6000 */   206,  223,  223,  223,  223,   20,  223,  223,  214,  215,
 /*  6010 */   223,  223,  223,  223,  223,  223,  147,  223,  223,  223,
 /*  6020 */   223,  223,  223,  223,  223,   40,   41,  223,   43,  160,
 /*  6030 */   223,  223,   47,  223,  223,  223,  108,  109,  110,  111,
 /*  6040 */   223,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  6050 */   122,  223,  223,  223,  223,  223,  187,  188,  189,  190,
 /*  6060 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  6070 */   223,  223,  223,  223,  205,  206,  147,  223,  223,  223,
 /*  6080 */   223,  223,  223,  214,  215,  223,  223,  223,  223,  160,
 /*  6090 */   223,  223,  223,  223,  223,  223,  223,  223,  223,  114,
 /*  6100 */   115,  116,  117,  118,  119,  120,  121,  122,  223,  223,
 /*  6110 */   223,  223,  223,  223,  223,  223,  147,  188,  189,  190,
 /*  6120 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  160,
 /*  6130 */   223,  223,  223,  223,  205,  206,  223,  223,  223,  223,
 /*  6140 */   223,  223,  223,  214,  215,  223,  223,  223,  223,  223,
 /*  6150 */   223,  223,  223,  223,  223,  223,  147,  188,  189,  190,
 /*  6160 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  160,
 /*  6170 */   223,  223,  223,  223,  205,  206,  223,  223,  223,  223,
 /*  6180 */   223,  223,  223,  214,  215,  223,  223,  223,  223,  223,
 /*  6190 */   223,  223,  223,  223,  223,  223,  147,  188,  189,  190,
 /*  6200 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  160,
 /*  6210 */   223,  223,  223,  223,  205,  206,  223,  223,  223,  223,
 /*  6220 */   223,  223,  223,  214,  215,  223,  223,  223,  223,  223,
 /*  6230 */   223,  223,  223,  223,  223,  223,  223,  147,  189,  190,
 /*  6240 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  6250 */   160,  223,  223,  223,  205,  206,  223,  223,  223,  223,
 /*  6260 */   223,  223,  223,  214,  215,  147,  223,  223,  223,  223,
 /*  6270 */   223,  223,  223,  223,  223,  223,  223,  223,  160,  189,
 /*  6280 */   190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  6290 */   223,  223,  223,  223,  223,  205,  206,  223,  223,  223,
 /*  6300 */   223,  223,  223,  223,  214,  215,  147,  223,  190,  191,
 /*  6310 */   192,  193,  194,  195,  196,  197,  198,  199,  223,  160,
 /*  6320 */   223,  223,  223,  205,  206,  223,  223,  223,  223,  223,
 /*  6330 */   223,  223,  214,  215,  223,  223,  223,  223,  223,  223,
 /*  6340 */   223,  223,  223,  223,  223,  223,  147,  223,  223,  190,
 /*  6350 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  160,
 /*  6360 */   223,  223,  223,  223,  205,  206,  223,  223,  223,  223,
 /*  6370 */   223,  223,  147,  214,  215,  223,  223,  223,  223,  223,
 /*  6380 */   223,  223,  223,  223,  223,  160,  223,  223,  223,  190,
 /*  6390 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  223,
 /*  6400 */   223,  223,  223,  223,  205,  206,  223,  223,  223,  223,
 /*  6410 */   223,  223,  223,  214,  215,  190,  191,  192,  193,  194,
 /*  6420 */   195,  196,  197,  198,  199,  223,  223,  223,  223,  223,
 /*  6430 */   205,  206,  223,  223,  223,  223,  223,  223,  223,  214,
 /*  6440 */   215,
);
    const YY_SHIFT_USE_DFLT = -73;
    const YY_SHIFT_MAX = 297;
    static public $yy_shift_ofst = array(
 /*     0 */  1359,  105,  219,   -9,  903,  333,  447,  561, 1359, 1359,
 /*    10 */  1359, 1359, 1359, 1359, 1131, 1017, 1245,  789,  675, 1359,
 /*    20 */  1359, 1359, 1359, 1359, 1473, 1473, 1473, 1473, 1473, 3405,
 /*    30 */  4429, 3519, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 4657,
 /*    40 */  5458, 5480, 5458, 5773, 5699, 5773, 5773, 5773, 5773, 5773,
 /*    50 */  5773, 5773, 5773, 5773, 5773, 5773, 5773, 5773, 5773, 5773,
 /*    60 */  5773, 5773, 5773, 5773, 5773, 5773, 5773, 5928, 5985, 5773,
 /*    70 */  5773, 3316, 5773, 5773, 5773, 5773, 5721, 5721, 5773, 5773,
 /*    80 */  5773, 5773, 5773, 5773, 5773, 3338, 3338, 3338, 3338, 5773,
 /*    90 */  5773, 5773, 5773, 5773, 5804, 5773, 5773, 3834, 3824, 3824,
 /*   100 */  1596, 3338, 3338,   74, 3375, 1596, 1579, 1579, 1506, 1506,
 /*   110 */   344,  270,  102,  102,  102,  271,  236,  109,   13,  358,
 /*   120 */   546,  -30,  420,  790,  793,  240,  750,  670,  553,  666,
 /*   130 */   573, 1026, 1021,  938,  987,  440,  459,  445,  440,  440,
 /*   140 */   356,  783,  115,  781,  115,  115,  115,  818,  551,  115,
 /*   150 */   115,  115,  176,  115,  115,  975,  938, 1011,  987,  987,
 /*   160 */   987,  987, 4551, 2800, 2800, 2800,  340,   27,  -33,   27,
 /*   170 */    27,  167,   -5,  708,  478,  594,   -5,  480,  217,  480,
 /*   180 */   505,  138,  214,  366,   -5,  480,   83,  261,  608,   73,
 /*   190 */   491,  498,  288,  514,  418,  603,  368,  -72,  151,  376,
 /*   200 */   463,  -72,  -31,  589,  151,  784,  811,  732,  151,  664,
 /*   210 */   -72,  -31,  458,  732,  -72,  839,  -72,  686,  -31,  805,
 /*   220 */   151,  -23,  582,  281,  339,  412,  404,  497,  246,  226,
 /*   230 */   171,   -4,  521,  348,  257,  384,  254,   97,  139,  107,
 /*   240 */   970,  914,  862,  892,  921,  927,  912,  910,  904,  875,
 /*   250 */   908,  913,  901,  929,  939,  956,  963,  937,  944,  979,
 /*   260 */   931,  967,  930,  577,  922,  932,  953,  954,  907,  896,
 /*   270 */   788,  759,  794,  724,  974,  734,  778,  764,  601,  643,
 /*   280 */   668,  667,  731,  689,  735,  741,  795,  891,  906,  870,
 /*   290 */   909,  866,  780,  843,  823,  753,  829,  864,
);
    const YY_REDUCE_USE_DFLT = -150;
    const YY_REDUCE_MAX = 161;
    static public $yy_reduce_ofst = array(
 /*     0 */  1751, 1470, 1569, 1659, 2119, 2027, 1935, 2211, 2303, 2671,
 /*    10 */  1843, 2579, 2395, 2487, 2761, 2761, 2761, 2761, 2761, 2761,
 /*    20 */  2761, 2761, 2761, 2761, 2852, 3214, 3123, 2942, 3033, 3705,
 /*    30 */  3615, 4297, 3924, 4149, 4220, 4072, 3776, 3853, 4001, 3387,
 /*    40 */  4529, 4405, 4458, 3501, 5454, 5507, 5346, 5560, 4925, 4872,
 /*    50 */  4816, 4754, 4589, 4645, 5267, 4701, 5214, 5158, 5096, 5043,
 /*    60 */  4987, 5741, 5794, 5869, 6009, 5929, 5969, 3631, 4660, 6049,
 /*    70 */  6090, 4836, 6159, 6199, 6225, 6118, 4407, 4945,   38,  152,
 /*    80 */   221,  335,  449,  791, 1019,  662, -136,  548,  890, 5118,
 /*    90 */  4776, 5011, 3575, 1361, 1361, 1133, 1247, 3449, 3871, 4019,
 /*   100 */  5185, 1769, 1677,   96,   96, -149,  677,  563,  -32,  489,
 /*   110 */   173,  273, -127,  -81,   46,  -64,  387,  373,  606,  581,
 /*   120 */   503,  547,  373,  506,  503,  547,  423,  373,  507,  373,
 /*   130 */   389,  438,  373,  189,  567,  851,  916,  915,  848,  858,
 /*   140 */   886,  847,  948,  933,  947,  926,  936,  923,  918,  894,
 /*   150 */   874,  876,  885,  873,  861,  854,  856,  905,  889,  877,
 /*   160 */   884,  925,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 1 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 34, 35, 36, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 2 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 3 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 34, 35, 36, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 4 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 5 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 6 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 7 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 8 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 9 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 10 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 11 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 12 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 13 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 14 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 15 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 16 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 17 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 18 */ array(9, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 19 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 20 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 21 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 22 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 23 */ array(9, 19, 20, 21, 23, 26, 27, 28, 29, 32, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 24 */ array(9, 19, 20, 21, 23, 26, 27, 29, 32, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 25 */ array(9, 19, 20, 21, 23, 26, 27, 29, 32, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 26 */ array(9, 19, 20, 21, 23, 26, 27, 29, 32, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 27 */ array(9, 19, 20, 21, 23, 26, 27, 29, 32, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 28 */ array(9, 19, 20, 21, 23, 26, 27, 29, 32, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 29 */ array(9, 20, 40, 41, 43, 44, 46, 64, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 30 */ array(9, 20, 40, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 31 */ array(9, 20, 23, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 32 */ array(9, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 33 */ array(9, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 34 */ array(9, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 35 */ array(9, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 36 */ array(9, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 37 */ array(9, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 38 */ array(9, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 39 */ array(9, 20, 21, 22, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 40 */ array(9, 20, 21, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 41 */ array(9, 20, 41, 43, 44, 46, 47, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 42 */ array(9, 20, 21, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 43 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 44 */ array(9, 20, 41, 43, 44, 46, 73, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 45 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 46 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 47 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 48 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 49 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 50 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 51 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 52 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 53 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 54 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 55 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 56 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 57 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 58 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 59 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 60 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 61 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 62 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 63 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 64 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 65 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 66 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 67 */ array(20, 31, 40, 43, 46, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 68 */ array(9, 20, 40, 41, 43, 47, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 69 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 70 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 71 */ array(9, 20, 40, 41, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 72 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 73 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 74 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 75 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 76 */ array(20, 40, 43, 46, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 77 */ array(20, 40, 43, 46, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 78 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 79 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 80 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 81 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 82 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 83 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 84 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 85 */ array(40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 86 */ array(40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 87 */ array(40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 88 */ array(40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 89 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 90 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 91 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 92 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 93 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 94 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 95 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 96 */ array(9, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 97 */ array(26, 27, 32, 40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 98 */ array(20, 43, 46, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 99 */ array(20, 43, 46, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 100 */ array(9, 20, 40, 41, 42, ),
        /* 101 */ array(40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 102 */ array(40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 103 */ array(41, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 104 */ array(43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 105 */ array(9, 20, 40, 41, 42, ),
        /* 106 */ array(20, 43, 46, 108, 109, 110, 111, 113, ),
        /* 107 */ array(20, 43, 46, 108, 109, 110, 111, 113, ),
        /* 108 */ array(9, 20, 40, 41, ),
        /* 109 */ array(9, 20, 40, 41, ),
        /* 110 */ array(25, 26, 27, 28, 31, ),
        /* 111 */ array(13, 30, 46, 112, ),
        /* 112 */ array(20, 40, 41, 42, ),
        /* 113 */ array(20, 40, 41, 42, ),
        /* 114 */ array(20, 40, 41, 42, ),
        /* 115 */ array(30, 46, 112, ),
        /* 116 */ array(13, 30, 46, ),
        /* 117 */ array(20, 43, 44, 45, ),
        /* 118 */ array(25, 26, 27, 28, ),
        /* 119 */ array(22, 66, 67, ),
        /* 120 */ array(13, 30, 112, ),
        /* 121 */ array(39, 46, 73, ),
        /* 122 */ array(43, 44, 45, ),
        /* 123 */ array(13, 30, ),
        /* 124 */ array(13, 30, ),
        /* 125 */ array(46, 73, ),
        /* 126 */ array(49, 50, ),
        /* 127 */ array(20, 43, ),
        /* 128 */ array(20, 22, ),
        /* 129 */ array(20, 43, ),
        /* 130 */ array(30, 112, ),
        /* 131 */ array(30, ),
        /* 132 */ array(43, ),
        /* 133 */ array(63, ),
        /* 134 */ array(46, ),
        /* 135 */ array(20, 40, 41, ),
        /* 136 */ array(33, 37, 38, ),
        /* 137 */ array(26, 27, 32, ),
        /* 138 */ array(20, 40, 41, ),
        /* 139 */ array(20, 40, 41, ),
        /* 140 */ array(22, 66, 67, ),
        /* 141 */ array(24, 31, ),
        /* 142 */ array(21, 23, ),
        /* 143 */ array(20, 21, ),
        /* 144 */ array(21, 23, ),
        /* 145 */ array(21, 23, ),
        /* 146 */ array(21, 23, ),
        /* 147 */ array(20, 21, ),
        /* 148 */ array(21, 23, ),
        /* 149 */ array(21, 23, ),
        /* 150 */ array(21, 23, ),
        /* 151 */ array(21, 23, ),
        /* 152 */ array(21, 23, ),
        /* 153 */ array(21, 23, ),
        /* 154 */ array(21, 23, ),
        /* 155 */ array(20, ),
        /* 156 */ array(63, ),
        /* 157 */ array(21, ),
        /* 158 */ array(46, ),
        /* 159 */ array(46, ),
        /* 160 */ array(46, ),
        /* 161 */ array(46, ),
        /* 162 */ array(5, 8, 39, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, ),
        /* 163 */ array(46, 73, 100, 101, 102, 103, ),
        /* 164 */ array(46, 73, 100, 101, 102, 103, ),
        /* 165 */ array(46, 73, 100, 101, 102, 103, ),
        /* 166 */ array(117, 118, 121, 122, ),
        /* 167 */ array(30, 31, 91, 92, ),
        /* 168 */ array(117, 118, 121, 122, ),
        /* 169 */ array(30, 31, 91, 92, ),
        /* 170 */ array(30, 31, 91, 92, ),
        /* 171 */ array(20, 40, 41, ),
        /* 172 */ array(7, 9, 10, ),
        /* 173 */ array(31, 40, 41, ),
        /* 174 */ array(116, 117, 121, ),
        /* 175 */ array(31, 40, 41, ),
        /* 176 */ array(7, 9, 10, ),
        /* 177 */ array(41, 97, 98, ),
        /* 178 */ array(40, 41, 47, ),
        /* 179 */ array(41, 97, 98, ),
        /* 180 */ array(5, 8, 74, ),
        /* 181 */ array(31, 40, 41, ),
        /* 182 */ array(40, 41, 47, ),
        /* 183 */ array(31, 40, 41, ),
        /* 184 */ array(7, 9, 10, ),
        /* 185 */ array(41, 97, 98, ),
        /* 186 */ array(20, 52, ),
        /* 187 */ array(24, 31, ),
        /* 188 */ array(20, 43, ),
        /* 189 */ array(20, 43, ),
        /* 190 */ array(20, 23, ),
        /* 191 */ array(39, 73, ),
        /* 192 */ array(33, 112, ),
        /* 193 */ array(22, 24, ),
        /* 194 */ array(117, 121, ),
        /* 195 */ array(24, 47, ),
        /* 196 */ array(117, 121, ),
        /* 197 */ array(93, 94, ),
        /* 198 */ array(4, 90, ),
        /* 199 */ array(20, 23, ),
        /* 200 */ array(20, 23, ),
        /* 201 */ array(93, 94, ),
        /* 202 */ array(95, 96, ),
        /* 203 */ array(22, 24, ),
        /* 204 */ array(4, 90, ),
        /* 205 */ array(20, 43, ),
        /* 206 */ array(20, 41, ),
        /* 207 */ array(40, 41, ),
        /* 208 */ array(4, 90, ),
        /* 209 */ array(24, 47, ),
        /* 210 */ array(93, 94, ),
        /* 211 */ array(95, 96, ),
        /* 212 */ array(20, 41, ),
        /* 213 */ array(40, 41, ),
        /* 214 */ array(93, 94, ),
        /* 215 */ array(24, 47, ),
        /* 216 */ array(93, 94, ),
        /* 217 */ array(20, 52, ),
        /* 218 */ array(95, 96, ),
        /* 219 */ array(20, 23, ),
        /* 220 */ array(4, 90, ),
        /* 221 */ array(56, ),
        /* 222 */ array(24, ),
        /* 223 */ array(41, ),
        /* 224 */ array(46, ),
        /* 225 */ array(47, ),
        /* 226 */ array(41, ),
        /* 227 */ array(23, ),
        /* 228 */ array(47, ),
        /* 229 */ array(45, ),
        /* 230 */ array(46, ),
        /* 231 */ array(40, ),
        /* 232 */ array(23, ),
        /* 233 */ array(73, ),
        /* 234 */ array(74, ),
        /* 235 */ array(46, ),
        /* 236 */ array(48, ),
        /* 237 */ array(24, ),
        /* 238 */ array(47, ),
        /* 239 */ array(23, ),
        /* 240 */ array(23, ),
        /* 241 */ array(23, ),
        /* 242 */ array(74, ),
        /* 243 */ array(47, ),
        /* 244 */ array(20, ),
        /* 245 */ array(21, ),
        /* 246 */ array(33, ),
        /* 247 */ array(30, ),
        /* 248 */ array(23, ),
        /* 249 */ array(46, ),
        /* 250 */ array(20, ),
        /* 251 */ array(20, ),
        /* 252 */ array(33, ),
        /* 253 */ array(21, ),
        /* 254 */ array(13, ),
        /* 255 */ array(21, ),
        /* 256 */ array(13, ),
        /* 257 */ array(46, ),
        /* 258 */ array(47, ),
        /* 259 */ array(13, ),
        /* 260 */ array(39, ),
        /* 261 */ array(2, ),
        /* 262 */ array(23, ),
        /* 263 */ array(20, ),
        /* 264 */ array(20, ),
        /* 265 */ array(23, ),
        /* 266 */ array(13, ),
        /* 267 */ array(13, ),
        /* 268 */ array(13, ),
        /* 269 */ array(23, ),
        /* 270 */ array(46, ),
        /* 271 */ array(46, ),
        /* 272 */ array(47, ),
        /* 273 */ array(112, ),
        /* 274 */ array(20, ),
        /* 275 */ array(121, ),
        /* 276 */ array(41, ),
        /* 277 */ array(23, ),
        /* 278 */ array(23, ),
        /* 279 */ array(30, ),
        /* 280 */ array(23, ),
        /* 281 */ array(20, ),
        /* 282 */ array(30, ),
        /* 283 */ array(33, ),
        /* 284 */ array(121, ),
        /* 285 */ array(121, ),
        /* 286 */ array(121, ),
        /* 287 */ array(23, ),
        /* 288 */ array(9, ),
        /* 289 */ array(47, ),
        /* 290 */ array(9, ),
        /* 291 */ array(47, ),
        /* 292 */ array(121, ),
        /* 293 */ array(30, ),
        /* 294 */ array(30, ),
        /* 295 */ array(121, ),
        /* 296 */ array(46, ),
        /* 297 */ array(23, ),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
        /* 398 */ array(),
        /* 399 */ array(),
        /* 400 */ array(),
        /* 401 */ array(),
        /* 402 */ array(),
        /* 403 */ array(),
        /* 404 */ array(),
        /* 405 */ array(),
        /* 406 */ array(),
        /* 407 */ array(),
        /* 408 */ array(),
        /* 409 */ array(),
        /* 410 */ array(),
        /* 411 */ array(),
        /* 412 */ array(),
        /* 413 */ array(),
        /* 414 */ array(),
        /* 415 */ array(),
        /* 416 */ array(),
        /* 417 */ array(),
        /* 418 */ array(),
        /* 419 */ array(),
        /* 420 */ array(),
        /* 421 */ array(),
        /* 422 */ array(),
        /* 423 */ array(),
        /* 424 */ array(),
        /* 425 */ array(),
        /* 426 */ array(),
        /* 427 */ array(),
        /* 428 */ array(),
        /* 429 */ array(),
        /* 430 */ array(),
        /* 431 */ array(),
        /* 432 */ array(),
        /* 433 */ array(),
        /* 434 */ array(),
        /* 435 */ array(),
        /* 436 */ array(),
        /* 437 */ array(),
        /* 438 */ array(),
        /* 439 */ array(),
        /* 440 */ array(),
        /* 441 */ array(),
        /* 442 */ array(),
        /* 443 */ array(),
        /* 444 */ array(),
        /* 445 */ array(),
        /* 446 */ array(),
        /* 447 */ array(),
        /* 448 */ array(),
        /* 449 */ array(),
        /* 450 */ array(),
        /* 451 */ array(),
        /* 452 */ array(),
        /* 453 */ array(),
        /* 454 */ array(),
        /* 455 */ array(),
        /* 456 */ array(),
        /* 457 */ array(),
        /* 458 */ array(),
        /* 459 */ array(),
        /* 460 */ array(),
        /* 461 */ array(),
        /* 462 */ array(),
        /* 463 */ array(),
        /* 464 */ array(),
        /* 465 */ array(),
        /* 466 */ array(),
        /* 467 */ array(),
        /* 468 */ array(),
        /* 469 */ array(),
        /* 470 */ array(),
        /* 471 */ array(),
        /* 472 */ array(),
        /* 473 */ array(),
        /* 474 */ array(),
        /* 475 */ array(),
        /* 476 */ array(),
        /* 477 */ array(),
        /* 478 */ array(),
        /* 479 */ array(),
        /* 480 */ array(),
        /* 481 */ array(),
        /* 482 */ array(),
        /* 483 */ array(),
        /* 484 */ array(),
        /* 485 */ array(),
        /* 486 */ array(),
        /* 487 */ array(),
        /* 488 */ array(),
        /* 489 */ array(),
        /* 490 */ array(),
        /* 491 */ array(),
        /* 492 */ array(),
        /* 493 */ array(),
        /* 494 */ array(),
        /* 495 */ array(),
        /* 496 */ array(),
        /* 497 */ array(),
        /* 498 */ array(),
        /* 499 */ array(),
        /* 500 */ array(),
        /* 501 */ array(),
        /* 502 */ array(),
        /* 503 */ array(),
        /* 504 */ array(),
        /* 505 */ array(),
        /* 506 */ array(),
        /* 507 */ array(),
        /* 508 */ array(),
        /* 509 */ array(),
        /* 510 */ array(),
        /* 511 */ array(),
        /* 512 */ array(),
        /* 513 */ array(),
        /* 514 */ array(),
        /* 515 */ array(),
        /* 516 */ array(),
        /* 517 */ array(),
        /* 518 */ array(),
        /* 519 */ array(),
        /* 520 */ array(),
        /* 521 */ array(),
        /* 522 */ array(),
        /* 523 */ array(),
        /* 524 */ array(),
        /* 525 */ array(),
        /* 526 */ array(),
        /* 527 */ array(),
        /* 528 */ array(),
        /* 529 */ array(),
        /* 530 */ array(),
        /* 531 */ array(),
        /* 532 */ array(),
        /* 533 */ array(),
        /* 534 */ array(),
        /* 535 */ array(),
        /* 536 */ array(),
        /* 537 */ array(),
        /* 538 */ array(),
        /* 539 */ array(),
        /* 540 */ array(),
        /* 541 */ array(),
        /* 542 */ array(),
        /* 543 */ array(),
        /* 544 */ array(),
        /* 545 */ array(),
        /* 546 */ array(),
        /* 547 */ array(),
        /* 548 */ array(),
);
    static public $yy_default = array(
 /*     0 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*    10 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  640,
 /*    20 */   641,  674,  549,  673,  860,  860,  860,  860,  860,  860,
 /*    30 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*    40 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*    50 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*    60 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*    70 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*    80 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*    90 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   100 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   110 */   860,  813,  860,  860,  860,  812,  813,  860,  860,  860,
 /*   120 */   813,  765,  860,  804,  813,  860,  636,  860,  860,  860,
 /*   130 */   812,  807,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   140 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   150 */   860,  860,  860,  860,  860,  860,  658,  860,  860,  860,
 /*   160 */   860,  860,  709,  743,  747,  744,  860,  717,  860,  718,
 /*   170 */   719,  632,  711,  860,  854,  860,  710,  729,  860,  730,
 /*   180 */   860,  860,  860,  860,  712,  728,  860,  860,  860,  860,
 /*   190 */   860,  765,  785,  860,  856,  860,  855,  724,  716,  860,
 /*   200 */   860,  721,  726,  860,  714,  860,  860,  824,  713,  860,
 /*   210 */   720,  725,  860,  826,  722,  860,  723,  860,  727,  860,
 /*   220 */   715,  860,  687,  860,  860,  860,  860,  860,  860,  860,
 /*   230 */   860,  624,  860,  630,  860,  860,  860,  686,  860,  860,
 /*   240 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   250 */   860,  860,  860,  860,  814,  860,  860,  860,  860,  860,
 /*   260 */   594,  676,  860,  860,  860,  860,  803,  860,  860,  860,
 /*   270 */   860,  860,  860,  785,  860,  857,  860,  860,  860,  860,
 /*   280 */   860,  860,  860,  860,  851,  859,  853,  860,  819,  860,
 /*   290 */   817,  860,  852,  860,  860,  858,  860,  860,  583,  663,
 /*   300 */   665,  614,  615,  618,  589,  606,  671,  659,  664,  582,
 /*   310 */   619,  616,  581,  612,  580,  609,  610,  584,  577,  588,
 /*   320 */   611,  578,  637,  662,  613,  639,  607,  623,  608,  622,
 /*   330 */   666,  677,  668,  667,  660,  587,  669,  670,  646,  672,
 /*   340 */   647,  648,  661,  653,  652,  651,  650,  649,  654,  657,
 /*   350 */   656,  655,  645,  644,  621,  554,  679,  585,  680,  620,
 /*   360 */   682,  617,  681,  633,  678,  586,  642,  643,  579,  638,
 /*   370 */   634,  675,  635,  551,  771,  733,  689,  752,  732,  745,
 /*   380 */   746,  757,  755,  754,  742,  741,  736,  748,  735,  731,
 /*   390 */   749,  737,  740,  739,  738,  758,  683,  835,  834,  833,
 /*   400 */   832,  845,  848,  840,  837,  836,  810,  809,  822,  759,
 /*   410 */   756,  734,  823,  798,  802,  801,  800,  698,  688,  567,
 /*   420 */   566,  565,  563,  568,  569,  570,  564,  571,  560,  559,
 /*   430 */   555,  553,  552,  550,  556,  557,  558,  562,  561,  572,
 /*   440 */   574,  786,  792,  791,  784,  787,  805,  828,  808,  806,
 /*   450 */   783,  782,  604,  603,  576,  575,  573,  590,  781,  595,
 /*   460 */   592,  843,  846,  702,  701,  700,  699,  703,  704,  707,
 /*   470 */   706,  705,  751,  753,  693,  692,  691,  690,  694,  695,
 /*   480 */   750,  697,  696,  708,  788,  625,  602,  600,  598,  626,
 /*   490 */   627,  628,  631,  629,  597,  601,  831,  829,  827,  825,
 /*   500 */   830,  591,  599,  596,  593,  763,  777,  760,  821,  820,
 /*   510 */   818,  761,  762,  793,  790,  789,  816,  815,  844,  841,
 /*   520 */   838,  849,  847,  850,  799,  842,  839,  794,  795,  775,
 /*   530 */   770,  773,  772,  774,  776,  780,  779,  778,  769,  768,
 /*   540 */   811,  797,  796,  684,  685,  767,  766,  764,  605,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 224;
    const YYSTACKDEPTH = 100;
    const block_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 549;
    const YYNRULE = 311;
    const YYERRORSYMBOL = 123;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'NOTEQUAL',    
  'EQUAL',         'LOGICALAND',    'BINARYAND',     'BINARYOR',    
  'LOGICALOR',     'AMPERSAND',     'BINARYXOR',     'UINDIRECTION',
  'UADRESS',       'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',       
  'UBRACKET',      'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',
  'IDENTIFIER',    'LEFTFIGUREBRACKET',  'RIGHTFIGUREBRACKET',  'SEMICOLON',   
  'COMMA',         'TYPENAMEKWD',   'CLASSKWD',      'STRUCTKWD',   
  'ENUMKWD',       'TEMPLATEKWD',   'LESSER',        'GREATER',     
  'UNIONKWD',      'COLON',         'PUBLICKWD',     'PROTECTEDKWD',
  'PRIVATEKWD',    'SIGNALSKWD',    'SLOTSKWD',      'ASSIGN',      
  'CONSTKWD',      'MULTIPLY',      'OPERATOROVERLOADDECLARATION',  'TYPENAME',    
  'BINARYNOT',     'OUTER_CONSTRUCTOR_NAME',  'LEFTROUNDBRACKET',  'RIGHTROUNDBRACKET',
  'PREPROCESSOR_ENDIF',  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ELSE',  'PREPROCESSOR_IFDEF',
  'CUSTOMTYPENAME',  'PREPROCESSOR_IF',  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_INCLUDE',
  'WHILEKWD',      'DOKWD',         'FORKWD',        'RETURNKWD',   
  'CONTINUEKWD',   'GOTOKWD',       'TRYKWD',        'CATCHKWD',    
  'ELLIPSIS',      'SWITCHKWD',     'CASEKWD',       'DEFAULTKWD',  
  'IFKWD',         'TYPEDEF',       'BREAKKWD',      'NEWKWD',      
  'DELETE',        'LEFTSQUAREBRACKET',  'RIGHTSQUAREBRACKET',  'STATICKWD',   
  'EXTERNKWD',     'REGISTERKWD',   'VOLATILEKWD',   'FRIENDKWD',   
  'BINARYXOR_ASSIGN',  'BINARYOR_ASSIGN',  'BINARYAND_ASSIGN',  'RIGHTSHIFT_ASSIGN',
  'LEFTSHIFT_ASSIGN',  'MODULO_ASSIGN',  'DIVISION_ASSIGN',  'MULTIPLY_ASSIGN',
  'PLUS_ASSIGN',   'MINUS_ASSIGN',  'NOT_EQUAL',     'LESSER_OR_EQUAL',
  'GREATER_OR_EQUAL',  'LEFTSHIFT',     'RIGHTSHIFT',    'MINUS',       
  'PLUS',          'MODULOSIGN',    'DIVISION',      'LOGICALNOT',  
  'DECREMENT',     'INCREMENT',     'DOT',           'RIGHTARROW',  
  'CONST_CAST',    'STATIC_CAST',   'DYNAMIC_CAST',  'REINTERPRET_CAST',
  'NUMERIC',       'CHARACTER',     'STRING',        'PREPROCESSOR_STRINGIFY',
  'PREPROCESSOR_CONCAT',  'SIZEOF',        'VOID',          'FLOAT',       
  'DOUBLE',        'LONG',          'CHAR',          'SIGNED',      
  'UNSIGNED',      'INT',           'SHORT',         'error',       
  'program',       'stmt_list',     'stmt_or_defined_macro',  'namespace_definition_start',
  'stmt',          'namespace_body',  'class_or_union_or_struct',  'identified_type_meta_specifier_with_template_def',
  'type_meta_specifier_with_template_def',  'structure_body',  'template_spec_list',  'template_spec',
  'template_typename',  'template_def',  'type_meta_specifier',  'stmt_or_visibility_spec_list',
  'stmt_or_visibility_spec',  'visibility_spec_full',  'visibility_spec',  'signal_slots',
  'enum_body',     'enum_value_list',  'enum_value',    'expr_atom',   
  'enum_definition_start',  'type_or_type_with_qualifier',  'function_definition_without_type',  'type',        
  'lvalue',        'formal_args_list_with_or_without_const',  'function_body',  'operator_overload_declaration_type_modificators',
  'operator_overload_declaration_ptr',  'operator_overload_declaration_without_type',  'formal_args_list',  'outer_constructor_name',
  'namespace_resolve',  'outer_destructor_name',  'arg_list',      'arg',         
  'type_or_type_ref_or_with_ptr',  'preprocessor_cond',  'preprocessor_else_clauses',  'preprocessor_elif_list',
  'preprocessor_else',  'preprocessor_elif',  'expr_prec_10',  'expr_prec_11',
  'try_catch',     'try',           'catch_list',    'catch',       
  'expr_prec_11_or_ellipsis',  'switch_stmt',   'switch_case_list',  'case',        
  'if_then_else',  'if_then',       'lvalue_or_assignment_list',  'expr_list',   
  'type_with_qualifier',  'varqualifier',  'expr_prec_9',   'expr_binary_ops',
  'expr_or_equal',  'expr_prec_8',   'expr_prec_7',   'expr_prec_6', 
  'expr_prec_5',   'expr_prec_4',   'try_value_access',  'try_pointer_access',
  'expr_prec_3',   'typecast',      'expr_prec_2',   'cpp_style_cast',
  'lvalue_or_assignment',  'initialization_list',  'initialization_list_argument_list',  'possibly_identifier_preceded_ref',
  'possibly_idenitifer_preceded_ptrs',  'assignable',    'scoped_identifier',  'non_const_type',
  'builtintype',   'scoped_type',   'typename_or_instantiated_template_type',  'template_instantiation_arguments',
  'instantiated_template_type_on_in_namespace_resolve',  'typename_in_namespace_resolve',  'instantiated_template_type_on_start_of_namespace_resolve',  'typename_on_start_of_namespace_resolve',
  'type_ref_one',  'type_ref_two',  'type_ref',      'type_or_type_ref',
  'template_instantiation_argument_list',  'template_instantiation_arguments_begin',  'template_instantiation_arguments_end',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "namespace_definition_start ::= NAMESPACEKWD IDENTIFIER",
 /*   4 */ "stmt ::= namespace_definition_start namespace_body",
 /*   5 */ "namespace_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*   6 */ "namespace_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*   7 */ "stmt ::= class_or_union_or_struct",
 /*   8 */ "identified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def IDENTIFIER",
 /*   9 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  10 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  11 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def SEMICOLON",
 /*  12 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  13 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  14 */ "template_spec_list ::= template_spec_list COMMA template_spec",
 /*  15 */ "template_spec_list ::= template_spec",
 /*  16 */ "template_spec ::= template_typename IDENTIFIER",
 /*  17 */ "template_typename ::= TYPENAMEKWD",
 /*  18 */ "template_typename ::= CLASSKWD",
 /*  19 */ "template_typename ::= STRUCTKWD",
 /*  20 */ "template_typename ::= ENUMKWD",
 /*  21 */ "template_def ::= TEMPLATEKWD LESSER GREATER",
 /*  22 */ "template_def ::= TEMPLATEKWD LESSER template_spec_list GREATER",
 /*  23 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  24 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  25 */ "type_meta_specifier ::= CLASSKWD",
 /*  26 */ "type_meta_specifier ::= STRUCTKWD",
 /*  27 */ "type_meta_specifier ::= UNIONKWD",
 /*  28 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  29 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  30 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  31 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  32 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  33 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  34 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  35 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  36 */ "visibility_spec ::= PUBLICKWD",
 /*  37 */ "visibility_spec ::= PROTECTEDKWD",
 /*  38 */ "visibility_spec ::= PRIVATEKWD",
 /*  39 */ "signal_slots ::= SIGNALSKWD",
 /*  40 */ "signal_slots ::= SLOTSKWD",
 /*  41 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  42 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  43 */ "enum_value_list ::= enum_value_list COMMA enum_value",
 /*  44 */ "enum_value_list ::= enum_value",
 /*  45 */ "enum_value ::= IDENTIFIER",
 /*  46 */ "enum_value ::= IDENTIFIER ASSIGN expr_atom",
 /*  47 */ "enum_definition_start ::= ENUMKWD IDENTIFIER",
 /*  48 */ "stmt_or_defined_macro ::= enum_definition_start SEMICOLON",
 /*  49 */ "stmt_or_defined_macro ::= enum_definition_start enum_body SEMICOLON",
 /*  50 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  51 */ "stmt_or_defined_macro ::= enum_definition_start enum_body IDENTIFIER SEMICOLON",
 /*  52 */ "stmt_or_defined_macro ::= ENUMKWD enum_body IDENTIFIER SEMICOLON",
 /*  53 */ "stmt_or_defined_macro ::= type_or_type_with_qualifier function_definition_without_type",
 /*  54 */ "stmt_or_defined_macro ::= template_def type function_definition_without_type",
 /*  55 */ "function_definition_without_type ::= lvalue formal_args_list_with_or_without_const function_body",
 /*  56 */ "function_definition_without_type ::= operator_overload_declaration_type_modificators",
 /*  57 */ "operator_overload_declaration_type_modificators ::= AMPERSAND operator_overload_declaration_ptr",
 /*  58 */ "operator_overload_declaration_type_modificators ::= operator_overload_declaration_ptr",
 /*  59 */ "operator_overload_declaration_ptr ::= CONSTKWD MULTIPLY operator_overload_declaration_ptr",
 /*  60 */ "operator_overload_declaration_ptr ::= MULTIPLY operator_overload_declaration_ptr",
 /*  61 */ "operator_overload_declaration_ptr ::= operator_overload_declaration_without_type",
 /*  62 */ "operator_overload_declaration_without_type ::= OPERATOROVERLOADDECLARATION formal_args_list_with_or_without_const function_body",
 /*  63 */ "stmt_or_defined_macro ::= template_def TYPENAME formal_args_list function_body",
 /*  64 */ "stmt_or_defined_macro ::= TYPENAME formal_args_list function_body",
 /*  65 */ "stmt_or_defined_macro ::= BINARYNOT TYPENAME formal_args_list function_body",
 /*  66 */ "outer_constructor_name ::= namespace_resolve OUTER_CONSTRUCTOR_NAME",
 /*  67 */ "stmt_or_defined_macro ::= template_def outer_constructor_name formal_args_list function_body",
 /*  68 */ "stmt_or_defined_macro ::= outer_constructor_name formal_args_list function_body",
 /*  69 */ "outer_destructor_name ::= namespace_resolve BINARYNOT OUTER_CONSTRUCTOR_NAME",
 /*  70 */ "stmt_or_defined_macro ::= template_def outer_destructor_name formal_args_list function_body",
 /*  71 */ "stmt_or_defined_macro ::= outer_destructor_name formal_args_list function_body",
 /*  72 */ "function_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  73 */ "function_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  74 */ "function_body ::= SEMICOLON",
 /*  75 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  76 */ "formal_args_list_with_or_without_const ::= formal_args_list CONSTKWD",
 /*  77 */ "formal_args_list ::= LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /*  78 */ "formal_args_list ::= LEFTROUNDBRACKET arg_list RIGHTROUNDBRACKET",
 /*  79 */ "arg_list ::= arg",
 /*  80 */ "arg_list ::= arg_list COMMA arg",
 /*  81 */ "arg ::= lvalue",
 /*  82 */ "arg ::= type_or_type_ref_or_with_ptr IDENTIFIER",
 /*  83 */ "arg ::= type_or_type_ref_or_with_ptr",
 /*  84 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list PREPROCESSOR_ENDIF",
 /*  85 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses PREPROCESSOR_ENDIF",
 /*  86 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  87 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  88 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  89 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  90 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  91 */ "preprocessor_elif ::= PREPROCESSOR_ELIF stmt_list",
 /*  92 */ "preprocessor_else ::= PREPROCESSOR_ELSE stmt_list",
 /*  93 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF IDENTIFIER",
 /*  94 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF CUSTOMTYPENAME",
 /*  95 */ "preprocessor_cond ::= PREPROCESSOR_IF",
 /*  96 */ "stmt_or_defined_macro ::= PREPROCESSOR_DEFINE",
 /*  97 */ "stmt_or_defined_macro ::= stmt",
 /*  98 */ "stmt ::= PREPROCESSOR_INCLUDE",
 /*  99 */ "stmt ::= WHILEKWD LEFTROUNDBRACKET expr_prec_10 RIGHTROUNDBRACKET stmt",
 /* 100 */ "stmt ::= DOKWD stmt WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET SEMICOLON",
 /* 101 */ "stmt ::= FORKWD LEFTROUNDBRACKET expr_prec_11 SEMICOLON expr_prec_11 SEMICOLON expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 102 */ "stmt ::= RETURNKWD expr_prec_11 SEMICOLON",
 /* 103 */ "stmt ::= RETURNKWD SEMICOLON",
 /* 104 */ "stmt ::= CONTINUEKWD SEMICOLON",
 /* 105 */ "stmt ::= GOTOKWD IDENTIFIER SEMICOLON",
 /* 106 */ "stmt ::= GOTOKWD CUSTOMTYPENAME SEMICOLON",
 /* 107 */ "stmt ::= IDENTIFIER COLON",
 /* 108 */ "stmt ::= try_catch",
 /* 109 */ "try_catch ::= try catch_list",
 /* 110 */ "try ::= TRYKWD LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 111 */ "try ::= TRYKWD LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 112 */ "catch_list ::= catch_list catch",
 /* 113 */ "catch_list ::= catch",
 /* 114 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 115 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 116 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 117 */ "expr_prec_11_or_ellipsis ::= ELLIPSIS",
 /* 118 */ "stmt ::= SEMICOLON",
 /* 119 */ "stmt ::= switch_stmt",
 /* 120 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 121 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET switch_case_list RIGHTFIGUREBRACKET",
 /* 122 */ "switch_case_list ::= case",
 /* 123 */ "switch_case_list ::= switch_case_list case",
 /* 124 */ "case ::= CASEKWD expr_atom COLON stmt_list",
 /* 125 */ "case ::= DEFAULTKWD COLON stmt_list",
 /* 126 */ "stmt ::= if_then_else",
 /* 127 */ "if_then_else ::= if_then",
 /* 128 */ "if_then_else ::= if_then ELSEKWD stmt",
 /* 129 */ "if_then ::= IFKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 130 */ "stmt ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 131 */ "stmt ::= TYPEDEF type IDENTIFIER SEMICOLON",
 /* 132 */ "stmt ::= BREAKKWD SEMICOLON",
 /* 133 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 134 */ "expr_prec_11 ::= NEWKWD expr_prec_10",
 /* 135 */ "expr_prec_11 ::= DELETE LEFTSQUAREBRACKET RIGHTSQUAREBRACKET expr_prec_10",
 /* 136 */ "expr_prec_11 ::= DELETE expr_prec_10",
 /* 137 */ "expr_prec_11 ::= type_or_type_with_qualifier lvalue_or_assignment_list",
 /* 138 */ "expr_prec_11 ::= expr_list",
 /* 139 */ "expr_list ::= expr_list COMMA expr_prec_10",
 /* 140 */ "expr_list ::= expr_prec_10",
 /* 141 */ "type_or_type_with_qualifier ::= type_with_qualifier",
 /* 142 */ "type_or_type_with_qualifier ::= type",
 /* 143 */ "type_with_qualifier ::= varqualifier type",
 /* 144 */ "varqualifier ::= STATICKWD",
 /* 145 */ "varqualifier ::= EXTERNKWD",
 /* 146 */ "varqualifier ::= REGISTERKWD",
 /* 147 */ "varqualifier ::= VOLATILEKWD",
 /* 148 */ "varqualifier ::= FRIENDKWD",
 /* 149 */ "expr_prec_10 ::= expr_prec_9 BINARYXOR_ASSIGN expr_prec_10",
 /* 150 */ "expr_prec_10 ::= expr_prec_9 BINARYOR_ASSIGN expr_prec_10",
 /* 151 */ "expr_prec_10 ::= expr_prec_9 BINARYAND_ASSIGN expr_prec_10",
 /* 152 */ "expr_prec_10 ::= expr_prec_9 RIGHTSHIFT_ASSIGN expr_prec_10",
 /* 153 */ "expr_prec_10 ::= expr_prec_9 LEFTSHIFT_ASSIGN expr_prec_10",
 /* 154 */ "expr_prec_10 ::= expr_prec_9 MODULO_ASSIGN expr_prec_10",
 /* 155 */ "expr_prec_10 ::= expr_prec_9 DIVISION_ASSIGN expr_prec_10",
 /* 156 */ "expr_prec_10 ::= expr_prec_9 MULTIPLY_ASSIGN expr_prec_10",
 /* 157 */ "expr_prec_10 ::= expr_prec_9 PLUS_ASSIGN expr_prec_10",
 /* 158 */ "expr_prec_10 ::= expr_prec_9 MINUS_ASSIGN expr_prec_10",
 /* 159 */ "expr_prec_10 ::= expr_prec_9 ASSIGN expr_prec_10",
 /* 160 */ "expr_prec_10 ::= expr_prec_9",
 /* 161 */ "expr_prec_9 ::= expr_prec_9 LOGICALAND expr_binary_ops",
 /* 162 */ "expr_prec_9 ::= expr_prec_9 LOGICALOR expr_binary_ops",
 /* 163 */ "expr_prec_9 ::= expr_binary_ops",
 /* 164 */ "expr_binary_ops ::= expr_binary_ops BINARYXOR expr_or_equal",
 /* 165 */ "expr_binary_ops ::= expr_binary_ops BINARYOR expr_or_equal",
 /* 166 */ "expr_binary_ops ::= expr_binary_ops AMPERSAND expr_or_equal",
 /* 167 */ "expr_binary_ops ::= expr_or_equal",
 /* 168 */ "expr_or_equal ::= expr_or_equal NOT_EQUAL expr_prec_8",
 /* 169 */ "expr_or_equal ::= expr_or_equal EQUAL expr_prec_8",
 /* 170 */ "expr_or_equal ::= expr_prec_8",
 /* 171 */ "expr_prec_8 ::= expr_prec_8 LESSER_OR_EQUAL expr_prec_7",
 /* 172 */ "expr_prec_8 ::= expr_prec_8 GREATER_OR_EQUAL expr_prec_7",
 /* 173 */ "expr_prec_8 ::= expr_prec_8 GREATER expr_prec_7",
 /* 174 */ "expr_prec_8 ::= expr_prec_8 LESSER expr_prec_7",
 /* 175 */ "expr_prec_8 ::= expr_prec_7",
 /* 176 */ "expr_prec_7 ::= expr_prec_7 LEFTSHIFT expr_prec_6",
 /* 177 */ "expr_prec_7 ::= expr_prec_7 RIGHTSHIFT expr_prec_6",
 /* 178 */ "expr_prec_7 ::= expr_prec_6",
 /* 179 */ "expr_prec_6 ::= expr_prec_6 MINUS expr_prec_5",
 /* 180 */ "expr_prec_6 ::= expr_prec_6 PLUS expr_prec_5",
 /* 181 */ "expr_prec_6 ::= expr_prec_5",
 /* 182 */ "expr_prec_5 ::= expr_prec_5 MODULOSIGN expr_prec_4",
 /* 183 */ "expr_prec_5 ::= expr_prec_5 DIVISION expr_prec_4",
 /* 184 */ "expr_prec_5 ::= expr_prec_5 MULTIPLY expr_prec_4",
 /* 185 */ "expr_prec_5 ::= expr_prec_4",
 /* 186 */ "expr_prec_4 ::= try_value_access MULTIPLY IDENTIFIER",
 /* 187 */ "expr_prec_4 ::= try_pointer_access MULTIPLY IDENTIFIER",
 /* 188 */ "expr_prec_4 ::= expr_prec_3",
 /* 189 */ "expr_prec_3 ::= AMPERSAND expr_prec_3",
 /* 190 */ "expr_prec_3 ::= MULTIPLY expr_prec_3",
 /* 191 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 192 */ "expr_prec_3 ::= LOGICALNOT expr_prec_3",
 /* 193 */ "expr_prec_3 ::= BINARYNOT expr_prec_3",
 /* 194 */ "expr_prec_3 ::= MINUS expr_prec_2",
 /* 195 */ "expr_prec_3 ::= PLUS expr_prec_2",
 /* 196 */ "expr_prec_3 ::= DECREMENT expr_prec_3",
 /* 197 */ "expr_prec_3 ::= INCREMENT expr_prec_3",
 /* 198 */ "expr_prec_3 ::= expr_prec_2",
 /* 199 */ "expr_prec_2 ::= try_value_access IDENTIFIER",
 /* 200 */ "expr_prec_2 ::= try_pointer_access IDENTIFIER",
 /* 201 */ "expr_prec_2 ::= cpp_style_cast LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 202 */ "expr_prec_2 ::= expr_prec_2 LEFTSQUAREBRACKET expr_prec_10 RIGHTSQUAREBRACKET",
 /* 203 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET expr_list RIGHTROUNDBRACKET",
 /* 204 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /* 205 */ "expr_prec_2 ::= expr_prec_2 INCREMENT",
 /* 206 */ "expr_prec_2 ::= expr_prec_2 DECREMENT",
 /* 207 */ "expr_prec_2 ::= expr_atom",
 /* 208 */ "try_value_access ::= expr_prec_2 DOT",
 /* 209 */ "try_pointer_access ::= expr_prec_2 RIGHTARROW",
 /* 210 */ "cpp_style_cast ::= CONST_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 211 */ "cpp_style_cast ::= STATIC_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 212 */ "cpp_style_cast ::= DYNAMIC_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 213 */ "cpp_style_cast ::= REINTERPRET_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 214 */ "lvalue_or_assignment_list ::= lvalue_or_assignment",
 /* 215 */ "lvalue_or_assignment_list ::= lvalue_or_assignment_list COMMA lvalue_or_assignment",
 /* 216 */ "lvalue_or_assignment ::= lvalue",
 /* 217 */ "lvalue_or_assignment ::= lvalue ASSIGN expr_prec_10",
 /* 218 */ "lvalue_or_assignment ::= lvalue ASSIGN initialization_list",
 /* 219 */ "initialization_list ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 220 */ "initialization_list ::= LEFTFIGUREBRACKET initialization_list_argument_list RIGHTFIGUREBRACKET",
 /* 221 */ "initialization_list_argument_list ::= expr_prec_10",
 /* 222 */ "initialization_list_argument_list ::= initialization_list",
 /* 223 */ "initialization_list_argument_list ::= initialization_list_argument_list COMMA expr_prec_10",
 /* 224 */ "initialization_list_argument_list ::= initialization_list_argument_list COMMA initialization_list",
 /* 225 */ "lvalue ::= possibly_identifier_preceded_ref",
 /* 226 */ "lvalue ::= lvalue LEFTSQUAREBRACKET expr_prec_9 RIGHTSQUAREBRACKET",
 /* 227 */ "possibly_identifier_preceded_ref ::= AMPERSAND possibly_idenitifer_preceded_ptrs",
 /* 228 */ "possibly_identifier_preceded_ref ::= possibly_idenitifer_preceded_ptrs",
 /* 229 */ "possibly_idenitifer_preceded_ptrs ::= IDENTIFIER",
 /* 230 */ "possibly_idenitifer_preceded_ptrs ::= MULTIPLY possibly_idenitifer_preceded_ptrs",
 /* 231 */ "possibly_idenitifer_preceded_ptrs ::= CONSTKWD MULTIPLY possibly_idenitifer_preceded_ptrs",
 /* 232 */ "expr_atom ::= NUMERIC",
 /* 233 */ "expr_atom ::= assignable",
 /* 234 */ "expr_atom ::= CHARACTER",
 /* 235 */ "expr_atom ::= STRING",
 /* 236 */ "assignable ::= IDENTIFIER",
 /* 237 */ "assignable ::= scoped_identifier",
 /* 238 */ "scoped_identifier ::= namespace_resolve IDENTIFIER",
 /* 239 */ "expr_atom ::= LEFTROUNDBRACKET expr_list RIGHTROUNDBRACKET",
 /* 240 */ "expr_atom ::= PREPROCESSOR_STRINGIFY IDENTIFIER",
 /* 241 */ "expr_atom ::= PREPROCESSOR_STRINGIFY TYPENAME",
 /* 242 */ "expr_atom ::= IDENTIFIER PREPROCESSOR_CONCAT IDENTIFIER",
 /* 243 */ "expr_atom ::= IDENTIFIER PREPROCESSOR_CONCAT TYPENAME",
 /* 244 */ "expr_atom ::= TYPENAME PREPROCESSOR_CONCAT IDENTIFIER",
 /* 245 */ "expr_atom ::= TYPENAME PREPROCESSOR_CONCAT TYPENAME",
 /* 246 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET type_or_type_ref_or_with_ptr RIGHTROUNDBRACKET",
 /* 247 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET expr_atom RIGHTROUNDBRACKET",
 /* 248 */ "typecast ::= LEFTROUNDBRACKET type_or_type_ref_or_with_ptr RIGHTROUNDBRACKET",
 /* 249 */ "type ::= CONSTKWD non_const_type",
 /* 250 */ "type ::= non_const_type",
 /* 251 */ "non_const_type ::= builtintype",
 /* 252 */ "non_const_type ::= scoped_type",
 /* 253 */ "non_const_type ::= typename_or_instantiated_template_type",
 /* 254 */ "scoped_type ::= namespace_resolve TYPENAME template_instantiation_arguments",
 /* 255 */ "scoped_type ::= namespace_resolve TYPENAME",
 /* 256 */ "namespace_resolve ::= namespace_resolve instantiated_template_type_on_in_namespace_resolve NAMESPACE_RESOLVE",
 /* 257 */ "namespace_resolve ::= namespace_resolve typename_in_namespace_resolve NAMESPACE_RESOLVE",
 /* 258 */ "typename_in_namespace_resolve ::= TYPENAME",
 /* 259 */ "instantiated_template_type_on_in_namespace_resolve ::= TYPENAME template_instantiation_arguments",
 /* 260 */ "namespace_resolve ::= instantiated_template_type_on_start_of_namespace_resolve NAMESPACE_RESOLVE",
 /* 261 */ "namespace_resolve ::= typename_on_start_of_namespace_resolve NAMESPACE_RESOLVE",
 /* 262 */ "instantiated_template_type_on_start_of_namespace_resolve ::= TYPENAME template_instantiation_arguments",
 /* 263 */ "typename_on_start_of_namespace_resolve ::= TYPENAME",
 /* 264 */ "typename_or_instantiated_template_type ::= TYPENAME",
 /* 265 */ "typename_or_instantiated_template_type ::= TYPENAME template_instantiation_arguments",
 /* 266 */ "type_ref_one ::= type AMPERSAND",
 /* 267 */ "type_ref_two ::= type_ref_one AMPERSAND",
 /* 268 */ "type_ref ::= type_ref_one",
 /* 269 */ "type_ref ::= type_ref_two",
 /* 270 */ "type_or_type_ref ::= type",
 /* 271 */ "type_or_type_ref ::= type_ref",
 /* 272 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref",
 /* 273 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr MULTIPLY",
 /* 274 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr CONSTKWD MULTIPLY",
 /* 275 */ "template_instantiation_argument_list ::= type_or_type_ref_or_with_ptr",
 /* 276 */ "template_instantiation_argument_list ::= expr_atom",
 /* 277 */ "template_instantiation_argument_list ::= template_instantiation_argument_list COMMA type_or_type_ref_or_with_ptr",
 /* 278 */ "template_instantiation_argument_list ::= template_instantiation_argument_list COMMA expr_atom",
 /* 279 */ "template_instantiation_arguments_begin ::= LESSER",
 /* 280 */ "template_instantiation_arguments_end ::= GREATER",
 /* 281 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_arguments_end",
 /* 282 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_argument_list template_instantiation_arguments_end",
 /* 283 */ "builtintype ::= VOID",
 /* 284 */ "builtintype ::= FLOAT",
 /* 285 */ "builtintype ::= DOUBLE",
 /* 286 */ "builtintype ::= LONG DOUBLE",
 /* 287 */ "builtintype ::= CHAR",
 /* 288 */ "builtintype ::= SIGNED CHAR",
 /* 289 */ "builtintype ::= UNSIGNED CHAR",
 /* 290 */ "builtintype ::= INT",
 /* 291 */ "builtintype ::= SIGNED INT",
 /* 292 */ "builtintype ::= UNSIGNED INT",
 /* 293 */ "builtintype ::= SHORT INT",
 /* 294 */ "builtintype ::= SIGNED SHORT INT",
 /* 295 */ "builtintype ::= UNSIGNED SHORT INT",
 /* 296 */ "builtintype ::= LONG INT",
 /* 297 */ "builtintype ::= SIGNED LONG INT",
 /* 298 */ "builtintype ::= UNSIGNED LONG INT",
 /* 299 */ "builtintype ::= LONG LONG INT",
 /* 300 */ "builtintype ::= SIGNED LONG LONG INT",
 /* 301 */ "builtintype ::= UNSIGNED LONG LONG INT",
 /* 302 */ "builtintype ::= SHORT",
 /* 303 */ "builtintype ::= SIGNED SHORT",
 /* 304 */ "builtintype ::= UNSIGNED SHORT",
 /* 305 */ "builtintype ::= LONG",
 /* 306 */ "builtintype ::= SIGNED LONG",
 /* 307 */ "builtintype ::= UNSIGNED LONG",
 /* 308 */ "builtintype ::= LONG LONG",
 /* 309 */ "builtintype ::= SIGNED LONG LONG",
 /* 310 */ "builtintype ::= UNSIGNED LONG LONG",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param block_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new block_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 4 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 4 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 132, 'rhs' => 2 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 2 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 150, 'rhs' => 3 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 161, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 2 ),
  array( 'lhs' => 165, 'rhs' => 2 ),
  array( 'lhs' => 165, 'rhs' => 2 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 5 ),
  array( 'lhs' => 128, 'rhs' => 7 ),
  array( 'lhs' => 128, 'rhs' => 9 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 3 ),
  array( 'lhs' => 173, 'rhs' => 4 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 6 ),
  array( 'lhs' => 175, 'rhs' => 7 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 6 ),
  array( 'lhs' => 177, 'rhs' => 7 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 179, 'rhs' => 4 ),
  array( 'lhs' => 179, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 5 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 4 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 171, 'rhs' => 4 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 3 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 3 ),
  array( 'lhs' => 187, 'rhs' => 3 ),
  array( 'lhs' => 187, 'rhs' => 3 ),
  array( 'lhs' => 187, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 3 ),
  array( 'lhs' => 188, 'rhs' => 3 ),
  array( 'lhs' => 188, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 3 ),
  array( 'lhs' => 189, 'rhs' => 3 ),
  array( 'lhs' => 189, 'rhs' => 3 ),
  array( 'lhs' => 189, 'rhs' => 3 ),
  array( 'lhs' => 189, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 3 ),
  array( 'lhs' => 190, 'rhs' => 3 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 192, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 4 ),
  array( 'lhs' => 198, 'rhs' => 4 ),
  array( 'lhs' => 198, 'rhs' => 4 ),
  array( 'lhs' => 198, 'rhs' => 3 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 2 ),
  array( 'lhs' => 199, 'rhs' => 4 ),
  array( 'lhs' => 199, 'rhs' => 4 ),
  array( 'lhs' => 199, 'rhs' => 4 ),
  array( 'lhs' => 199, 'rhs' => 4 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 3 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 3 ),
  array( 'lhs' => 200, 'rhs' => 3 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 3 ),
  array( 'lhs' => 202, 'rhs' => 3 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 203, 'rhs' => 2 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 204, 'rhs' => 1 ),
  array( 'lhs' => 204, 'rhs' => 2 ),
  array( 'lhs' => 204, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 205, 'rhs' => 1 ),
  array( 'lhs' => 205, 'rhs' => 1 ),
  array( 'lhs' => 206, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 4 ),
  array( 'lhs' => 147, 'rhs' => 4 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 3 ),
  array( 'lhs' => 209, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 214, 'rhs' => 2 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 216, 'rhs' => 2 ),
  array( 'lhs' => 217, 'rhs' => 2 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 3 ),
  array( 'lhs' => 220, 'rhs' => 3 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 222, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 4 ),
  array( 'lhs' => 208, 'rhs' => 4 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        12 => 9,
        10 => 10,
        13 => 10,
        11 => 11,
        14 => 14,
        15 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        62 => 55,
        56 => 56,
        58 => 56,
        61 => 56,
        81 => 56,
        83 => 56,
        138 => 56,
        141 => 56,
        142 => 56,
        214 => 56,
        216 => 56,
        221 => 56,
        222 => 56,
        225 => 56,
        228 => 56,
        229 => 56,
        237 => 56,
        251 => 56,
        252 => 56,
        253 => 56,
        264 => 56,
        268 => 56,
        269 => 56,
        270 => 56,
        271 => 56,
        272 => 56,
        275 => 56,
        276 => 56,
        57 => 57,
        59 => 59,
        60 => 60,
        63 => 63,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        82 => 82,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 93,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 105,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        126 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        139 => 139,
        140 => 140,
        160 => 140,
        170 => 140,
        175 => 140,
        178 => 140,
        181 => 140,
        185 => 140,
        188 => 140,
        198 => 140,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        161 => 161,
        162 => 162,
        163 => 163,
        167 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
        168 => 168,
        169 => 169,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        176 => 176,
        177 => 177,
        179 => 179,
        180 => 180,
        182 => 182,
        183 => 183,
        184 => 184,
        186 => 186,
        187 => 186,
        189 => 189,
        190 => 190,
        191 => 191,
        192 => 192,
        193 => 193,
        194 => 194,
        195 => 195,
        196 => 196,
        197 => 197,
        199 => 199,
        200 => 199,
        201 => 201,
        202 => 202,
        203 => 203,
        204 => 204,
        205 => 205,
        206 => 206,
        207 => 207,
        208 => 208,
        209 => 209,
        210 => 210,
        211 => 211,
        212 => 212,
        213 => 213,
        215 => 215,
        217 => 217,
        218 => 217,
        219 => 219,
        220 => 220,
        223 => 223,
        224 => 223,
        226 => 226,
        227 => 227,
        230 => 230,
        231 => 231,
        232 => 232,
        234 => 232,
        235 => 232,
        236 => 232,
        233 => 233,
        238 => 238,
        239 => 239,
        240 => 240,
        241 => 240,
        242 => 242,
        243 => 242,
        244 => 242,
        245 => 242,
        246 => 246,
        247 => 247,
        248 => 248,
        249 => 249,
        250 => 250,
        254 => 254,
        255 => 255,
        256 => 256,
        257 => 257,
        258 => 258,
        259 => 259,
        260 => 260,
        261 => 260,
        262 => 262,
        263 => 263,
        265 => 265,
        266 => 266,
        267 => 267,
        273 => 273,
        274 => 274,
        277 => 277,
        278 => 278,
        279 => 279,
        280 => 280,
        281 => 281,
        282 => 282,
        283 => 283,
        284 => 284,
        285 => 285,
        286 => 286,
        287 => 287,
        288 => 288,
        289 => 289,
        290 => 290,
        291 => 291,
        292 => 292,
        293 => 293,
        294 => 294,
        295 => 295,
        296 => 296,
        297 => 297,
        298 => 298,
        299 => 299,
        300 => 300,
        301 => 301,
        302 => 302,
        303 => 303,
        304 => 304,
        305 => 305,
        306 => 306,
        307 => 307,
        308 => 308,
        309 => 309,
        310 => 310,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 88 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 3785 "langs_src/parser_cpp_language.php"
#line 104 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3791 "langs_src/parser_cpp_language.php"
#line 109 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3797 "langs_src/parser_cpp_language.php"
#line 114 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3804 "langs_src/parser_cpp_language.php"
#line 120 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('namespace', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3811 "langs_src/parser_cpp_language.php"
#line 126 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3817 "langs_src/parser_cpp_language.php"
#line 131 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3823 "langs_src/parser_cpp_language.php"
#line 138 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3829 "langs_src/parser_cpp_language.php"
#line 143 "langs_src/parser_cpp_language.y"
    function yy_r8(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_constructable($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('identified_type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3836 "langs_src/parser_cpp_language.php"
#line 149 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3842 "langs_src/parser_cpp_language.php"
#line 154 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3848 "langs_src/parser_cpp_language.php"
#line 159 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3855 "langs_src/parser_cpp_language.php"
#line 179 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3861 "langs_src/parser_cpp_language.php"
#line 184 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3867 "langs_src/parser_cpp_language.php"
#line 189 "langs_src/parser_cpp_language.y"
    function yy_r16(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3874 "langs_src/parser_cpp_language.php"
#line 195 "langs_src/parser_cpp_language.y"
    function yy_r17(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово имени типа"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3880 "langs_src/parser_cpp_language.php"
#line 200 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления класса"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3886 "langs_src/parser_cpp_language.php"
#line 205 "langs_src/parser_cpp_language.y"
    function yy_r19(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления структуры"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3892 "langs_src/parser_cpp_language.php"
#line 210 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово перечисления"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3898 "langs_src/parser_cpp_language.php"
#line 215 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3904 "langs_src/parser_cpp_language.php"
#line 220 "langs_src/parser_cpp_language.y"
    function yy_r22(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3910 "langs_src/parser_cpp_language.php"
#line 226 "langs_src/parser_cpp_language.y"
    function yy_r23(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array(A, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3916 "langs_src/parser_cpp_language.php"
#line 231 "langs_src/parser_cpp_language.y"
    function yy_r24(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3922 "langs_src/parser_cpp_language.php"
#line 236 "langs_src/parser_cpp_language.y"
    function yy_r25(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления класса"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3928 "langs_src/parser_cpp_language.php"
#line 241 "langs_src/parser_cpp_language.y"
    function yy_r26(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления структуры"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3934 "langs_src/parser_cpp_language.php"
#line 246 "langs_src/parser_cpp_language.y"
    function yy_r27(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления объединения"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3940 "langs_src/parser_cpp_language.php"
#line 251 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3946 "langs_src/parser_cpp_language.php"
#line 256 "langs_src/parser_cpp_language.y"
    function yy_r29(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3952 "langs_src/parser_cpp_language.php"
#line 261 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3958 "langs_src/parser_cpp_language.php"
#line 266 "langs_src/parser_cpp_language.y"
    function yy_r31(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3964 "langs_src/parser_cpp_language.php"
#line 273 "langs_src/parser_cpp_language.y"
    function yy_r32(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3971 "langs_src/parser_cpp_language.php"
#line 279 "langs_src/parser_cpp_language.y"
    function yy_r33(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3977 "langs_src/parser_cpp_language.php"
#line 284 "langs_src/parser_cpp_language.y"
    function yy_r34(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3983 "langs_src/parser_cpp_language.php"
#line 289 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3989 "langs_src/parser_cpp_language.php"
#line 294 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово открытой видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3995 "langs_src/parser_cpp_language.php"
#line 299 "langs_src/parser_cpp_language.y"
    function yy_r37(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово защищенной видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4001 "langs_src/parser_cpp_language.php"
#line 304 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово скрытой видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4007 "langs_src/parser_cpp_language.php"
#line 309 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления сигнала"));
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4013 "langs_src/parser_cpp_language.php"
#line 314 "langs_src/parser_cpp_language.y"
    function yy_r40(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления слота"));
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4019 "langs_src/parser_cpp_language.php"
#line 322 "langs_src/parser_cpp_language.y"
    function yy_r41(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4025 "langs_src/parser_cpp_language.php"
#line 327 "langs_src/parser_cpp_language.y"
    function yy_r42(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4031 "langs_src/parser_cpp_language.php"
#line 332 "langs_src/parser_cpp_language.y"
    function yy_r43(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4037 "langs_src/parser_cpp_language.php"
#line 337 "langs_src/parser_cpp_language.y"
    function yy_r44(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4043 "langs_src/parser_cpp_language.php"
#line 342 "langs_src/parser_cpp_language.y"
    function yy_r45(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4049 "langs_src/parser_cpp_language.php"
#line 347 "langs_src/parser_cpp_language.y"
    function yy_r46(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4055 "langs_src/parser_cpp_language.php"
#line 353 "langs_src/parser_cpp_language.y"
    function yy_r47(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('enum_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4062 "langs_src/parser_cpp_language.php"
#line 359 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4068 "langs_src/parser_cpp_language.php"
#line 364 "langs_src/parser_cpp_language.y"
    function yy_r49(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4074 "langs_src/parser_cpp_language.php"
#line 369 "langs_src/parser_cpp_language.y"
    function yy_r50(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4080 "langs_src/parser_cpp_language.php"
#line 374 "langs_src/parser_cpp_language.y"
    function yy_r51(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4086 "langs_src/parser_cpp_language.php"
#line 379 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4092 "langs_src/parser_cpp_language.php"
#line 386 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4098 "langs_src/parser_cpp_language.php"
#line 391 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4104 "langs_src/parser_cpp_language.php"
#line 396 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('function_definition_without_type', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4110 "langs_src/parser_cpp_language.php"
#line 401 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4115 "langs_src/parser_cpp_language.php"
#line 405 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4121 "langs_src/parser_cpp_language.php"
#line 414 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4127 "langs_src/parser_cpp_language.php"
#line 419 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4133 "langs_src/parser_cpp_language.php"
#line 436 "langs_src/parser_cpp_language.y"
    function yy_r63(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4139 "langs_src/parser_cpp_language.php"
#line 442 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4145 "langs_src/parser_cpp_language.php"
#line 448 "langs_src/parser_cpp_language.y"
    function yy_r65(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('destructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4151 "langs_src/parser_cpp_language.php"
#line 456 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('outer_constructor_name', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4158 "langs_src/parser_cpp_language.php"
#line 462 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, E));
    }
#line 4165 "langs_src/parser_cpp_language.php"
#line 469 "langs_src/parser_cpp_language.y"
    function yy_r68(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4172 "langs_src/parser_cpp_language.php"
#line 475 "langs_src/parser_cpp_language.y"
    function yy_r69(){
	$this->mapper->clear_lookup_namespace();
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('outer_destructor_name', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4179 "langs_src/parser_cpp_language.php"
#line 482 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4185 "langs_src/parser_cpp_language.php"
#line 488 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4191 "langs_src/parser_cpp_language.php"
#line 493 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4197 "langs_src/parser_cpp_language.php"
#line 498 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4203 "langs_src/parser_cpp_language.php"
#line 503 "langs_src/parser_cpp_language.y"
    function yy_r74(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4209 "langs_src/parser_cpp_language.php"
#line 511 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4215 "langs_src/parser_cpp_language.php"
#line 516 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4221 "langs_src/parser_cpp_language.php"
#line 521 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4227 "langs_src/parser_cpp_language.php"
#line 526 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4233 "langs_src/parser_cpp_language.php"
#line 531 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4239 "langs_src/parser_cpp_language.php"
#line 536 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4245 "langs_src/parser_cpp_language.php"
#line 545 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4251 "langs_src/parser_cpp_language.php"
#line 557 "langs_src/parser_cpp_language.y"
    function yy_r84(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4257 "langs_src/parser_cpp_language.php"
#line 562 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4263 "langs_src/parser_cpp_language.php"
#line 567 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4269 "langs_src/parser_cpp_language.php"
#line 572 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4275 "langs_src/parser_cpp_language.php"
#line 577 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4281 "langs_src/parser_cpp_language.php"
#line 582 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4287 "langs_src/parser_cpp_language.php"
#line 587 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4293 "langs_src/parser_cpp_language.php"
#line 592 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4299 "langs_src/parser_cpp_language.php"
#line 597 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4305 "langs_src/parser_cpp_language.php"
#line 602 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 4311 "langs_src/parser_cpp_language.php"
#line 612 "langs_src/parser_cpp_language.y"
    function yy_r95(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 4317 "langs_src/parser_cpp_language.php"
#line 617 "langs_src/parser_cpp_language.y"
    function yy_r96(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 4323 "langs_src/parser_cpp_language.php"
#line 622 "langs_src/parser_cpp_language.y"
    function yy_r97(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4329 "langs_src/parser_cpp_language.php"
#line 627 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4335 "langs_src/parser_cpp_language.php"
#line 639 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4341 "langs_src/parser_cpp_language.php"
#line 651 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4347 "langs_src/parser_cpp_language.php"
#line 664 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4353 "langs_src/parser_cpp_language.php"
#line 672 "langs_src/parser_cpp_language.y"
    function yy_r102(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4359 "langs_src/parser_cpp_language.php"
#line 677 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4365 "langs_src/parser_cpp_language.php"
#line 685 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4371 "langs_src/parser_cpp_language.php"
#line 692 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4377 "langs_src/parser_cpp_language.php"
#line 702 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4383 "langs_src/parser_cpp_language.php"
#line 709 "langs_src/parser_cpp_language.y"
    function yy_r108(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4389 "langs_src/parser_cpp_language.php"
#line 714 "langs_src/parser_cpp_language.y"
    function yy_r109(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4395 "langs_src/parser_cpp_language.php"
#line 719 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4401 "langs_src/parser_cpp_language.php"
#line 724 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4407 "langs_src/parser_cpp_language.php"
#line 729 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4413 "langs_src/parser_cpp_language.php"
#line 734 "langs_src/parser_cpp_language.y"
    function yy_r113(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4419 "langs_src/parser_cpp_language.php"
#line 739 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4425 "langs_src/parser_cpp_language.php"
#line 744 "langs_src/parser_cpp_language.y"
    function yy_r115(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4431 "langs_src/parser_cpp_language.php"
#line 749 "langs_src/parser_cpp_language.y"
    function yy_r116(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4437 "langs_src/parser_cpp_language.php"
#line 754 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4443 "langs_src/parser_cpp_language.php"
#line 761 "langs_src/parser_cpp_language.y"
    function yy_r118(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4449 "langs_src/parser_cpp_language.php"
#line 768 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4455 "langs_src/parser_cpp_language.php"
#line 773 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4461 "langs_src/parser_cpp_language.php"
#line 778 "langs_src/parser_cpp_language.y"
    function yy_r121(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4467 "langs_src/parser_cpp_language.php"
#line 783 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4473 "langs_src/parser_cpp_language.php"
#line 788 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4479 "langs_src/parser_cpp_language.php"
#line 793 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4485 "langs_src/parser_cpp_language.php"
#line 798 "langs_src/parser_cpp_language.y"
    function yy_r125(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4491 "langs_src/parser_cpp_language.php"
#line 810 "langs_src/parser_cpp_language.y"
    function yy_r127(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4497 "langs_src/parser_cpp_language.php"
#line 815 "langs_src/parser_cpp_language.y"
    function yy_r128(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4503 "langs_src/parser_cpp_language.php"
#line 820 "langs_src/parser_cpp_language.y"
    function yy_r129(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4509 "langs_src/parser_cpp_language.php"
#line 827 "langs_src/parser_cpp_language.y"
    function yy_r130(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4515 "langs_src/parser_cpp_language.php"
#line 832 "langs_src/parser_cpp_language.y"
    function yy_r131(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 4522 "langs_src/parser_cpp_language.php"
#line 839 "langs_src/parser_cpp_language.y"
    function yy_r132(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4528 "langs_src/parser_cpp_language.php"
#line 844 "langs_src/parser_cpp_language.y"
    function yy_r133(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4534 "langs_src/parser_cpp_language.php"
#line 851 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('new_kwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4540 "langs_src/parser_cpp_language.php"
#line 856 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_array', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4546 "langs_src/parser_cpp_language.php"
#line 861 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_pointer', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4552 "langs_src/parser_cpp_language.php"
#line 867 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменных", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4558 "langs_src/parser_cpp_language.php"
#line 878 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4564 "langs_src/parser_cpp_language.php"
#line 883 "langs_src/parser_cpp_language.y"
    function yy_r140(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4570 "langs_src/parser_cpp_language.php"
#line 898 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 4577 "langs_src/parser_cpp_language.php"
#line 904 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4583 "langs_src/parser_cpp_language.php"
#line 909 "langs_src/parser_cpp_language.y"
    function yy_r145(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4589 "langs_src/parser_cpp_language.php"
#line 914 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4595 "langs_src/parser_cpp_language.php"
#line 919 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4601 "langs_src/parser_cpp_language.php"
#line 924 "langs_src/parser_cpp_language.y"
    function yy_r148(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4607 "langs_src/parser_cpp_language.php"
#line 931 "langs_src/parser_cpp_language.y"
    function yy_r149(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryxor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4613 "langs_src/parser_cpp_language.php"
#line 936 "langs_src/parser_cpp_language.y"
    function yy_r150(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4619 "langs_src/parser_cpp_language.php"
#line 941 "langs_src/parser_cpp_language.y"
    function yy_r151(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryand_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4625 "langs_src/parser_cpp_language.php"
#line 946 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4631 "langs_src/parser_cpp_language.php"
#line 951 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4637 "langs_src/parser_cpp_language.php"
#line 956 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulo_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4643 "langs_src/parser_cpp_language.php"
#line 961 "langs_src/parser_cpp_language.y"
    function yy_r155(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4649 "langs_src/parser_cpp_language.php"
#line 966 "langs_src/parser_cpp_language.y"
    function yy_r156(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4655 "langs_src/parser_cpp_language.php"
#line 971 "langs_src/parser_cpp_language.y"
    function yy_r157(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4661 "langs_src/parser_cpp_language.php"
#line 976 "langs_src/parser_cpp_language.y"
    function yy_r158(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4667 "langs_src/parser_cpp_language.php"
#line 981 "langs_src/parser_cpp_language.y"
    function yy_r159(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4673 "langs_src/parser_cpp_language.php"
#line 993 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4679 "langs_src/parser_cpp_language.php"
#line 998 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4685 "langs_src/parser_cpp_language.php"
#line 1003 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4690 "langs_src/parser_cpp_language.php"
#line 1007 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_xor', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4696 "langs_src/parser_cpp_language.php"
#line 1012 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4702 "langs_src/parser_cpp_language.php"
#line 1017 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	// Well, that's what you get when you mix binary and and adress taking
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4709 "langs_src/parser_cpp_language.php"
#line 1027 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_notequal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4715 "langs_src/parser_cpp_language.php"
#line 1032 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4721 "langs_src/parser_cpp_language.php"
#line 1044 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4727 "langs_src/parser_cpp_language.php"
#line 1049 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4733 "langs_src/parser_cpp_language.php"
#line 1054 "langs_src/parser_cpp_language.y"
    function yy_r173(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4739 "langs_src/parser_cpp_language.php"
#line 1059 "langs_src/parser_cpp_language.y"
    function yy_r174(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4745 "langs_src/parser_cpp_language.php"
#line 1071 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4751 "langs_src/parser_cpp_language.php"
#line 1076 "langs_src/parser_cpp_language.y"
    function yy_r177(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4757 "langs_src/parser_cpp_language.php"
#line 1088 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4763 "langs_src/parser_cpp_language.php"
#line 1093 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4769 "langs_src/parser_cpp_language.php"
#line 1105 "langs_src/parser_cpp_language.y"
    function yy_r182(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulosign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4775 "langs_src/parser_cpp_language.php"
#line 1110 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4781 "langs_src/parser_cpp_language.php"
#line 1115 "langs_src/parser_cpp_language.y"
    function yy_r184(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4787 "langs_src/parser_cpp_language.php"
#line 1127 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_get_property', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4793 "langs_src/parser_cpp_language.php"
#line 1144 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_take_adress', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4799 "langs_src/parser_cpp_language.php"
#line 1149 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_dereference', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4805 "langs_src/parser_cpp_language.php"
#line 1154 "langs_src/parser_cpp_language.y"
    function yy_r191(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_typecast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4811 "langs_src/parser_cpp_language.php"
#line 1159 "langs_src/parser_cpp_language.y"
    function yy_r192(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4817 "langs_src/parser_cpp_language.php"
#line 1164 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4823 "langs_src/parser_cpp_language.php"
#line 1169 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4829 "langs_src/parser_cpp_language.php"
#line 1174 "langs_src/parser_cpp_language.y"
    function yy_r195(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4835 "langs_src/parser_cpp_language.php"
#line 1179 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4841 "langs_src/parser_cpp_language.php"
#line 1184 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4847 "langs_src/parser_cpp_language.php"
#line 1196 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_property_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4853 "langs_src/parser_cpp_language.php"
#line 1206 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4859 "langs_src/parser_cpp_language.php"
#line 1211 "langs_src/parser_cpp_language.y"
    function yy_r202(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4865 "langs_src/parser_cpp_language.php"
#line 1216 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4871 "langs_src/parser_cpp_language.php"
#line 1221 "langs_src/parser_cpp_language.y"
    function yy_r204(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4877 "langs_src/parser_cpp_language.php"
#line 1226 "langs_src/parser_cpp_language.y"
    function yy_r205(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_postfix_increment', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4883 "langs_src/parser_cpp_language.php"
#line 1231 "langs_src/parser_cpp_language.y"
    function yy_r206(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_postfix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4889 "langs_src/parser_cpp_language.php"
#line 1236 "langs_src/parser_cpp_language.y"
    function yy_r207(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4895 "langs_src/parser_cpp_language.php"
#line 1243 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4901 "langs_src/parser_cpp_language.php"
#line 1248 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4907 "langs_src/parser_cpp_language.php"
#line 1255 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_const_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4913 "langs_src/parser_cpp_language.php"
#line 1260 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_static_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4919 "langs_src/parser_cpp_language.php"
#line 1265 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_dynamic_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4925 "langs_src/parser_cpp_language.php"
#line 1270 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_reinterpret_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4931 "langs_src/parser_cpp_language.php"
#line 1281 "langs_src/parser_cpp_language.y"
    function yy_r215(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue_or_assignment_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4937 "langs_src/parser_cpp_language.php"
#line 1290 "langs_src/parser_cpp_language.y"
    function yy_r217(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4943 "langs_src/parser_cpp_language.php"
#line 1300 "langs_src/parser_cpp_language.y"
    function yy_r219(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4949 "langs_src/parser_cpp_language.php"
#line 1305 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4955 "langs_src/parser_cpp_language.php"
#line 1319 "langs_src/parser_cpp_language.y"
    function yy_r223(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('initialization_list_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, C));
    }
#line 4961 "langs_src/parser_cpp_language.php"
#line 1333 "langs_src/parser_cpp_language.y"
    function yy_r226(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4967 "langs_src/parser_cpp_language.php"
#line 1338 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4973 "langs_src/parser_cpp_language.php"
#line 1351 "langs_src/parser_cpp_language.y"
    function yy_r230(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4979 "langs_src/parser_cpp_language.php"
#line 1356 "langs_src/parser_cpp_language.y"
    function yy_r231(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4985 "langs_src/parser_cpp_language.php"
#line 1364 "langs_src/parser_cpp_language.y"
    function yy_r232(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4991 "langs_src/parser_cpp_language.php"
#line 1369 "langs_src/parser_cpp_language.y"
    function yy_r233(){
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4996 "langs_src/parser_cpp_language.php"
#line 1392 "langs_src/parser_cpp_language.y"
    function yy_r238(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('scoped_identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5002 "langs_src/parser_cpp_language.php"
#line 1398 "langs_src/parser_cpp_language.y"
    function yy_r239(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_brackets', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5008 "langs_src/parser_cpp_language.php"
#line 1403 "langs_src/parser_cpp_language.y"
    function yy_r240(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_stringify', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5014 "langs_src/parser_cpp_language.php"
#line 1413 "langs_src/parser_cpp_language.y"
    function yy_r242(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_concat', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5020 "langs_src/parser_cpp_language.php"
#line 1435 "langs_src/parser_cpp_language.y"
    function yy_r246(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5026 "langs_src/parser_cpp_language.php"
#line 1440 "langs_src/parser_cpp_language.y"
    function yy_r247(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5032 "langs_src/parser_cpp_language.php"
#line 1447 "langs_src/parser_cpp_language.y"
    function yy_r248(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('c_style_typecast_operator', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 5039 "langs_src/parser_cpp_language.php"
#line 1455 "langs_src/parser_cpp_language.y"
    function yy_r249(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5045 "langs_src/parser_cpp_language.php"
#line 1460 "langs_src/parser_cpp_language.y"
    function yy_r250(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5050 "langs_src/parser_cpp_language.php"
#line 1476 "langs_src/parser_cpp_language.y"
    function yy_r254(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5057 "langs_src/parser_cpp_language.php"
#line 1482 "langs_src/parser_cpp_language.y"
    function yy_r255(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -1]->minor,  $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5064 "langs_src/parser_cpp_language.php"
#line 1488 "langs_src/parser_cpp_language.y"
    function yy_r256(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5070 "langs_src/parser_cpp_language.php"
#line 1493 "langs_src/parser_cpp_language.y"
    function yy_r257(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5076 "langs_src/parser_cpp_language.php"
#line 1498 "langs_src/parser_cpp_language.y"
    function yy_r258(){
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5082 "langs_src/parser_cpp_language.php"
#line 1503 "langs_src/parser_cpp_language.y"
    function yy_r259(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5089 "langs_src/parser_cpp_language.php"
#line 1509 "langs_src/parser_cpp_language.y"
    function yy_r260(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5095 "langs_src/parser_cpp_language.php"
#line 1520 "langs_src/parser_cpp_language.y"
    function yy_r262(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5103 "langs_src/parser_cpp_language.php"
#line 1527 "langs_src/parser_cpp_language.y"
    function yy_r263(){
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5110 "langs_src/parser_cpp_language.php"
#line 1539 "langs_src/parser_cpp_language.y"
    function yy_r265(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5116 "langs_src/parser_cpp_language.php"
#line 1547 "langs_src/parser_cpp_language.y"
    function yy_r266(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак  ссылки"));
	$this->_retvalue = $this->create_node('type_ref', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5122 "langs_src/parser_cpp_language.php"
#line 1552 "langs_src/parser_cpp_language.y"
    function yy_r267(){
	$this->yystack[$this->yyidx + -1]->minor->add_child($this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 5128 "langs_src/parser_cpp_language.php"
#line 1577 "langs_src/parser_cpp_language.y"
    function yy_r273(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5134 "langs_src/parser_cpp_language.php"
#line 1582 "langs_src/parser_cpp_language.y"
    function yy_r274(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5140 "langs_src/parser_cpp_language.php"
#line 1597 "langs_src/parser_cpp_language.y"
    function yy_r277(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_instantiation_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5146 "langs_src/parser_cpp_language.php"
#line 1602 "langs_src/parser_cpp_language.y"
    function yy_r278(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5152 "langs_src/parser_cpp_language.php"
#line 1607 "langs_src/parser_cpp_language.y"
    function yy_r279(){
	$this->mapper->start_new_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5158 "langs_src/parser_cpp_language.php"
#line 1612 "langs_src/parser_cpp_language.y"
    function yy_r280(){
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5164 "langs_src/parser_cpp_language.php"
#line 1617 "langs_src/parser_cpp_language.y"
    function yy_r281(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5170 "langs_src/parser_cpp_language.php"
#line 1622 "langs_src/parser_cpp_language.y"
    function yy_r282(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "%ur(именительный)", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5176 "langs_src/parser_cpp_language.php"
#line 1629 "langs_src/parser_cpp_language.y"
    function yy_r283(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя пустого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5182 "langs_src/parser_cpp_language.php"
#line 1637 "langs_src/parser_cpp_language.y"
    function yy_r284(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой одинарной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5188 "langs_src/parser_cpp_language.php"
#line 1642 "langs_src/parser_cpp_language.y"
    function yy_r285(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5194 "langs_src/parser_cpp_language.php"
#line 1647 "langs_src/parser_cpp_language.y"
    function yy_r286(){
    $this->currentrule = new block_formal_langs_description_rule("имя длинного типа c плавающей запятой двойной точности", array("признак длинного числа", "имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5200 "langs_src/parser_cpp_language.php"
#line 1655 "langs_src/parser_cpp_language.y"
    function yy_r287(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя символьного типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5206 "langs_src/parser_cpp_language.php"
#line 1660 "langs_src/parser_cpp_language.y"
    function yy_r288(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый символьный тип", array("признак знаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5212 "langs_src/parser_cpp_language.php"
#line 1665 "langs_src/parser_cpp_language.y"
    function yy_r289(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый символьный тип", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5218 "langs_src/parser_cpp_language.php"
#line 1673 "langs_src/parser_cpp_language.y"
    function yy_r290(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5224 "langs_src/parser_cpp_language.php"
#line 1678 "langs_src/parser_cpp_language.y"
    function yy_r291(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый целый тип", array("признак знаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5230 "langs_src/parser_cpp_language.php"
#line 1683 "langs_src/parser_cpp_language.y"
    function yy_r292(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый целый тип", array("признак беззнаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5236 "langs_src/parser_cpp_language.php"
#line 1688 "langs_src/parser_cpp_language.y"
    function yy_r293(){
    $this->currentrule = new block_formal_langs_description_rule("короткий целый тип", array("признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5242 "langs_src/parser_cpp_language.php"
#line 1693 "langs_src/parser_cpp_language.y"
    function yy_r294(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5248 "langs_src/parser_cpp_language.php"
#line 1698 "langs_src/parser_cpp_language.y"
    function yy_r295(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5254 "langs_src/parser_cpp_language.php"
#line 1703 "langs_src/parser_cpp_language.y"
    function yy_r296(){
    $this->currentrule = new block_formal_langs_description_rule("длинный целый тип", array("признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5260 "langs_src/parser_cpp_language.php"
#line 1708 "langs_src/parser_cpp_language.y"
    function yy_r297(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целый тип", array("признак знаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5266 "langs_src/parser_cpp_language.php"
#line 1713 "langs_src/parser_cpp_language.y"
    function yy_r298(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целый тип", array("признак беззнаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5272 "langs_src/parser_cpp_language.php"
#line 1718 "langs_src/parser_cpp_language.y"
    function yy_r299(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5278 "langs_src/parser_cpp_language.php"
#line 1724 "langs_src/parser_cpp_language.y"
    function yy_r300(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5284 "langs_src/parser_cpp_language.php"
#line 1729 "langs_src/parser_cpp_language.y"
    function yy_r301(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5290 "langs_src/parser_cpp_language.php"
#line 1737 "langs_src/parser_cpp_language.y"
    function yy_r302(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5296 "langs_src/parser_cpp_language.php"
#line 1742 "langs_src/parser_cpp_language.y"
    function yy_r303(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5302 "langs_src/parser_cpp_language.php"
#line 1747 "langs_src/parser_cpp_language.y"
    function yy_r304(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5308 "langs_src/parser_cpp_language.php"
#line 1754 "langs_src/parser_cpp_language.y"
    function yy_r305(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5314 "langs_src/parser_cpp_language.php"
#line 1759 "langs_src/parser_cpp_language.y"
    function yy_r306(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целвый тип", array("признак знаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5320 "langs_src/parser_cpp_language.php"
#line 1764 "langs_src/parser_cpp_language.y"
    function yy_r307(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целвый тип", array("признак беззнаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5326 "langs_src/parser_cpp_language.php"
#line 1771 "langs_src/parser_cpp_language.y"
    function yy_r308(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5332 "langs_src/parser_cpp_language.php"
#line 1776 "langs_src/parser_cpp_language.y"
    function yy_r309(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5338 "langs_src/parser_cpp_language.php"
#line 1781 "langs_src/parser_cpp_language.y"
    function yy_r310(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5344 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //block_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 40 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 5489 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
