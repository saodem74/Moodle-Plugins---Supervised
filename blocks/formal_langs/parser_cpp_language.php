<?php
/* Driver template for the PHP_block_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class block_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof block_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof block_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof block_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof block_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class block_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 3 "langs_src/parser_cpp_language.y"

require_once($CFG->dirroot.'/blocks/formal_langs/descriptions/descriptionrule.php');
#line 102 "langs_src/parser_cpp_language.php"

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 107 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 6 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 145 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const NOTEQUAL                       =  3;
    const EQUAL                          =  4;
    const LOGICALAND                     =  5;
    const BINARYAND                      =  6;
    const BINARYOR                       =  7;
    const LOGICALOR                      =  8;
    const AMPERSAND                      =  9;
    const BINARYXOR                      = 10;
    const UINDIRECTION                   = 11;
    const UADRESS                        = 12;
    const NAMESPACE_RESOLVE              = 13;
    const UMINUS                         = 14;
    const UPLUS                          = 15;
    const UBRACKET                       = 16;
    const TYPEUNARY                      = 17;
    const MACROPARAMETERPRIORITY         = 18;
    const SEMICOLON                      = 19;
    const FORKWD                         = 20;
    const UNSIGNED                       = 21;
    const SIGNED                         = 22;
    const LONG                           = 23;
    const SHORT                          = 24;
    const INT                            = 25;
    const CHAR                           = 26;
    const DOUBLE                         = 27;
    const FLOAT                          = 28;
    const VOID                           = 29;
    const GREATER                        = 30;
    const COMMA                          = 31;
    const LESSER                         = 32;
    const MULTIPLY                       = 33;
    const CONSTKWD                       = 34;
    const TYPENAME                       = 35;
    const LEFTROUNDBRACKET               = 36;
    const RIGHTROUNDBRACKET              = 37;
    const SIZEOF                         = 38;
    const IDENTIFIER                     = 39;
    const PREPROCESSOR_CONCAT            = 40;
    const PREPROCESSOR_STRINGIFY         = 41;
    const STRING                         = 42;
    const CHARACTER                      = 43;
    const NUMERIC                        = 44;
    const LEFTSQUAREBRACKET              = 45;
    const RIGHTSQUAREBRACKET             = 46;
    const LEFTFIGUREBRACKET              = 47;
    const RIGHTFIGUREBRACKET             = 48;
    const ASSIGN                         = 49;
    const REINTERPRET_CAST               = 50;
    const DYNAMIC_CAST                   = 51;
    const STATIC_CAST                    = 52;
    const CONST_CAST                     = 53;
    const RIGHTARROW                     = 54;
    const DOT                            = 55;
    const DECREMENT                      = 56;
    const INCREMENT                      = 57;
    const PLUS                           = 58;
    const MINUS                          = 59;
    const BINARYNOT                      = 60;
    const LOGICALNOT                     = 61;
    const DIVISION                       = 62;
    const MODULOSIGN                     = 63;
    const RIGHTSHIFT                     = 64;
    const LEFTSHIFT                      = 65;
    const GREATER_OR_EQUAL               = 66;
    const LESSER_OR_EQUAL                = 67;
    const NOT_EQUAL                      = 68;
    const MINUS_ASSIGN                   = 69;
    const PLUS_ASSIGN                    = 70;
    const MULTIPLY_ASSIGN                = 71;
    const DIVISION_ASSIGN                = 72;
    const MODULO_ASSIGN                  = 73;
    const LEFTSHIFT_ASSIGN               = 74;
    const RIGHTSHIFT_ASSIGN              = 75;
    const BINARYAND_ASSIGN               = 76;
    const BINARYOR_ASSIGN                = 77;
    const BINARYXOR_ASSIGN               = 78;
    const FRIENDKWD                      = 79;
    const VOLATILEKWD                    = 80;
    const REGISTERKWD                    = 81;
    const EXTERNKWD                      = 82;
    const STATICKWD                      = 83;
    const DELETE                         = 84;
    const NEWKWD                         = 85;
    const BREAKKWD                       = 86;
    const TYPEDEF                        = 87;
    const IFKWD                          = 88;
    const DEFAULTKWD                     = 89;
    const CASEKWD                        = 90;
    const COLON                          = 91;
    const SWITCHKWD                      = 92;
    const ELLIPSIS                       = 93;
    const CATCHKWD                       = 94;
    const TRYKWD                         = 95;
    const GOTOKWD                        = 96;
    const CONTINUEKWD                    = 97;
    const RETURNKWD                      = 98;
    const DOKWD                          = 99;
    const WHILEKWD                       = 100;
    const PREPROCESSOR_INCLUDE           = 101;
    const PREPROCESSOR_DEFINE            = 102;
    const PREPROCESSOR_IF                = 103;
    const PREPROCESSOR_IFDEF             = 104;
    const PREPROCESSOR_ELSE              = 105;
    const PREPROCESSOR_ELIF              = 106;
    const PREPROCESSOR_ENDIF             = 107;
    const OUTER_CONSTRUCTOR_NAME         = 108;
    const OPERATOROVERLOADDECLARATION    = 109;
    const ENUMKWD                        = 110;
    const SLOTSKWD                       = 111;
    const SIGNALSKWD                     = 112;
    const PRIVATEKWD                     = 113;
    const PROTECTEDKWD                   = 114;
    const PUBLICKWD                      = 115;
    const UNIONKWD                       = 116;
    const STRUCTKWD                      = 117;
    const CLASSKWD                       = 118;
    const TEMPLATEKWD                    = 119;
    const TYPENAMEKWD                    = 120;
    const NAMESPACEKWD                   = 121;
    const COMMENT                        = 122;
    const YY_NO_ACTION = 1372;
    const YY_ACCEPT_ACTION = 1371;
    const YY_ERROR_ACTION = 1370;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 15752;
static public $yy_action = array(
 /*     0 */   605,  169,  349,  187,  743,  369,  363,   15,  612,  387,
 /*    10 */   681,  181,  352,   57,  216,  737,  736,   14,   16,  581,
 /*    20 */    77,  173,   78,  724,  728,  162,  691,   96,  355,  238,
 /*    30 */   663,  731,  729,    2,  583,  603,  139,  724,  728,  577,
 /*    40 */   576,  575,  658,  522,  189,  725,  729,  706,  192,  111,
 /*    50 */   414,  615,  621,  302,  381,  371,   94,  625,  107,   93,
 /*    60 */    86,  387,  123,  479,   90,  221,  122,  800,  218,   40,
 /*    70 */   370,  683,  723,   17,  369,  363,  628,  580,  313,  312,
 /*    80 */   348,  172,  745,  744,  742,  354,  629,   27,  530,  164,
 /*    90 */    32,  436,  195,  596,  168,  329,  264,  688,  164,  348,
 /*   100 */   308,  587,  301,  756,  370,  683,   64,  585,  289,    5,
 /*   110 */   253,  103,  524,   62,   46,  582,  109,  384,  271,  767,
 /*   120 */   104,  782,  783,  799,  798,  797,  112,  310,  180,  653,
 /*   130 */   310,  197,  652,  374,   95,   59,  305,   86,  153,  305,
 /*   140 */   688,  196,  760,  266,  131,  304,  303,  306,  309,  207,
 /*   150 */   328,  101,  158,  102,  676,  707,  588,  177,  176,  664,
 /*   160 */    87,   91,  120,   92,   88,  331,  490,  663,  330,  423,
 /*   170 */   403,  406,  138,  599,  109,  384,   83,  692,  693,  697,
 /*   180 */   493,  694,  185,    5,  392,  632,  690,  689,  721,  733,
 /*   190 */   217,  146,  426,  413,  734,  118,  752,  420,  116,  749,
 /*   200 */   167,  617,  616,  620,  152,  623,  132,  133,  660,  379,
 /*   210 */   679,  169,  349,  187,  743,  443,  321,   15,  327,  635,
 /*   220 */   681,  181,  352,  688,  216,  321,  166,  327,  370,  683,
 /*   230 */   757,  173,  323,  724,  728,  162,  691,   96,  355,  627,
 /*   240 */   644,  731,  729,   55,   61,   63,   49,   53,   60,   58,
 /*   250 */    52,   56,   51,   66,  305,   65,  463,  706,  192,  111,
 /*   260 */   343,  615,  422,  408,  421,  380,   94,   72,  107,   93,
 /*   270 */   143,   84,  123,   85,   90,  221,  122,  414,  218,   40,
 /*   280 */    69,   74,   75,   17,  739,  315,  142,  593,  601,   14,
 /*   290 */    16,  172,  745,  744,  742,  354,  629,   27,  530,  650,
 /*   300 */    32,  436,  195,  596,  168,  332,  264,  226,  369,  363,
 /*   310 */    72,  587,  301,    5,  762,  769,  325,  585,  289,   98,
 /*   320 */   253,  103,  524,   62,   46,  370,  683,  369,  271,  767,
 /*   330 */   104,  782,  783,  799,  798,  797,  112,  649,  329,  310,
 /*   340 */   285,  395,  348,  203,  396,  229,  245,  247,  153,   86,
 /*   350 */   416,  196,  760,  321,  131,  327,  278,  269,  100,  207,
 /*   360 */   754,  101,  158,  102,   68,  707,   67,  177,  176,  664,
 /*   370 */    87,   91,  120,   92,   88,  331,  523,  184,  330,  423,
 /*   380 */   403,  406,  463,  273,  760,  414,  277,  692,  693,  697,
 /*   390 */   493,  694,  185,   72,  392,  632,  690,  689,   76,   73,
 /*   400 */   217,  329,  426,  413,  251,  348,  751,  420,  116,  749,
 /*   410 */   167,  617,  616,  620,  152,  623,  132,  133,  660,  379,
 /*   420 */   605,  169,  349,  187,  743,  713,  236,   15,  608,  143,
 /*   430 */   681,  181,  352,  188,  216,  760,  332,  136,  424,  248,
 /*   440 */   137,  173,  424,  724,  728,  162,  691,   96,  355,  424,
 /*   450 */     5,  731,  729,  310,  604,  603,  139,  372, 1098,  577,
 /*   460 */   576,  575,  680,  350,    7,  663,  224,  706,  192,  111,
 /*   470 */   371,  615,  260,  283,  307,  238,   94,  424,  107,   93,
 /*   480 */   715,  310,  123,   57,   90,  221,  122,  275,  218,   40,
 /*   490 */   248,  137,  677,   17,  760,  178,  622,  747,  294,  638,
 /*   500 */   385,  172,  745,  744,  742,  354,  629,   27,  530,  667,
 /*   510 */    32,  436,  195,  596,  168,  241,  264,  179,  714,  483,
 /*   520 */    44,  587,  301,  164,  164,  765,  308,  585,  289,  756,
 /*   530 */   253,  103,  524,   62,   46,  337,  362,  630,  271,  767,
 /*   540 */   104,  782,  783,  799,  798,  797,  112,  780,  735,  420,
 /*   550 */   116,  749,  167,  768,  401,   43,  762,  769,  153,   45,
 /*   560 */   211,  196,  606,  314,  131,  357,   54,  574,  578,  207,
 /*   570 */   381,  101,  158,  102,  348,  707,   86,  177,  176,  664,
 /*   580 */    87,   91,  120,   92,   88,  331,  369,  363,  330,  423,
 /*   590 */   403,  406,  348,  189,  339,  237,  243,  692,  693,  697,
 /*   600 */   493,  694,  185,  381,  392,  632,  690,  689,  765,   86,
 /*   610 */   217,  688,  426,  413,  704,  700,    5,  705,  709, 1098,
 /*   620 */  1092,  617,  616,  620,  152,  623,  132,  133,  660,  379,
 /*   630 */  1371,   19,   12,  598,  169,  349,  187,  743,  424,  424,
 /*   640 */    15,  445,  310,  681,  181,  352,  372,  216,  325,  760,
 /*   650 */   321,  321,  327,  327,  173,   64,  724,  728,  162,  691,
 /*   660 */    96,  355,  328,  753,  731,  729,  219,  761,  592,  297,
 /*   670 */   329,  310,  261,  395,  348,  262,  396,  229,  245,  247,
 /*   680 */   706,  192,  111,  432,  615,  239,  242,  257,  250,   94,
 /*   690 */   206,  107,   93,  560,  719,  123,   86,   90,  221,  122,
 /*   700 */   453,  218,   40,    1,  248,  137,   17,  414,  688,  223,
 /*   710 */    71,  760,   70,  298,  172,  745,  744,  742,  354,  629,
 /*   720 */    27,  530,   81,   32,  436,  195,  596,  168,  688,  264,
 /*   730 */   688,  369,  363,  204,  587,  301,  710,  348,  688,   86,
 /*   740 */   585,  289,  202,  253,  103,  524,   62,   46,   86,  370,
 /*   750 */   683,  271,  767,  104,  782,  783,  799,  798,  797,  112,
 /*   760 */   188,   80,  198,   79,  136,  184,  248,  137,   86,  696,
 /*   770 */   648,  153,  316,  317,  196,  760,  422,  131,  421,  699,
 /*   780 */   407,   72,  207,  201,  101,  158,  102,   64,  707,   86,
 /*   790 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  559,
 /*   800 */   369,  330,  423,  403,  406,  760,  348,  370,  683,  275,
 /*   810 */   692,  693,  697,  493,  694,  185,    5,  392,  632,  690,
 /*   820 */   689,  545,  761,  217,  344,  426,  413,    5,  695,  750,
 /*   830 */   420,  116,  749,  167,  617,  616,  620,  152,  623,  132,
 /*   840 */   133,  660,  379,   10,  348,  598,  169,  349,  187,  743,
 /*   850 */   425,  412,   15,  594,  455,  681,  181,  352,  763,  216,
 /*   860 */   248,  137,  184,  610,   97,    5,  173,  648,  724,  728,
 /*   870 */   162,  691,   96,  355,  611,  429,  731,  729,   72,   66,
 /*   880 */   772,   65,  184,  762,  769,  369,  363,  463,  597,  513,
 /*   890 */   740,  348,  706,  192,  111,  651,  615,  463,   72,  478,
 /*   900 */    72,   94,  554,  107,   93,  246,  711,  123,   72,   90,
 /*   910 */   221,  122,  748,  218,   40, 1098,  369,  363,   17,  329,
 /*   920 */   589,  297,  348,  370,  683,  348,  172,  745,  744,  742,
 /*   930 */   354,  629,   27,  530,  424,   32,  436,  195,  596,  168,
 /*   940 */   340,  264,  372,  422,  236,  421,  587,  301,  764,  741,
 /*   950 */   326,  322,  585,  289,  424,  253,  103,  524,   62,   46,
 /*   960 */   348,  665,  372,  271,  767,  104,  782,  783,  799,  798,
 /*   970 */   797,  112,  348,  399, 1098,  310,  332,  371,  764,  348,
 /*   980 */    45,  275,  372,  153,  305,  108,  196,  343,  477,  131,
 /*   990 */   465,  386,  307,  424,  207,  655,  101,  158,  102,  758,
 /*  1000 */   707,  343,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  1010 */   331,  369,  363,  330,  423,  403,  406,  360,  643,    5,
 /*  1020 */   370,  683,  692,  693,  697,  493,  694,  185,  338,  392,
 /*  1030 */   632,  690,  689,  241,  199,  217,  730,  426,  413,  305,
 /*  1040 */   641,  376,  633,  266,  220,  657,  617,  616,  620,  152,
 /*  1050 */   623,  132,  133,  660,  379,    8,  343,  598,  169,  349,
 /*  1060 */   187,  743,  467,  325,   15,  602,  732,  681,  181,  352,
 /*  1070 */   369,  216,  634,  117,  466,  637,   64,  642,  173,  468,
 /*  1080 */   724,  728,  162,  691,   96,  355,    1,  636,  731,  729,
 /*  1090 */   464,  469,  225,  454,  716,  475,  499,  682,  496,  640,
 /*  1100 */   471,  486,  421,  656,  706,  192,  111,  485,  615,   41,
 /*  1110 */    33,  508,  366,   94,  666,  107,   93,  507,  348,  123,
 /*  1120 */   266,   90,  221,  122,  498,  218,   40,  456,  458,  367,
 /*  1130 */    17,  661,  489,  470,  654,  310,  481,   82,  172,  745,
 /*  1140 */   744,  742,  354,  629,   27,  530,  567,   32,  436,  195,
 /*  1150 */   596,  168,  645,  264,  482,  387,  639,  659,  587,  301,
 /*  1160 */   491,  451,  480,  363,  585,  289,  241,  253,  103,  524,
 /*  1170 */    62,   46,   13,  449,  487,  271,  767,  104,  782,  783,
 /*  1180 */   799,  798,  797,  112,  290,  270, 1093,  296,  345,  383,
 /*  1190 */   333, 1097,  335,  417,  397,  153,  378,    4,  196,  410,
 /*  1200 */   341,  131,  484,  343,  534,   57,  207,  541,  101,  158,
 /*  1210 */   102,  543,  707,  538,  177,  176,  664,   87,   91,  120,
 /*  1220 */    92,   88,  331,  531,  452,  330,  423,  403,  406,  450,
 /*  1230 */   539,  433,  557,  555,  692,  693,  697,  493,  694,  185,
 /*  1240 */    26,  392,  632,  690,  689,   35,  566,  217,  444,  426,
 /*  1250 */   413,  488,  371,  550,  533,  126,  551,  542,  617,  616,
 /*  1260 */   620,  152,  623,  132,  133,  660,  379,   25,  298,  598,
 /*  1270 */   169,  349,  187,  743,  568,  527,   15,  284,  353,  681,
 /*  1280 */   181,  352,  789,  216,  536,  546,  279,   18,  525,  526,
 /*  1290 */   173,    6,  724,  728,  162,  691,   96,  355,  547,  796,
 /*  1300 */   731,  729,  571,  329,  418,  561,  346,  110,  548,  437,
 /*  1310 */   563,  570,  569,  558,  497,  382,  706,  192,  111,  441,
 /*  1320 */   615,  502,  501,  435,  540,   94,  427,  107,   93,  462,
 /*  1330 */   562,  123,  135,   90,  221,  122,  336,  218,   40,  528,
 /*  1340 */   556,  544,   17,  460,  446,  564,  553,   39,  738,  552,
 /*  1350 */   172,  745,  744,  742,  354,  629,   27,  530,  440,   32,
 /*  1360 */   436,  195,  596,  168,  448,  264,  535,  520,  521,  495,
 /*  1370 */   587,  301,  494,  572,  665,  667,  585,  289,  516,  253,
 /*  1380 */   103,  524,   62,   46,  512,  307,  517,  271,  767,  104,
 /*  1390 */   782,  783,  799,  798,  797,  112,   28,  504,  519,  755,
 /*  1400 */   662,  518,  472,   30,   99,  430,   36,  153,   34,  442,
 /*  1410 */   196,  584,  492,  131,  372,  439,  514,  506,  207,  431,
 /*  1420 */   101,  158,  102,  199,  707,  505,  177,  176,  664,   87,
 /*  1430 */    91,  120,   92,   88,  331,  500,  473,  330,  423,  403,
 /*  1440 */   406,  434,  474,  631,  476,  438,  692,  693,  697,  493,
 /*  1450 */   694,  185,  503,  392,  632,  690,  689,   31,   48,  217,
 /*  1460 */   549,  426,  413,  461,  447,  532,  537,  275,  428,   50,
 /*  1470 */   617,  616,  620,  152,  623,  132,  133,  660,  379,    9,
 /*  1480 */   685,  598,  169,  349,  187,  743,  586,  106,   15,  600,
 /*  1490 */   674,  681,  181,  352,  529,  216,  565,   38,  115,   29,
 /*  1500 */   579,  459,  173,  510,  724,  728,  162,  691,   96,  355,
 /*  1510 */   364,  509,  731,  729,  515,  511,  678,  347,   37,  903,
 /*  1520 */   903,  903,  903,  903,  903,  903,  903,  903,  706,  192,
 /*  1530 */   111,  624,  615,  903,  903,  903,  903,   94,  903,  107,
 /*  1540 */    93,  903,  903,  123,  903,   90,  221,  122,  903,  218,
 /*  1550 */    40,  903,  903,  903,   17,  903,  903,  903,  903,  903,
 /*  1560 */   903,  903,  172,  745,  744,  742,  354,  629,   27,  530,
 /*  1570 */   903,   32,  436,  195,  596,  168,  903,  264,  903,  903,
 /*  1580 */   903,  903,  587,  301,  903,  903,  903,  903,  585,  289,
 /*  1590 */   903,  253,  103,  524,   62,   46,  903,  903,  903,  271,
 /*  1600 */   767,  104,  782,  783,  799,  798,  797,  112,  903,  903,
 /*  1610 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  153,
 /*  1620 */   903,  903,  196,  903,  903,  131,  903,  903,  903,  903,
 /*  1630 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /*  1640 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /*  1650 */   423,  403,  406,  903,  903,  903,  903,  903,  692,  693,
 /*  1660 */   697,  493,  694,  185,  903,  392,  632,  690,  689,  903,
 /*  1670 */   903,  217,  903,  426,  413,  903,  903,  903,  903,  903,
 /*  1680 */   903,  903,  617,  616,  620,  152,  623,  132,  133,  660,
 /*  1690 */   379,   24,  903,  598,  169,  349,  187,  743,  903,  903,
 /*  1700 */    15,  903,  903,  681,  181,  352,  903,  216,  903,  903,
 /*  1710 */   903,  903,  903,  903,  173,  903,  724,  728,  162,  691,
 /*  1720 */    96,  355,  903,  903,  731,  729,  903,  903,  903,  903,
 /*  1730 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  1740 */   706,  192,  111,  903,  615,  903,  903,  903,  903,   94,
 /*  1750 */   903,  107,   93,  903,  903,  123,  903,   90,  221,  122,
 /*  1760 */   903,  218,   40,  903,  903,  903,   17,  903,  903,  903,
 /*  1770 */   903,  903,  903,  903,  172,  745,  744,  742,  354,  629,
 /*  1780 */    27,  530,  903,   32,  436,  195,  596,  168,  903,  264,
 /*  1790 */   903,  903,  903,  903,  587,  301,  903,  903,  903,  903,
 /*  1800 */   585,  289,  903,  253,  103,  524,   62,   46,  903,  903,
 /*  1810 */   903,  271,  767,  104,  782,  783,  799,  798,  797,  112,
 /*  1820 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  1830 */   903,  153,  903,  903,  196,  903,  903,  131,  903,  903,
 /*  1840 */   903,  903,  207,  903,  101,  158,  102,  903,  707,  903,
 /*  1850 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /*  1860 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /*  1870 */   692,  693,  697,  493,  694,  185,  903,  392,  632,  690,
 /*  1880 */   689,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /*  1890 */   903,  903,  903,  903,  617,  616,  620,  152,  623,  132,
 /*  1900 */   133,  660,  379,   20,  903,  598,  169,  349,  187,  743,
 /*  1910 */   903,  903,   15,  903,  903,  681,  181,  352,  903,  216,
 /*  1920 */   903,  903,  903,  903,  903,  903,  173,  903,  724,  728,
 /*  1930 */   162,  691,   96,  355,  903,  903,  731,  729,  903,  903,
 /*  1940 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  1950 */   903,  903,  706,  192,  111,  903,  615,  903,  903,  903,
 /*  1960 */   903,   94,  903,  107,   93,  903,  903,  123,  903,   90,
 /*  1970 */   221,  122,  903,  218,   40,  903,  903,  903,   17,  903,
 /*  1980 */   903,  903,  903,  903,  903,  903,  172,  745,  744,  742,
 /*  1990 */   354,  629,   27,  530,  903,   32,  436,  195,  596,  168,
 /*  2000 */   903,  264,  903,  903,  903,  903,  587,  301,  903,  903,
 /*  2010 */   903,  903,  585,  289,  903,  253,  103,  524,   62,   46,
 /*  2020 */   903,  903,  903,  271,  767,  104,  782,  783,  799,  798,
 /*  2030 */   797,  112,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  2040 */   903,  903,  903,  153,  903,  903,  196,  903,  903,  131,
 /*  2050 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /*  2060 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  2070 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /*  2080 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /*  2090 */   632,  690,  689,  903,  903,  217,  903,  426,  413,  903,
 /*  2100 */   903,  903,  903,  903,  903,  903,  617,  616,  620,  152,
 /*  2110 */   623,  132,  133,  660,  379,  679,  169,  349,  187,  743,
 /*  2120 */   903,  903,   15,  609,  903,  681,  181,  352,  903,  216,
 /*  2130 */   903,  903,  903,  903,  903,  903,  173,  903,  724,  728,
 /*  2140 */   162,  691,   96,  355,  903,  903,  731,  729,  903,  903,
 /*  2150 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  2160 */   903,  903,  706,  192,  111,  903,  615,  903,  903,  903,
 /*  2170 */   903,   94,  903,  107,   93,  903,  903,  123,  903,   90,
 /*  2180 */   221,  122,  903,  218,   40,  903,  903,  903,   17,  903,
 /*  2190 */   903,  903,  903,  903,  903,  903,  172,  745,  744,  742,
 /*  2200 */   354,  629,   27,  530,  903,   32,  436,  195,  596,  168,
 /*  2210 */   903,  264,  903,  903,  903,  903,  587,  301,  903,  903,
 /*  2220 */   903,  903,  585,  289,  903,  253,  103,  524,   62,   46,
 /*  2230 */   903,  903,  903,  271,  767,  104,  782,  783,  799,  798,
 /*  2240 */   797,  112,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  2250 */   903,  903,  903,  153,  903,  903,  196,  903,  903,  131,
 /*  2260 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /*  2270 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  2280 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /*  2290 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /*  2300 */   632,  690,  689,  903,  903,  217,  903,  426,  413,  903,
 /*  2310 */   903,  903,  903,  903,  903,  903,  617,  616,  620,  152,
 /*  2320 */   623,  132,  133,  660,  379,   11,  903,  598,  169,  349,
 /*  2330 */   187,  743,  903,  903,   15,  903,  903,  681,  181,  352,
 /*  2340 */   903,  216,  903,  903,  903,  903,  903,  903,  173,  903,
 /*  2350 */   724,  728,  162,  691,   96,  355,  903,  903,  731,  729,
 /*  2360 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  2370 */   903,  903,  903,  903,  706,  192,  111,  903,  615,  903,
 /*  2380 */   903,  903,  903,   94,  903,  107,   93,  903,  903,  123,
 /*  2390 */   903,   90,  221,  122,  903,  218,   40,  903,  903,  903,
 /*  2400 */    17,  903,  903,  903,  903,  903,  903,  903,  172,  745,
 /*  2410 */   744,  742,  354,  629,   27,  530,  903,   32,  436,  195,
 /*  2420 */   596,  168,  903,  264,  903,  903,  903,  903,  587,  301,
 /*  2430 */   903,  903,  903,  903,  585,  289,  903,  253,  103,  524,
 /*  2440 */    62,   46,  903,  903,  903,  271,  767,  104,  782,  783,
 /*  2450 */   799,  798,  797,  112,  903,  903,  903,  903,  903,  903,
 /*  2460 */   903,  903,  903,  903,  903,  153,  903,  903,  196,  903,
 /*  2470 */   903,  131,  903,  903,  903,  903,  207,  903,  101,  158,
 /*  2480 */   102,  903,  707,  903,  177,  176,  664,   87,   91,  120,
 /*  2490 */    92,   88,  331,  903,  903,  330,  423,  403,  406,  903,
 /*  2500 */   903,  903,  903,  903,  692,  693,  697,  493,  694,  185,
 /*  2510 */   903,  392,  632,  690,  689,  903,  903,  217,  903,  426,
 /*  2520 */   413,  903,  903,  903,  903,  903,  903,  903,  617,  616,
 /*  2530 */   620,  152,  623,  132,  133,  660,  379,   23,  903,  598,
 /*  2540 */   169,  349,  187,  743,  903,  903,   15,  903,  903,  681,
 /*  2550 */   181,  352,  903,  216,  903,  903,  903,  903,  903,  903,
 /*  2560 */   173,  903,  724,  728,  162,  691,   96,  355,  903,  903,
 /*  2570 */   731,  729,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  2580 */   903,  903,  903,  903,  903,  903,  706,  192,  111,  903,
 /*  2590 */   615,  903,  903,  903,  903,   94,  903,  107,   93,  903,
 /*  2600 */   903,  123,  903,   90,  221,  122,  903,  218,   40,  903,
 /*  2610 */   903,  903,   17,  903,  903,  903,  903,  903,  903,  903,
 /*  2620 */   172,  745,  744,  742,  354,  629,   27,  530,  903,   32,
 /*  2630 */   436,  195,  596,  168,  903,  264,  903,  903,  903,  903,
 /*  2640 */   587,  301,  903,  903,  903,  903,  585,  289,  903,  253,
 /*  2650 */   103,  524,   62,   46,  903,  903,  903,  271,  767,  104,
 /*  2660 */   782,  783,  799,  798,  797,  112,  903,  903,  903,  903,
 /*  2670 */   903,  903,  903,  903,  903,  903,  903,  153,  903,  903,
 /*  2680 */   196,  903,  903,  131,  903,  903,  903,  903,  207,  903,
 /*  2690 */   101,  158,  102,  903,  707,  903,  177,  176,  664,   87,
 /*  2700 */    91,  120,   92,   88,  331,  903,  903,  330,  423,  403,
 /*  2710 */   406,  903,  903,  903,  903,  903,  692,  693,  697,  493,
 /*  2720 */   694,  185,  903,  392,  632,  690,  689,  903,  903,  217,
 /*  2730 */   903,  426,  413,  903,  903,  903,  903,  903,  903,  903,
 /*  2740 */   617,  616,  620,  152,  623,  132,  133,  660,  379,    3,
 /*  2750 */   903,  598,  169,  349,  187,  743,  903,  903,   15,  903,
 /*  2760 */   903,  681,  181,  352,  903,  216,  903,  903,  903,  903,
 /*  2770 */   903,  903,  173,  903,  724,  728,  162,  691,   96,  355,
 /*  2780 */   903,  903,  731,  729,  903,  903,  903,  903,  903,  903,
 /*  2790 */   903,  903,  903,  903,  903,  903,  903,  903,  706,  192,
 /*  2800 */   111,  903,  615,  903,  903,  903,  903,   94,  903,  107,
 /*  2810 */    93,  903,  903,  123,  903,   90,  221,  122,  903,  218,
 /*  2820 */    40,  903,  903,  903,   17,  903,  903,  903,  903,  903,
 /*  2830 */   903,  903,  172,  745,  744,  742,  354,  629,   27,  530,
 /*  2840 */   903,   32,  436,  195,  596,  168,  903,  264,  903,  903,
 /*  2850 */   903,  903,  587,  301,  903,  903,  903,  903,  585,  289,
 /*  2860 */   903,  253,  103,  524,   62,   46,  903,  903,  903,  271,
 /*  2870 */   767,  104,  782,  783,  799,  798,  797,  112,  903,  903,
 /*  2880 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  153,
 /*  2890 */   903,  903,  196,  903,  903,  131,  903,  903,  903,  903,
 /*  2900 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /*  2910 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /*  2920 */   423,  403,  406,  903,  903,  903,  903,  903,  692,  693,
 /*  2930 */   697,  493,  694,  185,  903,  392,  632,  690,  689,  903,
 /*  2940 */   903,  217,  903,  426,  413,  903,  903,  903,  903,  903,
 /*  2950 */   903,  903,  617,  616,  620,  152,  623,  132,  133,  660,
 /*  2960 */   379,   22,  903,  598,  169,  349,  187,  743,  903,  903,
 /*  2970 */    15,  903,  903,  681,  181,  352,  903,  216,  903,  903,
 /*  2980 */   903,  903,  903,  903,  173,  903,  724,  728,  162,  691,
 /*  2990 */    96,  355,  903,  903,  731,  729,  903,  903,  903,  903,
 /*  3000 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3010 */   706,  192,  111,  903,  615,  903,  903,  903,  903,   94,
 /*  3020 */   903,  107,   93,  903,  903,  123,  903,   90,  221,  122,
 /*  3030 */   903,  218,   40,  903,  903,  903,   17,  903,  903,  903,
 /*  3040 */   903,  903,  903,  903,  172,  745,  744,  742,  354,  629,
 /*  3050 */    27,  530,  903,   32,  436,  195,  596,  168,  903,  264,
 /*  3060 */   903,  903,  903,  903,  587,  301,  903,  903,  903,  903,
 /*  3070 */   585,  289,  903,  253,  103,  524,   62,   46,  903,  903,
 /*  3080 */   903,  271,  767,  104,  782,  783,  799,  798,  797,  112,
 /*  3090 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3100 */   903,  153,  903,  903,  196,  903,  903,  131,  903,  903,
 /*  3110 */   903,  903,  207,  903,  101,  158,  102,  903,  707,  903,
 /*  3120 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /*  3130 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /*  3140 */   692,  693,  697,  493,  694,  185,  903,  392,  632,  690,
 /*  3150 */   689,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /*  3160 */   903,  903,  903,  903,  617,  616,  620,  152,  623,  132,
 /*  3170 */   133,  660,  379,  679,  169,  349,  187,  743,  903,  903,
 /*  3180 */    15,  595,  903,  681,  181,  352,  903,  216,  903,  903,
 /*  3190 */   903,  903,  903,  903,  173,  903,  724,  728,  162,  691,
 /*  3200 */    96,  355,  903,  903,  731,  729,  903,  903,  903,  903,
 /*  3210 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3220 */   706,  192,  111,  903,  615,  903,  903,  903,  903,   94,
 /*  3230 */   903,  107,   93,  903,  903,  123,  903,   90,  221,  122,
 /*  3240 */   903,  218,   40,  903,  903,  903,   17,  903,  903,  903,
 /*  3250 */   903,  903,  903,  903,  172,  745,  744,  742,  354,  629,
 /*  3260 */    27,  530,  903,   32,  436,  195,  596,  168,  903,  264,
 /*  3270 */   903,  903,  903,  903,  587,  301,  903,  903,  903,  903,
 /*  3280 */   585,  289,  903,  253,  103,  524,   62,   46,  903,  903,
 /*  3290 */   903,  271,  767,  104,  782,  783,  799,  798,  797,  112,
 /*  3300 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3310 */   903,  153,  903,  903,  196,  903,  903,  131,  903,  903,
 /*  3320 */   903,  903,  207,  903,  101,  158,  102,  903,  707,  903,
 /*  3330 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /*  3340 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /*  3350 */   692,  693,  697,  493,  694,  185,  903,  392,  632,  690,
 /*  3360 */   689,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /*  3370 */   903,  903,  903,  903,  617,  616,  620,  152,  623,  132,
 /*  3380 */   133,  660,  379,   21,  903,  598,  169,  349,  187,  743,
 /*  3390 */   903,  903,   15,  903,  903,  681,  181,  352,  903,  216,
 /*  3400 */   903,  903,  903,  903,  903,  903,  173,  903,  724,  728,
 /*  3410 */   162,  691,   96,  355,  903,  903,  731,  729,  903,  903,
 /*  3420 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3430 */   903,  903,  706,  192,  111,  903,  615,  903,  903,  903,
 /*  3440 */   903,   94,  903,  107,   93,  903,  903,  123,  903,   90,
 /*  3450 */   221,  122,  903,  218,   40,  903,  903,  903,   17,  903,
 /*  3460 */   903,  903,  903,  903,  903,  903,  172,  745,  744,  742,
 /*  3470 */   354,  629,   27,  530,  903,   32,  436,  195,  596,  168,
 /*  3480 */   903,  264,  903,  903,  903,  903,  587,  301,  903,  903,
 /*  3490 */   903,  903,  585,  289,  903,  253,  103,  524,   62,   46,
 /*  3500 */   903,  903,  903,  271,  767,  104,  782,  783,  799,  798,
 /*  3510 */   797,  112,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3520 */   903,  903,  903,  153,  903,  903,  196,  903,  903,  131,
 /*  3530 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /*  3540 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  3550 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /*  3560 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /*  3570 */   632,  690,  689,  903,  903,  217,  903,  426,  413,  903,
 /*  3580 */   903,  903,  903,  903,  903,  903,  617,  616,  620,  152,
 /*  3590 */   623,  132,  133,  660,  379,  679,  169,  349,  187,  743,
 /*  3600 */   903,  903,   15,  573,  903,  681,  181,  352,  903,  216,
 /*  3610 */   903,  903,  903,  903,  903,  903,  173,  903,  724,  728,
 /*  3620 */   162,  691,   96,  355,  903,  903,  731,  729,  903,  903,
 /*  3630 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3640 */   903,  903,  706,  192,  111,  903,  615,  903,  903,  903,
 /*  3650 */   903,   94,  903,  107,   93,  903,  903,  123,  903,   90,
 /*  3660 */   221,  122,  903,  218,   40,  903,  903,  903,   17,  903,
 /*  3670 */   903,  903,  903,  903,  903,  903,  172,  745,  744,  742,
 /*  3680 */   354,  629,   27,  530,  903,   32,  436,  195,  596,  168,
 /*  3690 */   903,  264,  903,  903,  903,  903,  587,  301,  903,  903,
 /*  3700 */   903,  903,  585,  289,  903,  253,  103,  524,   62,   46,
 /*  3710 */   903,  903,  903,  271,  767,  104,  782,  783,  799,  798,
 /*  3720 */   797,  112,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3730 */   903,  903,  903,  153,  903,  903,  196,  903,  903,  131,
 /*  3740 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /*  3750 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  3760 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /*  3770 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /*  3780 */   632,  690,  689,  903,  903,  217,  903,  426,  413,  903,
 /*  3790 */   903,  903,  903,  903,  903,  903,  617,  616,  620,  152,
 /*  3800 */   623,  132,  133,  660,  379,  679,  169,  349,  187,  743,
 /*  3810 */   903,  903,   15,  746,  903,  681,  181,  352,  903,  216,
 /*  3820 */   903,  903,  903,  903,  903,  903,  173,  903,  724,  728,
 /*  3830 */   162,  691,   96,  355,  903,  903,  731,  729,  903,  903,
 /*  3840 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  3850 */   903,  903,  706,  192,  111,  903,  615,  903,  903,  903,
 /*  3860 */   903,   94,  903,  107,   93,  903,  903,  123,  903,   90,
 /*  3870 */   221,  122,  903,  218,   40,  903,  903,  903,   17,  903,
 /*  3880 */   903,  903,  903,  903,  903,  903,  172,  745,  744,  742,
 /*  3890 */   354,  629,   27,  530,  903,   32,  436,  195,  596,  168,
 /*  3900 */   903,  264,  903,  903,  903,  903,  587,  301,  903,  903,
 /*  3910 */   903,  903,  585,  289,  903,  253,  103,  524,   62,   46,
 /*  3920 */   903,  903,  903,  271,  767,  104,  782,  783,  799,  798,
 /*  3930 */   797,  112,  903,  903,  389,  390,  422,  408,  421,  380,
 /*  3940 */   407,  402,  400,  153,  903,  903,  196,  903,  903,  131,
 /*  3950 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /*  3960 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  3970 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /*  3980 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /*  3990 */   632,  690,  689,  903,  903,  217,  903,  426,  413,  903,
 /*  4000 */   903,  903,  903,  903,  903,  903,  617,  616,  620,  152,
 /*  4010 */   623,  132,  133,  660,  379,  679,  169,  349,  187,  743,
 /*  4020 */   903,  903,   15,  267,  903,  681,  181,  352,  903,  216,
 /*  4030 */   237,  243,  903,  295,  903,  903,  173,  903,  724,  728,
 /*  4040 */   162,  691,   96,  355,  903,  325,  731,  729,  903,  903,
 /*  4050 */   903,  903,  903,  389,  390,  422,  408,  421,  380,  407,
 /*  4060 */   402,  400,  706,  192,  111,  369,  615,  329,  903,  903,
 /*  4070 */   903,   94,  903,  107,   93,  903,  903,  123,  903,   90,
 /*  4080 */   221,  122,  903,  218,   40,  903,  903,  903,   17,  903,
 /*  4090 */   903,  903,  903,  903,  903,  903,  172,  745,  744,  742,
 /*  4100 */   354,  629,   27,  530,  903,   32,  436,  195,  596,  168,
 /*  4110 */   903,  264,  903,  903,  903,  903,  587,  301,  903,  903,
 /*  4120 */   903,  903,  585,  289,  903,  253,  103,  524,   62,   46,
 /*  4130 */   903,  903,  903,  271,  767,  104,  782,  783,  799,  798,
 /*  4140 */   797,  112,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  4150 */   903,  903,  903,  153,  903,  903,  196,  903,  903,  131,
 /*  4160 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /*  4170 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  4180 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /*  4190 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /*  4200 */   632,  690,  689,  903,  903,  217,  903,  426,  413,  903,
 /*  4210 */   903,  903,  903,  903,  903,  903,  617,  616,  620,  152,
 /*  4220 */   623,  132,  133,  660,  379,  169,  349,  187,  351,  903,
 /*  4230 */   261,   15,  903,  262,  681,  181,  352,  903,  216,  903,
 /*  4240 */   903,  903,  903,  903,  903,  173,  903,  724,  728,  903,
 /*  4250 */   691,  140,  355,  903,  903,  731,  729,  903,  903,  903,
 /*  4260 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  4270 */   903,  706,  903,  114,  266,  615,  903,  903,  903,  903,
 /*  4280 */    94,  903,  107,   93,  903,  903,  134,  903,   89,  903,
 /*  4290 */   145,  903,  903,   40,  288,  234,  254,  258,  240,  256,
 /*  4300 */   227,  299,  293,  268,  903,  903,  903,  903,  742,  354,
 /*  4310 */   629,   27,  530,  903,   32,  436,  195,  596,  168,  903,
 /*  4320 */   264,  903,  903,  903,  903,  587,  301,  903,  903,  903,
 /*  4330 */   903,  585,  289,  903,  253,  103,  524,   62,   46,  903,
 /*  4340 */   903,  903,  271,  767,  104,  782,  783,  799,  798,  797,
 /*  4350 */   112,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  4360 */   903,  903,  153,  903,  903,  196,  903,  903,  131,  903,
 /*  4370 */   903,  903,  903,  207,  903,  101,  158,  102,  903,  707,
 /*  4380 */   903,  177,  176,  664,   87,   91,  120,   92,   88,  331,
 /*  4390 */   903,  903,  330,  423,  403,  406,  903,  903,  903,  903,
 /*  4400 */   903,  692,  693,  697,  493,  694,  185,  903,  392,  632,
 /*  4410 */   690,  689,  903,  903,  217,  903,  426,  413,  903,  903,
 /*  4420 */   903,  903,  903,  903,  903,  617,  616,  620,  152,  623,
 /*  4430 */   132,  133,  660,  379,  903,  903,  903,  169,  349,  187,
 /*  4440 */   614,  903,  903,   15,  903,  903,  681,  181,  352,  903,
 /*  4450 */   216,  903,  903,  903,  903,  903,  903,  173,  903,  724,
 /*  4460 */   728,  903,  691,  140,  355,  903,  903,  731,  729,  903,
 /*  4470 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  4480 */   903,  903,  903,  706,  903,  114,  903,  615,  903,  903,
 /*  4490 */   903,  903,   94,  903,  107,   93,  903,  903,  134,  903,
 /*  4500 */    89,  903,  145,  903,  903,   40,  903,  903,  903,  903,
 /*  4510 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  4520 */   742,  354,  629,   27,  530,  903,   32,  436,  195,  596,
 /*  4530 */   168,  903,  264,  903,  903,  903,  903,  587,  301,  903,
 /*  4540 */   903,  903,  903,  585,  289,  903,  253,  103,  524,   62,
 /*  4550 */    46,  903,  903,  903,  271,  767,  104,  782,  783,  799,
 /*  4560 */   798,  797,  112,  903,  903,  903,  903,  903,  903,  903,
 /*  4570 */   903,  903,  903,  903,  153,  903,  903,  196,  903,  903,
 /*  4580 */   131,  903,  903,  903,  903,  207,  903,  101,  158,  102,
 /*  4590 */   903,  707,  903,  177,  176,  664,   87,   91,  120,   92,
 /*  4600 */    88,  331,  903,  903,  330,  423,  403,  406,  903,  903,
 /*  4610 */   903,  903,  903,  692,  693,  697,  493,  694,  185,  903,
 /*  4620 */   392,  632,  690,  689,  903,  903,  217,  903,  426,  413,
 /*  4630 */   903,  903,  903,  903,  903,  903,  903,  617,  616,  620,
 /*  4640 */   152,  623,  132,  133,  660,  379,  903,  903,  903,  169,
 /*  4650 */   349,  187,  805,  903,  903,   15,  903,  903,  681,  181,
 /*  4660 */   352,  903,  216,  903,  903,  903,  903,  903,  903,  173,
 /*  4670 */   903,  724,  728,  903,  691,  140,  355,  903,  903,  731,
 /*  4680 */   729,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  4690 */   903,  903,  903,  903,  903,  706,  903,  114,  903,  615,
 /*  4700 */   903,  903,  903,  903,   94,  903,  107,   93,  903,  903,
 /*  4710 */   134,  903,   89,  903,  145,  903,  903,   40,  903,  903,
 /*  4720 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  4730 */   903,  903,  742,  354,  629,   27,  530,  903,   32,  436,
 /*  4740 */   195,  596,  168,  903,  264,  903,  903,  903,  903,  587,
 /*  4750 */   301,  903,  903,  903,  903,  585,  289,  903,  253,  103,
 /*  4760 */   524,   62,   46,  903,  903,  903,  271,  767,  104,  782,
 /*  4770 */   783,  799,  798,  797,  112,  903,  903,  903,  903,  903,
 /*  4780 */   903,  903,  903,  903,  903,  903,  153,  903,  903,  196,
 /*  4790 */   903,  903,  131,  903,  903,  903,  903,  207,  903,  101,
 /*  4800 */   158,  102,  903,  707,  903,  177,  176,  664,   87,   91,
 /*  4810 */   120,   92,   88,  331,  903,  903,  330,  423,  403,  406,
 /*  4820 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /*  4830 */   185,  903,  392,  632,  690,  689,  903,  903,  217,  903,
 /*  4840 */   426,  413,  903,  903,  903,  903,  903,  903,  903,  617,
 /*  4850 */   616,  620,  152,  623,  132,  133,  660,  379,  903,  903,
 /*  4860 */   903,  169,  349,  187,  613,  903,  903,   15,  903,  903,
 /*  4870 */   681,  181,  352,  903,  216,  903,  903,  903,  903,  903,
 /*  4880 */   903,  173,  903,  724,  728,  903,  691,  140,  355,  903,
 /*  4890 */   903,  731,  729,  903,  903,  903,  903,  903,  903,  903,
 /*  4900 */   903,  903,  903,  903,  903,  903,  903,  706,  903,  114,
 /*  4910 */   903,  615,  903,  903,  903,  903,   94,  903,  107,   93,
 /*  4920 */   903,  903,  134,  903,   89,  903,  145,  903,  903,   40,
 /*  4930 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  4940 */   903,  903,  903,  903,  742,  354,  629,   27,  530,  903,
 /*  4950 */    32,  436,  195,  596,  168,  903,  264,  903,  903,  903,
 /*  4960 */   903,  587,  301,  903,  903,  903,  903,  585,  289,  903,
 /*  4970 */   253,  103,  524,   62,   46,  903,  903,  903,  271,  767,
 /*  4980 */   104,  782,  783,  799,  798,  797,  112,  903,  903,  903,
 /*  4990 */   903,  903,  903,  903,  903,  903,  903,  903,  153,  903,
 /*  5000 */   903,  196,  903,  903,  131,  903,  903,  903,  903,  207,
 /*  5010 */   903,  101,  158,  102,  903,  707,  903,  177,  176,  664,
 /*  5020 */    87,   91,  120,   92,   88,  331,  903,  903,  330,  423,
 /*  5030 */   403,  406,  903,  903,  903,  903,  903,  692,  693,  697,
 /*  5040 */   493,  694,  185,  903,  392,  632,  690,  689,  903,  903,
 /*  5050 */   217,  903,  426,  413,  903,  903,  903,  903,  903,  903,
 /*  5060 */   903,  617,  616,  620,  152,  623,  132,  133,  660,  379,
 /*  5070 */   903,  903,  903,  169,  349,  187,  607,  903,  903,   15,
 /*  5080 */   903,  903,  681,  181,  352,  903,  216,  903,  903,  903,
 /*  5090 */   903,  903,  903,  173,  903,  724,  728,  903,  691,  140,
 /*  5100 */   355,  903,  903,  731,  729,  191,  903,  727,  365,  903,
 /*  5110 */   903,  903,  793,  792,  791,  790,  759,  903,  903,  706,
 /*  5120 */   726,  114,  903,  615,  903,  903,  903,  903,   94,  903,
 /*  5130 */   107,   93,  903,  903,  134,  903,   89,  903,  145,  903,
 /*  5140 */   903,   40,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  5150 */   903,  903,  903,  903,  903,  903,  742,  354,  629,   27,
 /*  5160 */   530,  903,   32,  436,  195,  596,  168,  903,  264,  903,
 /*  5170 */   903,  903,  903,  587,  301,  903,  903,  903,  903,  585,
 /*  5180 */   289,  903,  253,  103,  524,   62,   46,  903,  903,  903,
 /*  5190 */   271,  767,  104,  782,  783,  799,  798,  797,  112,  903,
 /*  5200 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  5210 */   153,  903,  903,  196,  903,  903,  131,  903,  903,  903,
 /*  5220 */   903,  207,  903,  101,  158,  102,  903,  707,  903,  177,
 /*  5230 */   176,  664,   87,   91,  120,   92,   88,  331,  903,  903,
 /*  5240 */   330,  423,  403,  406,  903,  903,  903,  903,  903,  692,
 /*  5250 */   693,  697,  493,  694,  185,  903,  392,  632,  690,  689,
 /*  5260 */   903,  903,  217,  903,  426,  413,  903,  334,  903,  903,
 /*  5270 */   903,  903,  903,  617,  616,  620,  152,  623,  132,  133,
 /*  5280 */   660,  379,  903,  903,  903,  173,  903,  903,  903,  903,
 /*  5290 */   691,  617,  616,  620,  152,  623,  132,  133,  660,  379,
 /*  5300 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  5310 */   903,  706,  903,  114,  903,  615,  724,  728,  903,  691,
 /*  5320 */    94,  903,  107,   93,  725,  729,  134,  325,   89,  903,
 /*  5330 */   145,  903,  903,   40,  903,  389,  390,  422,  408,  421,
 /*  5340 */   380,  407,  402,  400,  113,  903,  903,  903,  363,  329,
 /*  5350 */   629,  107,  590,  903,  903,  125,  903,  325,  222,  127,
 /*  5360 */   903,  215,  903,  272,  591,  389,  390,  422,  408,  421,
 /*  5370 */   380,  407,  402,  400,  903,  903,  903,   62,   46,  329,
 /*  5380 */   903,  903,  271,  767,  104,  782,  783,  799,  798,  797,
 /*  5390 */   112,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  5400 */   903,  903,  153,  903,  903,  196,  903,  903,  131,  903,
 /*  5410 */   903,  903,  903,  207,  903,  101,  158,  102,  903,  707,
 /*  5420 */   903,  177,  176,  664,   87,   91,  120,   92,   88,  331,
 /*  5430 */   903,  903,  330,  423,  403,  406,  903,  903,  903,  903,
 /*  5440 */   903,  692,  693,  697,  493,  694,  185,  903,  392,  632,
 /*  5450 */   690,  689,  903,  903,  217,  903,  426,  413,  903,  334,
 /*  5460 */   903,  903,  903,  903,  903,  617,  616,  620,  152,  623,
 /*  5470 */   132,  133,  660,  379,  903,  903,  903,  173,  632,  690,
 /*  5480 */   689,  903,  691,  217,  903,  426,  413,  903,  903,  903,
 /*  5490 */   903,  903,  903,  903,  617,  616,  620,  152,  623,  132,
 /*  5500 */   133,  660,  379,  706,  414,  114,  903,  615,  325,  903,
 /*  5510 */   903,  903,   94,  903,  107,   93,  903,  903,  134,  903,
 /*  5520 */    89,  903,  145,  903,  903,   40,  903,  903,  369,  903,
 /*  5530 */   329,  310,  387,  395,  348,  903,  396,  229,  245,  247,
 /*  5540 */   903,  903,  629,  903,  361,  239,  242,  257,  250,  903,
 /*  5550 */   903,  306,  309,  316,  317,  236,  230,  903,  903,  903,
 /*  5560 */   903,  903,  691,  903,  903,  903,  903,  903,  903,   62,
 /*  5570 */    46,  903,  903,  903,  271,  767,  104,  782,  783,  799,
 /*  5580 */   798,  797,  112,  903,  903,  903,  903,  903,  903,  903,
 /*  5590 */   903,  903,  903,  903,  153,  135,  903,  196,  163,  903,
 /*  5600 */   131,  903,  170,  903,  903,  207,  903,  101,  158,  102,
 /*  5610 */   903,  707,  903,  177,  176,  664,   87,   91,  120,   92,
 /*  5620 */    88,  331,  903,  903,  330,  423,  403,  406,  903,  903,
 /*  5630 */   903,  903,  903,  692,  693,  697,  493,  694,  185,  903,
 /*  5640 */   392,  632,  690,  689,  903,  903,  217,  903,  426,  413,
 /*  5650 */   903,  334,  903,  903,  903,  903,  903,  617,  616,  620,
 /*  5660 */   152,  623,  132,  133,  660,  379,  903,  903,  414,  173,
 /*  5670 */   903,  903,  325,  903,  691,  903,  903,  903,  903,  903,
 /*  5680 */   389,  390,  422,  408,  421,  380,  407,  402,  400,  903,
 /*  5690 */   903,  903,  369,  363,  329,  706,  387,  114,  348,  615,
 /*  5700 */   903,  903,  903,  903,   94,  903,  107,   93,  903,  903,
 /*  5710 */   134,  903,   89,  903,  145,  903,  903,   40,  903,  903,
 /*  5720 */   903,  698,  690,  689,  903,  903,  217,  903,  426,  413,
 /*  5730 */   903,  903,  903,  903,  629,  903,  244,  617,  616,  620,
 /*  5740 */   152,  623,  132,  133,  660,  379,  903,  903,  903,  903,
 /*  5750 */   903,  903,  903,  903,  691,  903,  903,  903,  903,  903,
 /*  5760 */   903,   62,   46,  903,  903,  903,  271,  767,  104,  782,
 /*  5770 */   783,  799,  798,  797,  112,  903,  903,  903,  903,  903,
 /*  5780 */   903,  903,  903,  903,  903,  903,  153,  903,  903,  196,
 /*  5790 */   163,  903,  131,  903,  170,  903,  903,  207,  903,  101,
 /*  5800 */   158,  102,  903,  707,  903,  177,  176,  664,   87,   91,
 /*  5810 */   120,   92,   88,  331,  903,  903,  330,  423,  403,  406,
 /*  5820 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /*  5830 */   185,  903,  392,  632,  690,  689,  903,  903,  217,  903,
 /*  5840 */   426,  413,  903,  334,  903,  903,  903,  903,  903,  617,
 /*  5850 */   616,  620,  152,  623,  132,  133,  660,  379,  903,  903,
 /*  5860 */   414,  173,  903,  903,  325,  903,  691,  903,  903,  903,
 /*  5870 */   903,  903,  389,  390,  422,  408,  421,  380,  407,  402,
 /*  5880 */   400,  903,  903,  903,  369,  363,  329,  706,  903,  114,
 /*  5890 */   348,  615,  903,  903,  903,  903,   94,  903,  107,   93,
 /*  5900 */   903,  903,  134,  903,   89,  903,  145,  903,  903,   40,
 /*  5910 */   903,  903,  903,  698,  690,  689,  903,  903,  217,  903,
 /*  5920 */   426,  413,  903,  903,  903,  903,  629,  903,  311,  617,
 /*  5930 */   616,  620,  152,  623,  132,  133,  660,  379,  903,  684,
 /*  5940 */   365,  903,  903,  903,  793,  792,  791,  790,  759,  903,
 /*  5950 */   903,  903,  903,   62,   46,  903,  903,  903,  271,  767,
 /*  5960 */   104,  782,  783,  799,  798,  797,  112,  389,  390,  422,
 /*  5970 */   408,  421,  380,  407,  402,  400,  332,  903,  153,  903,
 /*  5980 */   903,  196,  903,  903,  131,  903,  903,  903,  903,  207,
 /*  5990 */   903,  101,  158,  102,  903,  707,  903,  177,  176,  664,
 /*  6000 */    87,   91,  120,   92,   88,  331,  903,  903,  330,  423,
 /*  6010 */   403,  406,  903,  903,  903,  903,  903,  692,  693,  697,
 /*  6020 */   493,  694,  185,  903,  392,  632,  690,  689,  903,  903,
 /*  6030 */   217,  903,  426,  413,  903,  334,  903,  903,  903,  903,
 /*  6040 */   903,  617,  616,  620,  152,  623,  132,  133,  660,  379,
 /*  6050 */   903,  903,  903,  173,  903,  903,  267,  760,  691,  903,
 /*  6060 */   903,  903,  903,  237,  243,  903,  295,  903,  903,  903,
 /*  6070 */   903,  903,  903,  903,  903,  903,  903,  334,  903,  706,
 /*  6080 */   903,  114,  903,  615,  903,  903,  903,  903,   94,  903,
 /*  6090 */   107,   93,  903,  903,  134,  903,   89,  903,  145,  903,
 /*  6100 */   903,   40,  903,  903,  712,  903,  128,  903,  903,  734,
 /*  6110 */   118,  752,  420,  116,  749,  167,  903,  903,  629,  903,
 /*  6120 */   232,  722,  903,  617,  616,  620,  152,  623,  132,  133,
 /*  6130 */   660,  379,  903,  903,  903,  903,  141,  903,  903,  903,
 /*  6140 */   144,  903,  903,   47,  903,   62,   46,  903,  903,  903,
 /*  6150 */   271,  767,  104,  782,  783,  799,  798,  797,  112,  903,
 /*  6160 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6170 */   153,  294,  903,  196,  903,  903,  131,  903,  903,  903,
 /*  6180 */   903,  207,  903,  101,  158,  102,  903,  707,  903,  177,
 /*  6190 */   176,  664,   87,   91,  120,   92,   88,  331,  903,  903,
 /*  6200 */   330,  423,  403,  406,  903,  903,  903,  903,  903,  692,
 /*  6210 */   693,  697,  493,  694,  185,  903,  392,  632,  690,  689,
 /*  6220 */   903,  903,  217,  903,  426,  413,  768,  334,  903,  762,
 /*  6230 */   769,  903,  903,  617,  616,  620,  152,  623,  132,  133,
 /*  6240 */   660,  379,  903,  903,  903,  173,  903,  903,  903,  903,
 /*  6250 */   691,  692,  693,  697,  493,  694,  185,  903,  392,  903,
 /*  6260 */   903,  903,  903,  903,  217,  903,  426,  413,  903,  903,
 /*  6270 */   903,  706,  903,  114,  903,  615,  903,  903,  903,  903,
 /*  6280 */    94,  903,  107,   93,  903,  903,  134,  903,   89,  903,
 /*  6290 */   145,  903,  903,   40,  903,  903,  903,  903,  903,  903,
 /*  6300 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6310 */   629,  903,  255,  903,  903,  903,  903,  903,  903,  903,
 /*  6320 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6330 */   903,  903,  903,  903,  903,  903,  903,   62,   46,  903,
 /*  6340 */   903,  903,  271,  767,  104,  782,  783,  799,  798,  797,
 /*  6350 */   112,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6360 */   903,  903,  153,  903,  903,  196,  903,  903,  131,  903,
 /*  6370 */   903,  903,  903,  207,  903,  101,  158,  102,  903,  707,
 /*  6380 */   903,  177,  176,  664,   87,   91,  120,   92,   88,  331,
 /*  6390 */   903,  903,  330,  423,  403,  406,  903,  903,  903,  903,
 /*  6400 */   903,  692,  693,  697,  493,  694,  185,  903,  392,  632,
 /*  6410 */   690,  689,  903,  903,  217,  903,  426,  413,  903,  334,
 /*  6420 */   903,  903,  903,  903,  903,  617,  616,  620,  152,  623,
 /*  6430 */   132,  133,  660,  379,  903,  903,  903,  173,  903,  903,
 /*  6440 */   325,  903,  691,  903,  903,  903,  903,  903,  389,  390,
 /*  6450 */   422,  408,  421,  380,  407,  402,  400,  903,  903,  903,
 /*  6460 */   903,  363,  329,  706,  903,  114,  903,  615,  903,  903,
 /*  6470 */   903,  903,   94,  903,  107,   93,  903,  903,  134,  903,
 /*  6480 */    89,  903,  145,  903,  903,   40,  903,  903,  903,  903,
 /*  6490 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6500 */   903,  903,  629,  903,  457,  903,  903,  903,  903,  903,
 /*  6510 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6520 */   903,  903,  903,  903,  903,  903,  903,  903,  903,   62,
 /*  6530 */    46,  903,  903,  903,  271,  767,  104,  782,  783,  799,
 /*  6540 */   798,  797,  112,  339,  237,  243,  903,  903,  903,  903,
 /*  6550 */   903,  903,  903,  903,  153,  903,  903,  196,  903,  903,
 /*  6560 */   131,  903,  903,  903,  903,  207,  903,  101,  158,  102,
 /*  6570 */   903,  707,  903,  177,  176,  664,   87,   91,  120,   92,
 /*  6580 */    88,  331,  903,  903,  330,  423,  403,  406,  903,  903,
 /*  6590 */   903,  903,  903,  692,  693,  697,  493,  694,  185,  903,
 /*  6600 */   392,  632,  690,  689,  903,  903,  217,  903,  426,  413,
 /*  6610 */   903,  334,  903,  903,  903,  903,  903,  617,  616,  620,
 /*  6620 */   152,  623,  132,  133,  660,  379,  903,  903,  903,  173,
 /*  6630 */   903,  903,  903,  903,  691,  903,  903,  903,  903,  903,
 /*  6640 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6650 */   903,  903,  903,  903,  903,  706,  903,  114,  903,  615,
 /*  6660 */   903,  903,  903,  903,   94,  903,  107,   93,  903,  903,
 /*  6670 */   134,  903,   89,  903,  145,  903,  903,   40,  903,  903,
 /*  6680 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6690 */   903,  903,  903,  903,  629,  903,  286,  903,  903,  903,
 /*  6700 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6710 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6720 */   903,   62,   46,  903,  903,  903,  271,  767,  104,  782,
 /*  6730 */   783,  799,  798,  797,  112,  903,  903,  903,  903,  903,
 /*  6740 */   903,  903,  903,  903,  903,  903,  153,  903,  903,  196,
 /*  6750 */   903,  903,  131,  903,  903,  903,  903,  207,  903,  101,
 /*  6760 */   158,  102,  903,  707,  903,  177,  176,  664,   87,   91,
 /*  6770 */   120,   92,   88,  331,  903,  903,  330,  423,  403,  406,
 /*  6780 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /*  6790 */   185,  903,  392,  632,  690,  689,  903,  903,  217,  903,
 /*  6800 */   426,  413,  903,  334,  903,  903,  903,  903,  903,  617,
 /*  6810 */   616,  620,  152,  623,  132,  133,  660,  379,  903,  903,
 /*  6820 */   903,  173,  903,  903,  903,  903,  691,  903,  903,  903,
 /*  6830 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6840 */   903,  903,  903,  903,  903,  903,  903,  706,  903,  114,
 /*  6850 */   903,  615,  903,  903,  903,  903,   94,  903,  107,   93,
 /*  6860 */   903,  903,  134,  903,   89,  903,  145,  903,  903,   40,
 /*  6870 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6880 */   903,  903,  903,  903,  903,  903,  629,  903,  318,  903,
 /*  6890 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6900 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  6910 */   903,  903,  903,   62,   46,  903,  903,  903,  271,  767,
 /*  6920 */   104,  782,  783,  799,  798,  797,  112,  903,  903,  903,
 /*  6930 */   903,  903,  903,  903,  903,  903,  903,  903,  153,  903,
 /*  6940 */   903,  196,  903,  903,  131,  903,  903,  903,  903,  207,
 /*  6950 */   903,  101,  158,  102,  903,  707,  903,  177,  176,  664,
 /*  6960 */    87,   91,  120,   92,   88,  331,  903,  903,  330,  423,
 /*  6970 */   403,  406,  903,  903,  903,  903,  903,  692,  693,  697,
 /*  6980 */   493,  694,  185,  903,  392,  632,  690,  689,  903,  903,
 /*  6990 */   217,  903,  426,  413,  903,  903,  903,  903,  903,  903,
 /*  7000 */   903,  617,  616,  620,  152,  623,  132,  133,  660,  379,
 /*  7010 */   903,  414,  903,  903,  903,  325,  903,  903,  903,  903,
 /*  7020 */   903,  259,  356,  389,  390,  422,  408,  421,  380,  407,
 /*  7030 */   402,  400,  903,  903,  903,  369,  363,  329,  310,  903,
 /*  7040 */   395,  348,  903,  396,  229,  245,  247,  903,  903,  343,
 /*  7050 */   275,  903,  239,  242,  257,  250,  903,  903,  306,  309,
 /*  7060 */   316,  317,  236,  230,  903,  903,  903,  903,  903,  903,
 /*  7070 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7080 */   903,  287,  282,  263,  249,  228,  300,  274,  265,  281,
 /*  7090 */   292,  903,  903,  903,  252,  903,  903,  233,  231,  394,
 /*  7100 */   393,  398,  364,  405,  404,  377,  373,  903,  903,  903,
 /*  7110 */   903,  903,  267,  903,  903,  359,  358,  368,  339,  237,
 /*  7120 */   243,  375,  414,  388,  903,  903,  325,  903,  903,  903,
 /*  7130 */   903,  903,  259,  356,  389,  390,  422,  408,  421,  380,
 /*  7140 */   407,  402,  400,  903,  903,  903,  369,  363,  329,  310,
 /*  7150 */   903,  395,  348,  903,  396,  229,  245,  247,  903,  903,
 /*  7160 */   343,  903,  903,  239,  242,  257,  250,  903,  903,  306,
 /*  7170 */   309,  316,  317,  236,  230,  903,  903,  903,  903,  903,
 /*  7180 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7190 */   903,  903,  287,  282,  263,  249,  228,  300,  274,  265,
 /*  7200 */   281,  292,  903,  903,  903,  252,  903,  903,  233,  231,
 /*  7210 */   394,  393,  398,  364,  405,  404,  377,  373,  326,  322,
 /*  7220 */   336,  334,  903,  267,  903,  903,  903,  903,  903,  339,
 /*  7230 */   237,  243,  375,  903,  388,  903,  903,  903,  150,  173,
 /*  7240 */   903,  903,  903,  903,  691,  903,  903,  903,  903,  903,
 /*  7250 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7260 */   903,  903,  903,  903,  903,  706,  903,  903,  903,  415,
 /*  7270 */   903,  903,  903,  903,   94,  903,  107,   93,  903,  414,
 /*  7280 */   134,  903,   89,  325,  145,  903,  903,   40,  903,  903,
 /*  7290 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7300 */   903,  903,  903,  369,  629,  329,  310,  903,  395,  348,
 /*  7310 */   903,  396,  229,  245,  247,  903,  903,  343,  275,  903,
 /*  7320 */   239,  242,  257,  250,  903,  903,  306,  309,  316,  317,
 /*  7330 */   236,  230,  903,  903,  903,  903,  214,  903,  903,  903,
 /*  7340 */   903,  903,  903,  903,  112,  903,  903,  903,  903,  903,
 /*  7350 */   903,  903,  903,  903,  903,  903,  153,  903,  903,  196,
 /*  7360 */   903,  903,  131,  903,  903,  903,  903,  207,  903,  101,
 /*  7370 */   158,  102,  903,  707,  903,  177,  176,  664,   87,   91,
 /*  7380 */   120,   92,   88,  331,  903,  903,  330,  423,  403,  406,
 /*  7390 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /*  7400 */   185,  903,  392,  632,  690,  689,  903,  903,  217,  903,
 /*  7410 */   426,  413,  409,  626,  619,  618,  903,  903,  903,  617,
 /*  7420 */   616,  620,  152,  623,  132,  133,  660,  379,  903,  414,
 /*  7430 */   903,  903,  903,  325,  903,  903,  903,  903,  903,  259,
 /*  7440 */   356,  389,  390,  422,  408,  421,  380,  407,  402,  400,
 /*  7450 */   903,  903,  903,  369,  363,  329,  310,  903,  395,  348,
 /*  7460 */   903,  396,  229,  245,  247,  903,  903,  343,  275,  903,
 /*  7470 */   239,  242,  257,  250,  903,  903,  306,  309,  316,  317,
 /*  7480 */   236,  230,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7490 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  287,
 /*  7500 */   282,  263,  249,  228,  300,  274,  265,  281,  292,  903,
 /*  7510 */   903,  903,  252,  903,  903,  233,  231,  394,  393,  398,
 /*  7520 */   364,  405,  404,  377,  373,  903,  903,  903,  903,  903,
 /*  7530 */   267,  903,  903,  903,  903,  903,  339,  237,  243,  375,
 /*  7540 */   414,  388,  903,  903,  325,  903,  903,  903,  903,  903,
 /*  7550 */   259,  356,  389,  390,  422,  408,  421,  380,  407,  402,
 /*  7560 */   400,  903,  903,  903,  369,  363,  329,  310,  903,  395,
 /*  7570 */   348,  903,  396,  229,  245,  247,  903,  903,  343,  903,
 /*  7580 */   903,  239,  242,  257,  250,  903,  903,  306,  309,  316,
 /*  7590 */   317,  236,  230,  903,  903,  903,  903,  903,  903,  903,
 /*  7600 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7610 */   287,  282,  263,  249,  228,  300,  274,  265,  281,  292,
 /*  7620 */   903,  903,  903,  252,  903,  903,  233,  231,  394,  393,
 /*  7630 */   398,  364,  405,  404,  377,  373,  903,  903,  903,  903,
 /*  7640 */   903,  267,  903,  903,  903,  903,  903,  339,  237,  243,
 /*  7650 */   375,  414,  388,  676,  903,  325,  903,  903,  903,  903,
 /*  7660 */   903,  259,  356,  389,  390,  422,  408,  421,  380,  407,
 /*  7670 */   402,  400,  903,  903,  903,  369,  363,  329,  310,  903,
 /*  7680 */   395,  348,  903,  396,  229,  245,  247,  903,  903,  343,
 /*  7690 */   903,  903,  239,  242,  257,  250,  903,  903,  306,  309,
 /*  7700 */   316,  317,  236,  230,  903,  903,  903,  903,  903,  903,
 /*  7710 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7720 */   903,  287,  282,  263,  249,  228,  300,  274,  265,  281,
 /*  7730 */   292,  903,  903,  903,  252,  903,  903,  233,  231,  394,
 /*  7740 */   393,  398,  364,  405,  404,  377,  373,  903,  903,  903,
 /*  7750 */   903,  903,  267,  903,  903,  903,  903,  903,  339,  237,
 /*  7760 */   243,  375,  414,  388,  677,  903,  325,  903,  903,  903,
 /*  7770 */   903,  903,  259,  356,  389,  390,  422,  408,  421,  380,
 /*  7780 */   407,  402,  400,  903,  903,  903,  369,  363,  329,  310,
 /*  7790 */   903,  395,  348,  903,  396,  229,  245,  247,  903,  903,
 /*  7800 */   343,  903,  903,  239,  242,  257,  250,  903,  903,  306,
 /*  7810 */   309,  316,  317,  236,  230,  903,  903,  903,  903,  903,
 /*  7820 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7830 */   903,  903,  287,  282,  263,  249,  228,  300,  274,  265,
 /*  7840 */   281,  292,  903,  903,  903,  252,  903,  903,  233,  231,
 /*  7850 */   394,  393,  398,  364,  405,  404,  377,  373,  903,  903,
 /*  7860 */   903,  903,  903,  267,  903,  903,  903,  903,  903,  339,
 /*  7870 */   237,  243,  375,  414,  388,  903,  903,  325,  903,  903,
 /*  7880 */   903,  903,  903,  259,  356,  389,  390,  422,  408,  421,
 /*  7890 */   380,  407,  402,  400,  903,  903,  903,  369,  363,  329,
 /*  7900 */   310,  903,  395,  348,  903,  396,  229,  245,  247,  903,
 /*  7910 */   903,  343,  903,  903,  239,  242,  257,  250,  903,  903,
 /*  7920 */   306,  309,  316,  317,  236,  230,  903,  903,  903,  903,
 /*  7930 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7940 */   903,  903,  903,  287,  282,  263,  249,  228,  300,  274,
 /*  7950 */   265,  281,  292,  903,  903,  903,  252,  903,  903,  233,
 /*  7960 */   231,  394,  393,  398,  364,  405,  903,  903,  903,  334,
 /*  7970 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  7980 */   339,  237,  243,  375,  903,  388,  190,  194,  903,  903,
 /*  7990 */   903,  903,  691,  903,  903,  903,  903,  903,  903,  903,
 /*  8000 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  8010 */   903,  903,  903,  706,  903,  903,  903,  415,  903,  903,
 /*  8020 */   903,  903,   94,  414,  107,   93,  903,  325,  134,  903,
 /*  8030 */    89,  903,  145,  903,  903,   40,  903,  903,  903,  903,
 /*  8040 */   903,  903,  334,  903,  903,  903,  903,  369,  903,  329,
 /*  8050 */   310,  903,  395,  348,  903,  396,  229,  245,  247,  903,
 /*  8060 */   173,  343,  903,  903,  239,  242,  257,  250,  903,  903,
 /*  8070 */   306,  309,  316,  317,  236,  230,  903,  903,  903,  903,
 /*  8080 */   903,  903,  903,  903,  903,  903,  706,  903,  903,  903,
 /*  8090 */   903,  903,  903,  903,  903,   94,  903,  903,   93,  903,
 /*  8100 */   903,  141,  903,   89,  903,  144,  903,  903,   40,  903,
 /*  8110 */   903,  903,  903,  903,  903,  207,  903,  101,  158,  102,
 /*  8120 */   903,  707,  903,  177,  176,  664,   87,   91,  120,   92,
 /*  8130 */    88,  331,  903,  903,  330,  423,  403,  406,  903,  903,
 /*  8140 */   903,  903,  903,  692,  693,  697,  493,  694,  185,  903,
 /*  8150 */   392,  632,  690,  689,  903,  903,  217,  903,  426,  413,
 /*  8160 */   409,  626,  619,  618,  903,  149,  903,  617,  616,  620,
 /*  8170 */   152,  623,  132,  133,  660,  379,  903,  153,  903,  903,
 /*  8180 */   196,  903,  903,  131,  903,  903,  903,  903,  207,  903,
 /*  8190 */   101,  158,  102,  903,  707,  903,  177,  176,  664,   87,
 /*  8200 */    91,  120,   92,   88,  331,  903,  903,  330,  423,  403,
 /*  8210 */   406,  903,  903,  903,  903,  903,  692,  693,  697,  493,
 /*  8220 */   694,  185,  903,  392,  903,  903,  903,  903,  903,  217,
 /*  8230 */   903,  426,  413,  903,  903,  903,  903,  903,  903,  903,
 /*  8240 */   903,  903,  903,  903,  903,  325,  334,  903,  903,  903,
 /*  8250 */    42,  781,  903,  389,  390,  422,  408,  421,  380,  407,
 /*  8260 */   402,  400,  332,  903,  173,  903,  363,  329,  310,  903,
 /*  8270 */   395,  348,  903,  396,  229,  245,  247,  155,  903,  903,
 /*  8280 */   903,  903,  903,  691,  903,  903,  903,  903,  903,  903,
 /*  8290 */   706,  903,  903,  903,  903,  903,  903,  903,  903,   94,
 /*  8300 */   903,  903,   93,  903,  903,  141,  903,   89,  415,  144,
 /*  8310 */   903,  903,   40,  903,  903,  107,  903,  903,  903,  163,
 /*  8320 */   903,  903,  903,  170,  903,  903,  903,  334,  903,  771,
 /*  8330 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  8340 */   903,  903,  903,  903,  183,  903,  903,  903,  903,  903,
 /*  8350 */   691,  903,  903,  903,  710,  903,  903,  903,  903,  903,
 /*  8360 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  112,
 /*  8370 */   903,  647,  903,  903,  903,  415,  903,  903,  903,  903,
 /*  8380 */   903,  153,  107,  903,  196,  903,  134,  131,  903,  903,
 /*  8390 */   145,  903,  207,   47,  101,  158,  102,  903,  707,  903,
 /*  8400 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /*  8410 */   903,  330,  423,  403,  406,  903,  770,  171,  903,  903,
 /*  8420 */   692,  693,  697,  493,  694,  185,  903,  392,  903,  903,
 /*  8430 */   334,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /*  8440 */   903,  903,  632,  690,  689,  903,  903,  217,  173,  426,
 /*  8450 */   413,  409,  626,  619,  618,  903,  903,  903,  617,  616,
 /*  8460 */   620,  152,  623,  132,  133,  660,  379,  903,  903,  903,
 /*  8470 */   903,  903,  903,  903,  706,  903,  903,  903,  903,  903,
 /*  8480 */   903,  903,  903,   94,  903,  903,   93,  903,  903,  141,
 /*  8490 */   903,   89,  903,  144,  903,  903,   40,  801,  903,  903,
 /*  8500 */   903,  692,  693,  697,  493,  694,  185,  903,  392,  632,
 /*  8510 */   690,  689,  903,  629,  217,  903,  426,  413,  409,  626,
 /*  8520 */   619,  618,  165,  903,  775,  617,  616,  620,  152,  623,
 /*  8530 */   132,  133,  660,  379,  903,  161,  903,  903,  903,  903,
 /*  8540 */   903,  691,  903,  903,  903,  200,  903,  903,  903,  903,
 /*  8550 */   903,  903,  903,  112,  903,  903,  903,  903,  903,  903,
 /*  8560 */   903,  903,  903,  903,  903,  153,  415,  903,  196,  903,
 /*  8570 */   903,  131,  903,  107,  903,  903,  207,  163,  101,  158,
 /*  8580 */   102,  170,  707,  903,  177,  176,  664,   87,   91,  120,
 /*  8590 */    92,   88,  331,  903,  903,  330,  423,  403,  406,  903,
 /*  8600 */   903,  903,  903,  903,  692,  693,  697,  493,  694,  185,
 /*  8610 */   903,  392,  903,  903,  334,  903,  903,  217,   42,  426,
 /*  8620 */   413,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  8630 */   903,  903,  173,  903,  903,  903,  903,  903,  903,  903,
 /*  8640 */   903,  903,  903,  903,  903,  156,  903,  903,  903,  903,
 /*  8650 */   903,  691,  903,  903,  903,  903,  903,  903,  706,  903,
 /*  8660 */   903,  903,  903,  903,  903,  903,  903,   94,  903,  903,
 /*  8670 */    93,  903,  903,  141,  903,   89,  415,  144,  903,  903,
 /*  8680 */    40,  903,  903,  107,  903,  903,  903,  163,  903,  903,
 /*  8690 */   903,  170,  903,  903,  903,  903,  903,  776,  903,  903,
 /*  8700 */   632,  690,  689,  903,  903,  217,  903,  426,  413,  409,
 /*  8710 */   626,  619,  618,  903,  903,  903,  617,  616,  620,  152,
 /*  8720 */   623,  132,  133,  660,  379,  903,  903,  903,  903,  903,
 /*  8730 */   903,  903,  903,  903,  903,  903,  903,  112,  903,  903,
 /*  8740 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  153,
 /*  8750 */   903,  903,  196,  903,  903,  131,  903,  903,  903,  903,
 /*  8760 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /*  8770 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /*  8780 */   423,  403,  406,  903,  777,  903,  903,  903,  692,  693,
 /*  8790 */   697,  493,  694,  185,  903,  392,  903,  903,  334,  903,
 /*  8800 */   903,  217,   42,  426,  413,  903,  903,  903,  903,  903,
 /*  8810 */   632,  690,  689,  903,  903,  217,  173,  426,  413,  409,
 /*  8820 */   626,  619,  618,  903,  903,  903,  617,  616,  620,  152,
 /*  8830 */   623,  132,  133,  660,  379,  903,  903,  903,  903,  903,
 /*  8840 */   334,  903,  706,  903,  903,  903,  903,  903,  903,  903,
 /*  8850 */   903,   94,  903,  903,   93,  903,  903,  141,  903,   89,
 /*  8860 */   903,  144,  903,  903,   40,  903,  903,  903,  903,  903,
 /*  8870 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  8880 */   903,  779,  903,  903,  706,  159,  903,  903,  903,  903,
 /*  8890 */   903,  691,  903,  903,  903,  903,  903,  903,  903,  141,
 /*  8900 */   903,  903,  903,  144,  903,  903,   47,  903,  903,  903,
 /*  8910 */   903,  903,  903,  903,  903,  903,  415,  903,  903,  903,
 /*  8920 */   903,  112,  903,  107,  903,  903,  903,  163,  903,  903,
 /*  8930 */   903,  170,  903,  153,  903,  903,  196,  903,  903,  131,
 /*  8940 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /*  8950 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  8960 */   331,  903,  903,  330,  423,  403,  406,  903,  778,  903,
 /*  8970 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /*  8980 */   903,  903,  334,  903,  903,  217,  903,  426,  413,  903,
 /*  8990 */   903,  903,  903,  903,  319,  320,  903,  903,  903,  119,
 /*  9000 */   173,  903,  331,  903,  903,  330,  423,  403,  406,  903,
 /*  9010 */   903,  903,  903,  903,  692,  693,  697,  493,  694,  185,
 /*  9020 */   903,  392,  903,  903,  903,  903,  706,  217,  903,  426,
 /*  9030 */   413,  903,  903,  903,  903,   94,  903,  903,   93,  903,
 /*  9040 */   903,  141,  903,   89,  903,  144,  903,  903,   40,  903,
 /*  9050 */   632,  690,  689,  903,  903,  217,  903,  426,  413,  409,
 /*  9060 */   626,  619,  618,  903,  903,  773,  617,  616,  620,  152,
 /*  9070 */   623,  132,  133,  660,  379,  903,  903,  903,  903,  903,
 /*  9080 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9090 */   903,  903,  903,  903,  291,  903,  903,  903,  903,  903,
 /*  9100 */   903,  903,  903,  903,  903,  112,  903,  903,  903,  903,
 /*  9110 */   903,  903,  903,  903,  903,  903,  903,  153,  903,  903,
 /*  9120 */   196,  903,  903,  131,  903,  903,  903,  903,  207,  903,
 /*  9130 */   101,  158,  102,  903,  707,  903,  177,  176,  664,   87,
 /*  9140 */    91,  120,   92,   88,  331,  903,  903,  330,  423,  403,
 /*  9150 */   406,  903,  903,  903,  903,  903,  692,  693,  697,  493,
 /*  9160 */   694,  185,  903,  392,  903,  903,  334,  903,  903,  217,
 /*  9170 */   903,  426,  413,  903,  903,  903,  903,  903,  903,  903,
 /*  9180 */   903,  903,  903,  903,  173,  903,  325,  903,  903,  903,
 /*  9190 */   903,  903,  903,  903,  389,  390,  422,  408,  421,  380,
 /*  9200 */   407,  402,  400,  903,  903,  691,  903,  363,  329,  310,
 /*  9210 */   706,  395,  348,  903,  396,  229,  245,  247,  903,   94,
 /*  9220 */   903,  903,   93,  903,  903,  141,  903,   89,  903,  144,
 /*  9230 */   235,  903,   40,  903,  903,  414,  903,  107,  903,  325,
 /*  9240 */   903,  163,  903,  903,  903,  170,  903,  903,  903,  629,
 /*  9250 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  369,
 /*  9260 */   903,  329,  310,  903,  395,  348,  903,  396,  229,  245,
 /*  9270 */   247,  305,  903,  903,  903,  903,  239,  242,  257,  250,
 /*  9280 */   903,  214,  306,  309,  316,  317,  236,  230,  903,  112,
 /*  9290 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9300 */   903,  153,  903,  903,  196,  903,  903,  131,  903,  903,
 /*  9310 */   903,  903,  207,  903,  101,  158,  102,  903,  707,  903,
 /*  9320 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /*  9330 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /*  9340 */   692,  693,  697,  493,  694,  185,  903,  392,  903,  903,
 /*  9350 */   334,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /*  9360 */   903,  903,  903,  903,  632,  690,  689,  903,  173,  217,
 /*  9370 */   903,  426,  413,  903,  903,  903,  903,  903,  903,  903,
 /*  9380 */   617,  616,  620,  152,  623,  132,  133,  660,  379,  691,
 /*  9390 */   903,  903,  903,  903,  706,  903,  903,  903,  903,  903,
 /*  9400 */   903,  903,  903,   94,  903,  903,   93,  903,  903,  141,
 /*  9410 */   903,   89,  903,  144,  766,  903,   40,  903,  903,  414,
 /*  9420 */   903,  107,  903,  325,  903,  163,  903,  903,  903,  170,
 /*  9430 */   903,  903,  903,  795,  903,  903,  903,  903,  903,  903,
 /*  9440 */   903,  903,  903,  369,  903,  329,  310,  903,  395,  348,
 /*  9450 */   903,  396,  229,  245,  247,  903,  903,  903,  903,  903,
 /*  9460 */   239,  242,  257,  250,  903,  903,  306,  309,  316,  317,
 /*  9470 */   236,  230,  903,  112,  903,  903,  903,  903,  903,  903,
 /*  9480 */   903,  903,  903,  903,  903,  153,  903,  903,  196,  903,
 /*  9490 */   903,  131,  903,  903,  903,  903,  207,  903,  101,  158,
 /*  9500 */   102,  903,  707,  903,  177,  176,  664,   87,   91,  120,
 /*  9510 */    92,   88,  331,  903,  903,  330,  423,  403,  406,  903,
 /*  9520 */   903,  903,  903,  903,  692,  693,  697,  493,  694,  185,
 /*  9530 */   903,  392,  903,  903,  334,  903,  903,  217,  903,  426,
 /*  9540 */   413,  903,  903,  903,  903,  903,  903,  903,  632,  690,
 /*  9550 */   689,  903,  173,  217,  903,  426,  413,  903,  903,  903,
 /*  9560 */   903,  903,  903,  903,  617,  616,  620,  152,  623,  132,
 /*  9570 */   133,  660,  379,  903,  334,  903,  903,  903,  706,  903,
 /*  9580 */   903,  903,  903,  903,  903,  903,  903,   94,  903,  903,
 /*  9590 */    93,  903,  903,  141,  903,   89,  903,  144,  903,  903,
 /*  9600 */    40,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9610 */   903,  903,  903,  903,  903,  903,  903,  276,  280,  903,
 /*  9620 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9630 */   903,  903,  903,  141,  903,  903,  903,  144,  903,  903,
 /*  9640 */    47,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9650 */   903,  903,  903,  903,  903,  903,  903,  112,  903,  903,
 /*  9660 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  153,
 /*  9670 */   903,  903,  196,  903,  903,  131,  903,  903,  903,  903,
 /*  9680 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /*  9690 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /*  9700 */   423,  403,  406,  903,  903,  903,  903,  903,  692,  693,
 /*  9710 */   697,  493,  694,  185,  903,  392,  903,  903,  334,  903,
 /*  9720 */   903,  217,  903,  426,  413,  903,  903,  903,  903,  903,
 /*  9730 */   903,  903,  903,  903,  903,  903,  173,  903,  903,  903,
 /*  9740 */   903,  903,  903,  903,  903,  903,  903,  903,  692,  693,
 /*  9750 */   697,  493,  694,  185,  903,  392,  903,  903,  903,  903,
 /*  9760 */   903,  217,  706,  426,  413,  903,  903,  903,  903,  903,
 /*  9770 */   903,   94,  903,  903,   93,  903,  903,  141,  903,   89,
 /*  9780 */   903,  144,  903,  903,   40,  903,  903,  903,  903,  903,
 /*  9790 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9800 */   903,  784,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9810 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9820 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9830 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9840 */   903,  112,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9850 */   903,  903,  903,  153,  903,  903,  196,  903,  903,  131,
 /*  9860 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /*  9870 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /*  9880 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /*  9890 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /*  9900 */   903,  903,  334,  903,  903,  217,  903,  426,  413,  903,
 /*  9910 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9920 */   173,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9930 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9940 */   903,  903,  903,  903,  903,  903,  706,  903,  903,  903,
 /*  9950 */   903,  903,  903,  903,  903,   94,  903,  903,   93,  903,
 /*  9960 */   903,  141,  903,   89,  903,  144,  903,  903,   40,  903,
 /*  9970 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /*  9980 */   903,  903,  903,  903,  903,  774,  903,  903,  903,  903,
 /*  9990 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10000 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10010 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10020 */   903,  903,  903,  903,  903,  112,  903,  903,  903,  903,
 /* 10030 */   903,  903,  903,  903,  903,  903,  903,  153,  903,  903,
 /* 10040 */   196,  903,  903,  131,  903,  903,  903,  903,  207,  903,
 /* 10050 */   101,  158,  102,  903,  707,  903,  177,  176,  664,   87,
 /* 10060 */    91,  120,   92,   88,  331,  903,  903,  330,  423,  403,
 /* 10070 */   406,  903,  903,  903,  903,  903,  692,  693,  697,  493,
 /* 10080 */   694,  185,  903,  392,  903,  903,  334,  903,  903,  217,
 /* 10090 */   903,  426,  413,  903,  903,  903,  903,  903,  903,  903,
 /* 10100 */   903,  903,  903,  903,  173,  903,  903,  903,  903,  903,
 /* 10110 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10120 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10130 */   706,  903,  903,  903,  903,  903,  903,  903,  903,   94,
 /* 10140 */   903,  903,   93,  903,  903,  141,  903,   89,  903,  144,
 /* 10150 */   903,  903,   40,  903,  903,  903,  903,  903,  903,  903,
 /* 10160 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  342,
 /* 10170 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10180 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10190 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10200 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  112,
 /* 10210 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10220 */   903,  153,  903,  903,  196,  903,  903,  131,  903,  903,
 /* 10230 */   903,  903,  207,  903,  101,  158,  102,  903,  707,  903,
 /* 10240 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /* 10250 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /* 10260 */   692,  693,  697,  493,  694,  185,  903,  392,  903,  903,
 /* 10270 */   334,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /* 10280 */   903,  903,  903,  903,  903,  903,  903,  903,  173,  903,
 /* 10290 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10300 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10310 */   903,  903,  903,  903,  706,  903,  903,  903,  903,  903,
 /* 10320 */   903,  903,  903,   94,  903,  903,   93,  903,  903,  141,
 /* 10330 */   903,   89,  903,  144,  903,  903,   40,  903,  903,  903,
 /* 10340 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10350 */   903,  903,  903,  802,  903,  903,  903,  903,  903,  903,
 /* 10360 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10370 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10380 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10390 */   903,  903,  903,  112,  903,  903,  903,  903,  903,  903,
 /* 10400 */   903,  903,  903,  903,  903,  153,  903,  903,  196,  903,
 /* 10410 */   903,  131,  903,  903,  903,  903,  207,  903,  101,  158,
 /* 10420 */   102,  903,  707,  903,  177,  176,  664,   87,   91,  120,
 /* 10430 */    92,   88,  331,  903,  903,  330,  423,  403,  406,  903,
 /* 10440 */   903,  903,  903,  903,  692,  693,  697,  493,  694,  185,
 /* 10450 */   903,  392,  903,  903,  334,  903,  903,  217,  903,  426,
 /* 10460 */   413,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10470 */   903,  903,  173,  903,  903,  903,  903,  903,  903,  903,
 /* 10480 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10490 */   903,  903,  903,  903,  903,  903,  903,  903,  706,  903,
 /* 10500 */   903,  903,  903,  903,  903,  903,  903,   94,  903,  903,
 /* 10510 */    93,  903,  903,  141,  903,   89,  903,  144,  903,  903,
 /* 10520 */    40,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10530 */   903,  903,  903,  903,  903,  903,  903,  670,  903,  903,
 /* 10540 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10550 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10560 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10570 */   903,  903,  903,  903,  903,  903,  903,  112,  903,  903,
 /* 10580 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  153,
 /* 10590 */   903,  903,  196,  903,  903,  131,  903,  903,  903,  903,
 /* 10600 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /* 10610 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /* 10620 */   423,  403,  406,  903,  903,  903,  903,  903,  692,  693,
 /* 10630 */   697,  493,  694,  185,  903,  392,  903,  903,  334,  903,
 /* 10640 */   903,  217,  903,  426,  413,  903,  903,  903,  903,  903,
 /* 10650 */   903,  903,  903,  903,  903,  903,  173,  903,  903,  903,
 /* 10660 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10670 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10680 */   903,  903,  706,  903,  903,  903,  903,  903,  903,  903,
 /* 10690 */   903,   94,  903,  903,   93,  903,  903,  141,  903,   89,
 /* 10700 */   903,  144,  903,  903,   40,  903,  903,  903,  903,  903,
 /* 10710 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10720 */   903,  785,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10730 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10740 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10750 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10760 */   903,  112,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10770 */   903,  903,  903,  153,  903,  903,  196,  903,  903,  131,
 /* 10780 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /* 10790 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /* 10800 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /* 10810 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /* 10820 */   903,  903,  334,  903,  903,  217,  903,  426,  413,  903,
 /* 10830 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10840 */   173,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10850 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10860 */   903,  903,  903,  903,  903,  903,  706,  903,  903,  903,
 /* 10870 */   903,  903,  903,  903,  903,   94,  903,  903,   93,  903,
 /* 10880 */   903,  141,  903,   89,  903,  144,  903,  903,   40,  903,
 /* 10890 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10900 */   903,  903,  903,  903,  903,  708,  903,  903,  903,  903,
 /* 10910 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10920 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10930 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 10940 */   903,  903,  903,  903,  903,  112,  903,  903,  903,  903,
 /* 10950 */   903,  903,  903,  903,  903,  903,  903,  153,  903,  903,
 /* 10960 */   196,  903,  903,  131,  903,  903,  903,  903,  207,  903,
 /* 10970 */   101,  158,  102,  903,  707,  903,  177,  176,  664,   87,
 /* 10980 */    91,  120,   92,   88,  331,  903,  903,  330,  423,  403,
 /* 10990 */   406,  903,  903,  903,  903,  903,  692,  693,  697,  493,
 /* 11000 */   694,  185,  903,  392,  903,  903,  334,  903,  903,  217,
 /* 11010 */   903,  426,  413,  903,  903,  903,  903,  903,  903,  903,
 /* 11020 */   903,  903,  903,  903,  173,  903,  903,  903,  903,  903,
 /* 11030 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11040 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11050 */   706,  903,  903,  903,  903,  903,  903,  903,  903,   94,
 /* 11060 */   903,  903,   93,  903,  903,  141,  903,   89,  903,  144,
 /* 11070 */   903,  903,   40,  903,  903,  903,  903,  903,  903,  903,
 /* 11080 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  803,
 /* 11090 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11100 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11110 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11120 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  112,
 /* 11130 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11140 */   903,  153,  903,  903,  196,  903,  903,  131,  903,  903,
 /* 11150 */   903,  903,  207,  903,  101,  158,  102,  903,  707,  903,
 /* 11160 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /* 11170 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /* 11180 */   692,  693,  697,  493,  694,  185,  903,  392,  903,  903,
 /* 11190 */   334,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /* 11200 */   903,  903,  903,  903,  903,  903,  903,  903,  173,  903,
 /* 11210 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11220 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11230 */   903,  903,  903,  903,  706,  903,  903,  903,  903,  903,
 /* 11240 */   903,  903,  903,   94,  903,  903,   93,  903,  903,  141,
 /* 11250 */   903,   89,  903,  144,  903,  903,   40,  903,  903,  903,
 /* 11260 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11270 */   903,  903,  903,  804,  903,  903,  903,  903,  903,  903,
 /* 11280 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11290 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11300 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11310 */   903,  903,  903,  112,  903,  903,  903,  903,  903,  903,
 /* 11320 */   903,  903,  903,  903,  903,  153,  903,  903,  196,  903,
 /* 11330 */   903,  131,  903,  903,  903,  903,  207,  903,  101,  158,
 /* 11340 */   102,  903,  707,  903,  177,  176,  664,   87,   91,  120,
 /* 11350 */    92,   88,  331,  903,  903,  330,  423,  403,  406,  903,
 /* 11360 */   903,  903,  903,  903,  692,  693,  697,  493,  694,  185,
 /* 11370 */   903,  392,  903,  903,  334,  903,  903,  217,  903,  426,
 /* 11380 */   413,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11390 */   903,  903,  173,  903,  903,  903,  903,  903,  903,  903,
 /* 11400 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11410 */   903,  903,  903,  903,  903,  903,  903,  903,  706,  903,
 /* 11420 */   903,  903,  903,  903,  903,  903,  903,   94,  903,  903,
 /* 11430 */    93,  903,  903,  141,  903,   89,  903,  144,  903,  903,
 /* 11440 */    40,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11450 */   903,  903,  903,  903,  903,  903,  903,  794,  903,  903,
 /* 11460 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11470 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11480 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11490 */   903,  903,  903,  903,  903,  903,  903,  112,  903,  903,
 /* 11500 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  153,
 /* 11510 */   903,  903,  196,  903,  903,  131,  903,  903,  903,  903,
 /* 11520 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /* 11530 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /* 11540 */   423,  403,  406,  903,  903,  903,  903,  903,  692,  693,
 /* 11550 */   697,  493,  694,  185,  903,  392,  903,  903,  334,  903,
 /* 11560 */   903,  217,  903,  426,  413,  903,  903,  903,  903,  903,
 /* 11570 */   903,  903,  903,  903,  903,  903,  173,  903,  903,  903,
 /* 11580 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11590 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11600 */   903,  903,  706,  903,  903,  903,  903,  903,  903,  903,
 /* 11610 */   903,   94,  903,  903,   93,  903,  903,  141,  903,   89,
 /* 11620 */   903,  144,  903,  903,   40,  903,  903,  903,  903,  903,
 /* 11630 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11640 */   903,  787,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11650 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11660 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11670 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11680 */   903,  112,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11690 */   903,  903,  903,  153,  903,  903,  196,  903,  903,  131,
 /* 11700 */   903,  903,  903,  903,  207,  903,  101,  158,  102,  903,
 /* 11710 */   707,  903,  177,  176,  664,   87,   91,  120,   92,   88,
 /* 11720 */   331,  903,  903,  330,  423,  403,  406,  903,  903,  903,
 /* 11730 */   903,  903,  692,  693,  697,  493,  694,  185,  903,  392,
 /* 11740 */   903,  903,  334,  903,  903,  217,  903,  426,  413,  903,
 /* 11750 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11760 */   173,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11770 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11780 */   903,  903,  903,  903,  903,  903,  706,  903,  903,  903,
 /* 11790 */   903,  903,  903,  903,  903,   94,  903,  903,   93,  903,
 /* 11800 */   903,  141,  903,   89,  903,  144,  903,  903,   40,  903,
 /* 11810 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11820 */   903,  903,  903,  903,  903,  788,  903,  903,  903,  903,
 /* 11830 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11840 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11850 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11860 */   903,  903,  903,  903,  903,  112,  903,  903,  903,  903,
 /* 11870 */   903,  903,  903,  903,  903,  903,  903,  153,  903,  903,
 /* 11880 */   196,  903,  903,  131,  903,  903,  903,  903,  207,  903,
 /* 11890 */   101,  158,  102,  903,  707,  903,  177,  176,  664,   87,
 /* 11900 */    91,  120,   92,   88,  331,  903,  903,  330,  423,  403,
 /* 11910 */   406,  903,  903,  903,  903,  903,  692,  693,  697,  493,
 /* 11920 */   694,  185,  903,  392,  903,  903,  334,  903,  903,  217,
 /* 11930 */   903,  426,  413,  903,  903,  903,  903,  903,  903,  903,
 /* 11940 */   903,  903,  903,  903,  173,  903,  903,  903,  903,  903,
 /* 11950 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11960 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 11970 */   706,  903,  903,  903,  903,  903,  903,  903,  903,   94,
 /* 11980 */   903,  903,   93,  903,  903,  141,  903,   89,  903,  144,
 /* 11990 */   903,  903,   40,  903,  903,  903,  903,  903,  903,  903,
 /* 12000 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  687,
 /* 12010 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12020 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12030 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12040 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  112,
 /* 12050 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12060 */   903,  153,  903,  903,  196,  903,  903,  131,  903,  903,
 /* 12070 */   903,  903,  207,  903,  101,  158,  102,  903,  707,  903,
 /* 12080 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /* 12090 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /* 12100 */   692,  693,  697,  493,  694,  185,  903,  392,  903,  903,
 /* 12110 */   334,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /* 12120 */   903,  903,  903,  903,  903,  903,  903,  903,  173,  903,
 /* 12130 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12140 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12150 */   903,  903,  903,  903,  706,  903,  903,  903,  903,  903,
 /* 12160 */   903,  903,  903,   94,  903,  903,   93,  903,  903,  141,
 /* 12170 */   903,   89,  903,  144,  903,  903,   40,  903,  903,  903,
 /* 12180 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12190 */   903,  903,  903,  786,  903,  903,  903,  903,  903,  903,
 /* 12200 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12210 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12220 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12230 */   903,  903,  903,  112,  903,  903,  903,  903,  903,  903,
 /* 12240 */   903,  903,  903,  903,  903,  153,  903,  903,  196,  903,
 /* 12250 */   903,  131,  903,  903,  903,  903,  207,  903,  101,  158,
 /* 12260 */   102,  903,  707,  903,  177,  176,  664,   87,   91,  120,
 /* 12270 */    92,   88,  331,  903,  903,  330,  423,  403,  406,  903,
 /* 12280 */   903,  903,  903,  903,  692,  693,  697,  493,  694,  185,
 /* 12290 */   903,  392,  903,  903,  334,  903,  903,  217,  903,  426,
 /* 12300 */   413,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12310 */   903,  903,  173,  903,  903,  903,  903,  903,  903,  903,
 /* 12320 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12330 */   903,  903,  903,  903,  903,  903,  903,  903,  706,  903,
 /* 12340 */   903,  903,  903,  903,  903,  903,  903,   94,  903,  903,
 /* 12350 */    93,  903,  903,  141,  903,   89,  903,  144,  903,  903,
 /* 12360 */    40,  903,  903,  903,  334,  903,  903,  903,  903,  903,
 /* 12370 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12380 */   903,  903,  173,  903,  903,  903,  903,  903,  903,  903,
 /* 12390 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12400 */   903,  903,  903,  903,  903,  903,  903,  903,  706,  903,
 /* 12410 */   903,  903,  903,  903,  903,  903,  903,   94,  903,  903,
 /* 12420 */    93,  903,  903,  141,  903,   89,  903,  144,  903,  147,
 /* 12430 */    40,  903,  196,  903,  903,  131,  903,  903,  903,  903,
 /* 12440 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /* 12450 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /* 12460 */   423,  403,  406,  903,  903,  903,  903,  903,  692,  693,
 /* 12470 */   697,  493,  694,  185,  903,  392,  903,  903,  903,  903,
 /* 12480 */   903,  217,  903,  426,  413,  903,  903,  903,  903,  903,
 /* 12490 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  148,
 /* 12500 */   903,  903,  196,  903,  903,  131,  903,  903,  903,  903,
 /* 12510 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /* 12520 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /* 12530 */   423,  403,  406,  903,  903,  903,  903,  903,  692,  693,
 /* 12540 */   697,  493,  694,  185,  903,  392,  903,  903,  414,  903,
 /* 12550 */   903,  217,  325,  426,  413,  903,  903,  903,  324,  903,
 /* 12560 */   389,  390,  422,  408,  421,  380,  407,  402,  400,  903,
 /* 12570 */   903,  903,  369,  363,  329,  310,  903,  395,  348,  903,
 /* 12580 */   396,  229,  245,  247,  334,  903,  903,  903,  903,  239,
 /* 12590 */   242,  257,  250,  903,  903,  306,  309,  316,  317,  236,
 /* 12600 */   230,  903,  173,  903,  903,  903,  903,  903,  903,  903,
 /* 12610 */   903,  903,  903,  903,  903,  903,  903,  903,  287,  282,
 /* 12620 */   263,  249,  228,  300,  274,  903,  903,  903,  706,  903,
 /* 12630 */   903,  903,  903,  903,  903,  903,  903,   94,  903,  903,
 /* 12640 */    93,  334,  903,  141,  903,   89,  903,  144,  903,  903,
 /* 12650 */    40,  903,  903,  903,  903,  903,  903,  903,  903,  173,
 /* 12660 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12670 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12680 */   903,  903,  903,  903,  903,  706,  903,  903,  903,  903,
 /* 12690 */   903,  903,  903,  903,   94,  903,  903,   93,  903,  903,
 /* 12700 */   141,  903,   89,  903,  144,  903,  903,   40,  903,  903,
 /* 12710 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12720 */   903,  903,  174,  903,  903,  131,  903,  903,  903,  903,
 /* 12730 */   207,  903,  101,  158,  102,  903,  707,  903,  177,  176,
 /* 12740 */   664,   87,   91,  120,   92,   88,  331,  903,  903,  330,
 /* 12750 */   423,  403,  406,  903,  903,  903,  903,  903,  692,  693,
 /* 12760 */   697,  493,  694,  185,  903,  392,  903,  903,  903,  903,
 /* 12770 */   903,  217,  903,  426,  413,  903,  903,  903,  903,  210,
 /* 12780 */   903,  903,  131,  903,  903,  903,  903,  207,  903,  101,
 /* 12790 */   158,  102,  903,  707,  903,  177,  176,  664,   87,   91,
 /* 12800 */   120,   92,   88,  331,  903,  903,  330,  423,  403,  406,
 /* 12810 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /* 12820 */   185,  903,  392,  903,  903,  334,  903,  903,  217,  903,
 /* 12830 */   426,  413,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12840 */   903,  903,  903,  173,  903,  903,  903,  903,  903,  903,
 /* 12850 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12860 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  706,
 /* 12870 */   903,  903,  903,  903,  903,  903,  903,  903,   94,  903,
 /* 12880 */   903,   93,  903,  903,  141,  903,   89,  903,  144,  903,
 /* 12890 */   903,   40,  903,  903,  414,  903,  903,  903,  325,  903,
 /* 12900 */   903,  903,  903,  903,  903,  903,  389,  390,  422,  408,
 /* 12910 */   421,  380,  407,  402,  400,  903,  903,  903,  369,  363,
 /* 12920 */   329,  310,  903,  395,  348,  903,  396,  229,  245,  247,
 /* 12930 */   903,  903,  903,  903,  903,  239,  242,  257,  250,  903,
 /* 12940 */   903,  306,  309,  316,  317,  236,  230,  903,  903,  903,
 /* 12950 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 12960 */   903,  903,  903,  213,  903,  903,  131,  903,  903,  903,
 /* 12970 */   903,  207,  903,  101,  158,  102,  903,  707,  903,  177,
 /* 12980 */   176,  664,   87,   91,  120,   92,   88,  331,  903,  903,
 /* 12990 */   330,  423,  403,  406,  903,  903,  903,  903,  903,  692,
 /* 13000 */   693,  697,  493,  694,  185,  903,  392,  903,  903,  414,
 /* 13010 */   903,  903,  217,  325,  426,  413,  903,  903,  903,  903,
 /* 13020 */   903,  389,  390,  422,  408,  421,  380,  407,  402,  400,
 /* 13030 */   903,  903,  903,  369,  363,  329,  310,  903,  395,  348,
 /* 13040 */   903,  396,  229,  245,  247,  903,  903,  903,  903,  903,
 /* 13050 */   239,  242,  257,  250,  903,  903,  306,  309,  316,  317,
 /* 13060 */   236,  230,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13070 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  287,
 /* 13080 */   282,  263,  249,  228,  300,  274,  903,  903,  903,  903,
 /* 13090 */   414,  903,  903,  419,  325,  903,  903,  903,  903,  903,
 /* 13100 */   903,  903,  389,  390,  422,  408,  421,  380,  407,  402,
 /* 13110 */   400,  903,  903,  903,  369,  363,  329,  310,  903,  395,
 /* 13120 */   348,  903,  396,  229,  245,  247,  903,  903,  903,  903,
 /* 13130 */   903,  239,  242,  257,  250,  334,  903,  306,  309,  316,
 /* 13140 */   317,  236,  230,  903,  903,  903,  903,  903,  903,  903,
 /* 13150 */   903,  903,  903,  173,  903,  903,  903,  903,  903,  903,
 /* 13160 */   287,  282,  263,  249,  228,  300,  274,  903,  903,  903,
 /* 13170 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  706,
 /* 13180 */   903,  903,  334,  903,  903,  903,  903,  903,   94,  903,
 /* 13190 */   903,   93,  903,  903,  141,  903,   89,  903,  144,  903,
 /* 13200 */   173,   40,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13210 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13220 */   903,  903,  903,  903,  903,  903,  706,  903,  903,  903,
 /* 13230 */   903,  903,  903,  903,  903,   94,  903,  903,   93,  903,
 /* 13240 */   903,  141,  903,   89,  903,  144,  903,  903,   40,  903,
 /* 13250 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13260 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13270 */   903,  903,  903,  903,  903,  903,  129,  903,  903,  903,
 /* 13280 */   903,  207,  903,  101,  158,  102,  903,  707,  903,  177,
 /* 13290 */   176,  664,   87,   91,  120,   92,   88,  331,  903,  903,
 /* 13300 */   330,  423,  403,  406,  903,  903,  903,  903,  903,  692,
 /* 13310 */   693,  697,  493,  694,  185,  903,  392,  903,  903,  903,
 /* 13320 */   903,  903,  217,  130,  426,  413,  903,  903,  207,  903,
 /* 13330 */   101,  158,  102,  903,  707,  903,  177,  176,  664,   87,
 /* 13340 */    91,  120,   92,   88,  331,  903,  903,  330,  423,  403,
 /* 13350 */   406,  903,  903,  903,  903,  903,  692,  693,  697,  493,
 /* 13360 */   694,  185,  903,  392,  903,  903,  334,  903,  903,  217,
 /* 13370 */   903,  426,  413,  903,  903,  903,  903,  903,  903,  903,
 /* 13380 */   903,  903,  903,  903,  212,  903,  903,  903,  903,  903,
 /* 13390 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13400 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13410 */   706,  903,  334,  903,  903,  903,  903,  903,  903,   94,
 /* 13420 */   903,  903,   93,  903,  903,  141,  903,   89,  903,  144,
 /* 13430 */   205,  903,   40,  903,  903,  903,  903,  903,  903,  903,
 /* 13440 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13450 */   903,  903,  903,  903,  903,  903,  706,  903,  903,  903,
 /* 13460 */   903,  903,  903,  903,  903,   94,  903,  903,   93,  903,
 /* 13470 */   903,  141,  903,   89,  903,  144,  903,  903,   40,  903,
 /* 13480 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13490 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13500 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13510 */   903,  903,  207,  903,  101,  158,  102,  903,  707,  903,
 /* 13520 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /* 13530 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /* 13540 */   692,  693,  697,  493,  694,  185,  903,  392,  903,  903,
 /* 13550 */   903,  903,  903,  217,  903,  426,  413,  903,  207,  903,
 /* 13560 */   101,  158,  102,  334,  707,  903,  177,  176,  664,   87,
 /* 13570 */    91,  120,   92,   88,  331,  903,  903,  330,  423,  403,
 /* 13580 */   406,  186,  903,  903,  903,  903,  692,  693,  697,  493,
 /* 13590 */   694,  185,  903,  392,  903,  903,  903,  903,  903,  217,
 /* 13600 */   903,  426,  413,  903,  903,  903,  903,  706,  903,  334,
 /* 13610 */   903,  903,  903,  903,  903,  903,   94,  903,  903,   93,
 /* 13620 */   903,  903,  141,  903,   89,  903,  144,  209,  903,   40,
 /* 13630 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13640 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13650 */   903,  903,  903,  706,  903,  903,  903,  903,  903,  903,
 /* 13660 */   903,  903,   94,  903,  903,   93,  903,  903,  141,  903,
 /* 13670 */    89,  903,  144,  903,  903,   40,  903,  903,  903,  903,
 /* 13680 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13690 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13700 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  207,
 /* 13710 */   903,  101,  158,  102,  903,  707,  903,  177,  176,  664,
 /* 13720 */    87,   91,  120,   92,   88,  331,  903,  903,  330,  423,
 /* 13730 */   403,  406,  903,  903,  903,  903,  903,  692,  693,  697,
 /* 13740 */   493,  694,  185,  903,  392,  903,  903,  334,  903,  903,
 /* 13750 */   217,  903,  426,  413,  903,  207,  903,  101,  158,  102,
 /* 13760 */   903,  707,  903,  177,  176,  664,   87,   91,  120,   92,
 /* 13770 */    88,  331,  903,  903,  330,  423,  403,  406,  903,  903,
 /* 13780 */   903,  903,  903,  692,  693,  697,  493,  694,  185,  903,
 /* 13790 */   392,  706,  903,  334,  903,  903,  217,  903,  426,  413,
 /* 13800 */    94,  903,  903,   93,  903,  903,  141,  903,   89,  903,
 /* 13810 */   144,  903,  903,   40,  903,  903,  903,  903,  903,  903,
 /* 13820 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13830 */   903,  903,  903,  903,  903,  903,  903,  706,  903,  903,
 /* 13840 */   903,  903,  903,  903,  903,  903,   94,  903,  903,   93,
 /* 13850 */   903,  903,  141,  903,   89,  903,  144,  903,  903,   40,
 /* 13860 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13870 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13880 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 13890 */   903,  903,  903,  208,  903,  101,  158,  102,  903,  707,
 /* 13900 */   903,  177,  176,  664,   87,   91,  120,   92,   88,  331,
 /* 13910 */   903,  903,  330,  423,  403,  406,  903,  903,  903,  903,
 /* 13920 */   903,  692,  693,  697,  493,  694,  185,  903,  392,  903,
 /* 13930 */   903,  334,  903,  903,  217,  903,  426,  413,  903,  175,
 /* 13940 */   903,  101,  158,  102,  903,  707,  903,  177,  176,  664,
 /* 13950 */    87,   91,  120,   92,   88,  331,  903,  903,  330,  423,
 /* 13960 */   403,  406,  903,  903,  903,  903,  903,  692,  693,  697,
 /* 13970 */   493,  694,  185,  903,  392,  706,  903,  334,  903,  903,
 /* 13980 */   217,  903,  426,  413,   94,  903,  903,   93,  903,  903,
 /* 13990 */   141,  903,   89,  903,  144,  903,  903,   40,  903,  903,
 /* 14000 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14010 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14020 */   903,  706,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14030 */    94,  903,  903,   93,  903,  903,  141,  903,   89,  903,
 /* 14040 */   144,  903,  903,   40,  903,  903,  903,  903,  903,  903,
 /* 14050 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14060 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14070 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  101,
 /* 14080 */   151,  102,  903,  707,  903,  177,  176,  664,   87,   91,
 /* 14090 */   120,   92,   88,  331,  903,  903,  330,  423,  403,  406,
 /* 14100 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /* 14110 */   185,  903,  392,  334,  903,  903,  903,  903,  217,  903,
 /* 14120 */   426,  413,  903,  903,  903,  101,  154,  102,  903,  707,
 /* 14130 */   903,  177,  176,  664,   87,   91,  120,   92,   88,  331,
 /* 14140 */   903,  903,  330,  423,  403,  406,  903,  903,  903,  903,
 /* 14150 */   903,  692,  693,  697,  493,  694,  185,  706,  392,  903,
 /* 14160 */   903,  334,  903,  903,  217,  903,  426,  413,  903,  903,
 /* 14170 */   903,  903,  141,  903,  903,  903,  144,  903,  157,   47,
 /* 14180 */   903,  903,  903,  903,  691,  903,  903,  903,  903,  903,
 /* 14190 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14200 */   903,  903,  903,  903,  903,  391,  903,  903,  903,  415,
 /* 14210 */   903,  334,  903,  903,  903,  903,  107,  903,  903,  903,
 /* 14220 */   134,  903,  903,  903,  145,  903,  903,   47,  182,  903,
 /* 14230 */   903,  903,  903,  903,  691,  903,  903,  903,  903,  903,
 /* 14240 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14250 */   903,  903,  903,  903,  903,  646,  903,  903,  903,  415,
 /* 14260 */   903,  903,  903,  903,  903,  903,  107,  319,  320,  903,
 /* 14270 */   134,  903,  121,  903,  145,  331,  903,   47,  330,  423,
 /* 14280 */   403,  406,  903,  903,  903,  903,  903,  692,  693,  697,
 /* 14290 */   493,  694,  185,  903,  392,  903,  903,  903,  903,  903,
 /* 14300 */   217,  903,  426,  413,  903,  903,  903,  903,  903,  903,
 /* 14310 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14320 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14330 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /* 14340 */   185,  903,  392,  632,  690,  689,  903,  903,  217,  903,
 /* 14350 */   426,  413,  409,  626,  619,  618,  903,  903,  903,  617,
 /* 14360 */   616,  620,  152,  623,  132,  133,  660,  379,  903,  903,
 /* 14370 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14380 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /* 14390 */   185,  903,  392,  632,  690,  689,  903,  334,  217,  903,
 /* 14400 */   426,  413,  409,  626,  619,  618,  903,  903,  903,  617,
 /* 14410 */   616,  620,  152,  623,  132,  133,  660,  379,  903,  903,
 /* 14420 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14430 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14440 */   903,  706,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14450 */    94,  903,  903,   93,  903,  903,  141,  903,   89,  903,
 /* 14460 */   144,  903,  903,   40,  903,  903,  334,  903,  903,  903,
 /* 14470 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14480 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14490 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14500 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14510 */   706,  903,  903,  903,  903,  903,  903,  903,  903,   94,
 /* 14520 */   903,  903,   93,  903,  903,  141,  903,   89,  903,  144,
 /* 14530 */   903,  903,   40,  903,  903,  334,  903,  903,  903,  903,
 /* 14540 */   903,  903,  903,  903,  903,  101,  903,  102,  903,  675,
 /* 14550 */   903,  177,  176,  664,   87,   91,  120,   92,   88,  331,
 /* 14560 */   903,  903,  330,  423,  403,  406,  903,  903,  903,  903,
 /* 14570 */   903,  692,  693,  697,  493,  694,  185,  903,  392,  706,
 /* 14580 */   903,  903,  903,  903,  217,  903,  426,  413,   94,  903,
 /* 14590 */   903,   93,  903,  903,  141,  903,   89,  903,  144,  903,
 /* 14600 */   903,   40,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14610 */   903,  903,  903,  903,  101,  903,  102,  903,  703,  903,
 /* 14620 */   177,  176,  664,   87,   91,  120,   92,   88,  331,  903,
 /* 14630 */   903,  330,  423,  403,  406,  903,  903,  903,  903,  903,
 /* 14640 */   692,  693,  697,  493,  694,  185,  903,  392,  903,  903,
 /* 14650 */   903,  903,  903,  217,  903,  426,  413,  903,  903,  903,
 /* 14660 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14670 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14680 */   903,  903,  760,  101,  903,  102,  903,  686,  903,  177,
 /* 14690 */   176,  664,   87,   91,  120,   92,   88,  331,  903,  160,
 /* 14700 */   330,  423,  403,  406,  903,  691,  903,  903,  903,  692,
 /* 14710 */   693,  697,  493,  694,  185,  903,  392,  903,  903,  903,
 /* 14720 */   903,  903,  217,  903,  426,  413,  903,  903,  903,  903,
 /* 14730 */   415,  411,  903,  903,  903,  136,  903,  105,  137,  903,
 /* 14740 */   903,  163,  903,  903,  903,  170,  903,  334,  903,  717,
 /* 14750 */   193,  718,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14760 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14770 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14780 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14790 */   903,  706,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14800 */    94,  903,  903,   93,  903,  903,  141,  903,   89,  903,
 /* 14810 */   144,  903,  903,   40,  903,  903,  903,  903,  903,  903,
 /* 14820 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14830 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14840 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14850 */   903,  903,  903,  903,  762,  769,  903,  903,  903,  903,
 /* 14860 */   903,  903,  903,  903,  632,  690,  689,  903,  903,  217,
 /* 14870 */   903,  426,  413,  409,  626,  619,  618,  903,  903,  903,
 /* 14880 */   617,  616,  620,  152,  623,  132,  133,  660,  379,  903,
 /* 14890 */   903,  903,  903,  903,  903,  101,  903,  102,  903,  903,
 /* 14900 */   903,  319,  320,  673,   87,   91,  120,   92,   88,  331,
 /* 14910 */   903,  903,  330,  423,  403,  406,  903,  903,  903,  903,
 /* 14920 */   903,  692,  693,  697,  493,  694,  185,  903,  392,  903,
 /* 14930 */   903,  334,  903,  903,  217,  903,  426,  413,  903,  903,
 /* 14940 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14950 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14960 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 14970 */   903,  903,  903,  903,  903,  706,  903,  903,  903,  903,
 /* 14980 */   903,  903,  903,  903,   94,  334,  903,   93,  903,  903,
 /* 14990 */   141,  903,   89,  903,  144,  903,  903,   40,  903,  903,
 /* 15000 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15010 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15020 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  706,
 /* 15030 */   903,  903,  903,  903,  903,  903,  903,  903,   94,  903,
 /* 15040 */   903,   93,  903,  903,  124,  903,   89,  903,  144,  903,
 /* 15050 */   903,   40,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15060 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15070 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  101,
 /* 15080 */   903,  102,  903,  903,  903,  319,  320,  671,   87,   91,
 /* 15090 */   120,   92,   88,  331,  903,  903,  330,  423,  403,  406,
 /* 15100 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /* 15110 */   185,  903,  392,  903,  903,  903,  903,  903,  217,  903,
 /* 15120 */   426,  413,  903,  334,  903,  903,  903,  903,  903,  903,
 /* 15130 */   903,  903,  903,  101,  903,  102,  903,  903,  903,  319,
 /* 15140 */   320,  671,   87,   91,  120,   92,   88,  331,  903,  903,
 /* 15150 */   330,  423,  403,  406,  903,  903,  903,  903,  903,  692,
 /* 15160 */   693,  697,  493,  694,  185,  903,  392,  706,  903,  334,
 /* 15170 */   903,  903,  217,  903,  426,  413,   94,  903,  903,   93,
 /* 15180 */   903,  903,  141,  903,   89,  903,  144,  903,  903,   40,
 /* 15190 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15200 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15210 */   903,  903,  903,  706,  903,  903,  903,  903,  903,  903,
 /* 15220 */   903,  903,   94,  903,  903,   93,  903,  903,  141,  903,
 /* 15230 */    89,  903,  144,  903,  903,   40,  903,  903,  903,  903,
 /* 15240 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15250 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15260 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15270 */   903,  101,  903,  102,  903,  903,  903,  319,  320,  672,
 /* 15280 */    87,   91,  120,   92,   88,  331,  903,  903,  330,  423,
 /* 15290 */   403,  406,  903,  903,  903,  903,  903,  692,  693,  697,
 /* 15300 */   493,  694,  185,  903,  392,  903,  903,  334,  903,  903,
 /* 15310 */   217,  903,  426,  413,  903,  903,  903,  101,  903,  102,
 /* 15320 */   903,  903,  903,  319,  320,  668,   87,   91,  120,   92,
 /* 15330 */    88,  331,  903,  903,  330,  423,  403,  406,  903,  903,
 /* 15340 */   903,  903,  903,  692,  693,  697,  493,  694,  185,  903,
 /* 15350 */   392,  706,  903,  334,  903,  903,  217,  903,  426,  413,
 /* 15360 */    94,  903,  903,   93,  903,  903,  141,  903,   89,  903,
 /* 15370 */   144,  903,  903,   40,  903,  903,  903,  903,  903,  903,
 /* 15380 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15390 */   903,  903,  903,  903,  903,  903,  903,  706,  903,  903,
 /* 15400 */   903,  903,  903,  903,  903,  903,   94,  903,  903,   93,
 /* 15410 */   903,  903,  141,  903,   89,  903,  144,  903,  903,   40,
 /* 15420 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15430 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15440 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15450 */   903,  903,  903,  903,  903,  101,  903,  102,  903,  903,
 /* 15460 */   903,  319,  320,  669,   87,   91,  120,   92,   88,  331,
 /* 15470 */   903,  903,  330,  423,  403,  406,  903,  903,  903,  903,
 /* 15480 */   903,  692,  693,  697,  493,  694,  185,  903,  392,  903,
 /* 15490 */   903,  334,  903,  903,  217,  903,  426,  413,  903,  903,
 /* 15500 */   903,  101,  903,  102,  903,  903,  903,  319,  320,  701,
 /* 15510 */    87,   91,  120,   92,   88,  331,  903,  903,  330,  423,
 /* 15520 */   403,  406,  903,  903,  903,  903,  903,  692,  693,  697,
 /* 15530 */   493,  694,  185,  903,  392,  706,  903,  903,  903,  903,
 /* 15540 */   217,  903,  426,  413,   94,  760,  903,   93,  903,  903,
 /* 15550 */   141,  903,   89,  903,  144,  903,  903,   40,  903,  903,
 /* 15560 */   903,  903,  160,  903,  903,  903,  903,  903,  691,  903,
 /* 15570 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15580 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15590 */   903,  903,  903,  415,  411,  903,  903,  903,  136,  903,
 /* 15600 */   105,  137,  903,  903,  163,  903,  903,  903,  170,  903,
 /* 15610 */   903,  903,  903,  903,  720,  903,  903,  903,  903,  903,
 /* 15620 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15630 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  101,
 /* 15640 */   903,  102,  903,  903,  903,  319,  320,  702,   87,   91,
 /* 15650 */   120,   92,   88,  331,  903,  903,  330,  423,  403,  406,
 /* 15660 */   903,  903,  903,  903,  903,  692,  693,  697,  493,  694,
 /* 15670 */   185,  903,  392,  903,  903,  903,  903,  903,  217,  903,
 /* 15680 */   426,  413,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15690 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15700 */   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
 /* 15710 */   903,  903,  903,  903,  903,  903,  903,  762,  769,  903,
 /* 15720 */   903,  903,  903,  903,  903,  903,  903,  632,  690,  689,
 /* 15730 */   903,  903,  217,  903,  426,  413,  409,  626,  619,  618,
 /* 15740 */   903,  903,  903,  617,  616,  620,  152,  623,  132,  133,
 /* 15750 */   660,  379,
    );
    static public $yy_lookahead = array(
 /*     0 */   127,  128,  129,  130,  131,   33,   34,  134,  135,   37,
 /*    10 */   137,  138,  139,  143,  141,  204,  205,  206,  207,  135,
 /*    20 */   275,  148,  277,  150,  151,  152,  153,  154,  155,  130,
 /*    30 */   130,  158,  159,  160,  161,  162,  163,  150,  151,  166,
 /*    40 */   167,  168,  157,  126,  180,  158,  159,  174,  175,  176,
 /*    50 */     9,  178,  330,  331,  190,   31,  183,  335,  185,  186,
 /*    60 */   196,   37,  189,  126,  191,  192,  193,  197,  195,  196,
 /*    70 */   185,  186,  173,  200,   33,   34,  157,  135,   64,   65,
 /*    80 */    39,  208,  209,  210,  211,  212,  213,  214,  215,  189,
 /*    90 */   217,  218,  219,  220,  221,   35,  223,  156,  189,   39,
 /*   100 */   191,  228,  229,  194,  185,  186,  242,  234,  235,  134,
 /*   110 */   237,  238,  239,  240,  241,  231,  232,  233,  245,  246,
 /*   120 */   247,  248,  249,  250,  251,  252,  253,   36,  331,  332,
 /*   130 */    36,  190,  335,  336,  143,  146,   45,  196,  265,   45,
 /*   140 */   156,  268,  130,   49,  271,   54,   55,   56,   57,  276,
 /*   150 */   109,  278,  279,  280,  122,  282,  181,  284,  285,  286,
 /*   160 */   287,  288,  289,  290,  291,  292,  126,  130,  295,  296,
 /*   170 */   297,  298,  230,  231,  232,  233,  186,  304,  305,  306,
 /*   180 */   307,  308,  309,  134,  311,  312,  313,  314,  197,  177,
 /*   190 */   317,  179,  319,  320,  182,  183,  184,  185,  186,  187,
 /*   200 */   188,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*   210 */   127,  128,  129,  130,  131,  126,  316,  134,  318,  189,
 /*   220 */   137,  138,  139,  156,  141,  316,  189,  318,  185,  186,
 /*   230 */   181,  148,   19,  150,  151,  152,  153,  154,  155,  183,
 /*   240 */   197,  158,  159,  254,  255,  256,  257,  258,  259,  260,
 /*   250 */   261,  262,  263,  264,   45,  266,  315,  174,  175,  176,
 /*   260 */    47,  178,   23,   24,   25,   26,  183,  326,  185,  186,
 /*   270 */   134,  281,  189,  283,  191,  192,  193,    9,  195,  196,
 /*   280 */   183,  156,  157,  200,  201,  202,  203,  204,  205,  206,
 /*   290 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  315,
 /*   300 */   217,  218,  219,  220,  221,   30,  223,  171,   33,   34,
 /*   310 */   326,  228,  229,  134,  302,  303,   13,  234,  235,  156,
 /*   320 */   237,  238,  239,  240,  241,  185,  186,   33,  245,  246,
 /*   330 */   247,  248,  249,  250,  251,  252,  253,  197,   35,   36,
 /*   340 */     4,   38,   39,  190,   41,   42,   43,   44,  265,  196,
 /*   350 */   320,  268,  130,  316,  271,  318,   62,   63,  156,  276,
 /*   360 */   181,  278,  279,  280,  267,  282,  269,  284,  285,  286,
 /*   370 */   287,  288,  289,  290,  291,  292,  126,  310,  295,  296,
 /*   380 */   297,  298,  315,    7,  130,    9,   10,  304,  305,  306,
 /*   390 */   307,  308,  309,  326,  311,  312,  313,  314,  273,  274,
 /*   400 */   317,   35,  319,  320,   68,   39,  184,  185,  186,  187,
 /*   410 */   188,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*   420 */   127,  128,  129,  130,  131,  130,   60,  134,  135,  134,
 /*   430 */   137,  138,  139,  179,  141,  130,   30,  183,   32,  185,
 /*   440 */   186,  148,   32,  150,  151,  152,  153,  154,  155,   32,
 /*   450 */   134,  158,  159,   36,  161,  162,  163,   40,   13,  166,
 /*   460 */   167,  168,  132,  133,  134,  130,  171,  174,  175,  176,
 /*   470 */    31,  178,   66,   67,  108,  130,  183,   32,  185,  186,
 /*   480 */   135,   36,  189,  143,  191,  192,  193,   48,  195,  196,
 /*   490 */   185,  186,  122,  200,  130,  331,  332,  181,  244,  335,
 /*   500 */   336,  208,  209,  210,  211,  212,  213,  214,  215,  130,
 /*   510 */   217,  218,  219,  220,  221,   91,  223,  172,  173,  126,
 /*   520 */   196,  228,  229,  189,  189,  303,  191,  234,  235,  194,
 /*   530 */   237,  238,  239,  240,  241,  111,  112,  197,  245,  246,
 /*   540 */   247,  248,  249,  250,  251,  252,  253,  135,  184,  185,
 /*   550 */   186,  187,  188,  299,   19,  143,  302,  303,  265,  146,
 /*   560 */   180,  268,  164,  165,  271,  186,  242,  169,  170,  276,
 /*   570 */   190,  278,  279,  280,   39,  282,  196,  284,  285,  286,
 /*   580 */   287,  288,  289,  290,  291,  292,   33,   34,  295,  296,
 /*   590 */   297,  298,   39,  180,  116,  117,  118,  304,  305,  306,
 /*   600 */   307,  308,  309,  190,  311,  312,  313,  314,  303,  196,
 /*   610 */   317,  156,  319,  320,  290,  291,  134,  293,  294,   13,
 /*   620 */    13,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*   630 */   124,  125,  126,  127,  128,  129,  130,  131,   32,   32,
 /*   640 */   134,  130,   36,  137,  138,  139,   40,  141,   13,  130,
 /*   650 */   316,  316,  318,  318,  148,  242,  150,  151,  152,  153,
 /*   660 */   154,  155,  109,  181,  158,  159,  222,  303,  224,  225,
 /*   670 */    35,   36,    5,   38,   39,    8,   41,   42,   43,   44,
 /*   680 */   174,  175,  176,  126,  178,   50,   51,   52,   53,  183,
 /*   690 */   190,  185,  186,  126,  130,  189,  196,  191,  192,  193,
 /*   700 */   189,  195,  196,  134,  185,  186,  200,    9,  156,  140,
 /*   710 */   270,  130,  272,   46,  208,  209,  210,  211,  212,  213,
 /*   720 */   214,  215,  143,  217,  218,  219,  220,  221,  156,  223,
 /*   730 */   156,   33,   34,  190,  228,  229,  157,   39,  156,  196,
 /*   740 */   234,  235,  190,  237,  238,  239,  240,  241,  196,  185,
 /*   750 */   186,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*   760 */   179,  278,  190,  280,  183,  310,  185,  186,  196,  130,
 /*   770 */   315,  265,   58,   59,  268,  130,   23,  271,   25,  157,
 /*   780 */    27,  326,  276,  190,  278,  279,  280,  242,  282,  196,
 /*   790 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  126,
 /*   800 */    33,  295,  296,  297,  298,  130,   39,  185,  186,   48,
 /*   810 */   304,  305,  306,  307,  308,  309,  134,  311,  312,  313,
 /*   820 */   314,  126,  303,  317,   19,  319,  320,  134,  189,  184,
 /*   830 */   185,  186,  187,  188,  328,  329,  330,  331,  332,  333,
 /*   840 */   334,  335,  336,  125,   39,  127,  128,  129,  130,  131,
 /*   850 */    89,   90,  134,  135,  126,  137,  138,  139,  243,  141,
 /*   860 */   185,  186,  310,  181,  156,  134,  148,  315,  150,  151,
 /*   870 */   152,  153,  154,  155,  181,  126,  158,  159,  326,  264,
 /*   880 */   299,  266,  310,  302,  303,   33,   34,  315,  164,  315,
 /*   890 */   130,   39,  174,  175,  176,  157,  178,  315,  326,  126,
 /*   900 */   326,  183,  126,  185,  186,   19,  327,  189,  326,  191,
 /*   910 */   192,  193,  181,  195,  196,   13,   33,   34,  200,   35,
 /*   920 */   224,  225,   39,  185,  186,   39,  208,  209,  210,  211,
 /*   930 */   212,  213,  214,  215,   32,  217,  218,  219,  220,  221,
 /*   940 */    19,  223,   40,   23,   60,   25,  228,  229,  303,  189,
 /*   950 */   105,  106,  234,  235,   32,  237,  238,  239,  240,  241,
 /*   960 */    39,  130,   40,  245,  246,  247,  248,  249,  250,  251,
 /*   970 */   252,  253,   39,   19,   13,   36,   30,   31,  303,   39,
 /*   980 */   146,   48,   40,  265,   45,  143,  268,   47,  126,  271,
 /*   990 */   126,  331,  108,   32,  276,  335,  278,  279,  280,  157,
 /*  1000 */   282,   47,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  1010 */   292,   33,   34,  295,  296,  297,  298,  186,  130,  134,
 /*  1020 */   185,  186,  304,  305,  306,  307,  308,  309,   19,  311,
 /*  1030 */   312,  313,  314,   91,  310,  317,  135,  319,  320,   45,
 /*  1040 */   130,  331,  317,   49,  143,  335,  328,  329,  330,  331,
 /*  1050 */   332,  333,  334,  335,  336,  125,   47,  127,  128,  129,
 /*  1060 */   130,  131,  126,   13,  134,  135,  181,  137,  138,  139,
 /*  1070 */    33,  141,  183,  186,  126,  317,  242,  189,  148,  126,
 /*  1080 */   150,  151,  152,  153,  154,  155,  134,  317,  158,  159,
 /*  1090 */   126,  126,  140,  126,  185,  126,  126,  186,  126,  189,
 /*  1100 */   126,  126,   25,  335,  174,  175,  176,  126,  178,  146,
 /*  1110 */   216,  126,   19,  183,  130,  185,  186,  126,   39,  189,
 /*  1120 */    49,  191,  192,  193,  126,  195,  196,  126,  126,  130,
 /*  1130 */   200,  335,  126,  126,  335,   36,  126,  196,  208,  209,
 /*  1140 */   210,  211,  212,  213,  214,  215,  126,  217,  218,  219,
 /*  1150 */   220,  221,  197,  223,  126,   37,  335,  335,  228,  229,
 /*  1160 */   126,  126,  126,   34,  234,  235,   91,  237,  238,  239,
 /*  1170 */   240,  241,  164,  126,  126,  245,  246,  247,  248,  249,
 /*  1180 */   250,  251,  252,  253,   19,   19,   13,   19,   19,   19,
 /*  1190 */    19,   13,   42,   19,   19,  265,   19,  134,  268,   19,
 /*  1200 */    19,  271,  126,   47,  126,  143,  276,  126,  278,  279,
 /*  1210 */   280,  126,  282,  126,  284,  285,  286,  287,  288,  289,
 /*  1220 */   290,  291,  292,  126,  126,  295,  296,  297,  298,  126,
 /*  1230 */   126,  126,  126,  126,  304,  305,  306,  307,  308,  309,
 /*  1240 */   197,  311,  312,  313,  314,  196,  126,  317,  126,  319,
 /*  1250 */   320,  126,   31,  126,  126,  134,  126,  126,  328,  329,
 /*  1260 */   330,  331,  332,  333,  334,  335,  336,  125,   46,  127,
 /*  1270 */   128,  129,  130,  131,  126,  126,  134,  197,  136,  137,
 /*  1280 */   138,  139,  243,  141,  126,  126,  197,  164,  126,  126,
 /*  1290 */   148,  134,  150,  151,  152,  153,  154,  155,  126,  197,
 /*  1300 */   158,  159,  126,   35,   94,  126,  197,  146,  126,  126,
 /*  1310 */   126,  126,  126,  126,  126,    2,  174,  175,  176,  130,
 /*  1320 */   178,  130,  130,  130,  130,  183,  126,  185,  186,  126,
 /*  1330 */   126,  189,  186,  191,  192,  193,  107,  195,  196,  126,
 /*  1340 */   126,  126,  200,  126,  126,  126,  126,  196,  201,  126,
 /*  1350 */   208,  209,  210,  211,  212,  213,  214,  215,  126,  217,
 /*  1360 */   218,  219,  220,  221,  126,  223,  126,  126,  126,  126,
 /*  1370 */   228,  229,  126,  164,  130,  130,  234,  235,  126,  237,
 /*  1380 */   238,  239,  240,  241,  126,  108,  126,  245,  246,  247,
 /*  1390 */   248,  249,  250,  251,  252,  253,  197,  126,  126,  194,
 /*  1400 */   317,  126,  126,  197,  156,  126,  216,  265,  196,  126,
 /*  1410 */   268,  216,  126,  271,   40,  126,  126,  126,  276,  126,
 /*  1420 */   278,  279,  280,  310,  282,  126,  284,  285,  286,  287,
 /*  1430 */   288,  289,  290,  291,  292,  126,  126,  295,  296,  297,
 /*  1440 */   298,  126,  126,  317,  126,  126,  304,  305,  306,  307,
 /*  1450 */   308,  309,  126,  311,  312,  313,  314,  196,  196,  317,
 /*  1460 */   126,  319,  320,  126,  126,  126,  126,   48,  126,  243,
 /*  1470 */   328,  329,  330,  331,  332,  333,  334,  335,  336,  125,
 /*  1480 */   130,  127,  128,  129,  130,  131,  135,  156,  134,  135,
 /*  1490 */   130,  137,  138,  139,  126,  141,  126,  196,  143,  236,
 /*  1500 */   135,  126,  148,  126,  150,  151,  152,  153,  154,  155,
 /*  1510 */   100,  126,  158,  159,  126,  126,  130,  212,  196,  337,
 /*  1520 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  175,
 /*  1530 */   176,  335,  178,  337,  337,  337,  337,  183,  337,  185,
 /*  1540 */   186,  337,  337,  189,  337,  191,  192,  193,  337,  195,
 /*  1550 */   196,  337,  337,  337,  200,  337,  337,  337,  337,  337,
 /*  1560 */   337,  337,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  1570 */   337,  217,  218,  219,  220,  221,  337,  223,  337,  337,
 /*  1580 */   337,  337,  228,  229,  337,  337,  337,  337,  234,  235,
 /*  1590 */   337,  237,  238,  239,  240,  241,  337,  337,  337,  245,
 /*  1600 */   246,  247,  248,  249,  250,  251,  252,  253,  337,  337,
 /*  1610 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /*  1620 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /*  1630 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /*  1640 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /*  1650 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /*  1660 */   306,  307,  308,  309,  337,  311,  312,  313,  314,  337,
 /*  1670 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /*  1680 */   337,  337,  328,  329,  330,  331,  332,  333,  334,  335,
 /*  1690 */   336,  125,  337,  127,  128,  129,  130,  131,  337,  337,
 /*  1700 */   134,  337,  337,  137,  138,  139,  337,  141,  337,  337,
 /*  1710 */   337,  337,  337,  337,  148,  337,  150,  151,  152,  153,
 /*  1720 */   154,  155,  337,  337,  158,  159,  337,  337,  337,  337,
 /*  1730 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  1740 */   174,  175,  176,  337,  178,  337,  337,  337,  337,  183,
 /*  1750 */   337,  185,  186,  337,  337,  189,  337,  191,  192,  193,
 /*  1760 */   337,  195,  196,  337,  337,  337,  200,  337,  337,  337,
 /*  1770 */   337,  337,  337,  337,  208,  209,  210,  211,  212,  213,
 /*  1780 */   214,  215,  337,  217,  218,  219,  220,  221,  337,  223,
 /*  1790 */   337,  337,  337,  337,  228,  229,  337,  337,  337,  337,
 /*  1800 */   234,  235,  337,  237,  238,  239,  240,  241,  337,  337,
 /*  1810 */   337,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  1820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  1830 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  1840 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  1850 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  1860 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  1870 */   304,  305,  306,  307,  308,  309,  337,  311,  312,  313,
 /*  1880 */   314,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  1890 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  1900 */   334,  335,  336,  125,  337,  127,  128,  129,  130,  131,
 /*  1910 */   337,  337,  134,  337,  337,  137,  138,  139,  337,  141,
 /*  1920 */   337,  337,  337,  337,  337,  337,  148,  337,  150,  151,
 /*  1930 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  1940 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  1950 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  1960 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  1970 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  1980 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  1990 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  2000 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  2010 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  2020 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  2030 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2040 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  2050 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  2060 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  2070 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  2080 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  2090 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  2100 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  2110 */   332,  333,  334,  335,  336,  127,  128,  129,  130,  131,
 /*  2120 */   337,  337,  134,  135,  337,  137,  138,  139,  337,  141,
 /*  2130 */   337,  337,  337,  337,  337,  337,  148,  337,  150,  151,
 /*  2140 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  2150 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2160 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  2170 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  2180 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  2190 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  2200 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  2210 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  2220 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  2230 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  2240 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2250 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  2260 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  2270 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  2280 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  2290 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  2300 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  2310 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  2320 */   332,  333,  334,  335,  336,  125,  337,  127,  128,  129,
 /*  2330 */   130,  131,  337,  337,  134,  337,  337,  137,  138,  139,
 /*  2340 */   337,  141,  337,  337,  337,  337,  337,  337,  148,  337,
 /*  2350 */   150,  151,  152,  153,  154,  155,  337,  337,  158,  159,
 /*  2360 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2370 */   337,  337,  337,  337,  174,  175,  176,  337,  178,  337,
 /*  2380 */   337,  337,  337,  183,  337,  185,  186,  337,  337,  189,
 /*  2390 */   337,  191,  192,  193,  337,  195,  196,  337,  337,  337,
 /*  2400 */   200,  337,  337,  337,  337,  337,  337,  337,  208,  209,
 /*  2410 */   210,  211,  212,  213,  214,  215,  337,  217,  218,  219,
 /*  2420 */   220,  221,  337,  223,  337,  337,  337,  337,  228,  229,
 /*  2430 */   337,  337,  337,  337,  234,  235,  337,  237,  238,  239,
 /*  2440 */   240,  241,  337,  337,  337,  245,  246,  247,  248,  249,
 /*  2450 */   250,  251,  252,  253,  337,  337,  337,  337,  337,  337,
 /*  2460 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /*  2470 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /*  2480 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /*  2490 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /*  2500 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /*  2510 */   337,  311,  312,  313,  314,  337,  337,  317,  337,  319,
 /*  2520 */   320,  337,  337,  337,  337,  337,  337,  337,  328,  329,
 /*  2530 */   330,  331,  332,  333,  334,  335,  336,  125,  337,  127,
 /*  2540 */   128,  129,  130,  131,  337,  337,  134,  337,  337,  137,
 /*  2550 */   138,  139,  337,  141,  337,  337,  337,  337,  337,  337,
 /*  2560 */   148,  337,  150,  151,  152,  153,  154,  155,  337,  337,
 /*  2570 */   158,  159,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  2580 */   337,  337,  337,  337,  337,  337,  174,  175,  176,  337,
 /*  2590 */   178,  337,  337,  337,  337,  183,  337,  185,  186,  337,
 /*  2600 */   337,  189,  337,  191,  192,  193,  337,  195,  196,  337,
 /*  2610 */   337,  337,  200,  337,  337,  337,  337,  337,  337,  337,
 /*  2620 */   208,  209,  210,  211,  212,  213,  214,  215,  337,  217,
 /*  2630 */   218,  219,  220,  221,  337,  223,  337,  337,  337,  337,
 /*  2640 */   228,  229,  337,  337,  337,  337,  234,  235,  337,  237,
 /*  2650 */   238,  239,  240,  241,  337,  337,  337,  245,  246,  247,
 /*  2660 */   248,  249,  250,  251,  252,  253,  337,  337,  337,  337,
 /*  2670 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /*  2680 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /*  2690 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /*  2700 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /*  2710 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /*  2720 */   308,  309,  337,  311,  312,  313,  314,  337,  337,  317,
 /*  2730 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /*  2740 */   328,  329,  330,  331,  332,  333,  334,  335,  336,  125,
 /*  2750 */   337,  127,  128,  129,  130,  131,  337,  337,  134,  337,
 /*  2760 */   337,  137,  138,  139,  337,  141,  337,  337,  337,  337,
 /*  2770 */   337,  337,  148,  337,  150,  151,  152,  153,  154,  155,
 /*  2780 */   337,  337,  158,  159,  337,  337,  337,  337,  337,  337,
 /*  2790 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  175,
 /*  2800 */   176,  337,  178,  337,  337,  337,  337,  183,  337,  185,
 /*  2810 */   186,  337,  337,  189,  337,  191,  192,  193,  337,  195,
 /*  2820 */   196,  337,  337,  337,  200,  337,  337,  337,  337,  337,
 /*  2830 */   337,  337,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  2840 */   337,  217,  218,  219,  220,  221,  337,  223,  337,  337,
 /*  2850 */   337,  337,  228,  229,  337,  337,  337,  337,  234,  235,
 /*  2860 */   337,  237,  238,  239,  240,  241,  337,  337,  337,  245,
 /*  2870 */   246,  247,  248,  249,  250,  251,  252,  253,  337,  337,
 /*  2880 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /*  2890 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /*  2900 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /*  2910 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /*  2920 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /*  2930 */   306,  307,  308,  309,  337,  311,  312,  313,  314,  337,
 /*  2940 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /*  2950 */   337,  337,  328,  329,  330,  331,  332,  333,  334,  335,
 /*  2960 */   336,  125,  337,  127,  128,  129,  130,  131,  337,  337,
 /*  2970 */   134,  337,  337,  137,  138,  139,  337,  141,  337,  337,
 /*  2980 */   337,  337,  337,  337,  148,  337,  150,  151,  152,  153,
 /*  2990 */   154,  155,  337,  337,  158,  159,  337,  337,  337,  337,
 /*  3000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3010 */   174,  175,  176,  337,  178,  337,  337,  337,  337,  183,
 /*  3020 */   337,  185,  186,  337,  337,  189,  337,  191,  192,  193,
 /*  3030 */   337,  195,  196,  337,  337,  337,  200,  337,  337,  337,
 /*  3040 */   337,  337,  337,  337,  208,  209,  210,  211,  212,  213,
 /*  3050 */   214,  215,  337,  217,  218,  219,  220,  221,  337,  223,
 /*  3060 */   337,  337,  337,  337,  228,  229,  337,  337,  337,  337,
 /*  3070 */   234,  235,  337,  237,  238,  239,  240,  241,  337,  337,
 /*  3080 */   337,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  3090 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3100 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  3110 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  3120 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  3130 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  3140 */   304,  305,  306,  307,  308,  309,  337,  311,  312,  313,
 /*  3150 */   314,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  3160 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  3170 */   334,  335,  336,  127,  128,  129,  130,  131,  337,  337,
 /*  3180 */   134,  135,  337,  137,  138,  139,  337,  141,  337,  337,
 /*  3190 */   337,  337,  337,  337,  148,  337,  150,  151,  152,  153,
 /*  3200 */   154,  155,  337,  337,  158,  159,  337,  337,  337,  337,
 /*  3210 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3220 */   174,  175,  176,  337,  178,  337,  337,  337,  337,  183,
 /*  3230 */   337,  185,  186,  337,  337,  189,  337,  191,  192,  193,
 /*  3240 */   337,  195,  196,  337,  337,  337,  200,  337,  337,  337,
 /*  3250 */   337,  337,  337,  337,  208,  209,  210,  211,  212,  213,
 /*  3260 */   214,  215,  337,  217,  218,  219,  220,  221,  337,  223,
 /*  3270 */   337,  337,  337,  337,  228,  229,  337,  337,  337,  337,
 /*  3280 */   234,  235,  337,  237,  238,  239,  240,  241,  337,  337,
 /*  3290 */   337,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  3300 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3310 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  3320 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  3330 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  3340 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  3350 */   304,  305,  306,  307,  308,  309,  337,  311,  312,  313,
 /*  3360 */   314,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  3370 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  3380 */   334,  335,  336,  125,  337,  127,  128,  129,  130,  131,
 /*  3390 */   337,  337,  134,  337,  337,  137,  138,  139,  337,  141,
 /*  3400 */   337,  337,  337,  337,  337,  337,  148,  337,  150,  151,
 /*  3410 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  3420 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3430 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  3440 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  3450 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  3460 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  3470 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  3480 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  3490 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  3500 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  3510 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3520 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  3530 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  3540 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  3550 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  3560 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  3570 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  3580 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  3590 */   332,  333,  334,  335,  336,  127,  128,  129,  130,  131,
 /*  3600 */   337,  337,  134,  135,  337,  137,  138,  139,  337,  141,
 /*  3610 */   337,  337,  337,  337,  337,  337,  148,  337,  150,  151,
 /*  3620 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  3630 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3640 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  3650 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  3660 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  3670 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  3680 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  3690 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  3700 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  3710 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  3720 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3730 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  3740 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  3750 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  3760 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  3770 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  3780 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  3790 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  3800 */   332,  333,  334,  335,  336,  127,  128,  129,  130,  131,
 /*  3810 */   337,  337,  134,  135,  337,  137,  138,  139,  337,  141,
 /*  3820 */   337,  337,  337,  337,  337,  337,  148,  337,  150,  151,
 /*  3830 */   152,  153,  154,  155,  337,  337,  158,  159,  337,  337,
 /*  3840 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  3850 */   337,  337,  174,  175,  176,  337,  178,  337,  337,  337,
 /*  3860 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  3870 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  3880 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  3890 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  3900 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  3910 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  3920 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  3930 */   252,  253,  337,  337,   21,   22,   23,   24,   25,   26,
 /*  3940 */    27,   28,   29,  265,  337,  337,  268,  337,  337,  271,
 /*  3950 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  3960 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  3970 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  3980 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  3990 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  4000 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  4010 */   332,  333,  334,  335,  336,  127,  128,  129,  130,  131,
 /*  4020 */   337,  337,  134,  110,  337,  137,  138,  139,  337,  141,
 /*  4030 */   117,  118,  337,  120,  337,  337,  148,  337,  150,  151,
 /*  4040 */   152,  153,  154,  155,  337,   13,  158,  159,  337,  337,
 /*  4050 */   337,  337,  337,   21,   22,   23,   24,   25,   26,   27,
 /*  4060 */    28,   29,  174,  175,  176,   33,  178,   35,  337,  337,
 /*  4070 */   337,  183,  337,  185,  186,  337,  337,  189,  337,  191,
 /*  4080 */   192,  193,  337,  195,  196,  337,  337,  337,  200,  337,
 /*  4090 */   337,  337,  337,  337,  337,  337,  208,  209,  210,  211,
 /*  4100 */   212,  213,  214,  215,  337,  217,  218,  219,  220,  221,
 /*  4110 */   337,  223,  337,  337,  337,  337,  228,  229,  337,  337,
 /*  4120 */   337,  337,  234,  235,  337,  237,  238,  239,  240,  241,
 /*  4130 */   337,  337,  337,  245,  246,  247,  248,  249,  250,  251,
 /*  4140 */   252,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4150 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  4160 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  4170 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  4180 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  4190 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  4200 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  337,
 /*  4210 */   337,  337,  337,  337,  337,  337,  328,  329,  330,  331,
 /*  4220 */   332,  333,  334,  335,  336,  128,  129,  130,  131,  337,
 /*  4230 */     5,  134,  337,    8,  137,  138,  139,  337,  141,  337,
 /*  4240 */   337,  337,  337,  337,  337,  148,  337,  150,  151,  337,
 /*  4250 */   153,  154,  155,  337,  337,  158,  159,  337,  337,  337,
 /*  4260 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4270 */   337,  174,  337,  176,   49,  178,  337,  337,  337,  337,
 /*  4280 */   183,  337,  185,  186,  337,  337,  189,  337,  191,  337,
 /*  4290 */   193,  337,  337,  196,   69,   70,   71,   72,   73,   74,
 /*  4300 */    75,   76,   77,   78,  337,  337,  337,  337,  211,  212,
 /*  4310 */   213,  214,  215,  337,  217,  218,  219,  220,  221,  337,
 /*  4320 */   223,  337,  337,  337,  337,  228,  229,  337,  337,  337,
 /*  4330 */   337,  234,  235,  337,  237,  238,  239,  240,  241,  337,
 /*  4340 */   337,  337,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  4350 */   253,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4360 */   337,  337,  265,  337,  337,  268,  337,  337,  271,  337,
 /*  4370 */   337,  337,  337,  276,  337,  278,  279,  280,  337,  282,
 /*  4380 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /*  4390 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /*  4400 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  312,
 /*  4410 */   313,  314,  337,  337,  317,  337,  319,  320,  337,  337,
 /*  4420 */   337,  337,  337,  337,  337,  328,  329,  330,  331,  332,
 /*  4430 */   333,  334,  335,  336,  337,  337,  337,  128,  129,  130,
 /*  4440 */   131,  337,  337,  134,  337,  337,  137,  138,  139,  337,
 /*  4450 */   141,  337,  337,  337,  337,  337,  337,  148,  337,  150,
 /*  4460 */   151,  337,  153,  154,  155,  337,  337,  158,  159,  337,
 /*  4470 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4480 */   337,  337,  337,  174,  337,  176,  337,  178,  337,  337,
 /*  4490 */   337,  337,  183,  337,  185,  186,  337,  337,  189,  337,
 /*  4500 */   191,  337,  193,  337,  337,  196,  337,  337,  337,  337,
 /*  4510 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4520 */   211,  212,  213,  214,  215,  337,  217,  218,  219,  220,
 /*  4530 */   221,  337,  223,  337,  337,  337,  337,  228,  229,  337,
 /*  4540 */   337,  337,  337,  234,  235,  337,  237,  238,  239,  240,
 /*  4550 */   241,  337,  337,  337,  245,  246,  247,  248,  249,  250,
 /*  4560 */   251,  252,  253,  337,  337,  337,  337,  337,  337,  337,
 /*  4570 */   337,  337,  337,  337,  265,  337,  337,  268,  337,  337,
 /*  4580 */   271,  337,  337,  337,  337,  276,  337,  278,  279,  280,
 /*  4590 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /*  4600 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /*  4610 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /*  4620 */   311,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  4630 */   337,  337,  337,  337,  337,  337,  337,  328,  329,  330,
 /*  4640 */   331,  332,  333,  334,  335,  336,  337,  337,  337,  128,
 /*  4650 */   129,  130,  131,  337,  337,  134,  337,  337,  137,  138,
 /*  4660 */   139,  337,  141,  337,  337,  337,  337,  337,  337,  148,
 /*  4670 */   337,  150,  151,  337,  153,  154,  155,  337,  337,  158,
 /*  4680 */   159,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4690 */   337,  337,  337,  337,  337,  174,  337,  176,  337,  178,
 /*  4700 */   337,  337,  337,  337,  183,  337,  185,  186,  337,  337,
 /*  4710 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /*  4720 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4730 */   337,  337,  211,  212,  213,  214,  215,  337,  217,  218,
 /*  4740 */   219,  220,  221,  337,  223,  337,  337,  337,  337,  228,
 /*  4750 */   229,  337,  337,  337,  337,  234,  235,  337,  237,  238,
 /*  4760 */   239,  240,  241,  337,  337,  337,  245,  246,  247,  248,
 /*  4770 */   249,  250,  251,  252,  253,  337,  337,  337,  337,  337,
 /*  4780 */   337,  337,  337,  337,  337,  337,  265,  337,  337,  268,
 /*  4790 */   337,  337,  271,  337,  337,  337,  337,  276,  337,  278,
 /*  4800 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  4810 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  4820 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  4830 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  4840 */   319,  320,  337,  337,  337,  337,  337,  337,  337,  328,
 /*  4850 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /*  4860 */   337,  128,  129,  130,  131,  337,  337,  134,  337,  337,
 /*  4870 */   137,  138,  139,  337,  141,  337,  337,  337,  337,  337,
 /*  4880 */   337,  148,  337,  150,  151,  337,  153,  154,  155,  337,
 /*  4890 */   337,  158,  159,  337,  337,  337,  337,  337,  337,  337,
 /*  4900 */   337,  337,  337,  337,  337,  337,  337,  174,  337,  176,
 /*  4910 */   337,  178,  337,  337,  337,  337,  183,  337,  185,  186,
 /*  4920 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /*  4930 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  4940 */   337,  337,  337,  337,  211,  212,  213,  214,  215,  337,
 /*  4950 */   217,  218,  219,  220,  221,  337,  223,  337,  337,  337,
 /*  4960 */   337,  228,  229,  337,  337,  337,  337,  234,  235,  337,
 /*  4970 */   237,  238,  239,  240,  241,  337,  337,  337,  245,  246,
 /*  4980 */   247,  248,  249,  250,  251,  252,  253,  337,  337,  337,
 /*  4990 */   337,  337,  337,  337,  337,  337,  337,  337,  265,  337,
 /*  5000 */   337,  268,  337,  337,  271,  337,  337,  337,  337,  276,
 /*  5010 */   337,  278,  279,  280,  337,  282,  337,  284,  285,  286,
 /*  5020 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /*  5030 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /*  5040 */   307,  308,  309,  337,  311,  312,  313,  314,  337,  337,
 /*  5050 */   317,  337,  319,  320,  337,  337,  337,  337,  337,  337,
 /*  5060 */   337,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*  5070 */   337,  337,  337,  128,  129,  130,  131,  337,  337,  134,
 /*  5080 */   337,  337,  137,  138,  139,  337,  141,  337,  337,  337,
 /*  5090 */   337,  337,  337,  148,  337,  150,  151,  337,  153,  154,
 /*  5100 */   155,  337,  337,  158,  159,  142,  337,  144,  145,  337,
 /*  5110 */   337,  337,  149,  150,  151,  152,  153,  337,  337,  174,
 /*  5120 */   157,  176,  337,  178,  337,  337,  337,  337,  183,  337,
 /*  5130 */   185,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /*  5140 */   337,  196,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  5150 */   337,  337,  337,  337,  337,  337,  211,  212,  213,  214,
 /*  5160 */   215,  337,  217,  218,  219,  220,  221,  337,  223,  337,
 /*  5170 */   337,  337,  337,  228,  229,  337,  337,  337,  337,  234,
 /*  5180 */   235,  337,  237,  238,  239,  240,  241,  337,  337,  337,
 /*  5190 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  337,
 /*  5200 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  5210 */   265,  337,  337,  268,  337,  337,  271,  337,  337,  337,
 /*  5220 */   337,  276,  337,  278,  279,  280,  337,  282,  337,  284,
 /*  5230 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  337,
 /*  5240 */   295,  296,  297,  298,  337,  337,  337,  337,  337,  304,
 /*  5250 */   305,  306,  307,  308,  309,  337,  311,  312,  313,  314,
 /*  5260 */   337,  337,  317,  337,  319,  320,  337,  130,  337,  337,
 /*  5270 */   337,  337,  337,  328,  329,  330,  331,  332,  333,  334,
 /*  5280 */   335,  336,  337,  337,  337,  148,  337,  337,  337,  337,
 /*  5290 */   153,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*  5300 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  5310 */   337,  174,  337,  176,  337,  178,  150,  151,  337,  153,
 /*  5320 */   183,  337,  185,  186,  158,  159,  189,   13,  191,  337,
 /*  5330 */   193,  337,  337,  196,  337,   21,   22,   23,   24,   25,
 /*  5340 */    26,   27,   28,   29,  178,  337,  337,  337,   34,   35,
 /*  5350 */   213,  185,  215,  337,  337,  189,  337,   13,  192,  193,
 /*  5360 */   337,  195,  337,  226,  227,   21,   22,   23,   24,   25,
 /*  5370 */    26,   27,   28,   29,  337,  337,  337,  240,  241,   35,
 /*  5380 */   337,  337,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  5390 */   253,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  5400 */   337,  337,  265,  337,  337,  268,  337,  337,  271,  337,
 /*  5410 */   337,  337,  337,  276,  337,  278,  279,  280,  337,  282,
 /*  5420 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /*  5430 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /*  5440 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  312,
 /*  5450 */   313,  314,  337,  337,  317,  337,  319,  320,  337,  130,
 /*  5460 */   337,  337,  337,  337,  337,  328,  329,  330,  331,  332,
 /*  5470 */   333,  334,  335,  336,  337,  337,  337,  148,  312,  313,
 /*  5480 */   314,  337,  153,  317,  337,  319,  320,  337,  337,  337,
 /*  5490 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  5500 */   334,  335,  336,  174,    9,  176,  337,  178,   13,  337,
 /*  5510 */   337,  337,  183,  337,  185,  186,  337,  337,  189,  337,
 /*  5520 */   191,  337,  193,  337,  337,  196,  337,  337,   33,  337,
 /*  5530 */    35,   36,   37,   38,   39,  337,   41,   42,   43,   44,
 /*  5540 */   337,  337,  213,  337,  215,   50,   51,   52,   53,  337,
 /*  5550 */   337,   56,   57,   58,   59,   60,   61,  337,  337,  337,
 /*  5560 */   337,  337,  153,  337,  337,  337,  337,  337,  337,  240,
 /*  5570 */   241,  337,  337,  337,  245,  246,  247,  248,  249,  250,
 /*  5580 */   251,  252,  253,  337,  337,  337,  337,  337,  337,  337,
 /*  5590 */   337,  337,  337,  337,  265,  186,  337,  268,  189,  337,
 /*  5600 */   271,  337,  193,  337,  337,  276,  337,  278,  279,  280,
 /*  5610 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /*  5620 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /*  5630 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /*  5640 */   311,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  5650 */   337,  130,  337,  337,  337,  337,  337,  328,  329,  330,
 /*  5660 */   331,  332,  333,  334,  335,  336,  337,  337,    9,  148,
 /*  5670 */   337,  337,   13,  337,  153,  337,  337,  337,  337,  337,
 /*  5680 */    21,   22,   23,   24,   25,   26,   27,   28,   29,  337,
 /*  5690 */   337,  337,   33,   34,   35,  174,   37,  176,   39,  178,
 /*  5700 */   337,  337,  337,  337,  183,  337,  185,  186,  337,  337,
 /*  5710 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /*  5720 */   337,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  5730 */   337,  337,  337,  337,  213,  337,  215,  328,  329,  330,
 /*  5740 */   331,  332,  333,  334,  335,  336,  337,  337,  337,  337,
 /*  5750 */   337,  337,  337,  337,  153,  337,  337,  337,  337,  337,
 /*  5760 */   337,  240,  241,  337,  337,  337,  245,  246,  247,  248,
 /*  5770 */   249,  250,  251,  252,  253,  337,  337,  337,  337,  337,
 /*  5780 */   337,  337,  337,  337,  337,  337,  265,  337,  337,  268,
 /*  5790 */   189,  337,  271,  337,  193,  337,  337,  276,  337,  278,
 /*  5800 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  5810 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  5820 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  5830 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  5840 */   319,  320,  337,  130,  337,  337,  337,  337,  337,  328,
 /*  5850 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /*  5860 */     9,  148,  337,  337,   13,  337,  153,  337,  337,  337,
 /*  5870 */   337,  337,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  5880 */    29,  337,  337,  337,   33,   34,   35,  174,  337,  176,
 /*  5890 */    39,  178,  337,  337,  337,  337,  183,  337,  185,  186,
 /*  5900 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /*  5910 */   337,  337,  337,  312,  313,  314,  337,  337,  317,  337,
 /*  5920 */   319,  320,  337,  337,  337,  337,  213,  337,  215,  328,
 /*  5930 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  144,
 /*  5940 */   145,  337,  337,  337,  149,  150,  151,  152,  153,  337,
 /*  5950 */   337,  337,  337,  240,  241,  337,  337,  337,  245,  246,
 /*  5960 */   247,  248,  249,  250,  251,  252,  253,   21,   22,   23,
 /*  5970 */    24,   25,   26,   27,   28,   29,   30,  337,  265,  337,
 /*  5980 */   337,  268,  337,  337,  271,  337,  337,  337,  337,  276,
 /*  5990 */   337,  278,  279,  280,  337,  282,  337,  284,  285,  286,
 /*  6000 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /*  6010 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /*  6020 */   307,  308,  309,  337,  311,  312,  313,  314,  337,  337,
 /*  6030 */   317,  337,  319,  320,  337,  130,  337,  337,  337,  337,
 /*  6040 */   337,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*  6050 */   337,  337,  337,  148,  337,  337,  110,  130,  153,  337,
 /*  6060 */   337,  337,  337,  117,  118,  337,  120,  337,  337,  337,
 /*  6070 */   337,  337,  337,  337,  337,  337,  337,  130,  337,  174,
 /*  6080 */   337,  176,  337,  178,  337,  337,  337,  337,  183,  337,
 /*  6090 */   185,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /*  6100 */   337,  196,  337,  337,  177,  337,  179,  337,  337,  182,
 /*  6110 */   183,  184,  185,  186,  187,  188,  337,  337,  213,  337,
 /*  6120 */   215,  174,  337,  328,  329,  330,  331,  332,  333,  334,
 /*  6130 */   335,  336,  337,  337,  337,  337,  189,  337,  337,  337,
 /*  6140 */   193,  337,  337,  196,  337,  240,  241,  337,  337,  337,
 /*  6150 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  337,
 /*  6160 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6170 */   265,  244,  337,  268,  337,  337,  271,  337,  337,  337,
 /*  6180 */   337,  276,  337,  278,  279,  280,  337,  282,  337,  284,
 /*  6190 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  337,
 /*  6200 */   295,  296,  297,  298,  337,  337,  337,  337,  337,  304,
 /*  6210 */   305,  306,  307,  308,  309,  337,  311,  312,  313,  314,
 /*  6220 */   337,  337,  317,  337,  319,  320,  299,  130,  337,  302,
 /*  6230 */   303,  337,  337,  328,  329,  330,  331,  332,  333,  334,
 /*  6240 */   335,  336,  337,  337,  337,  148,  337,  337,  337,  337,
 /*  6250 */   153,  304,  305,  306,  307,  308,  309,  337,  311,  337,
 /*  6260 */   337,  337,  337,  337,  317,  337,  319,  320,  337,  337,
 /*  6270 */   337,  174,  337,  176,  337,  178,  337,  337,  337,  337,
 /*  6280 */   183,  337,  185,  186,  337,  337,  189,  337,  191,  337,
 /*  6290 */   193,  337,  337,  196,  337,  337,  337,  337,  337,  337,
 /*  6300 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6310 */   213,  337,  215,  337,  337,  337,  337,  337,  337,  337,
 /*  6320 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6330 */   337,  337,  337,  337,  337,  337,  337,  240,  241,  337,
 /*  6340 */   337,  337,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  6350 */   253,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6360 */   337,  337,  265,  337,  337,  268,  337,  337,  271,  337,
 /*  6370 */   337,  337,  337,  276,  337,  278,  279,  280,  337,  282,
 /*  6380 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /*  6390 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /*  6400 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  312,
 /*  6410 */   313,  314,  337,  337,  317,  337,  319,  320,  337,  130,
 /*  6420 */   337,  337,  337,  337,  337,  328,  329,  330,  331,  332,
 /*  6430 */   333,  334,  335,  336,  337,  337,  337,  148,  337,  337,
 /*  6440 */    13,  337,  153,  337,  337,  337,  337,  337,   21,   22,
 /*  6450 */    23,   24,   25,   26,   27,   28,   29,  337,  337,  337,
 /*  6460 */   337,   34,   35,  174,  337,  176,  337,  178,  337,  337,
 /*  6470 */   337,  337,  183,  337,  185,  186,  337,  337,  189,  337,
 /*  6480 */   191,  337,  193,  337,  337,  196,  337,  337,  337,  337,
 /*  6490 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6500 */   337,  337,  213,  337,  215,  337,  337,  337,  337,  337,
 /*  6510 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6520 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  240,
 /*  6530 */   241,  337,  337,  337,  245,  246,  247,  248,  249,  250,
 /*  6540 */   251,  252,  253,  116,  117,  118,  337,  337,  337,  337,
 /*  6550 */   337,  337,  337,  337,  265,  337,  337,  268,  337,  337,
 /*  6560 */   271,  337,  337,  337,  337,  276,  337,  278,  279,  280,
 /*  6570 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /*  6580 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /*  6590 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /*  6600 */   311,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  6610 */   337,  130,  337,  337,  337,  337,  337,  328,  329,  330,
 /*  6620 */   331,  332,  333,  334,  335,  336,  337,  337,  337,  148,
 /*  6630 */   337,  337,  337,  337,  153,  337,  337,  337,  337,  337,
 /*  6640 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6650 */   337,  337,  337,  337,  337,  174,  337,  176,  337,  178,
 /*  6660 */   337,  337,  337,  337,  183,  337,  185,  186,  337,  337,
 /*  6670 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /*  6680 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6690 */   337,  337,  337,  337,  213,  337,  215,  337,  337,  337,
 /*  6700 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6710 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6720 */   337,  240,  241,  337,  337,  337,  245,  246,  247,  248,
 /*  6730 */   249,  250,  251,  252,  253,  337,  337,  337,  337,  337,
 /*  6740 */   337,  337,  337,  337,  337,  337,  265,  337,  337,  268,
 /*  6750 */   337,  337,  271,  337,  337,  337,  337,  276,  337,  278,
 /*  6760 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  6770 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  6780 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  6790 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  6800 */   319,  320,  337,  130,  337,  337,  337,  337,  337,  328,
 /*  6810 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /*  6820 */   337,  148,  337,  337,  337,  337,  153,  337,  337,  337,
 /*  6830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6840 */   337,  337,  337,  337,  337,  337,  337,  174,  337,  176,
 /*  6850 */   337,  178,  337,  337,  337,  337,  183,  337,  185,  186,
 /*  6860 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /*  6870 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6880 */   337,  337,  337,  337,  337,  337,  213,  337,  215,  337,
 /*  6890 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6900 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  6910 */   337,  337,  337,  240,  241,  337,  337,  337,  245,  246,
 /*  6920 */   247,  248,  249,  250,  251,  252,  253,  337,  337,  337,
 /*  6930 */   337,  337,  337,  337,  337,  337,  337,  337,  265,  337,
 /*  6940 */   337,  268,  337,  337,  271,  337,  337,  337,  337,  276,
 /*  6950 */   337,  278,  279,  280,  337,  282,  337,  284,  285,  286,
 /*  6960 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /*  6970 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /*  6980 */   307,  308,  309,  337,  311,  312,  313,  314,  337,  337,
 /*  6990 */   317,  337,  319,  320,  337,  337,  337,  337,  337,  337,
 /*  7000 */   337,  328,  329,  330,  331,  332,  333,  334,  335,  336,
 /*  7010 */   337,    9,  337,  337,  337,   13,  337,  337,  337,  337,
 /*  7020 */   337,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  7030 */    28,   29,  337,  337,  337,   33,   34,   35,   36,  337,
 /*  7040 */    38,   39,  337,   41,   42,   43,   44,  337,  337,   47,
 /*  7050 */    48,  337,   50,   51,   52,   53,  337,  337,   56,   57,
 /*  7060 */    58,   59,   60,   61,  337,  337,  337,  337,  337,  337,
 /*  7070 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7080 */   337,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  7090 */    88,  337,  337,  337,   92,  337,  337,   95,   96,   97,
 /*  7100 */    98,   99,  100,  101,  102,  103,  104,  337,  337,  337,
 /*  7110 */   337,  337,  110,  337,  337,  113,  114,  115,  116,  117,
 /*  7120 */   118,  119,    9,  121,  337,  337,   13,  337,  337,  337,
 /*  7130 */   337,  337,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  7140 */    27,   28,   29,  337,  337,  337,   33,   34,   35,   36,
 /*  7150 */   337,   38,   39,  337,   41,   42,   43,   44,  337,  337,
 /*  7160 */    47,  337,  337,   50,   51,   52,   53,  337,  337,   56,
 /*  7170 */    57,   58,   59,   60,   61,  337,  337,  337,  337,  337,
 /*  7180 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7190 */   337,  337,   79,   80,   81,   82,   83,   84,   85,   86,
 /*  7200 */    87,   88,  337,  337,  337,   92,  337,  337,   95,   96,
 /*  7210 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  7220 */   107,  130,  337,  110,  337,  337,  337,  337,  337,  116,
 /*  7230 */   117,  118,  119,  337,  121,  337,  337,  337,  147,  148,
 /*  7240 */   337,  337,  337,  337,  153,  337,  337,  337,  337,  337,
 /*  7250 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7260 */   337,  337,  337,  337,  337,  174,  337,  337,  337,  178,
 /*  7270 */   337,  337,  337,  337,  183,  337,  185,  186,  337,    9,
 /*  7280 */   189,  337,  191,   13,  193,  337,  337,  196,  337,  337,
 /*  7290 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7300 */   337,  337,  337,   33,  213,   35,   36,  337,   38,   39,
 /*  7310 */   337,   41,   42,   43,   44,  337,  337,   47,   48,  337,
 /*  7320 */    50,   51,   52,   53,  337,  337,   56,   57,   58,   59,
 /*  7330 */    60,   61,  337,  337,  337,  337,  245,  337,  337,  337,
 /*  7340 */   337,  337,  337,  337,  253,  337,  337,  337,  337,  337,
 /*  7350 */   337,  337,  337,  337,  337,  337,  265,  337,  337,  268,
 /*  7360 */   337,  337,  271,  337,  337,  337,  337,  276,  337,  278,
 /*  7370 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /*  7380 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /*  7390 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /*  7400 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /*  7410 */   319,  320,  321,  322,  323,  324,  337,  337,  337,  328,
 /*  7420 */   329,  330,  331,  332,  333,  334,  335,  336,  337,    9,
 /*  7430 */   337,  337,  337,   13,  337,  337,  337,  337,  337,   19,
 /*  7440 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  7450 */   337,  337,  337,   33,   34,   35,   36,  337,   38,   39,
 /*  7460 */   337,   41,   42,   43,   44,  337,  337,   47,   48,  337,
 /*  7470 */    50,   51,   52,   53,  337,  337,   56,   57,   58,   59,
 /*  7480 */    60,   61,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7490 */   337,  337,  337,  337,  337,  337,  337,  337,  337,   79,
 /*  7500 */    80,   81,   82,   83,   84,   85,   86,   87,   88,  337,
 /*  7510 */   337,  337,   92,  337,  337,   95,   96,   97,   98,   99,
 /*  7520 */   100,  101,  102,  103,  104,  337,  337,  337,  337,  337,
 /*  7530 */   110,  337,  337,  337,  337,  337,  116,  117,  118,  119,
 /*  7540 */     9,  121,  337,  337,   13,  337,  337,  337,  337,  337,
 /*  7550 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  7560 */    29,  337,  337,  337,   33,   34,   35,   36,  337,   38,
 /*  7570 */    39,  337,   41,   42,   43,   44,  337,  337,   47,  337,
 /*  7580 */   337,   50,   51,   52,   53,  337,  337,   56,   57,   58,
 /*  7590 */    59,   60,   61,  337,  337,  337,  337,  337,  337,  337,
 /*  7600 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7610 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*  7620 */   337,  337,  337,   92,  337,  337,   95,   96,   97,   98,
 /*  7630 */    99,  100,  101,  102,  103,  104,  337,  337,  337,  337,
 /*  7640 */   337,  110,  337,  337,  337,  337,  337,  116,  117,  118,
 /*  7650 */   119,    9,  121,  122,  337,   13,  337,  337,  337,  337,
 /*  7660 */   337,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  7670 */    28,   29,  337,  337,  337,   33,   34,   35,   36,  337,
 /*  7680 */    38,   39,  337,   41,   42,   43,   44,  337,  337,   47,
 /*  7690 */   337,  337,   50,   51,   52,   53,  337,  337,   56,   57,
 /*  7700 */    58,   59,   60,   61,  337,  337,  337,  337,  337,  337,
 /*  7710 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7720 */   337,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  7730 */    88,  337,  337,  337,   92,  337,  337,   95,   96,   97,
 /*  7740 */    98,   99,  100,  101,  102,  103,  104,  337,  337,  337,
 /*  7750 */   337,  337,  110,  337,  337,  337,  337,  337,  116,  117,
 /*  7760 */   118,  119,    9,  121,  122,  337,   13,  337,  337,  337,
 /*  7770 */   337,  337,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  7780 */    27,   28,   29,  337,  337,  337,   33,   34,   35,   36,
 /*  7790 */   337,   38,   39,  337,   41,   42,   43,   44,  337,  337,
 /*  7800 */    47,  337,  337,   50,   51,   52,   53,  337,  337,   56,
 /*  7810 */    57,   58,   59,   60,   61,  337,  337,  337,  337,  337,
 /*  7820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7830 */   337,  337,   79,   80,   81,   82,   83,   84,   85,   86,
 /*  7840 */    87,   88,  337,  337,  337,   92,  337,  337,   95,   96,
 /*  7850 */    97,   98,   99,  100,  101,  102,  103,  104,  337,  337,
 /*  7860 */   337,  337,  337,  110,  337,  337,  337,  337,  337,  116,
 /*  7870 */   117,  118,  119,    9,  121,  337,  337,   13,  337,  337,
 /*  7880 */   337,  337,  337,   19,   20,   21,   22,   23,   24,   25,
 /*  7890 */    26,   27,   28,   29,  337,  337,  337,   33,   34,   35,
 /*  7900 */    36,  337,   38,   39,  337,   41,   42,   43,   44,  337,
 /*  7910 */   337,   47,  337,  337,   50,   51,   52,   53,  337,  337,
 /*  7920 */    56,   57,   58,   59,   60,   61,  337,  337,  337,  337,
 /*  7930 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7940 */   337,  337,  337,   79,   80,   81,   82,   83,   84,   85,
 /*  7950 */    86,   87,   88,  337,  337,  337,   92,  337,  337,   95,
 /*  7960 */    96,   97,   98,   99,  100,  101,  337,  337,  337,  130,
 /*  7970 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  7980 */   116,  117,  118,  119,  337,  121,  147,  148,  337,  337,
 /*  7990 */   337,  337,  153,  337,  337,  337,  337,  337,  337,  337,
 /*  8000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8010 */   337,  337,  337,  174,  337,  337,  337,  178,  337,  337,
 /*  8020 */   337,  337,  183,    9,  185,  186,  337,   13,  189,  337,
 /*  8030 */   191,  337,  193,  337,  337,  196,  337,  337,  337,  337,
 /*  8040 */   337,  337,  130,  337,  337,  337,  337,   33,  337,   35,
 /*  8050 */    36,  337,   38,   39,  337,   41,   42,   43,   44,  337,
 /*  8060 */   148,   47,  337,  337,   50,   51,   52,   53,  337,  337,
 /*  8070 */    56,   57,   58,   59,   60,   61,  337,  337,  337,  337,
 /*  8080 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /*  8090 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /*  8100 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /*  8110 */   337,  337,  337,  337,  337,  276,  337,  278,  279,  280,
 /*  8120 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /*  8130 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /*  8140 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /*  8150 */   311,  312,  313,  314,  337,  337,  317,  337,  319,  320,
 /*  8160 */   321,  322,  323,  324,  337,  253,  337,  328,  329,  330,
 /*  8170 */   331,  332,  333,  334,  335,  336,  337,  265,  337,  337,
 /*  8180 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /*  8190 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /*  8200 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /*  8210 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /*  8220 */   308,  309,  337,  311,  337,  337,  337,  337,  337,  317,
 /*  8230 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /*  8240 */   337,  337,  337,  337,  337,   13,  130,  337,  337,  337,
 /*  8250 */   134,  135,  337,   21,   22,   23,   24,   25,   26,   27,
 /*  8260 */    28,   29,   30,  337,  148,  337,   34,   35,   36,  337,
 /*  8270 */    38,   39,  337,   41,   42,   43,   44,  147,  337,  337,
 /*  8280 */   337,  337,  337,  153,  337,  337,  337,  337,  337,  337,
 /*  8290 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /*  8300 */   337,  337,  186,  337,  337,  189,  337,  191,  178,  193,
 /*  8310 */   337,  337,  196,  337,  337,  185,  337,  337,  337,  189,
 /*  8320 */   337,  337,  337,  193,  337,  337,  337,  130,  337,  213,
 /*  8330 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8340 */   337,  337,  337,  337,  147,  337,  337,  337,  337,  337,
 /*  8350 */   153,  337,  337,  337,  157,  337,  337,  337,  337,  337,
 /*  8360 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  253,
 /*  8370 */   337,  174,  337,  337,  337,  178,  337,  337,  337,  337,
 /*  8380 */   337,  265,  185,  337,  268,  337,  189,  271,  337,  337,
 /*  8390 */   193,  337,  276,  196,  278,  279,  280,  337,  282,  337,
 /*  8400 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  8410 */   337,  295,  296,  297,  298,  337,  300,  301,  337,  337,
 /*  8420 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /*  8430 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  8440 */   337,  337,  312,  313,  314,  337,  337,  317,  148,  319,
 /*  8450 */   320,  321,  322,  323,  324,  337,  337,  337,  328,  329,
 /*  8460 */   330,  331,  332,  333,  334,  335,  336,  337,  337,  337,
 /*  8470 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /*  8480 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /*  8490 */   337,  191,  337,  193,  337,  337,  196,  197,  337,  337,
 /*  8500 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  312,
 /*  8510 */   313,  314,  337,  213,  317,  337,  319,  320,  321,  322,
 /*  8520 */   323,  324,  325,  337,  327,  328,  329,  330,  331,  332,
 /*  8530 */   333,  334,  335,  336,  337,  147,  337,  337,  337,  337,
 /*  8540 */   337,  153,  337,  337,  337,  245,  337,  337,  337,  337,
 /*  8550 */   337,  337,  337,  253,  337,  337,  337,  337,  337,  337,
 /*  8560 */   337,  337,  337,  337,  337,  265,  178,  337,  268,  337,
 /*  8570 */   337,  271,  337,  185,  337,  337,  276,  189,  278,  279,
 /*  8580 */   280,  193,  282,  337,  284,  285,  286,  287,  288,  289,
 /*  8590 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /*  8600 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /*  8610 */   337,  311,  337,  337,  130,  337,  337,  317,  134,  319,
 /*  8620 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8630 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /*  8640 */   337,  337,  337,  337,  337,  147,  337,  337,  337,  337,
 /*  8650 */   337,  153,  337,  337,  337,  337,  337,  337,  174,  337,
 /*  8660 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /*  8670 */   186,  337,  337,  189,  337,  191,  178,  193,  337,  337,
 /*  8680 */   196,  337,  337,  185,  337,  337,  337,  189,  337,  337,
 /*  8690 */   337,  193,  337,  337,  337,  337,  337,  213,  337,  337,
 /*  8700 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  321,
 /*  8710 */   322,  323,  324,  337,  337,  337,  328,  329,  330,  331,
 /*  8720 */   332,  333,  334,  335,  336,  337,  337,  337,  337,  337,
 /*  8730 */   337,  337,  337,  337,  337,  337,  337,  253,  337,  337,
 /*  8740 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /*  8750 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /*  8760 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /*  8770 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /*  8780 */   296,  297,  298,  337,  300,  337,  337,  337,  304,  305,
 /*  8790 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /*  8800 */   337,  317,  134,  319,  320,  337,  337,  337,  337,  337,
 /*  8810 */   312,  313,  314,  337,  337,  317,  148,  319,  320,  321,
 /*  8820 */   322,  323,  324,  337,  337,  337,  328,  329,  330,  331,
 /*  8830 */   332,  333,  334,  335,  336,  337,  337,  337,  337,  337,
 /*  8840 */   130,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /*  8850 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /*  8860 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /*  8870 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  8880 */   337,  213,  337,  337,  174,  147,  337,  337,  337,  337,
 /*  8890 */   337,  153,  337,  337,  337,  337,  337,  337,  337,  189,
 /*  8900 */   337,  337,  337,  193,  337,  337,  196,  337,  337,  337,
 /*  8910 */   337,  337,  337,  337,  337,  337,  178,  337,  337,  337,
 /*  8920 */   337,  253,  337,  185,  337,  337,  337,  189,  337,  337,
 /*  8930 */   337,  193,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  8940 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  8950 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  8960 */   292,  337,  337,  295,  296,  297,  298,  337,  300,  337,
 /*  8970 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  8980 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /*  8990 */   337,  337,  337,  337,  284,  285,  337,  337,  337,  289,
 /*  9000 */   148,  337,  292,  337,  337,  295,  296,  297,  298,  337,
 /*  9010 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /*  9020 */   337,  311,  337,  337,  337,  337,  174,  317,  337,  319,
 /*  9030 */   320,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /*  9040 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /*  9050 */   312,  313,  314,  337,  337,  317,  337,  319,  320,  321,
 /*  9060 */   322,  323,  324,  337,  337,  213,  328,  329,  330,  331,
 /*  9070 */   332,  333,  334,  335,  336,  337,  337,  337,  337,  337,
 /*  9080 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9090 */   337,  337,  337,  337,  242,  337,  337,  337,  337,  337,
 /*  9100 */   337,  337,  337,  337,  337,  253,  337,  337,  337,  337,
 /*  9110 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /*  9120 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /*  9130 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /*  9140 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /*  9150 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /*  9160 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /*  9170 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /*  9180 */   337,  337,  337,  337,  148,  337,   13,  337,  337,  337,
 /*  9190 */   337,  337,  337,  337,   21,   22,   23,   24,   25,   26,
 /*  9200 */    27,   28,   29,  337,  337,  153,  337,   34,   35,   36,
 /*  9210 */   174,   38,   39,  337,   41,   42,   43,   44,  337,  183,
 /*  9220 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /*  9230 */   178,  337,  196,  337,  337,    9,  337,  185,  337,   13,
 /*  9240 */   337,  189,  337,  337,  337,  193,  337,  337,  337,  213,
 /*  9250 */   337,  337,  337,  337,  337,  337,  337,  337,  337,   33,
 /*  9260 */   337,   35,   36,  337,   38,   39,  337,   41,   42,   43,
 /*  9270 */    44,   45,  337,  337,  337,  337,   50,   51,   52,   53,
 /*  9280 */   337,  245,   56,   57,   58,   59,   60,   61,  337,  253,
 /*  9290 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9300 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /*  9310 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /*  9320 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /*  9330 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /*  9340 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /*  9350 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /*  9360 */   337,  337,  337,  337,  312,  313,  314,  337,  148,  317,
 /*  9370 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /*  9380 */   328,  329,  330,  331,  332,  333,  334,  335,  336,  153,
 /*  9390 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /*  9400 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /*  9410 */   337,  191,  337,  193,  178,  337,  196,  337,  337,    9,
 /*  9420 */   337,  185,  337,   13,  337,  189,  337,  337,  337,  193,
 /*  9430 */   337,  337,  337,  213,  337,  337,  337,  337,  337,  337,
 /*  9440 */   337,  337,  337,   33,  337,   35,   36,  337,   38,   39,
 /*  9450 */   337,   41,   42,   43,   44,  337,  337,  337,  337,  337,
 /*  9460 */    50,   51,   52,   53,  337,  337,   56,   57,   58,   59,
 /*  9470 */    60,   61,  337,  253,  337,  337,  337,  337,  337,  337,
 /*  9480 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /*  9490 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /*  9500 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /*  9510 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /*  9520 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /*  9530 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /*  9540 */   320,  337,  337,  337,  337,  337,  337,  337,  312,  313,
 /*  9550 */   314,  337,  148,  317,  337,  319,  320,  337,  337,  337,
 /*  9560 */   337,  337,  337,  337,  328,  329,  330,  331,  332,  333,
 /*  9570 */   334,  335,  336,  337,  130,  337,  337,  337,  174,  337,
 /*  9580 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /*  9590 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /*  9600 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9610 */   337,  337,  337,  337,  337,  337,  337,  213,  174,  337,
 /*  9620 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9630 */   337,  337,  337,  189,  337,  337,  337,  193,  337,  337,
 /*  9640 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9650 */   337,  337,  337,  337,  337,  337,  337,  253,  337,  337,
 /*  9660 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /*  9670 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /*  9680 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /*  9690 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /*  9700 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /*  9710 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /*  9720 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /*  9730 */   337,  337,  337,  337,  337,  337,  148,  337,  337,  337,
 /*  9740 */   337,  337,  337,  337,  337,  337,  337,  337,  304,  305,
 /*  9750 */   306,  307,  308,  309,  337,  311,  337,  337,  337,  337,
 /*  9760 */   337,  317,  174,  319,  320,  337,  337,  337,  337,  337,
 /*  9770 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /*  9780 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /*  9790 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9800 */   337,  213,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9810 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9840 */   337,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9850 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /*  9860 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /*  9870 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /*  9880 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /*  9890 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /*  9900 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /*  9910 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9920 */   148,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9930 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9940 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /*  9950 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /*  9960 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /*  9970 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /*  9980 */   337,  337,  337,  337,  337,  213,  337,  337,  337,  337,
 /*  9990 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10010 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10020 */   337,  337,  337,  337,  337,  253,  337,  337,  337,  337,
 /* 10030 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /* 10040 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /* 10050 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 10060 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 10070 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 10080 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /* 10090 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /* 10100 */   337,  337,  337,  337,  148,  337,  337,  337,  337,  337,
 /* 10110 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10120 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10130 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 10140 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 10150 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 10160 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  213,
 /* 10170 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10180 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10190 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10200 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  253,
 /* 10210 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10220 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /* 10230 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /* 10240 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 10250 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 10260 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 10270 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /* 10280 */   337,  337,  337,  337,  337,  337,  337,  337,  148,  337,
 /* 10290 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10300 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10310 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /* 10320 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 10330 */   337,  191,  337,  193,  337,  337,  196,  337,  337,  337,
 /* 10340 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10350 */   337,  337,  337,  213,  337,  337,  337,  337,  337,  337,
 /* 10360 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10370 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10380 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10390 */   337,  337,  337,  253,  337,  337,  337,  337,  337,  337,
 /* 10400 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /* 10410 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 10420 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 10430 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 10440 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 10450 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /* 10460 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10470 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 10480 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10490 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 10500 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 10510 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 10520 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10530 */   337,  337,  337,  337,  337,  337,  337,  213,  337,  337,
 /* 10540 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10550 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10560 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10570 */   337,  337,  337,  337,  337,  337,  337,  253,  337,  337,
 /* 10580 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /* 10590 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 10600 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 10610 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 10620 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 10630 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /* 10640 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /* 10650 */   337,  337,  337,  337,  337,  337,  148,  337,  337,  337,
 /* 10660 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10670 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10680 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /* 10690 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /* 10700 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /* 10710 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10720 */   337,  213,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10730 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10740 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10750 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10760 */   337,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10770 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /* 10780 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /* 10790 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /* 10800 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /* 10810 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /* 10820 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /* 10830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10840 */   148,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10850 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10860 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 10870 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 10880 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /* 10890 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10900 */   337,  337,  337,  337,  337,  213,  337,  337,  337,  337,
 /* 10910 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10920 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10930 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 10940 */   337,  337,  337,  337,  337,  253,  337,  337,  337,  337,
 /* 10950 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /* 10960 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /* 10970 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 10980 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 10990 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 11000 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /* 11010 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /* 11020 */   337,  337,  337,  337,  148,  337,  337,  337,  337,  337,
 /* 11030 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11040 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11050 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 11060 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 11070 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 11080 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  213,
 /* 11090 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11100 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11110 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11120 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  253,
 /* 11130 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11140 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /* 11150 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /* 11160 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 11170 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 11180 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 11190 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /* 11200 */   337,  337,  337,  337,  337,  337,  337,  337,  148,  337,
 /* 11210 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11220 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11230 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /* 11240 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 11250 */   337,  191,  337,  193,  337,  337,  196,  337,  337,  337,
 /* 11260 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11270 */   337,  337,  337,  213,  337,  337,  337,  337,  337,  337,
 /* 11280 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11290 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11300 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11310 */   337,  337,  337,  253,  337,  337,  337,  337,  337,  337,
 /* 11320 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /* 11330 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 11340 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 11350 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 11360 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 11370 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /* 11380 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11390 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 11400 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11410 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 11420 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 11430 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 11440 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11450 */   337,  337,  337,  337,  337,  337,  337,  213,  337,  337,
 /* 11460 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11470 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11480 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11490 */   337,  337,  337,  337,  337,  337,  337,  253,  337,  337,
 /* 11500 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /* 11510 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 11520 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 11530 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 11540 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 11550 */   306,  307,  308,  309,  337,  311,  337,  337,  130,  337,
 /* 11560 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /* 11570 */   337,  337,  337,  337,  337,  337,  148,  337,  337,  337,
 /* 11580 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11590 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11600 */   337,  337,  174,  337,  337,  337,  337,  337,  337,  337,
 /* 11610 */   337,  183,  337,  337,  186,  337,  337,  189,  337,  191,
 /* 11620 */   337,  193,  337,  337,  196,  337,  337,  337,  337,  337,
 /* 11630 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11640 */   337,  213,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11650 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11660 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11670 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11680 */   337,  253,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11690 */   337,  337,  337,  265,  337,  337,  268,  337,  337,  271,
 /* 11700 */   337,  337,  337,  337,  276,  337,  278,  279,  280,  337,
 /* 11710 */   282,  337,  284,  285,  286,  287,  288,  289,  290,  291,
 /* 11720 */   292,  337,  337,  295,  296,  297,  298,  337,  337,  337,
 /* 11730 */   337,  337,  304,  305,  306,  307,  308,  309,  337,  311,
 /* 11740 */   337,  337,  130,  337,  337,  317,  337,  319,  320,  337,
 /* 11750 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11760 */   148,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11770 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11780 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 11790 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 11800 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /* 11810 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11820 */   337,  337,  337,  337,  337,  213,  337,  337,  337,  337,
 /* 11830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11840 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11850 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11860 */   337,  337,  337,  337,  337,  253,  337,  337,  337,  337,
 /* 11870 */   337,  337,  337,  337,  337,  337,  337,  265,  337,  337,
 /* 11880 */   268,  337,  337,  271,  337,  337,  337,  337,  276,  337,
 /* 11890 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 11900 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 11910 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 11920 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /* 11930 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /* 11940 */   337,  337,  337,  337,  148,  337,  337,  337,  337,  337,
 /* 11950 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11960 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 11970 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 11980 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 11990 */   337,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 12000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  213,
 /* 12010 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12020 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12030 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12040 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  253,
 /* 12050 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12060 */   337,  265,  337,  337,  268,  337,  337,  271,  337,  337,
 /* 12070 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /* 12080 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 12090 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 12100 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 12110 */   130,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /* 12120 */   337,  337,  337,  337,  337,  337,  337,  337,  148,  337,
 /* 12130 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12140 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12150 */   337,  337,  337,  337,  174,  337,  337,  337,  337,  337,
 /* 12160 */   337,  337,  337,  183,  337,  337,  186,  337,  337,  189,
 /* 12170 */   337,  191,  337,  193,  337,  337,  196,  337,  337,  337,
 /* 12180 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12190 */   337,  337,  337,  213,  337,  337,  337,  337,  337,  337,
 /* 12200 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12210 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12220 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12230 */   337,  337,  337,  253,  337,  337,  337,  337,  337,  337,
 /* 12240 */   337,  337,  337,  337,  337,  265,  337,  337,  268,  337,
 /* 12250 */   337,  271,  337,  337,  337,  337,  276,  337,  278,  279,
 /* 12260 */   280,  337,  282,  337,  284,  285,  286,  287,  288,  289,
 /* 12270 */   290,  291,  292,  337,  337,  295,  296,  297,  298,  337,
 /* 12280 */   337,  337,  337,  337,  304,  305,  306,  307,  308,  309,
 /* 12290 */   337,  311,  337,  337,  130,  337,  337,  317,  337,  319,
 /* 12300 */   320,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12310 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 12320 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12330 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 12340 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 12350 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 12360 */   196,  337,  337,  337,  130,  337,  337,  337,  337,  337,
 /* 12370 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12380 */   337,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 12390 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12400 */   337,  337,  337,  337,  337,  337,  337,  337,  174,  337,
 /* 12410 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 12420 */   186,  337,  337,  189,  337,  191,  337,  193,  337,  265,
 /* 12430 */   196,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 12440 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 12450 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 12460 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 12470 */   306,  307,  308,  309,  337,  311,  337,  337,  337,  337,
 /* 12480 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  337,
 /* 12490 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  265,
 /* 12500 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 12510 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 12520 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 12530 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 12540 */   306,  307,  308,  309,  337,  311,  337,  337,    9,  337,
 /* 12550 */   337,  317,   13,  319,  320,  337,  337,  337,   19,  337,
 /* 12560 */    21,   22,   23,   24,   25,   26,   27,   28,   29,  337,
 /* 12570 */   337,  337,   33,   34,   35,   36,  337,   38,   39,  337,
 /* 12580 */    41,   42,   43,   44,  130,  337,  337,  337,  337,   50,
 /* 12590 */    51,   52,   53,  337,  337,   56,   57,   58,   59,   60,
 /* 12600 */    61,  337,  148,  337,  337,  337,  337,  337,  337,  337,
 /* 12610 */   337,  337,  337,  337,  337,  337,  337,  337,   79,   80,
 /* 12620 */    81,   82,   83,   84,   85,  337,  337,  337,  174,  337,
 /* 12630 */   337,  337,  337,  337,  337,  337,  337,  183,  337,  337,
 /* 12640 */   186,  130,  337,  189,  337,  191,  337,  193,  337,  337,
 /* 12650 */   196,  337,  337,  337,  337,  337,  337,  337,  337,  148,
 /* 12660 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12670 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12680 */   337,  337,  337,  337,  337,  174,  337,  337,  337,  337,
 /* 12690 */   337,  337,  337,  337,  183,  337,  337,  186,  337,  337,
 /* 12700 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /* 12710 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12720 */   337,  337,  268,  337,  337,  271,  337,  337,  337,  337,
 /* 12730 */   276,  337,  278,  279,  280,  337,  282,  337,  284,  285,
 /* 12740 */   286,  287,  288,  289,  290,  291,  292,  337,  337,  295,
 /* 12750 */   296,  297,  298,  337,  337,  337,  337,  337,  304,  305,
 /* 12760 */   306,  307,  308,  309,  337,  311,  337,  337,  337,  337,
 /* 12770 */   337,  317,  337,  319,  320,  337,  337,  337,  337,  268,
 /* 12780 */   337,  337,  271,  337,  337,  337,  337,  276,  337,  278,
 /* 12790 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /* 12800 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /* 12810 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /* 12820 */   309,  337,  311,  337,  337,  130,  337,  337,  317,  337,
 /* 12830 */   319,  320,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12840 */   337,  337,  337,  148,  337,  337,  337,  337,  337,  337,
 /* 12850 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12860 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  174,
 /* 12870 */   337,  337,  337,  337,  337,  337,  337,  337,  183,  337,
 /* 12880 */   337,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /* 12890 */   337,  196,  337,  337,    9,  337,  337,  337,   13,  337,
 /* 12900 */   337,  337,  337,  337,  337,  337,   21,   22,   23,   24,
 /* 12910 */    25,   26,   27,   28,   29,  337,  337,  337,   33,   34,
 /* 12920 */    35,   36,  337,   38,   39,  337,   41,   42,   43,   44,
 /* 12930 */   337,  337,  337,  337,  337,   50,   51,   52,   53,  337,
 /* 12940 */   337,   56,   57,   58,   59,   60,   61,  337,  337,  337,
 /* 12950 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 12960 */   337,  337,  337,  268,  337,  337,  271,  337,  337,  337,
 /* 12970 */   337,  276,  337,  278,  279,  280,  337,  282,  337,  284,
 /* 12980 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  337,
 /* 12990 */   295,  296,  297,  298,  337,  337,  337,  337,  337,  304,
 /* 13000 */   305,  306,  307,  308,  309,  337,  311,  337,  337,    9,
 /* 13010 */   337,  337,  317,   13,  319,  320,  337,  337,  337,  337,
 /* 13020 */   337,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /* 13030 */   337,  337,  337,   33,   34,   35,   36,  337,   38,   39,
 /* 13040 */   337,   41,   42,   43,   44,  337,  337,  337,  337,  337,
 /* 13050 */    50,   51,   52,   53,  337,  337,   56,   57,   58,   59,
 /* 13060 */    60,   61,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13070 */   337,  337,  337,  337,  337,  337,  337,  337,  337,   79,
 /* 13080 */    80,   81,   82,   83,   84,   85,  337,  337,  337,  337,
 /* 13090 */     9,  337,  337,   93,   13,  337,  337,  337,  337,  337,
 /* 13100 */   337,  337,   21,   22,   23,   24,   25,   26,   27,   28,
 /* 13110 */    29,  337,  337,  337,   33,   34,   35,   36,  337,   38,
 /* 13120 */    39,  337,   41,   42,   43,   44,  337,  337,  337,  337,
 /* 13130 */   337,   50,   51,   52,   53,  130,  337,   56,   57,   58,
 /* 13140 */    59,   60,   61,  337,  337,  337,  337,  337,  337,  337,
 /* 13150 */   337,  337,  337,  148,  337,  337,  337,  337,  337,  337,
 /* 13160 */    79,   80,   81,   82,   83,   84,   85,  337,  337,  337,
 /* 13170 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  174,
 /* 13180 */   337,  337,  130,  337,  337,  337,  337,  337,  183,  337,
 /* 13190 */   337,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /* 13200 */   148,  196,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13210 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13220 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 13230 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 13240 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /* 13250 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13260 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13270 */   337,  337,  337,  337,  337,  337,  271,  337,  337,  337,
 /* 13280 */   337,  276,  337,  278,  279,  280,  337,  282,  337,  284,
 /* 13290 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  337,
 /* 13300 */   295,  296,  297,  298,  337,  337,  337,  337,  337,  304,
 /* 13310 */   305,  306,  307,  308,  309,  337,  311,  337,  337,  337,
 /* 13320 */   337,  337,  317,  271,  319,  320,  337,  337,  276,  337,
 /* 13330 */   278,  279,  280,  337,  282,  337,  284,  285,  286,  287,
 /* 13340 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 13350 */   298,  337,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 13360 */   308,  309,  337,  311,  337,  337,  130,  337,  337,  317,
 /* 13370 */   337,  319,  320,  337,  337,  337,  337,  337,  337,  337,
 /* 13380 */   337,  337,  337,  337,  148,  337,  337,  337,  337,  337,
 /* 13390 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13400 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13410 */   174,  337,  130,  337,  337,  337,  337,  337,  337,  183,
 /* 13420 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 13430 */   148,  337,  196,  337,  337,  337,  337,  337,  337,  337,
 /* 13440 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13450 */   337,  337,  337,  337,  337,  337,  174,  337,  337,  337,
 /* 13460 */   337,  337,  337,  337,  337,  183,  337,  337,  186,  337,
 /* 13470 */   337,  189,  337,  191,  337,  193,  337,  337,  196,  337,
 /* 13480 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13490 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13500 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13510 */   337,  337,  276,  337,  278,  279,  280,  337,  282,  337,
 /* 13520 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 13530 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 13540 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 13550 */   337,  337,  337,  317,  337,  319,  320,  337,  276,  337,
 /* 13560 */   278,  279,  280,  130,  282,  337,  284,  285,  286,  287,
 /* 13570 */   288,  289,  290,  291,  292,  337,  337,  295,  296,  297,
 /* 13580 */   298,  148,  337,  337,  337,  337,  304,  305,  306,  307,
 /* 13590 */   308,  309,  337,  311,  337,  337,  337,  337,  337,  317,
 /* 13600 */   337,  319,  320,  337,  337,  337,  337,  174,  337,  130,
 /* 13610 */   337,  337,  337,  337,  337,  337,  183,  337,  337,  186,
 /* 13620 */   337,  337,  189,  337,  191,  337,  193,  148,  337,  196,
 /* 13630 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13640 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13650 */   337,  337,  337,  174,  337,  337,  337,  337,  337,  337,
 /* 13660 */   337,  337,  183,  337,  337,  186,  337,  337,  189,  337,
 /* 13670 */   191,  337,  193,  337,  337,  196,  337,  337,  337,  337,
 /* 13680 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13690 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13700 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  276,
 /* 13710 */   337,  278,  279,  280,  337,  282,  337,  284,  285,  286,
 /* 13720 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /* 13730 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /* 13740 */   307,  308,  309,  337,  311,  337,  337,  130,  337,  337,
 /* 13750 */   317,  337,  319,  320,  337,  276,  337,  278,  279,  280,
 /* 13760 */   337,  282,  337,  284,  285,  286,  287,  288,  289,  290,
 /* 13770 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /* 13780 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /* 13790 */   311,  174,  337,  130,  337,  337,  317,  337,  319,  320,
 /* 13800 */   183,  337,  337,  186,  337,  337,  189,  337,  191,  337,
 /* 13810 */   193,  337,  337,  196,  337,  337,  337,  337,  337,  337,
 /* 13820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13830 */   337,  337,  337,  337,  337,  337,  337,  174,  337,  337,
 /* 13840 */   337,  337,  337,  337,  337,  337,  183,  337,  337,  186,
 /* 13850 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /* 13860 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13870 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13880 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 13890 */   337,  337,  337,  276,  337,  278,  279,  280,  337,  282,
 /* 13900 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /* 13910 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /* 13920 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  337,
 /* 13930 */   337,  130,  337,  337,  317,  337,  319,  320,  337,  276,
 /* 13940 */   337,  278,  279,  280,  337,  282,  337,  284,  285,  286,
 /* 13950 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /* 13960 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /* 13970 */   307,  308,  309,  337,  311,  174,  337,  130,  337,  337,
 /* 13980 */   317,  337,  319,  320,  183,  337,  337,  186,  337,  337,
 /* 13990 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /* 14000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14010 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14020 */   337,  174,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14030 */   183,  337,  337,  186,  337,  337,  189,  337,  191,  337,
 /* 14040 */   193,  337,  337,  196,  337,  337,  337,  337,  337,  337,
 /* 14050 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14060 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14070 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  278,
 /* 14080 */   279,  280,  337,  282,  337,  284,  285,  286,  287,  288,
 /* 14090 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /* 14100 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /* 14110 */   309,  337,  311,  130,  337,  337,  337,  337,  317,  337,
 /* 14120 */   319,  320,  337,  337,  337,  278,  279,  280,  337,  282,
 /* 14130 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /* 14140 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /* 14150 */   337,  304,  305,  306,  307,  308,  309,  174,  311,  337,
 /* 14160 */   337,  130,  337,  337,  317,  337,  319,  320,  337,  337,
 /* 14170 */   337,  337,  189,  337,  337,  337,  193,  337,  147,  196,
 /* 14180 */   337,  337,  337,  337,  153,  337,  337,  337,  337,  337,
 /* 14190 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14200 */   337,  337,  337,  337,  337,  174,  337,  337,  337,  178,
 /* 14210 */   337,  130,  337,  337,  337,  337,  185,  337,  337,  337,
 /* 14220 */   189,  337,  337,  337,  193,  337,  337,  196,  147,  337,
 /* 14230 */   337,  337,  337,  337,  153,  337,  337,  337,  337,  337,
 /* 14240 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14250 */   337,  337,  337,  337,  337,  174,  337,  337,  337,  178,
 /* 14260 */   337,  337,  337,  337,  337,  337,  185,  284,  285,  337,
 /* 14270 */   189,  337,  289,  337,  193,  292,  337,  196,  295,  296,
 /* 14280 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /* 14290 */   307,  308,  309,  337,  311,  337,  337,  337,  337,  337,
 /* 14300 */   317,  337,  319,  320,  337,  337,  337,  337,  337,  337,
 /* 14310 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14320 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14330 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /* 14340 */   309,  337,  311,  312,  313,  314,  337,  337,  317,  337,
 /* 14350 */   319,  320,  321,  322,  323,  324,  337,  337,  337,  328,
 /* 14360 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /* 14370 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14380 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /* 14390 */   309,  337,  311,  312,  313,  314,  337,  130,  317,  337,
 /* 14400 */   319,  320,  321,  322,  323,  324,  337,  337,  337,  328,
 /* 14410 */   329,  330,  331,  332,  333,  334,  335,  336,  337,  337,
 /* 14420 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14430 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14440 */   337,  174,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14450 */   183,  337,  337,  186,  337,  337,  189,  337,  191,  337,
 /* 14460 */   193,  337,  337,  196,  337,  337,  130,  337,  337,  337,
 /* 14470 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14480 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14490 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14500 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14510 */   174,  337,  337,  337,  337,  337,  337,  337,  337,  183,
 /* 14520 */   337,  337,  186,  337,  337,  189,  337,  191,  337,  193,
 /* 14530 */   337,  337,  196,  337,  337,  130,  337,  337,  337,  337,
 /* 14540 */   337,  337,  337,  337,  337,  278,  337,  280,  337,  282,
 /* 14550 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /* 14560 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /* 14570 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  174,
 /* 14580 */   337,  337,  337,  337,  317,  337,  319,  320,  183,  337,
 /* 14590 */   337,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /* 14600 */   337,  196,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14610 */   337,  337,  337,  337,  278,  337,  280,  337,  282,  337,
 /* 14620 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  337,
 /* 14630 */   337,  295,  296,  297,  298,  337,  337,  337,  337,  337,
 /* 14640 */   304,  305,  306,  307,  308,  309,  337,  311,  337,  337,
 /* 14650 */   337,  337,  337,  317,  337,  319,  320,  337,  337,  337,
 /* 14660 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14670 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14680 */   337,  337,  130,  278,  337,  280,  337,  282,  337,  284,
 /* 14690 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  147,
 /* 14700 */   295,  296,  297,  298,  337,  153,  337,  337,  337,  304,
 /* 14710 */   305,  306,  307,  308,  309,  337,  311,  337,  337,  337,
 /* 14720 */   337,  337,  317,  337,  319,  320,  337,  337,  337,  337,
 /* 14730 */   178,  179,  337,  337,  337,  183,  337,  185,  186,  337,
 /* 14740 */   337,  189,  337,  337,  337,  193,  337,  130,  337,  197,
 /* 14750 */   198,  199,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14760 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14770 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14780 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14790 */   337,  174,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14800 */   183,  337,  337,  186,  337,  337,  189,  337,  191,  337,
 /* 14810 */   193,  337,  337,  196,  337,  337,  337,  337,  337,  337,
 /* 14820 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14830 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14840 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14850 */   337,  337,  337,  337,  302,  303,  337,  337,  337,  337,
 /* 14860 */   337,  337,  337,  337,  312,  313,  314,  337,  337,  317,
 /* 14870 */   337,  319,  320,  321,  322,  323,  324,  337,  337,  337,
 /* 14880 */   328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
 /* 14890 */   337,  337,  337,  337,  337,  278,  337,  280,  337,  337,
 /* 14900 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /* 14910 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /* 14920 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  337,
 /* 14930 */   337,  130,  337,  337,  317,  337,  319,  320,  337,  337,
 /* 14940 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14950 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14960 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 14970 */   337,  337,  337,  337,  337,  174,  337,  337,  337,  337,
 /* 14980 */   337,  337,  337,  337,  183,  130,  337,  186,  337,  337,
 /* 14990 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /* 15000 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15010 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15020 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  174,
 /* 15030 */   337,  337,  337,  337,  337,  337,  337,  337,  183,  337,
 /* 15040 */   337,  186,  337,  337,  189,  337,  191,  337,  193,  337,
 /* 15050 */   337,  196,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15060 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15070 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  278,
 /* 15080 */   337,  280,  337,  337,  337,  284,  285,  286,  287,  288,
 /* 15090 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /* 15100 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /* 15110 */   309,  337,  311,  337,  337,  337,  337,  337,  317,  337,
 /* 15120 */   319,  320,  337,  130,  337,  337,  337,  337,  337,  337,
 /* 15130 */   337,  337,  337,  278,  337,  280,  337,  337,  337,  284,
 /* 15140 */   285,  286,  287,  288,  289,  290,  291,  292,  337,  337,
 /* 15150 */   295,  296,  297,  298,  337,  337,  337,  337,  337,  304,
 /* 15160 */   305,  306,  307,  308,  309,  337,  311,  174,  337,  130,
 /* 15170 */   337,  337,  317,  337,  319,  320,  183,  337,  337,  186,
 /* 15180 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /* 15190 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15200 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15210 */   337,  337,  337,  174,  337,  337,  337,  337,  337,  337,
 /* 15220 */   337,  337,  183,  337,  337,  186,  337,  337,  189,  337,
 /* 15230 */   191,  337,  193,  337,  337,  196,  337,  337,  337,  337,
 /* 15240 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15250 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15260 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15270 */   337,  278,  337,  280,  337,  337,  337,  284,  285,  286,
 /* 15280 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /* 15290 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /* 15300 */   307,  308,  309,  337,  311,  337,  337,  130,  337,  337,
 /* 15310 */   317,  337,  319,  320,  337,  337,  337,  278,  337,  280,
 /* 15320 */   337,  337,  337,  284,  285,  286,  287,  288,  289,  290,
 /* 15330 */   291,  292,  337,  337,  295,  296,  297,  298,  337,  337,
 /* 15340 */   337,  337,  337,  304,  305,  306,  307,  308,  309,  337,
 /* 15350 */   311,  174,  337,  130,  337,  337,  317,  337,  319,  320,
 /* 15360 */   183,  337,  337,  186,  337,  337,  189,  337,  191,  337,
 /* 15370 */   193,  337,  337,  196,  337,  337,  337,  337,  337,  337,
 /* 15380 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15390 */   337,  337,  337,  337,  337,  337,  337,  174,  337,  337,
 /* 15400 */   337,  337,  337,  337,  337,  337,  183,  337,  337,  186,
 /* 15410 */   337,  337,  189,  337,  191,  337,  193,  337,  337,  196,
 /* 15420 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15430 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15440 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15450 */   337,  337,  337,  337,  337,  278,  337,  280,  337,  337,
 /* 15460 */   337,  284,  285,  286,  287,  288,  289,  290,  291,  292,
 /* 15470 */   337,  337,  295,  296,  297,  298,  337,  337,  337,  337,
 /* 15480 */   337,  304,  305,  306,  307,  308,  309,  337,  311,  337,
 /* 15490 */   337,  130,  337,  337,  317,  337,  319,  320,  337,  337,
 /* 15500 */   337,  278,  337,  280,  337,  337,  337,  284,  285,  286,
 /* 15510 */   287,  288,  289,  290,  291,  292,  337,  337,  295,  296,
 /* 15520 */   297,  298,  337,  337,  337,  337,  337,  304,  305,  306,
 /* 15530 */   307,  308,  309,  337,  311,  174,  337,  337,  337,  337,
 /* 15540 */   317,  337,  319,  320,  183,  130,  337,  186,  337,  337,
 /* 15550 */   189,  337,  191,  337,  193,  337,  337,  196,  337,  337,
 /* 15560 */   337,  337,  147,  337,  337,  337,  337,  337,  153,  337,
 /* 15570 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15580 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15590 */   337,  337,  337,  178,  179,  337,  337,  337,  183,  337,
 /* 15600 */   185,  186,  337,  337,  189,  337,  337,  337,  193,  337,
 /* 15610 */   337,  337,  337,  337,  199,  337,  337,  337,  337,  337,
 /* 15620 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15630 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  278,
 /* 15640 */   337,  280,  337,  337,  337,  284,  285,  286,  287,  288,
 /* 15650 */   289,  290,  291,  292,  337,  337,  295,  296,  297,  298,
 /* 15660 */   337,  337,  337,  337,  337,  304,  305,  306,  307,  308,
 /* 15670 */   309,  337,  311,  337,  337,  337,  337,  337,  317,  337,
 /* 15680 */   319,  320,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15690 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15700 */   337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
 /* 15710 */   337,  337,  337,  337,  337,  337,  337,  302,  303,  337,
 /* 15720 */   337,  337,  337,  337,  337,  337,  337,  312,  313,  314,
 /* 15730 */   337,  337,  317,  337,  319,  320,  321,  322,  323,  324,
 /* 15740 */   337,  337,  337,  328,  329,  330,  331,  332,  333,  334,
 /* 15750 */   335,  336,
);
    const YY_SHIFT_USE_DFLT = -29;
    const YY_SHIFT_MAX = 571;
    static public $yy_shift_ofst = array(
 /*     0 */  7531, 7002, 7002, 7113, 7420, 7420, 7420, 7753, 7420, 7420,
 /*    10 */  7420, 7420, 7642, 7753, 7753, 7753, 7753, 7753, 7753, 7753,
 /*    20 */  7753, 7753, 7753, 7753, 7753, 7753, 7864, 7864, 7864, 7864,
 /*    30 */  7864, 13000, 12539, 13081, 13081, 13081, 13081, 13081, 13081, 13081,
 /*    40 */  12885, 12885, 7270, 8014, 5495, 8014, 9226, 9410, 9410, 9410,
 /*    50 */  9410, 9410, 9410, 9410, 9410, 9410, 9410, 9410, 9410, 9410,
 /*    60 */  9410, 9410, 9410, 9410, 9410, 9410, 9410, 9410, 9410, 9410,
 /*    70 */  9410, 9410, 8232, 9410, 9410, 9410, 9410, 9410, 9410, 9410,
 /*    80 */  9410, 9173, 9173, 9410, 9410, 9410, 5659, 9410, 9410, 9410,
 /*    90 */  9410, 9410, 9410, 9410, 9410, 5851, 6427, 5314, 5314, 5314,
 /*   100 */  5314,  635,  635, 5314, 5314, 4032, 5946, 5344, 3913,  303,
 /*   110 */   303,   41, 4225,   41,  698,  698,  553,  553,  553,   91,
 /*   120 */    91,   91,  366,  606,  417,  445,  761,  884,   94,  406,
 /*   130 */   406,  406,  239,  239,  902,  852,  852,  852,  761,  424,
 /*   140 */   478,  922,  845,  933,   60,   60,  939,  376,  376,  667,
 /*   150 */   -28,  294,  753,  376,  294,  275,  275,  -28,  294,  275,
 /*   160 */   883,  275,  940,  961,  607,  946,  410, 1099, 1210, 1156,
 /*   170 */  1268,  439,   60,   14,  336,  714,  767,  767,  920,  439,
 /*   180 */   920, 1009,  978,  978,   60,   60,   14,  942,  994,  213,
 /*   190 */   978,  946,  954,   24,   14,   60,  336,  213,  213,   60,
 /*   200 */    24,  213,  213,  213,  213,   14,  213,  714,  714,   14,
 /*   210 */   336,  213,   14,  336,   24, 1099, 1156, 1268, 1099, 1210,
 /*   220 */  1079, 1099, 1099,  805,  886,  921,  535,   32,   32,   32,
 /*   230 */    32,   32, 1118,   32,   32, 1079,   32,   32, 1071,   32,
 /*   240 */    32,   32,   32,   32, 1118,   32,   32,   32, 1037,   32,
 /*   250 */    32,   32,   32, 1099,   32, 1118,   32,   32,   32,   32,
 /*   260 */    32,   32,   32,   32, 1156,   32,   32,   32,   32,   32,
 /*   270 */    32, 1221, 1118,   32,   32,   32, 1222,   32,   32, 1156,
 /*   280 */  1075,   32,   32,   32, 1156,   32, 1118,   32,   32, 1313,
 /*   290 */    32, 1222,   32,   32, 1221,   32,   32, 1099,   32,   32,
 /*   300 */    32, 1099, 1077,   32,   32,   32,   32,   32, 1277,   32,
 /*   310 */    32, 1118,   32,   32, 1075, 1229,   32,   32, 1093, 1079,
 /*   320 */  1079, 1050,   32,   32,   32,   32,   32, 1050,   32,   32,
 /*   330 */   410, 1099,   32,   32, 1374,   32,   32,   32,   32,   32,
 /*   340 */    32,   32, 1118,   32,   32,   32, 1093, 1099,   32, 1079,
 /*   350 */  1419, 1410, 1079, 1419, 1099,  410, 1099, 1079,   32,   32,
 /*   360 */  1079, 1093,   32,   32,   32, 1079,   32, 1071,   32,   32,
 /*   370 */  1037,   32,   32,   32, 1077,   32, 1077,   32,   32, 1077,
 /*   380 */    32, 1129,   32,   32, 1075, 1077, 1077,   32,   32,   32,
 /*   390 */    32, 1118, 1099,   32,   32,   32,   32,   32,   32,   32,
 /*   400 */    32,   32,   32,  410,   32,   32,  410,   32,   32,  268,
 /*   410 */    32,  209,   32, 1050,   32,  268, 1050,   32,   32,   32,
 /*   420 */  1037,   32,   32,  410,   32,   32, 1050,  370,  370,  370,
 /*   430 */   370,  370,  370,  370,  370, 1175, 1174,  370,  370,  370,
 /*   440 */   370, 1177,  370,  370,  370, 1180,  370,  370,  370,  370,
 /*   450 */   370,  370,  370, 1170,  370,  370,  370, 1171,  370,  370,
 /*   460 */   370,  370,  370, 1178,  370,  370,  370,  370,  370,  370,
 /*   470 */   370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*   480 */   370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*   490 */   370,  370,  370, 1150,  370,  370,  370,  370,  370,  370,
 /*   500 */   370, 1181, 1169,  370,  370,  370,  370,  370,  370,  370,
 /*   510 */   370,  370,  370, 1173,  370,  370,  370,  370,  370,  370,
 /*   520 */   370,  370,  370,  370, 1165,  370,  370,  370,  370,  370,
 /*   530 */  1166,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*   540 */  1168,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*   550 */   370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*   560 */   370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*   570 */   370,  370,
);
    const YY_REDUCE_USE_DFLT = -279;
    const YY_REDUCE_MAX = 426;
    static public $yy_reduce_ofst = array(
 /*     0 */   506, -127,  293,   83, 1354,  930,  718, 1142, 3678, 3468,
 /*    10 */  3046, 1988, 1778, 1566, 3258, 2200, 2836, 2624, 2412, 3888,
 /*    20 */  3888, 3888, 3888, 3888, 3888, 3888, 4945, 4097, 4521, 4309,
 /*    30 */  4733, 5137, 6289, 6673, 5905, 6097, 5713, 6481, 5329, 5521,
 /*    40 */  7091, 7839, 8116, 8668, 8300, 8484, 8852, 9036, 9956, 10140,
 /*    50 */  9772, 9588, 11980, 9220, 9404, 10324, 10508, 11796, 11428, 11612,
 /*    60 */  11244, 11060, 10692, 10876, 7912, 12234, 12164, 12454, 12695, 12511,
 /*    70 */  13052, 13005, 8197, 13479, 13433, 13282, 13236, 13663, 13617, 13847,
 /*    80 */  13801, 14081, 14031, 14336, 14267, 14405, 14552, 14617, 15223, 14801,
 /*    90 */  14855, 14993, 15361, 15177, 15039, 15415, 5166, 8130, 8498, 8738,
 /*   100 */  8388, 8710, 13983, 9052, 9236, 5409, 4963, 5601, 5795, 9444,
 /*   110 */  5947, 5927,  -11,   12,  254,  581,  645,  222,  364,  324,
 /*   120 */   324,  324,  335,  572,  552,  -59,  -58,  -91,  413,  125,
 /*   130 */   125,  125,  164, -203,   67,  305,  519,  675, -116,  398,
 /*   140 */  -113,  455, -189,  345,   37, -100, -136,   97,   97,  615,
 /*   150 */   140,  -10, -278,   97,  -10,  -81, -115,   43,  -10,  622,
 /*   160 */   564,  738,  295,  582,  574,  579,  -16,  380,  444,  330,
 /*   170 */   334,  412,  760, -255,  440,  483,  831,  379,  660,  901,
 /*   180 */   710,  952,  835,  835,  910,  888, -255,  724,  834,  885,
 /*   190 */   835,  842,  136,   -9, -255,  511,  440,  682,  482,  639,
 /*   200 */  -130,  -25,   49,  316,  179, -255,  693,  483,  483, -255,
 /*   210 */   440,  731, -255,  440,  340,  500,  569,   30,  153,  696,
 /*   220 */  -101,  543,  593, 1192, 1193, 1191, 1189, 1183, 1182, 1179,
 /*   230 */  1184, 1187, 1102, 1185, 1186, 1194, 1219, 1218, 1161, 1220,
 /*   240 */  1238, 1232, 1223, 1217, 1109, 1204, 1200, 1203, 1146, 1215,
 /*   250 */  1214, 1213, 1176, 1049, 1106, 1043, 1105, 1107, 1125, 1122,
 /*   260 */  1120, 1104, 1085, 1081, 1063, 1078, 1087, 1103, 1098, 1097,
 /*   270 */  1240, 1062, 1089, 1159, 1158, 1162, 1039, 1172, 1163, 1157,
 /*   280 */  1123, 1130, 1128, 1127, 1121, 1149, 1080, 1131, 1148, 1263,
 /*   290 */  1368, 1226, 1370, 1375, 1355, 1337, 1334, 1261, 1339, 1342,
 /*   300 */  1340, 1322, 1196, 1385, 1377, 1388, 1389, 1338, 1205, 1258,
 /*   310 */  1252, 1206, 1272, 1260, 1209, 1147, 1241, 1242, 1190, 1245,
 /*   320 */  1244, 1083, 1310, 1293, 1315, 1318, 1316, 1126, 1279, 1276,
 /*   330 */  1248, 1212, 1290, 1289, 1113, 1286, 1283, 1275, 1291, 1319,
 /*   340 */  1299, 1309, 1199, 1246, 1243, 1271, 1195, 1151, 1326, 1386,
 /*   350 */  1365, 1305, 1350, 1351, 1262, 1331, 1301, 1360, 1188,  991,
 /*   360 */   984,  894,  985,  998, 1002,  999, 1001,  963,  972,  970,
 /*   370 */   911,  969,  974,  981,  768,  975,  796, 1036, 1035,  822,
 /*   380 */  1034,  909, 1048, 1047, 1008,  821,  799, 1007, 1006, 1010,
 /*   390 */  1028,  955,  941, 1020,  776,  673,  567,  557,  695,  749,
 /*   400 */   393,  728, 1076,  163,  -63,  -83,  202,  250,   40,   56,
 /*   410 */    89,  545,  953,  758,  948,  889,  770,  967,  965,  964,
 /*   420 */   887,  862,  773,  708,  864,  936,  725,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, 122, ),
        /* 1 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 113, 114, 115, 116, 117, 118, 119, 121, ),
        /* 2 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 113, 114, 115, 116, 117, 118, 119, 121, ),
        /* 3 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 116, 117, 118, 119, 121, ),
        /* 4 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 5 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 6 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 7 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 8 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 9 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 10 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 11 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 12 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, 122, ),
        /* 13 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 14 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 15 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 16 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 17 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 18 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 19 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 20 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 21 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 22 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 23 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 24 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 25 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 116, 117, 118, 119, 121, ),
        /* 26 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 27 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 28 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 29 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 30 */ array(9, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 121, ),
        /* 31 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, 93, ),
        /* 32 */ array(9, 13, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 33 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 34 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 35 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 36 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 37 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 38 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 39 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 79, 80, 81, 82, 83, 84, 85, ),
        /* 40 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 41 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 42 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 43 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 44 */ array(9, 13, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 45 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 46 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 47 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 48 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 49 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 50 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 51 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 52 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 53 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 54 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 55 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 56 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 57 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 58 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 59 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 60 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 61 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 62 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 63 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 64 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 65 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 66 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 67 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 68 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 69 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 70 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 71 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 72 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 73 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 74 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 75 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 76 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 77 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 78 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 79 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 80 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 81 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 82 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 83 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 84 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 85 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 86 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 37, 39, ),
        /* 87 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 88 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 89 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 90 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 91 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 92 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 93 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 94 */ array(9, 13, 33, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, ),
        /* 95 */ array(9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, ),
        /* 96 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 116, 117, 118, ),
        /* 97 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 98 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 99 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 100 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 101 */ array(13, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, ),
        /* 102 */ array(13, 35, 36, 38, 39, 41, 42, 43, 44, 50, 51, 52, 53, ),
        /* 103 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 104 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, ),
        /* 105 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 35, ),
        /* 106 */ array(21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 110, 117, 118, 120, ),
        /* 107 */ array(13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, ),
        /* 108 */ array(21, 22, 23, 24, 25, 26, 27, 28, 29, 110, 117, 118, 120, ),
        /* 109 */ array(13, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 110 */ array(13, 35, 36, 38, 39, 41, 42, 43, 44, ),
        /* 111 */ array(9, 33, 34, 39, 109, ),
        /* 112 */ array(5, 8, 49, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, ),
        /* 113 */ array(9, 33, 34, 39, 109, ),
        /* 114 */ array(9, 33, 34, 39, ),
        /* 115 */ array(9, 33, 34, 39, ),
        /* 116 */ array(33, 34, 39, 109, ),
        /* 117 */ array(33, 34, 39, 109, ),
        /* 118 */ array(33, 34, 39, 109, ),
        /* 119 */ array(36, 45, 54, 55, 56, 57, ),
        /* 120 */ array(36, 45, 54, 55, 56, 57, ),
        /* 121 */ array(36, 45, 54, 55, 56, 57, ),
        /* 122 */ array(35, 39, 60, 108, ),
        /* 123 */ array(13, 32, 36, 40, ),
        /* 124 */ array(32, 36, 40, ),
        /* 125 */ array(13, 32, 36, ),
        /* 126 */ array(48, 89, 90, ),
        /* 127 */ array(35, 60, 108, ),
        /* 128 */ array(36, 45, 49, ),
        /* 129 */ array(30, 32, 66, 67, ),
        /* 130 */ array(30, 32, 66, 67, ),
        /* 131 */ array(30, 32, 66, 67, ),
        /* 132 */ array(23, 24, 25, 26, ),
        /* 133 */ array(23, 24, 25, 26, ),
        /* 134 */ array(13, 32, 40, ),
        /* 135 */ array(33, 34, 39, ),
        /* 136 */ array(33, 34, 39, ),
        /* 137 */ array(33, 34, 39, ),
        /* 138 */ array(48, 89, 90, ),
        /* 139 */ array(91, 111, 112, ),
        /* 140 */ array(116, 117, 118, ),
        /* 141 */ array(32, 40, ),
        /* 142 */ array(105, 106, ),
        /* 143 */ array(39, 48, ),
        /* 144 */ array(35, 39, ),
        /* 145 */ array(35, 39, ),
        /* 146 */ array(36, 45, ),
        /* 147 */ array(7, 9, 10, ),
        /* 148 */ array(7, 9, 10, ),
        /* 149 */ array(5, 8, 46, ),
        /* 150 */ array(33, 34, 37, ),
        /* 151 */ array(33, 62, 63, ),
        /* 152 */ array(23, 25, 27, ),
        /* 153 */ array(7, 9, 10, ),
        /* 154 */ array(33, 62, 63, ),
        /* 155 */ array(30, 33, 34, ),
        /* 156 */ array(30, 33, 34, ),
        /* 157 */ array(33, 34, 37, ),
        /* 158 */ array(33, 62, 63, ),
        /* 159 */ array(30, 33, 34, ),
        /* 160 */ array(33, 34, 39, ),
        /* 161 */ array(30, 33, 34, ),
        /* 162 */ array(39, 47, ),
        /* 163 */ array(13, 32, ),
        /* 164 */ array(13, 32, ),
        /* 165 */ array(30, 31, ),
        /* 166 */ array(32, ),
        /* 167 */ array(36, ),
        /* 168 */ array(94, ),
        /* 169 */ array(47, ),
        /* 170 */ array(35, ),
        /* 171 */ array(31, 48, ),
        /* 172 */ array(35, 39, ),
        /* 173 */ array(64, 65, ),
        /* 174 */ array(4, 68, ),
        /* 175 */ array(58, 59, ),
        /* 176 */ array(33, 39, ),
        /* 177 */ array(33, 39, ),
        /* 178 */ array(23, 25, ),
        /* 179 */ array(31, 48, ),
        /* 180 */ array(23, 25, ),
        /* 181 */ array(19, 47, ),
        /* 182 */ array(33, 34, ),
        /* 183 */ array(33, 34, ),
        /* 184 */ array(35, 39, ),
        /* 185 */ array(35, 39, ),
        /* 186 */ array(64, 65, ),
        /* 187 */ array(40, 91, ),
        /* 188 */ array(45, 49, ),
        /* 189 */ array(19, 47, ),
        /* 190 */ array(33, 34, ),
        /* 191 */ array(30, 31, ),
        /* 192 */ array(19, 47, ),
        /* 193 */ array(31, 37, ),
        /* 194 */ array(64, 65, ),
        /* 195 */ array(35, 39, ),
        /* 196 */ array(4, 68, ),
        /* 197 */ array(19, 47, ),
        /* 198 */ array(19, 47, ),
        /* 199 */ array(35, 39, ),
        /* 200 */ array(31, 37, ),
        /* 201 */ array(19, 47, ),
        /* 202 */ array(19, 47, ),
        /* 203 */ array(19, 47, ),
        /* 204 */ array(19, 47, ),
        /* 205 */ array(64, 65, ),
        /* 206 */ array(19, 47, ),
        /* 207 */ array(58, 59, ),
        /* 208 */ array(58, 59, ),
        /* 209 */ array(64, 65, ),
        /* 210 */ array(4, 68, ),
        /* 211 */ array(19, 47, ),
        /* 212 */ array(64, 65, ),
        /* 213 */ array(4, 68, ),
        /* 214 */ array(31, 37, ),
        /* 215 */ array(36, ),
        /* 216 */ array(47, ),
        /* 217 */ array(35, ),
        /* 218 */ array(36, ),
        /* 219 */ array(94, ),
        /* 220 */ array(39, ),
        /* 221 */ array(36, ),
        /* 222 */ array(36, ),
        /* 223 */ array(19, 39, ),
        /* 224 */ array(19, 39, ),
        /* 225 */ array(19, 39, ),
        /* 226 */ array(19, 39, ),
        /* 227 */ array(122, ),
        /* 228 */ array(122, ),
        /* 229 */ array(122, ),
        /* 230 */ array(122, ),
        /* 231 */ array(122, ),
        /* 232 */ array(37, ),
        /* 233 */ array(122, ),
        /* 234 */ array(122, ),
        /* 235 */ array(39, ),
        /* 236 */ array(122, ),
        /* 237 */ array(122, ),
        /* 238 */ array(49, ),
        /* 239 */ array(122, ),
        /* 240 */ array(122, ),
        /* 241 */ array(122, ),
        /* 242 */ array(122, ),
        /* 243 */ array(122, ),
        /* 244 */ array(37, ),
        /* 245 */ array(122, ),
        /* 246 */ array(122, ),
        /* 247 */ array(122, ),
        /* 248 */ array(33, ),
        /* 249 */ array(122, ),
        /* 250 */ array(122, ),
        /* 251 */ array(122, ),
        /* 252 */ array(122, ),
        /* 253 */ array(36, ),
        /* 254 */ array(122, ),
        /* 255 */ array(37, ),
        /* 256 */ array(122, ),
        /* 257 */ array(122, ),
        /* 258 */ array(122, ),
        /* 259 */ array(122, ),
        /* 260 */ array(122, ),
        /* 261 */ array(122, ),
        /* 262 */ array(122, ),
        /* 263 */ array(122, ),
        /* 264 */ array(47, ),
        /* 265 */ array(122, ),
        /* 266 */ array(122, ),
        /* 267 */ array(122, ),
        /* 268 */ array(122, ),
        /* 269 */ array(122, ),
        /* 270 */ array(122, ),
        /* 271 */ array(31, ),
        /* 272 */ array(37, ),
        /* 273 */ array(122, ),
        /* 274 */ array(122, ),
        /* 275 */ array(122, ),
        /* 276 */ array(46, ),
        /* 277 */ array(122, ),
        /* 278 */ array(122, ),
        /* 279 */ array(47, ),
        /* 280 */ array(91, ),
        /* 281 */ array(122, ),
        /* 282 */ array(122, ),
        /* 283 */ array(122, ),
        /* 284 */ array(47, ),
        /* 285 */ array(122, ),
        /* 286 */ array(37, ),
        /* 287 */ array(122, ),
        /* 288 */ array(122, ),
        /* 289 */ array(2, ),
        /* 290 */ array(122, ),
        /* 291 */ array(46, ),
        /* 292 */ array(122, ),
        /* 293 */ array(122, ),
        /* 294 */ array(31, ),
        /* 295 */ array(122, ),
        /* 296 */ array(122, ),
        /* 297 */ array(36, ),
        /* 298 */ array(122, ),
        /* 299 */ array(122, ),
        /* 300 */ array(122, ),
        /* 301 */ array(36, ),
        /* 302 */ array(25, ),
        /* 303 */ array(122, ),
        /* 304 */ array(122, ),
        /* 305 */ array(122, ),
        /* 306 */ array(122, ),
        /* 307 */ array(122, ),
        /* 308 */ array(108, ),
        /* 309 */ array(122, ),
        /* 310 */ array(122, ),
        /* 311 */ array(37, ),
        /* 312 */ array(122, ),
        /* 313 */ array(122, ),
        /* 314 */ array(91, ),
        /* 315 */ array(107, ),
        /* 316 */ array(122, ),
        /* 317 */ array(122, ),
        /* 318 */ array(19, ),
        /* 319 */ array(39, ),
        /* 320 */ array(39, ),
        /* 321 */ array(13, ),
        /* 322 */ array(122, ),
        /* 323 */ array(122, ),
        /* 324 */ array(122, ),
        /* 325 */ array(122, ),
        /* 326 */ array(122, ),
        /* 327 */ array(13, ),
        /* 328 */ array(122, ),
        /* 329 */ array(122, ),
        /* 330 */ array(32, ),
        /* 331 */ array(36, ),
        /* 332 */ array(122, ),
        /* 333 */ array(122, ),
        /* 334 */ array(40, ),
        /* 335 */ array(122, ),
        /* 336 */ array(122, ),
        /* 337 */ array(122, ),
        /* 338 */ array(122, ),
        /* 339 */ array(122, ),
        /* 340 */ array(122, ),
        /* 341 */ array(122, ),
        /* 342 */ array(37, ),
        /* 343 */ array(122, ),
        /* 344 */ array(122, ),
        /* 345 */ array(122, ),
        /* 346 */ array(19, ),
        /* 347 */ array(36, ),
        /* 348 */ array(122, ),
        /* 349 */ array(39, ),
        /* 350 */ array(48, ),
        /* 351 */ array(100, ),
        /* 352 */ array(39, ),
        /* 353 */ array(48, ),
        /* 354 */ array(36, ),
        /* 355 */ array(32, ),
        /* 356 */ array(36, ),
        /* 357 */ array(39, ),
        /* 358 */ array(122, ),
        /* 359 */ array(122, ),
        /* 360 */ array(39, ),
        /* 361 */ array(19, ),
        /* 362 */ array(122, ),
        /* 363 */ array(122, ),
        /* 364 */ array(122, ),
        /* 365 */ array(39, ),
        /* 366 */ array(122, ),
        /* 367 */ array(49, ),
        /* 368 */ array(122, ),
        /* 369 */ array(122, ),
        /* 370 */ array(33, ),
        /* 371 */ array(122, ),
        /* 372 */ array(122, ),
        /* 373 */ array(122, ),
        /* 374 */ array(25, ),
        /* 375 */ array(122, ),
        /* 376 */ array(25, ),
        /* 377 */ array(122, ),
        /* 378 */ array(122, ),
        /* 379 */ array(25, ),
        /* 380 */ array(122, ),
        /* 381 */ array(34, ),
        /* 382 */ array(122, ),
        /* 383 */ array(122, ),
        /* 384 */ array(91, ),
        /* 385 */ array(25, ),
        /* 386 */ array(25, ),
        /* 387 */ array(122, ),
        /* 388 */ array(122, ),
        /* 389 */ array(122, ),
        /* 390 */ array(122, ),
        /* 391 */ array(37, ),
        /* 392 */ array(36, ),
        /* 393 */ array(122, ),
        /* 394 */ array(122, ),
        /* 395 */ array(122, ),
        /* 396 */ array(122, ),
        /* 397 */ array(122, ),
        /* 398 */ array(122, ),
        /* 399 */ array(122, ),
        /* 400 */ array(122, ),
        /* 401 */ array(122, ),
        /* 402 */ array(122, ),
        /* 403 */ array(32, ),
        /* 404 */ array(122, ),
        /* 405 */ array(122, ),
        /* 406 */ array(32, ),
        /* 407 */ array(122, ),
        /* 408 */ array(122, ),
        /* 409 */ array(9, ),
        /* 410 */ array(122, ),
        /* 411 */ array(45, ),
        /* 412 */ array(122, ),
        /* 413 */ array(13, ),
        /* 414 */ array(122, ),
        /* 415 */ array(9, ),
        /* 416 */ array(13, ),
        /* 417 */ array(122, ),
        /* 418 */ array(122, ),
        /* 419 */ array(122, ),
        /* 420 */ array(33, ),
        /* 421 */ array(122, ),
        /* 422 */ array(122, ),
        /* 423 */ array(32, ),
        /* 424 */ array(122, ),
        /* 425 */ array(122, ),
        /* 426 */ array(13, ),
        /* 427 */ array(122, ),
        /* 428 */ array(122, ),
        /* 429 */ array(122, ),
        /* 430 */ array(122, ),
        /* 431 */ array(122, ),
        /* 432 */ array(122, ),
        /* 433 */ array(122, ),
        /* 434 */ array(122, ),
        /* 435 */ array(19, ),
        /* 436 */ array(19, ),
        /* 437 */ array(122, ),
        /* 438 */ array(122, ),
        /* 439 */ array(122, ),
        /* 440 */ array(122, ),
        /* 441 */ array(19, ),
        /* 442 */ array(122, ),
        /* 443 */ array(122, ),
        /* 444 */ array(122, ),
        /* 445 */ array(19, ),
        /* 446 */ array(122, ),
        /* 447 */ array(122, ),
        /* 448 */ array(122, ),
        /* 449 */ array(122, ),
        /* 450 */ array(122, ),
        /* 451 */ array(122, ),
        /* 452 */ array(122, ),
        /* 453 */ array(19, ),
        /* 454 */ array(122, ),
        /* 455 */ array(122, ),
        /* 456 */ array(122, ),
        /* 457 */ array(19, ),
        /* 458 */ array(122, ),
        /* 459 */ array(122, ),
        /* 460 */ array(122, ),
        /* 461 */ array(122, ),
        /* 462 */ array(122, ),
        /* 463 */ array(13, ),
        /* 464 */ array(122, ),
        /* 465 */ array(122, ),
        /* 466 */ array(122, ),
        /* 467 */ array(122, ),
        /* 468 */ array(122, ),
        /* 469 */ array(122, ),
        /* 470 */ array(122, ),
        /* 471 */ array(122, ),
        /* 472 */ array(122, ),
        /* 473 */ array(122, ),
        /* 474 */ array(122, ),
        /* 475 */ array(122, ),
        /* 476 */ array(122, ),
        /* 477 */ array(122, ),
        /* 478 */ array(122, ),
        /* 479 */ array(122, ),
        /* 480 */ array(122, ),
        /* 481 */ array(122, ),
        /* 482 */ array(122, ),
        /* 483 */ array(122, ),
        /* 484 */ array(122, ),
        /* 485 */ array(122, ),
        /* 486 */ array(122, ),
        /* 487 */ array(122, ),
        /* 488 */ array(122, ),
        /* 489 */ array(122, ),
        /* 490 */ array(122, ),
        /* 491 */ array(122, ),
        /* 492 */ array(122, ),
        /* 493 */ array(42, ),
        /* 494 */ array(122, ),
        /* 495 */ array(122, ),
        /* 496 */ array(122, ),
        /* 497 */ array(122, ),
        /* 498 */ array(122, ),
        /* 499 */ array(122, ),
        /* 500 */ array(122, ),
        /* 501 */ array(19, ),
        /* 502 */ array(19, ),
        /* 503 */ array(122, ),
        /* 504 */ array(122, ),
        /* 505 */ array(122, ),
        /* 506 */ array(122, ),
        /* 507 */ array(122, ),
        /* 508 */ array(122, ),
        /* 509 */ array(122, ),
        /* 510 */ array(122, ),
        /* 511 */ array(122, ),
        /* 512 */ array(122, ),
        /* 513 */ array(13, ),
        /* 514 */ array(122, ),
        /* 515 */ array(122, ),
        /* 516 */ array(122, ),
        /* 517 */ array(122, ),
        /* 518 */ array(122, ),
        /* 519 */ array(122, ),
        /* 520 */ array(122, ),
        /* 521 */ array(122, ),
        /* 522 */ array(122, ),
        /* 523 */ array(122, ),
        /* 524 */ array(19, ),
        /* 525 */ array(122, ),
        /* 526 */ array(122, ),
        /* 527 */ array(122, ),
        /* 528 */ array(122, ),
        /* 529 */ array(122, ),
        /* 530 */ array(19, ),
        /* 531 */ array(122, ),
        /* 532 */ array(122, ),
        /* 533 */ array(122, ),
        /* 534 */ array(122, ),
        /* 535 */ array(122, ),
        /* 536 */ array(122, ),
        /* 537 */ array(122, ),
        /* 538 */ array(122, ),
        /* 539 */ array(122, ),
        /* 540 */ array(19, ),
        /* 541 */ array(122, ),
        /* 542 */ array(122, ),
        /* 543 */ array(122, ),
        /* 544 */ array(122, ),
        /* 545 */ array(122, ),
        /* 546 */ array(122, ),
        /* 547 */ array(122, ),
        /* 548 */ array(122, ),
        /* 549 */ array(122, ),
        /* 550 */ array(122, ),
        /* 551 */ array(122, ),
        /* 552 */ array(122, ),
        /* 553 */ array(122, ),
        /* 554 */ array(122, ),
        /* 555 */ array(122, ),
        /* 556 */ array(122, ),
        /* 557 */ array(122, ),
        /* 558 */ array(122, ),
        /* 559 */ array(122, ),
        /* 560 */ array(122, ),
        /* 561 */ array(122, ),
        /* 562 */ array(122, ),
        /* 563 */ array(122, ),
        /* 564 */ array(122, ),
        /* 565 */ array(122, ),
        /* 566 */ array(122, ),
        /* 567 */ array(122, ),
        /* 568 */ array(122, ),
        /* 569 */ array(122, ),
        /* 570 */ array(122, ),
        /* 571 */ array(122, ),
        /* 572 */ array(),
        /* 573 */ array(),
        /* 574 */ array(),
        /* 575 */ array(),
        /* 576 */ array(),
        /* 577 */ array(),
        /* 578 */ array(),
        /* 579 */ array(),
        /* 580 */ array(),
        /* 581 */ array(),
        /* 582 */ array(),
        /* 583 */ array(),
        /* 584 */ array(),
        /* 585 */ array(),
        /* 586 */ array(),
        /* 587 */ array(),
        /* 588 */ array(),
        /* 589 */ array(),
        /* 590 */ array(),
        /* 591 */ array(),
        /* 592 */ array(),
        /* 593 */ array(),
        /* 594 */ array(),
        /* 595 */ array(),
        /* 596 */ array(),
        /* 597 */ array(),
        /* 598 */ array(),
        /* 599 */ array(),
        /* 600 */ array(),
        /* 601 */ array(),
        /* 602 */ array(),
        /* 603 */ array(),
        /* 604 */ array(),
        /* 605 */ array(),
        /* 606 */ array(),
        /* 607 */ array(),
        /* 608 */ array(),
        /* 609 */ array(),
        /* 610 */ array(),
        /* 611 */ array(),
        /* 612 */ array(),
        /* 613 */ array(),
        /* 614 */ array(),
        /* 615 */ array(),
        /* 616 */ array(),
        /* 617 */ array(),
        /* 618 */ array(),
        /* 619 */ array(),
        /* 620 */ array(),
        /* 621 */ array(),
        /* 622 */ array(),
        /* 623 */ array(),
        /* 624 */ array(),
        /* 625 */ array(),
        /* 626 */ array(),
        /* 627 */ array(),
        /* 628 */ array(),
        /* 629 */ array(),
        /* 630 */ array(),
        /* 631 */ array(),
        /* 632 */ array(),
        /* 633 */ array(),
        /* 634 */ array(),
        /* 635 */ array(),
        /* 636 */ array(),
        /* 637 */ array(),
        /* 638 */ array(),
        /* 639 */ array(),
        /* 640 */ array(),
        /* 641 */ array(),
        /* 642 */ array(),
        /* 643 */ array(),
        /* 644 */ array(),
        /* 645 */ array(),
        /* 646 */ array(),
        /* 647 */ array(),
        /* 648 */ array(),
        /* 649 */ array(),
        /* 650 */ array(),
        /* 651 */ array(),
        /* 652 */ array(),
        /* 653 */ array(),
        /* 654 */ array(),
        /* 655 */ array(),
        /* 656 */ array(),
        /* 657 */ array(),
        /* 658 */ array(),
        /* 659 */ array(),
        /* 660 */ array(),
        /* 661 */ array(),
        /* 662 */ array(),
        /* 663 */ array(),
        /* 664 */ array(),
        /* 665 */ array(),
        /* 666 */ array(),
        /* 667 */ array(),
        /* 668 */ array(),
        /* 669 */ array(),
        /* 670 */ array(),
        /* 671 */ array(),
        /* 672 */ array(),
        /* 673 */ array(),
        /* 674 */ array(),
        /* 675 */ array(),
        /* 676 */ array(),
        /* 677 */ array(),
        /* 678 */ array(),
        /* 679 */ array(),
        /* 680 */ array(),
        /* 681 */ array(),
        /* 682 */ array(),
        /* 683 */ array(),
        /* 684 */ array(),
        /* 685 */ array(),
        /* 686 */ array(),
        /* 687 */ array(),
        /* 688 */ array(),
        /* 689 */ array(),
        /* 690 */ array(),
        /* 691 */ array(),
        /* 692 */ array(),
        /* 693 */ array(),
        /* 694 */ array(),
        /* 695 */ array(),
        /* 696 */ array(),
        /* 697 */ array(),
        /* 698 */ array(),
        /* 699 */ array(),
        /* 700 */ array(),
        /* 701 */ array(),
        /* 702 */ array(),
        /* 703 */ array(),
        /* 704 */ array(),
        /* 705 */ array(),
        /* 706 */ array(),
        /* 707 */ array(),
        /* 708 */ array(),
        /* 709 */ array(),
        /* 710 */ array(),
        /* 711 */ array(),
        /* 712 */ array(),
        /* 713 */ array(),
        /* 714 */ array(),
        /* 715 */ array(),
        /* 716 */ array(),
        /* 717 */ array(),
        /* 718 */ array(),
        /* 719 */ array(),
        /* 720 */ array(),
        /* 721 */ array(),
        /* 722 */ array(),
        /* 723 */ array(),
        /* 724 */ array(),
        /* 725 */ array(),
        /* 726 */ array(),
        /* 727 */ array(),
        /* 728 */ array(),
        /* 729 */ array(),
        /* 730 */ array(),
        /* 731 */ array(),
        /* 732 */ array(),
        /* 733 */ array(),
        /* 734 */ array(),
        /* 735 */ array(),
        /* 736 */ array(),
        /* 737 */ array(),
        /* 738 */ array(),
        /* 739 */ array(),
        /* 740 */ array(),
        /* 741 */ array(),
        /* 742 */ array(),
        /* 743 */ array(),
        /* 744 */ array(),
        /* 745 */ array(),
        /* 746 */ array(),
        /* 747 */ array(),
        /* 748 */ array(),
        /* 749 */ array(),
        /* 750 */ array(),
        /* 751 */ array(),
        /* 752 */ array(),
        /* 753 */ array(),
        /* 754 */ array(),
        /* 755 */ array(),
        /* 756 */ array(),
        /* 757 */ array(),
        /* 758 */ array(),
        /* 759 */ array(),
        /* 760 */ array(),
        /* 761 */ array(),
        /* 762 */ array(),
        /* 763 */ array(),
        /* 764 */ array(),
        /* 765 */ array(),
        /* 766 */ array(),
        /* 767 */ array(),
        /* 768 */ array(),
        /* 769 */ array(),
        /* 770 */ array(),
        /* 771 */ array(),
        /* 772 */ array(),
        /* 773 */ array(),
        /* 774 */ array(),
        /* 775 */ array(),
        /* 776 */ array(),
        /* 777 */ array(),
        /* 778 */ array(),
        /* 779 */ array(),
        /* 780 */ array(),
        /* 781 */ array(),
        /* 782 */ array(),
        /* 783 */ array(),
        /* 784 */ array(),
        /* 785 */ array(),
        /* 786 */ array(),
        /* 787 */ array(),
        /* 788 */ array(),
        /* 789 */ array(),
        /* 790 */ array(),
        /* 791 */ array(),
        /* 792 */ array(),
        /* 793 */ array(),
        /* 794 */ array(),
        /* 795 */ array(),
        /* 796 */ array(),
        /* 797 */ array(),
        /* 798 */ array(),
        /* 799 */ array(),
        /* 800 */ array(),
        /* 801 */ array(),
        /* 802 */ array(),
        /* 803 */ array(),
        /* 804 */ array(),
        /* 805 */ array(),
);
    static public $yy_default = array(
 /*     0 */  1370, 1370, 1370, 1370, 1370, 1370, 1370,  813, 1370, 1370,
 /*    10 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,  806,
 /*    20 */   807,  916,  917,  955,  956,  815, 1370, 1370, 1370, 1370,
 /*    30 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
 /*    40 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
 /*    50 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
 /*    60 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
 /*    70 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
 /*    80 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
 /*    90 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
 /*   100 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
 /*   110 */  1370, 1370,  994, 1370, 1370, 1370, 1370, 1370, 1370, 1028,
 /*   120 */  1032, 1029, 1370, 1099, 1098, 1099, 1370, 1370, 1050, 1002,
 /*   130 */  1003, 1004, 1370, 1370, 1099, 1370, 1370, 1370, 1370, 1370,
 /*   140 */  1370, 1098,  912, 1370, 1370, 1370, 1370,  995,  996, 1370,
 /*   150 */  1370, 1013, 1140,  997, 1014, 1370, 1370, 1370, 1015, 1370,
 /*   160 */   908, 1370, 1370, 1099, 1089, 1370, 1092, 1370, 1370, 1370,
 /*   170 */  1370, 1370, 1370, 1009,  999, 1010, 1370, 1370, 1141, 1370,
 /*   180 */  1142, 1370, 1112, 1110, 1370, 1370, 1008, 1070, 1050, 1370,
 /*   190 */   833, 1370, 1370, 1370,  834, 1370, 1001, 1370, 1370, 1370,
 /*   200 */  1370, 1370, 1370, 1370, 1370, 1007, 1370, 1012, 1011, 1006,
 /*   210 */  1000, 1370, 1005,  998, 1370, 1370, 1370, 1370, 1370,  939,
 /*   220 */  1370, 1370, 1370, 1370, 1370, 1370, 1370, 1270, 1286, 1192,
 /*   230 */  1232, 1314, 1370, 1312, 1260, 1370, 1230, 1358,  864, 1210,
 /*   240 */  1266, 1304, 1212, 1360, 1370, 1196,  871, 1198, 1370, 1284,
 /*   250 */  1216, 1248, 1306, 1370, 1262, 1370, 1268, 1214, 1264,  948,
 /*   260 */  1242, 1256, 1254, 1282, 1370, 1292, 1208, 1344, 1276, 1236,
 /*   270 */   966,  972, 1370, 1250, 1290, 1206, 1370, 1252, 1234, 1370,
 /*   280 */  1370, 1294, 1280, 1244, 1370, 1246, 1370, 1278, 1258,  958,
 /*   290 */   964, 1370, 1296, 1274,  971, 1364,  962, 1370, 1202, 1272,
 /*   300 */  1288, 1370, 1143, 1220, 1218, 1200, 1222, 1340, 1370, 1224,
 /*   310 */  1180, 1370, 1240, 1238, 1370, 1370, 1226, 1228, 1370, 1370,
 /*   320 */  1370, 1370, 1336,  898,  929, 1178, 1334, 1370, 1342, 1176,
 /*   330 */  1370, 1370, 1164,  927, 1070, 1194, 1338, 1346,  823, 1356,
 /*   340 */   821,  826, 1370, 1204,  828,  819, 1370, 1370, 1186,  810,
 /*   350 */  1370, 1370,  825, 1370, 1370, 1370, 1370, 1370, 1352, 1350,
 /*   360 */  1370, 1370, 1348, 1174, 1324, 1370, 1320,  832, 1354, 1170,
 /*   370 */  1370, 1166, 1188, 1332, 1139, 1362, 1145, 1330,  873, 1137,
 /*   380 */  1156,  900, 1298,  935, 1370, 1138, 1144, 1182, 1366, 1146,
 /*   390 */  1148, 1370, 1370, 1318, 1316, 1184, 1190,  875, 1322,  867,
 /*   400 */  1162,  869, 1160, 1370, 1328, 1326, 1370, 1158, 1152, 1103,
 /*   410 */   933,  906, 1302, 1370, 1172, 1105, 1370,  931, 1310, 1308,
 /*   420 */  1370, 1154, 1150, 1370, 1168, 1300, 1370,  872, 1273,  868,
 /*   430 */  1343,  899,  876, 1269,  930, 1370, 1370, 1271, 1357,  928,
 /*   440 */  1305, 1370, 1339,  934,  949, 1370, 1359, 1341, 1267,  936,
 /*   450 */  1345,  874, 1277, 1370,  932,  870, 1321, 1370, 1325, 1275,
 /*   460 */  1361, 1365, 1199, 1100, 1309, 1169, 1173, 1301, 1303, 1311,
 /*   470 */  1183, 1189, 1177, 1337, 1335, 1167, 1179, 1155, 1151, 1329,
 /*   480 */  1331, 1147, 1149, 1163, 1161, 1333, 1363, 1299, 1265, 1367,
 /*   490 */  1153, 1157, 1195, 1069, 1205,  829, 1355, 1353, 1175, 1171,
 /*   500 */   827, 1370, 1370, 1187,  820,  822,  824, 1351, 1349, 1221,
 /*   510 */  1219, 1223, 1225, 1088, 1165, 1201, 1181, 1239, 1347, 1241,
 /*   520 */  1227, 1229, 1327, 1159, 1370, 1207, 1235, 1247, 1249,  965,
 /*   530 */  1370, 1237, 1203, 1281, 1293,  967, 1291, 1289, 1209, 1257,
 /*   540 */  1370, 1283, 1279, 1255, 1285, 1323, 1251, 1253, 1287,  963,
 /*   550 */  1245, 1295, 1213, 1211, 1317, 1215, 1217, 1263, 1315, 1185,
 /*   560 */  1191, 1193, 1197, 1233, 1231, 1297, 1243, 1319, 1259, 1261,
 /*   570 */  1313, 1307,  854,  941,  858,  857,  856,  855,  859,  814,
 /*   580 */   951,  952,  954,  849,  925,  957,  816,  950,  891,  942,
 /*   590 */   946,  947,  943,  913,  944,  945,  938,  937,  809,  953,
 /*   600 */   940,  915,  897,  851,  850,  852,  853,  960,  848,  961,
 /*   610 */   887,  894,  847,  926,  959,  976, 1119, 1118, 1107, 1106,
 /*   620 */  1120, 1121, 1123, 1122, 1134, 1131, 1104, 1102, 1045,  974,
 /*   630 */  1073, 1091, 1084, 1094, 1101, 1098, 1096, 1095, 1126, 1129,
 /*   640 */  1079, 1078, 1075, 1074, 1080, 1081, 1113, 1111, 1097, 1082,
 /*   650 */  1093, 1047, 1127, 1124, 1135, 1132, 1130, 1133, 1046, 1128,
 /*   660 */  1125, 1136, 1090, 1072, 1022, 1034, 1021, 1033, 1023, 1024,
 /*   670 */   983, 1027, 1026, 1025, 1020, 1016, 1369, 1368,  811,  808,
 /*   680 */   812,  817, 1109, 1108,  830,  818, 1017,  973, 1114, 1087,
 /*   690 */  1086, 1085, 1066, 1067, 1071, 1077, 1076, 1068, 1083, 1044,
 /*   700 */  1039, 1031, 1030, 1018, 1040, 1042, 1041, 1019,  968, 1043,
 /*   710 */  1115, 1117,  877,  866,  863,  861,  901,  902,  904,  907,
 /*   720 */   905,  903,  865,  862,  844,  842,  840,  831,  845,  846,
 /*   730 */   860,  843,  879,  878,  880,  881,  914,  911,  910,  909,
 /*   740 */   918,  919,  923,  922,  921,  920,  896,  895,  886,  885,
 /*   750 */   884,  883,  882,  888,  892,  893,  890,  889,  841,  839,
 /*   760 */  1063, 1061, 1059, 1060, 1064, 1065,  977,  975, 1048, 1062,
 /*   770 */  1056, 1055, 1049,  970,  969, 1116, 1051, 1052, 1058, 1057,
 /*   780 */  1054, 1053,  978,  979,  992,  991,  990,  989,  993, 1036,
 /*   790 */   838,  837,  836,  835,  988,  987, 1035,  982,  981,  980,
 /*   800 */  1037, 1038,  986,  985,  984,  924,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 338;
    const YYSTACKDEPTH = 100;
    const block_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 806;
    const YYNRULE = 564;
    const YYERRORSYMBOL = 123;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'NOTEQUAL',    
  'EQUAL',         'LOGICALAND',    'BINARYAND',     'BINARYOR',    
  'LOGICALOR',     'AMPERSAND',     'BINARYXOR',     'UINDIRECTION',
  'UADRESS',       'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',       
  'UBRACKET',      'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'SEMICOLON',   
  'FORKWD',        'UNSIGNED',      'SIGNED',        'LONG',        
  'SHORT',         'INT',           'CHAR',          'DOUBLE',      
  'FLOAT',         'VOID',          'GREATER',       'COMMA',       
  'LESSER',        'MULTIPLY',      'CONSTKWD',      'TYPENAME',    
  'LEFTROUNDBRACKET',  'RIGHTROUNDBRACKET',  'SIZEOF',        'IDENTIFIER',  
  'PREPROCESSOR_CONCAT',  'PREPROCESSOR_STRINGIFY',  'STRING',        'CHARACTER',   
  'NUMERIC',       'LEFTSQUAREBRACKET',  'RIGHTSQUAREBRACKET',  'LEFTFIGUREBRACKET',
  'RIGHTFIGUREBRACKET',  'ASSIGN',        'REINTERPRET_CAST',  'DYNAMIC_CAST',
  'STATIC_CAST',   'CONST_CAST',    'RIGHTARROW',    'DOT',         
  'DECREMENT',     'INCREMENT',     'PLUS',          'MINUS',       
  'BINARYNOT',     'LOGICALNOT',    'DIVISION',      'MODULOSIGN',  
  'RIGHTSHIFT',    'LEFTSHIFT',     'GREATER_OR_EQUAL',  'LESSER_OR_EQUAL',
  'NOT_EQUAL',     'MINUS_ASSIGN',  'PLUS_ASSIGN',   'MULTIPLY_ASSIGN',
  'DIVISION_ASSIGN',  'MODULO_ASSIGN',  'LEFTSHIFT_ASSIGN',  'RIGHTSHIFT_ASSIGN',
  'BINARYAND_ASSIGN',  'BINARYOR_ASSIGN',  'BINARYXOR_ASSIGN',  'FRIENDKWD',   
  'VOLATILEKWD',   'REGISTERKWD',   'EXTERNKWD',     'STATICKWD',   
  'DELETE',        'NEWKWD',        'BREAKKWD',      'TYPEDEF',     
  'IFKWD',         'DEFAULTKWD',    'CASEKWD',       'COLON',       
  'SWITCHKWD',     'ELLIPSIS',      'CATCHKWD',      'TRYKWD',      
  'GOTOKWD',       'CONTINUEKWD',   'RETURNKWD',     'DOKWD',       
  'WHILEKWD',      'PREPROCESSOR_INCLUDE',  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_IF',
  'PREPROCESSOR_IFDEF',  'PREPROCESSOR_ELSE',  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ENDIF',
  'OUTER_CONSTRUCTOR_NAME',  'OPERATOROVERLOADDECLARATION',  'ENUMKWD',       'SLOTSKWD',    
  'SIGNALSKWD',    'PRIVATEKWD',    'PROTECTEDKWD',  'PUBLICKWD',   
  'UNIONKWD',      'STRUCTKWD',     'CLASSKWD',      'TEMPLATEKWD', 
  'TYPENAMEKWD',   'NAMESPACEKWD',  'COMMENT',       'error',       
  'program',       'stmt_list',     'comment_list',  'stmt_or_defined_macro',
  'namespace_definition_start',  'namespacekwd',  'identifier',    'stmt',        
  'namespace_body',  'start_of_empty_namespace',  'leftfigurebracket',  'rightfigurebracket',
  'namespace_statements',  'class_or_union_or_struct',  'identified_type_meta_specifier_with_template_def',  'type_meta_specifier_with_template_def',
  'structure_body',  'nonidentified_type_meta_specifier_with_template_def',  'template_spec_list',  'comma',       
  'template_spec',  'template_typename',  'assign',        'type_or_type_ref_or_with_ptr',
  'expr_prec_7',   'typenamekwd',   'classkwd',      'structkwd',   
  'enumkwd',       'builtintype',   'template_def',  'templatekwd', 
  'lesser',        'greater',       'type_meta_specifier',  'unionkwd',    
  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',  'visibility_spec_full',  'visibility_spec',
  'colon',         'signal_slots',  'publickwd',     'protectedkwd',
  'privatekwd',    'signalskwd',    'slotskwd',      'enum_body',   
  'enum_value_list',  'enum_value',    'expr_atom',     'enum_definition_start',
  'type_or_type_with_qualifier',  'function_definition_without_type',  'type',          'lvalue',      
  'formal_args_list_with_or_without_const',  'function_body',  'operator_overload_declaration_type_modificators',  'ampersand',   
  'operator_overload_declaration_ptr',  'constkwd',      'multiply',      'operator_overload_declaration_without_type',
  'operatoroverloaddeclaration',  'typename',      'formal_args_list',  'binarynot',   
  'outer_constructor_name',  'namespace_resolve',  'outer_constructor_name_terminal',  'outer_destructor_name',
  'leftroundbracket',  'rightroundbracket',  'arg_list',      'arg',         
  'preprocessor_cond',  'preprocessor_endif',  'preprocessor_else_clauses',  'preprocessor_elif_list',
  'preprocessor_else',  'preprocessor_elif',  'preprocessor_elif_terminal',  'preprocessor_else_terminal',
  'preprocessor_ifdef',  'preprocessor_if',  'preprocessor_define',  'preprocessor_include',
  'whilekwd',      'expr_prec_10',  'dokwd',         'expr_prec_11',
  'semicolon',     'returnkwd',     'continuekwd',   'gotokwd',     
  'try_catch',     'try',           'catch_list',    'trykwd',      
  'catch',         'catchkwd',      'expr_prec_11_or_ellipsis',  'ellipsis',    
  'switch_stmt',   'switchkwd',     'switch_case_list',  'case',        
  'casekwd',       'defaultkwd',    'if_then_else',  'if_then',     
  'elsekwd',       'ifkwd',         'typedef',       'breakkwd',    
  'newkwd',        'delete',        'leftsquarebracket',  'rightsquarebracket',
  'lvalue_or_assignment_list',  'expr_list',     'type_with_qualifier',  'varqualifier',
  'statickwd',     'externkwd',     'registerkwd',   'volatilekwd', 
  'friendkwd',     'expr_prec_9',   'binaryxor_assign',  'binaryor_assign',
  'binaryand_assign',  'rightshift_assign',  'leftshift_assign',  'modulo_assign',
  'division_assign',  'multiply_assign',  'plus_assign',   'minus_assign',
  'logicaland',    'expr_binary_ops',  'logicalor',     'binaryxor',   
  'expr_or_equal',  'binaryor',      'not_equal',     'expr_prec_8', 
  'equal',         'lesser_or_equal',  'greater_or_equal',  'leftshift',   
  'expr_prec_6',   'rightshift',    'minus',         'expr_prec_5', 
  'plus',          'modulosign',    'expr_prec_4',   'division',    
  'try_value_access',  'try_pointer_access',  'expr_prec_3',   'typecast',    
  'logicalnot',    'expr_prec_2',   'decrement',     'increment',   
  'cpp_style_cast',  'dot',           'rightarrow',    'const_cast',  
  'static_cast',   'dynamic_cast',  'reinterpret_cast',  'lvalue_or_assignment',
  'initialization_list',  'initialization_list_argument_list',  'possibly_identifier_preceded_ref',  'possibly_idenitifer_preceded_ptrs',
  'numeric',       'assignable',    'character',     'string',      
  'scoped_identifier',  'preprocessor_stringify',  'preprocessor_concat',  'sizeof',      
  'non_const_type',  'scoped_type',   'typename_or_instantiated_template_type',  'template_instantiation_arguments',
  'instantiated_template_type_on_in_namespace_resolve',  'namespace_resolve_terminal',  'typename_in_namespace_resolve',  'instantiated_template_type_on_start_of_namespace_resolve',
  'typename_on_start_of_namespace_resolve',  'type_ref_one',  'type_ref_two',  'type_ref',    
  'type_or_type_ref',  'template_instantiation_argument_list',  'template_instantiation_arguments_begin',  'template_instantiation_arguments_end',
  'void',          'float',         'double',        'long',        
  'char',          'signed',        'unsigned',      'int',         
  'short',       
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "program ::= comment_list stmt_list",
 /*   2 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   3 */ "stmt_list ::= stmt_or_defined_macro",
 /*   4 */ "namespace_definition_start ::= namespacekwd",
 /*   5 */ "namespace_definition_start ::= namespacekwd identifier",
 /*   6 */ "stmt ::= namespace_definition_start namespace_body",
 /*   7 */ "start_of_empty_namespace ::= leftfigurebracket",
 /*   8 */ "namespace_body ::= start_of_empty_namespace rightfigurebracket",
 /*   9 */ "namespace_statements ::= stmt_list",
 /*  10 */ "namespace_body ::= leftfigurebracket namespace_statements rightfigurebracket",
 /*  11 */ "stmt ::= class_or_union_or_struct",
 /*  12 */ "identified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def identifier",
 /*  13 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON",
 /*  14 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON comment_list",
 /*  15 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  16 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body SEMICOLON comment_list",
 /*  17 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def SEMICOLON",
 /*  18 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def SEMICOLON comment_list",
 /*  19 */ "nonidentified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def",
 /*  20 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON",
 /*  21 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON comment_list",
 /*  22 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  23 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body SEMICOLON comment_list",
 /*  24 */ "template_spec_list ::= template_spec_list comma template_spec",
 /*  25 */ "template_spec_list ::= template_spec",
 /*  26 */ "template_spec ::= template_typename identifier",
 /*  27 */ "template_spec ::= template_typename identifier assign type_or_type_ref_or_with_ptr",
 /*  28 */ "template_spec ::= template_typename identifier assign expr_prec_7",
 /*  29 */ "template_typename ::= typenamekwd",
 /*  30 */ "template_typename ::= classkwd",
 /*  31 */ "template_typename ::= structkwd",
 /*  32 */ "template_typename ::= enumkwd",
 /*  33 */ "template_typename ::= builtintype",
 /*  34 */ "template_def ::= templatekwd lesser greater",
 /*  35 */ "template_def ::= templatekwd lesser template_spec_list greater",
 /*  36 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  37 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  38 */ "type_meta_specifier ::= classkwd",
 /*  39 */ "type_meta_specifier ::= structkwd",
 /*  40 */ "type_meta_specifier ::= unionkwd",
 /*  41 */ "structure_body ::= leftfigurebracket rightfigurebracket",
 /*  42 */ "structure_body ::= leftfigurebracket stmt_or_visibility_spec_list rightfigurebracket",
 /*  43 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  44 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  45 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  46 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  47 */ "visibility_spec_full ::= visibility_spec colon",
 /*  48 */ "visibility_spec_full ::= visibility_spec signal_slots colon",
 /*  49 */ "visibility_spec ::= publickwd",
 /*  50 */ "visibility_spec ::= protectedkwd",
 /*  51 */ "visibility_spec ::= privatekwd",
 /*  52 */ "signal_slots ::= signalskwd",
 /*  53 */ "signal_slots ::= slotskwd",
 /*  54 */ "enum_body ::= leftfigurebracket enum_value_list rightfigurebracket",
 /*  55 */ "enum_body ::= leftfigurebracket rightfigurebracket",
 /*  56 */ "enum_value_list ::= enum_value_list comma enum_value",
 /*  57 */ "enum_value_list ::= enum_value",
 /*  58 */ "enum_value ::= identifier",
 /*  59 */ "enum_value ::= identifier assign expr_atom",
 /*  60 */ "enum_definition_start ::= enumkwd identifier",
 /*  61 */ "stmt_or_defined_macro ::= enum_definition_start SEMICOLON",
 /*  62 */ "stmt_or_defined_macro ::= enum_definition_start SEMICOLON comment_list",
 /*  63 */ "stmt_or_defined_macro ::= enum_definition_start enum_body SEMICOLON",
 /*  64 */ "stmt_or_defined_macro ::= enum_definition_start enum_body SEMICOLON comment_list",
 /*  65 */ "stmt_or_defined_macro ::= enumkwd enum_body SEMICOLON",
 /*  66 */ "stmt_or_defined_macro ::= enumkwd enum_body SEMICOLON comment_list",
 /*  67 */ "stmt_or_defined_macro ::= enum_definition_start enum_body identifier SEMICOLON",
 /*  68 */ "stmt_or_defined_macro ::= enum_definition_start enum_body identifier SEMICOLON comment_list",
 /*  69 */ "stmt_or_defined_macro ::= enumkwd enum_body identifier SEMICOLON",
 /*  70 */ "stmt_or_defined_macro ::= enumkwd enum_body identifier SEMICOLON comment_list",
 /*  71 */ "stmt_or_defined_macro ::= type_or_type_with_qualifier function_definition_without_type",
 /*  72 */ "stmt_or_defined_macro ::= template_def type function_definition_without_type",
 /*  73 */ "function_definition_without_type ::= lvalue formal_args_list_with_or_without_const function_body",
 /*  74 */ "function_definition_without_type ::= operator_overload_declaration_type_modificators",
 /*  75 */ "operator_overload_declaration_type_modificators ::= ampersand operator_overload_declaration_ptr",
 /*  76 */ "operator_overload_declaration_type_modificators ::= operator_overload_declaration_ptr",
 /*  77 */ "operator_overload_declaration_ptr ::= constkwd multiply operator_overload_declaration_ptr",
 /*  78 */ "operator_overload_declaration_ptr ::= multiply operator_overload_declaration_ptr",
 /*  79 */ "operator_overload_declaration_ptr ::= operator_overload_declaration_without_type",
 /*  80 */ "operator_overload_declaration_without_type ::= operatoroverloaddeclaration formal_args_list_with_or_without_const function_body",
 /*  81 */ "stmt_or_defined_macro ::= template_def typename formal_args_list function_body",
 /*  82 */ "stmt_or_defined_macro ::= typename formal_args_list function_body",
 /*  83 */ "stmt_or_defined_macro ::= binarynot typename formal_args_list function_body",
 /*  84 */ "outer_constructor_name ::= namespace_resolve outer_constructor_name_terminal",
 /*  85 */ "stmt_or_defined_macro ::= template_def outer_constructor_name formal_args_list function_body",
 /*  86 */ "stmt_or_defined_macro ::= outer_constructor_name formal_args_list function_body",
 /*  87 */ "outer_destructor_name ::= namespace_resolve binarynot outer_constructor_name_terminal",
 /*  88 */ "stmt_or_defined_macro ::= template_def outer_destructor_name formal_args_list function_body",
 /*  89 */ "stmt_or_defined_macro ::= outer_destructor_name formal_args_list function_body",
 /*  90 */ "function_body ::= leftfigurebracket stmt_list rightfigurebracket",
 /*  91 */ "function_body ::= leftfigurebracket rightfigurebracket",
 /*  92 */ "function_body ::= SEMICOLON",
 /*  93 */ "function_body ::= SEMICOLON comment_list",
 /*  94 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  95 */ "formal_args_list_with_or_without_const ::= formal_args_list constkwd",
 /*  96 */ "formal_args_list ::= leftroundbracket rightroundbracket",
 /*  97 */ "formal_args_list ::= leftroundbracket arg_list rightroundbracket",
 /*  98 */ "arg_list ::= arg",
 /*  99 */ "arg_list ::= arg_list comma arg",
 /* 100 */ "arg ::= lvalue",
 /* 101 */ "arg ::= type_or_type_ref_or_with_ptr identifier",
 /* 102 */ "arg ::= type_or_type_ref_or_with_ptr",
 /* 103 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_endif",
 /* 104 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses preprocessor_endif",
 /* 105 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /* 106 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /* 107 */ "preprocessor_else_clauses ::= preprocessor_else",
 /* 108 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /* 109 */ "preprocessor_elif_list ::= preprocessor_elif",
 /* 110 */ "preprocessor_elif ::= preprocessor_elif_terminal stmt_list",
 /* 111 */ "preprocessor_else ::= preprocessor_else_terminal stmt_list",
 /* 112 */ "preprocessor_cond ::= preprocessor_ifdef identifier",
 /* 113 */ "preprocessor_cond ::= preprocessor_ifdef typename",
 /* 114 */ "preprocessor_cond ::= preprocessor_if",
 /* 115 */ "stmt_or_defined_macro ::= preprocessor_define",
 /* 116 */ "stmt_or_defined_macro ::= stmt",
 /* 117 */ "stmt ::= preprocessor_include",
 /* 118 */ "stmt ::= whilekwd leftroundbracket expr_prec_10 rightroundbracket stmt",
 /* 119 */ "stmt ::= dokwd stmt whilekwd leftroundbracket expr_prec_11 rightroundbracket semicolon",
 /* 120 */ "stmt ::= FORKWD leftroundbracket expr_prec_11 semicolon expr_prec_11 semicolon expr_prec_11 rightroundbracket stmt",
 /* 121 */ "stmt ::= returnkwd expr_prec_11 SEMICOLON",
 /* 122 */ "stmt ::= returnkwd expr_prec_11 SEMICOLON comment_list",
 /* 123 */ "stmt ::= returnkwd SEMICOLON",
 /* 124 */ "stmt ::= returnkwd SEMICOLON comment_list",
 /* 125 */ "stmt ::= continuekwd SEMICOLON",
 /* 126 */ "stmt ::= continuekwd SEMICOLON comment_list",
 /* 127 */ "stmt ::= gotokwd identifier SEMICOLON",
 /* 128 */ "stmt ::= gotokwd identifier SEMICOLON comment_list",
 /* 129 */ "stmt ::= gotokwd typename SEMICOLON",
 /* 130 */ "stmt ::= gotokwd typename SEMICOLON comment_list",
 /* 131 */ "stmt ::= identifier colon",
 /* 132 */ "stmt ::= try_catch",
 /* 133 */ "try_catch ::= try catch_list",
 /* 134 */ "try ::= trykwd leftfigurebracket rightfigurebracket",
 /* 135 */ "try ::= trykwd leftfigurebracket stmt_list rightfigurebracket",
 /* 136 */ "catch_list ::= catch_list catch",
 /* 137 */ "catch_list ::= catch",
 /* 138 */ "catch ::= catchkwd leftroundbracket expr_prec_11_or_ellipsis rightroundbracket leftfigurebracket rightfigurebracket",
 /* 139 */ "catch ::= catchkwd leftroundbracket expr_prec_11_or_ellipsis rightroundbracket leftfigurebracket stmt_list rightfigurebracket",
 /* 140 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 141 */ "expr_prec_11_or_ellipsis ::= ellipsis",
 /* 142 */ "stmt ::= SEMICOLON",
 /* 143 */ "stmt ::= SEMICOLON comment_list",
 /* 144 */ "stmt ::= switch_stmt",
 /* 145 */ "switch_stmt ::= switchkwd leftroundbracket expr_prec_11 rightroundbracket leftfigurebracket rightfigurebracket",
 /* 146 */ "switch_stmt ::= switchkwd leftroundbracket expr_prec_11 rightroundbracket leftfigurebracket switch_case_list rightfigurebracket",
 /* 147 */ "switch_case_list ::= case",
 /* 148 */ "switch_case_list ::= switch_case_list case",
 /* 149 */ "case ::= casekwd expr_atom colon stmt_list",
 /* 150 */ "case ::= defaultkwd colon stmt_list",
 /* 151 */ "stmt ::= if_then_else",
 /* 152 */ "if_then_else ::= if_then",
 /* 153 */ "if_then_else ::= if_then elsekwd stmt",
 /* 154 */ "if_then ::= ifkwd leftroundbracket expr_prec_11 rightroundbracket stmt",
 /* 155 */ "stmt ::= leftfigurebracket stmt_list rightfigurebracket",
 /* 156 */ "stmt ::= typedef type identifier SEMICOLON",
 /* 157 */ "stmt ::= typedef type identifier SEMICOLON comment_list",
 /* 158 */ "stmt ::= breakkwd SEMICOLON",
 /* 159 */ "stmt ::= breakkwd SEMICOLON comment_list",
 /* 160 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 161 */ "stmt ::= expr_prec_11 SEMICOLON comment_list",
 /* 162 */ "expr_prec_11 ::= newkwd expr_prec_10",
 /* 163 */ "expr_prec_11 ::= delete leftsquarebracket rightsquarebracket expr_prec_10",
 /* 164 */ "expr_prec_11 ::= delete expr_prec_10",
 /* 165 */ "expr_prec_11 ::= type_or_type_with_qualifier lvalue_or_assignment_list",
 /* 166 */ "expr_prec_11 ::= expr_list",
 /* 167 */ "expr_list ::= expr_list comma expr_prec_10",
 /* 168 */ "expr_list ::= expr_prec_10",
 /* 169 */ "type_or_type_with_qualifier ::= type_with_qualifier",
 /* 170 */ "type_or_type_with_qualifier ::= type",
 /* 171 */ "type_with_qualifier ::= varqualifier type",
 /* 172 */ "varqualifier ::= statickwd",
 /* 173 */ "varqualifier ::= externkwd",
 /* 174 */ "varqualifier ::= registerkwd",
 /* 175 */ "varqualifier ::= volatilekwd",
 /* 176 */ "varqualifier ::= friendkwd",
 /* 177 */ "expr_prec_10 ::= expr_prec_9 binaryxor_assign expr_prec_10",
 /* 178 */ "expr_prec_10 ::= expr_prec_9 binaryor_assign expr_prec_10",
 /* 179 */ "expr_prec_10 ::= expr_prec_9 binaryand_assign expr_prec_10",
 /* 180 */ "expr_prec_10 ::= expr_prec_9 rightshift_assign expr_prec_10",
 /* 181 */ "expr_prec_10 ::= expr_prec_9 leftshift_assign expr_prec_10",
 /* 182 */ "expr_prec_10 ::= expr_prec_9 modulo_assign expr_prec_10",
 /* 183 */ "expr_prec_10 ::= expr_prec_9 division_assign expr_prec_10",
 /* 184 */ "expr_prec_10 ::= expr_prec_9 multiply_assign expr_prec_10",
 /* 185 */ "expr_prec_10 ::= expr_prec_9 plus_assign expr_prec_10",
 /* 186 */ "expr_prec_10 ::= expr_prec_9 minus_assign expr_prec_10",
 /* 187 */ "expr_prec_10 ::= expr_prec_9 assign expr_prec_10",
 /* 188 */ "expr_prec_10 ::= expr_prec_9",
 /* 189 */ "expr_prec_9 ::= expr_prec_9 logicaland expr_binary_ops",
 /* 190 */ "expr_prec_9 ::= expr_prec_9 logicalor expr_binary_ops",
 /* 191 */ "expr_prec_9 ::= expr_binary_ops",
 /* 192 */ "expr_binary_ops ::= expr_binary_ops binaryxor expr_or_equal",
 /* 193 */ "expr_binary_ops ::= expr_binary_ops binaryor expr_or_equal",
 /* 194 */ "expr_binary_ops ::= expr_binary_ops ampersand expr_or_equal",
 /* 195 */ "expr_binary_ops ::= expr_or_equal",
 /* 196 */ "expr_or_equal ::= expr_or_equal not_equal expr_prec_8",
 /* 197 */ "expr_or_equal ::= expr_or_equal equal expr_prec_8",
 /* 198 */ "expr_or_equal ::= expr_prec_8",
 /* 199 */ "expr_prec_8 ::= expr_prec_8 lesser_or_equal expr_prec_7",
 /* 200 */ "expr_prec_8 ::= expr_prec_8 greater_or_equal expr_prec_7",
 /* 201 */ "expr_prec_8 ::= expr_prec_8 greater expr_prec_7",
 /* 202 */ "expr_prec_8 ::= expr_prec_8 lesser expr_prec_7",
 /* 203 */ "expr_prec_8 ::= expr_prec_7",
 /* 204 */ "expr_prec_7 ::= expr_prec_7 leftshift expr_prec_6",
 /* 205 */ "expr_prec_7 ::= expr_prec_7 rightshift expr_prec_6",
 /* 206 */ "expr_prec_7 ::= expr_prec_6",
 /* 207 */ "expr_prec_6 ::= expr_prec_6 minus expr_prec_5",
 /* 208 */ "expr_prec_6 ::= expr_prec_6 plus expr_prec_5",
 /* 209 */ "expr_prec_6 ::= expr_prec_5",
 /* 210 */ "expr_prec_5 ::= expr_prec_5 modulosign expr_prec_4",
 /* 211 */ "expr_prec_5 ::= expr_prec_5 division expr_prec_4",
 /* 212 */ "expr_prec_5 ::= expr_prec_5 multiply expr_prec_4",
 /* 213 */ "expr_prec_5 ::= expr_prec_4",
 /* 214 */ "expr_prec_4 ::= try_value_access multiply identifier",
 /* 215 */ "expr_prec_4 ::= try_pointer_access multiply identifier",
 /* 216 */ "expr_prec_4 ::= expr_prec_3",
 /* 217 */ "expr_prec_3 ::= ampersand expr_prec_3",
 /* 218 */ "expr_prec_3 ::= multiply expr_prec_3",
 /* 219 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 220 */ "expr_prec_3 ::= logicalnot expr_prec_3",
 /* 221 */ "expr_prec_3 ::= binarynot expr_prec_3",
 /* 222 */ "expr_prec_3 ::= minus expr_prec_2",
 /* 223 */ "expr_prec_3 ::= plus expr_prec_2",
 /* 224 */ "expr_prec_3 ::= decrement expr_prec_3",
 /* 225 */ "expr_prec_3 ::= increment expr_prec_3",
 /* 226 */ "expr_prec_3 ::= expr_prec_2",
 /* 227 */ "expr_prec_2 ::= try_value_access identifier",
 /* 228 */ "expr_prec_2 ::= try_pointer_access identifier",
 /* 229 */ "expr_prec_2 ::= cpp_style_cast leftroundbracket expr_prec_11 rightroundbracket",
 /* 230 */ "expr_prec_2 ::= expr_prec_2 leftsquarebracket expr_prec_10 rightsquarebracket",
 /* 231 */ "expr_prec_2 ::= expr_prec_2 leftroundbracket expr_list rightroundbracket",
 /* 232 */ "expr_prec_2 ::= expr_prec_2 leftroundbracket rightroundbracket",
 /* 233 */ "expr_prec_2 ::= expr_prec_2 increment",
 /* 234 */ "expr_prec_2 ::= expr_prec_2 decrement",
 /* 235 */ "expr_prec_2 ::= expr_atom",
 /* 236 */ "try_value_access ::= expr_prec_2 dot",
 /* 237 */ "try_pointer_access ::= expr_prec_2 rightarrow",
 /* 238 */ "cpp_style_cast ::= const_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 239 */ "cpp_style_cast ::= static_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 240 */ "cpp_style_cast ::= dynamic_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 241 */ "cpp_style_cast ::= reinterpret_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 242 */ "lvalue_or_assignment_list ::= lvalue_or_assignment",
 /* 243 */ "lvalue_or_assignment_list ::= lvalue_or_assignment_list comma lvalue_or_assignment",
 /* 244 */ "lvalue_or_assignment ::= lvalue",
 /* 245 */ "lvalue_or_assignment ::= lvalue assign expr_prec_10",
 /* 246 */ "lvalue_or_assignment ::= lvalue assign initialization_list",
 /* 247 */ "initialization_list ::= leftfigurebracket rightfigurebracket",
 /* 248 */ "initialization_list ::= leftfigurebracket initialization_list_argument_list rightfigurebracket",
 /* 249 */ "initialization_list_argument_list ::= expr_prec_10",
 /* 250 */ "initialization_list_argument_list ::= initialization_list",
 /* 251 */ "initialization_list_argument_list ::= initialization_list_argument_list comma expr_prec_10",
 /* 252 */ "initialization_list_argument_list ::= initialization_list_argument_list comma initialization_list",
 /* 253 */ "lvalue ::= possibly_identifier_preceded_ref",
 /* 254 */ "lvalue ::= lvalue leftsquarebracket expr_prec_9 rightsquarebracket",
 /* 255 */ "possibly_identifier_preceded_ref ::= ampersand possibly_idenitifer_preceded_ptrs",
 /* 256 */ "possibly_identifier_preceded_ref ::= possibly_idenitifer_preceded_ptrs",
 /* 257 */ "possibly_idenitifer_preceded_ptrs ::= identifier",
 /* 258 */ "possibly_idenitifer_preceded_ptrs ::= multiply possibly_idenitifer_preceded_ptrs",
 /* 259 */ "possibly_idenitifer_preceded_ptrs ::= constkwd multiply possibly_idenitifer_preceded_ptrs",
 /* 260 */ "expr_atom ::= numeric",
 /* 261 */ "expr_atom ::= assignable",
 /* 262 */ "expr_atom ::= character",
 /* 263 */ "expr_atom ::= string",
 /* 264 */ "assignable ::= identifier",
 /* 265 */ "assignable ::= scoped_identifier",
 /* 266 */ "scoped_identifier ::= namespace_resolve identifier",
 /* 267 */ "expr_atom ::= leftroundbracket expr_list rightroundbracket",
 /* 268 */ "expr_atom ::= preprocessor_stringify identifier",
 /* 269 */ "expr_atom ::= preprocessor_stringify typename",
 /* 270 */ "expr_atom ::= identifier preprocessor_concat identifier",
 /* 271 */ "expr_atom ::= identifier preprocessor_concat typename",
 /* 272 */ "expr_atom ::= typename preprocessor_concat identifier",
 /* 273 */ "expr_atom ::= typename preprocessor_concat typename",
 /* 274 */ "expr_atom ::= sizeof leftroundbracket type_or_type_ref_or_with_ptr rightroundbracket",
 /* 275 */ "expr_atom ::= sizeof leftroundbracket expr_atom rightroundbracket",
 /* 276 */ "typecast ::= leftroundbracket type_or_type_ref_or_with_ptr rightroundbracket",
 /* 277 */ "type ::= constkwd non_const_type",
 /* 278 */ "type ::= non_const_type",
 /* 279 */ "non_const_type ::= builtintype",
 /* 280 */ "non_const_type ::= scoped_type",
 /* 281 */ "non_const_type ::= typename_or_instantiated_template_type",
 /* 282 */ "scoped_type ::= namespace_resolve typename template_instantiation_arguments",
 /* 283 */ "scoped_type ::= namespace_resolve typename",
 /* 284 */ "namespace_resolve ::= namespace_resolve instantiated_template_type_on_in_namespace_resolve namespace_resolve_terminal",
 /* 285 */ "namespace_resolve ::= namespace_resolve typename_in_namespace_resolve namespace_resolve_terminal",
 /* 286 */ "typename_in_namespace_resolve ::= typename",
 /* 287 */ "instantiated_template_type_on_in_namespace_resolve ::= typename template_instantiation_arguments",
 /* 288 */ "namespace_resolve ::= instantiated_template_type_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 289 */ "namespace_resolve ::= typename_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 290 */ "namespace_resolve ::= namespace_resolve_terminal typename_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 291 */ "instantiated_template_type_on_start_of_namespace_resolve ::= typename template_instantiation_arguments",
 /* 292 */ "typename_on_start_of_namespace_resolve ::= typename",
 /* 293 */ "typename_or_instantiated_template_type ::= typename",
 /* 294 */ "typename_or_instantiated_template_type ::= typename template_instantiation_arguments",
 /* 295 */ "type_ref_one ::= type ampersand",
 /* 296 */ "type_ref_two ::= type_ref_one ampersand",
 /* 297 */ "type_ref ::= type_ref_one",
 /* 298 */ "type_ref ::= type_ref_two",
 /* 299 */ "type_or_type_ref ::= type",
 /* 300 */ "type_or_type_ref ::= type_ref",
 /* 301 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref",
 /* 302 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr multiply",
 /* 303 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr constkwd multiply",
 /* 304 */ "template_instantiation_argument_list ::= type_or_type_ref_or_with_ptr",
 /* 305 */ "template_instantiation_argument_list ::= expr_atom",
 /* 306 */ "template_instantiation_argument_list ::= template_instantiation_argument_list comma type_or_type_ref_or_with_ptr",
 /* 307 */ "template_instantiation_argument_list ::= template_instantiation_argument_list comma expr_atom",
 /* 308 */ "template_instantiation_arguments_begin ::= lesser",
 /* 309 */ "template_instantiation_arguments_end ::= greater",
 /* 310 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_arguments_end",
 /* 311 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_argument_list template_instantiation_arguments_end",
 /* 312 */ "builtintype ::= void",
 /* 313 */ "builtintype ::= float",
 /* 314 */ "builtintype ::= double",
 /* 315 */ "builtintype ::= long double",
 /* 316 */ "builtintype ::= char",
 /* 317 */ "builtintype ::= signed char",
 /* 318 */ "builtintype ::= unsigned char",
 /* 319 */ "builtintype ::= int",
 /* 320 */ "builtintype ::= signed int",
 /* 321 */ "builtintype ::= unsigned int",
 /* 322 */ "builtintype ::= short int",
 /* 323 */ "builtintype ::= signed short int",
 /* 324 */ "builtintype ::= unsigned short int",
 /* 325 */ "builtintype ::= long int",
 /* 326 */ "builtintype ::= signed long int",
 /* 327 */ "builtintype ::= unsigned long int",
 /* 328 */ "builtintype ::= long long int",
 /* 329 */ "builtintype ::= signed long long int",
 /* 330 */ "builtintype ::= unsigned long long int",
 /* 331 */ "builtintype ::= short",
 /* 332 */ "builtintype ::= signed short",
 /* 333 */ "builtintype ::= unsigned short",
 /* 334 */ "builtintype ::= long",
 /* 335 */ "builtintype ::= signed long",
 /* 336 */ "builtintype ::= unsigned long",
 /* 337 */ "builtintype ::= long long",
 /* 338 */ "builtintype ::= signed long long",
 /* 339 */ "builtintype ::= unsigned long long",
 /* 340 */ "unsigned ::= UNSIGNED",
 /* 341 */ "unsigned ::= UNSIGNED comment_list",
 /* 342 */ "signed ::= SIGNED",
 /* 343 */ "signed ::= SIGNED comment_list",
 /* 344 */ "long ::= LONG",
 /* 345 */ "long ::= LONG comment_list",
 /* 346 */ "short ::= SHORT",
 /* 347 */ "short ::= SHORT comment_list",
 /* 348 */ "int ::= INT",
 /* 349 */ "int ::= INT comment_list",
 /* 350 */ "char ::= CHAR",
 /* 351 */ "char ::= CHAR comment_list",
 /* 352 */ "double ::= DOUBLE",
 /* 353 */ "double ::= DOUBLE comment_list",
 /* 354 */ "float ::= FLOAT",
 /* 355 */ "float ::= FLOAT comment_list",
 /* 356 */ "void ::= VOID",
 /* 357 */ "void ::= VOID comment_list",
 /* 358 */ "greater ::= GREATER",
 /* 359 */ "greater ::= GREATER comment_list",
 /* 360 */ "comma ::= COMMA",
 /* 361 */ "comma ::= COMMA comment_list",
 /* 362 */ "lesser ::= LESSER",
 /* 363 */ "lesser ::= LESSER comment_list",
 /* 364 */ "multiply ::= MULTIPLY",
 /* 365 */ "multiply ::= MULTIPLY comment_list",
 /* 366 */ "ampersand ::= AMPERSAND",
 /* 367 */ "ampersand ::= AMPERSAND comment_list",
 /* 368 */ "constkwd ::= CONSTKWD",
 /* 369 */ "constkwd ::= CONSTKWD comment_list",
 /* 370 */ "typename ::= TYPENAME",
 /* 371 */ "typename ::= TYPENAME comment_list",
 /* 372 */ "namespace_resolve_terminal ::= NAMESPACE_RESOLVE",
 /* 373 */ "namespace_resolve_terminal ::= NAMESPACE_RESOLVE comment_list",
 /* 374 */ "leftroundbracket ::= LEFTROUNDBRACKET",
 /* 375 */ "leftroundbracket ::= LEFTROUNDBRACKET comment_list",
 /* 376 */ "rightroundbracket ::= RIGHTROUNDBRACKET",
 /* 377 */ "rightroundbracket ::= RIGHTROUNDBRACKET comment_list",
 /* 378 */ "sizeof ::= SIZEOF",
 /* 379 */ "sizeof ::= SIZEOF comment_list",
 /* 380 */ "identifier ::= IDENTIFIER",
 /* 381 */ "identifier ::= IDENTIFIER comment_list",
 /* 382 */ "preprocessor_concat ::= PREPROCESSOR_CONCAT",
 /* 383 */ "preprocessor_concat ::= PREPROCESSOR_CONCAT comment_list",
 /* 384 */ "preprocessor_stringify ::= PREPROCESSOR_STRINGIFY",
 /* 385 */ "preprocessor_stringify ::= PREPROCESSOR_STRINGIFY comment_list",
 /* 386 */ "string ::= STRING",
 /* 387 */ "string ::= STRING comment_list",
 /* 388 */ "string ::= string STRING",
 /* 389 */ "string ::= string STRING comment_list",
 /* 390 */ "character ::= CHARACTER",
 /* 391 */ "character ::= CHARACTER comment_list",
 /* 392 */ "numeric ::= NUMERIC",
 /* 393 */ "numeric ::= NUMERIC comment_list",
 /* 394 */ "leftsquarebracket ::= LEFTSQUAREBRACKET",
 /* 395 */ "leftsquarebracket ::= LEFTSQUAREBRACKET comment_list",
 /* 396 */ "rightsquarebracket ::= RIGHTSQUAREBRACKET",
 /* 397 */ "rightsquarebracket ::= RIGHTSQUAREBRACKET comment_list",
 /* 398 */ "leftfigurebracket ::= LEFTFIGUREBRACKET",
 /* 399 */ "leftfigurebracket ::= LEFTFIGUREBRACKET comment_list",
 /* 400 */ "rightfigurebracket ::= RIGHTFIGUREBRACKET",
 /* 401 */ "rightfigurebracket ::= RIGHTFIGUREBRACKET comment_list",
 /* 402 */ "assign ::= ASSIGN",
 /* 403 */ "assign ::= ASSIGN comment_list",
 /* 404 */ "reinterpret_cast ::= REINTERPRET_CAST",
 /* 405 */ "reinterpret_cast ::= REINTERPRET_CAST comment_list",
 /* 406 */ "dynamic_cast ::= DYNAMIC_CAST",
 /* 407 */ "dynamic_cast ::= DYNAMIC_CAST comment_list",
 /* 408 */ "static_cast ::= STATIC_CAST",
 /* 409 */ "static_cast ::= STATIC_CAST comment_list",
 /* 410 */ "const_cast ::= CONST_CAST",
 /* 411 */ "const_cast ::= CONST_CAST comment_list",
 /* 412 */ "rightarrow ::= RIGHTARROW",
 /* 413 */ "rightarrow ::= RIGHTARROW comment_list",
 /* 414 */ "dot ::= DOT",
 /* 415 */ "dot ::= DOT comment_list",
 /* 416 */ "decrement ::= DECREMENT",
 /* 417 */ "decrement ::= DECREMENT comment_list",
 /* 418 */ "increment ::= INCREMENT",
 /* 419 */ "increment ::= INCREMENT comment_list",
 /* 420 */ "plus ::= PLUS",
 /* 421 */ "plus ::= PLUS comment_list",
 /* 422 */ "minus ::= MINUS",
 /* 423 */ "minus ::= MINUS comment_list",
 /* 424 */ "binarynot ::= BINARYNOT",
 /* 425 */ "binarynot ::= BINARYNOT comment_list",
 /* 426 */ "logicalnot ::= LOGICALNOT",
 /* 427 */ "logicalnot ::= LOGICALNOT comment_list",
 /* 428 */ "division ::= DIVISION",
 /* 429 */ "division ::= DIVISION comment_list",
 /* 430 */ "modulosign ::= MODULOSIGN",
 /* 431 */ "modulosign ::= MODULOSIGN comment_list",
 /* 432 */ "rightshift ::= RIGHTSHIFT",
 /* 433 */ "rightshift ::= RIGHTSHIFT comment_list",
 /* 434 */ "leftshift ::= LEFTSHIFT",
 /* 435 */ "leftshift ::= LEFTSHIFT comment_list",
 /* 436 */ "greater_or_equal ::= GREATER_OR_EQUAL",
 /* 437 */ "greater_or_equal ::= GREATER_OR_EQUAL comment_list",
 /* 438 */ "lesser_or_equal ::= LESSER_OR_EQUAL",
 /* 439 */ "lesser_or_equal ::= LESSER_OR_EQUAL comment_list",
 /* 440 */ "equal ::= EQUAL",
 /* 441 */ "equal ::= EQUAL comment_list",
 /* 442 */ "not_equal ::= NOT_EQUAL",
 /* 443 */ "not_equal ::= NOT_EQUAL comment_list",
 /* 444 */ "binaryor ::= BINARYOR",
 /* 445 */ "binaryor ::= BINARYOR comment_list",
 /* 446 */ "binaryxor ::= BINARYXOR",
 /* 447 */ "binaryxor ::= BINARYXOR comment_list",
 /* 448 */ "logicalor ::= LOGICALOR",
 /* 449 */ "logicalor ::= LOGICALOR comment_list",
 /* 450 */ "logicaland ::= LOGICALAND",
 /* 451 */ "logicaland ::= LOGICALAND comment_list",
 /* 452 */ "minus_assign ::= MINUS_ASSIGN",
 /* 453 */ "minus_assign ::= MINUS_ASSIGN comment_list",
 /* 454 */ "plus_assign ::= PLUS_ASSIGN",
 /* 455 */ "plus_assign ::= PLUS_ASSIGN comment_list",
 /* 456 */ "multiply_assign ::= MULTIPLY_ASSIGN",
 /* 457 */ "multiply_assign ::= MULTIPLY_ASSIGN comment_list",
 /* 458 */ "division_assign ::= DIVISION_ASSIGN",
 /* 459 */ "division_assign ::= DIVISION_ASSIGN comment_list",
 /* 460 */ "modulo_assign ::= MODULO_ASSIGN",
 /* 461 */ "modulo_assign ::= MODULO_ASSIGN comment_list",
 /* 462 */ "leftshift_assign ::= LEFTSHIFT_ASSIGN",
 /* 463 */ "leftshift_assign ::= LEFTSHIFT_ASSIGN comment_list",
 /* 464 */ "rightshift_assign ::= RIGHTSHIFT_ASSIGN",
 /* 465 */ "rightshift_assign ::= RIGHTSHIFT_ASSIGN comment_list",
 /* 466 */ "binaryand_assign ::= BINARYAND_ASSIGN",
 /* 467 */ "binaryand_assign ::= BINARYAND_ASSIGN comment_list",
 /* 468 */ "binaryor_assign ::= BINARYOR_ASSIGN",
 /* 469 */ "binaryor_assign ::= BINARYOR_ASSIGN comment_list",
 /* 470 */ "binaryxor_assign ::= BINARYXOR_ASSIGN",
 /* 471 */ "binaryxor_assign ::= BINARYXOR_ASSIGN comment_list",
 /* 472 */ "friendkwd ::= FRIENDKWD",
 /* 473 */ "friendkwd ::= FRIENDKWD comment_list",
 /* 474 */ "volatilekwd ::= VOLATILEKWD",
 /* 475 */ "volatilekwd ::= VOLATILEKWD comment_list",
 /* 476 */ "registerkwd ::= REGISTERKWD",
 /* 477 */ "registerkwd ::= REGISTERKWD comment_list",
 /* 478 */ "externkwd ::= EXTERNKWD",
 /* 479 */ "externkwd ::= EXTERNKWD comment_list",
 /* 480 */ "statickwd ::= STATICKWD",
 /* 481 */ "statickwd ::= STATICKWD comment_list",
 /* 482 */ "delete ::= DELETE",
 /* 483 */ "delete ::= DELETE comment_list",
 /* 484 */ "newkwd ::= NEWKWD",
 /* 485 */ "newkwd ::= NEWKWD comment_list",
 /* 486 */ "breakkwd ::= BREAKKWD",
 /* 487 */ "breakkwd ::= BREAKKWD comment_list",
 /* 488 */ "typedef ::= TYPEDEF",
 /* 489 */ "typedef ::= TYPEDEF comment_list",
 /* 490 */ "ifkwd ::= IFKWD",
 /* 491 */ "ifkwd ::= IFKWD comment_list",
 /* 492 */ "elsekwd ::= ELSEKWD",
 /* 493 */ "elsekwd ::= ELSEKWD comment_list",
 /* 494 */ "defaultkwd ::= DEFAULTKWD",
 /* 495 */ "defaultkwd ::= DEFAULTKWD comment_list",
 /* 496 */ "casekwd ::= CASEKWD",
 /* 497 */ "casekwd ::= CASEKWD comment_list",
 /* 498 */ "colon ::= COLON",
 /* 499 */ "colon ::= COLON comment_list",
 /* 500 */ "switchkwd ::= SWITCHKWD",
 /* 501 */ "switchkwd ::= SWITCHKWD comment_list",
 /* 502 */ "ellipsis ::= ELLIPSIS",
 /* 503 */ "ellipsis ::= ELLIPSIS comment_list",
 /* 504 */ "catchkwd ::= CATCHKWD",
 /* 505 */ "catchkwd ::= CATCHKWD comment_list",
 /* 506 */ "trykwd ::= TRYKWD",
 /* 507 */ "trykwd ::= TRYKWD comment_list",
 /* 508 */ "gotokwd ::= GOTOKWD",
 /* 509 */ "gotokwd ::= GOTOKWD comment_list",
 /* 510 */ "continuekwd ::= CONTINUEKWD",
 /* 511 */ "continuekwd ::= CONTINUEKWD comment_list",
 /* 512 */ "returnkwd ::= RETURNKWD",
 /* 513 */ "returnkwd ::= RETURNKWD comment_list",
 /* 514 */ "semicolon ::= SEMICOLON",
 /* 515 */ "semicolon ::= SEMICOLON comment_list",
 /* 516 */ "dokwd ::= DOKWD",
 /* 517 */ "dokwd ::= DOKWD comment_list",
 /* 518 */ "whilekwd ::= WHILEKWD",
 /* 519 */ "whilekwd ::= WHILEKWD comment_list",
 /* 520 */ "preprocessor_include ::= PREPROCESSOR_INCLUDE",
 /* 521 */ "preprocessor_include ::= PREPROCESSOR_INCLUDE comment_list",
 /* 522 */ "preprocessor_define ::= PREPROCESSOR_DEFINE",
 /* 523 */ "preprocessor_define ::= PREPROCESSOR_DEFINE comment_list",
 /* 524 */ "preprocessor_if ::= PREPROCESSOR_IF",
 /* 525 */ "preprocessor_if ::= PREPROCESSOR_IF comment_list",
 /* 526 */ "preprocessor_ifdef ::= PREPROCESSOR_IFDEF",
 /* 527 */ "preprocessor_ifdef ::= PREPROCESSOR_IFDEF comment_list",
 /* 528 */ "preprocessor_else_terminal ::= PREPROCESSOR_ELSE",
 /* 529 */ "preprocessor_else_terminal ::= PREPROCESSOR_ELSE comment_list",
 /* 530 */ "preprocessor_elif_terminal ::= PREPROCESSOR_ELIF",
 /* 531 */ "preprocessor_elif_terminal ::= PREPROCESSOR_ELIF comment_list",
 /* 532 */ "preprocessor_endif ::= PREPROCESSOR_ENDIF",
 /* 533 */ "preprocessor_endif ::= PREPROCESSOR_ENDIF comment_list",
 /* 534 */ "outer_constructor_name_terminal ::= OUTER_CONSTRUCTOR_NAME",
 /* 535 */ "outer_constructor_name_terminal ::= OUTER_CONSTRUCTOR_NAME comment_list",
 /* 536 */ "operatoroverloaddeclaration ::= OPERATOROVERLOADDECLARATION",
 /* 537 */ "operatoroverloaddeclaration ::= OPERATOROVERLOADDECLARATION comment_list",
 /* 538 */ "enumkwd ::= ENUMKWD",
 /* 539 */ "enumkwd ::= ENUMKWD comment_list",
 /* 540 */ "slotskwd ::= SLOTSKWD",
 /* 541 */ "slotskwd ::= SLOTSKWD comment_list",
 /* 542 */ "signalskwd ::= SIGNALSKWD",
 /* 543 */ "signalskwd ::= SIGNALSKWD comment_list",
 /* 544 */ "privatekwd ::= PRIVATEKWD",
 /* 545 */ "privatekwd ::= PRIVATEKWD comment_list",
 /* 546 */ "protectedkwd ::= PROTECTEDKWD",
 /* 547 */ "protectedkwd ::= PROTECTEDKWD comment_list",
 /* 548 */ "publickwd ::= PUBLICKWD",
 /* 549 */ "publickwd ::= PUBLICKWD comment_list",
 /* 550 */ "unionkwd ::= UNIONKWD",
 /* 551 */ "unionkwd ::= UNIONKWD comment_list",
 /* 552 */ "structkwd ::= STRUCTKWD",
 /* 553 */ "structkwd ::= STRUCTKWD comment_list",
 /* 554 */ "classkwd ::= CLASSKWD",
 /* 555 */ "classkwd ::= CLASSKWD comment_list",
 /* 556 */ "templatekwd ::= TEMPLATEKWD",
 /* 557 */ "templatekwd ::= TEMPLATEKWD comment_list",
 /* 558 */ "typenamekwd ::= TYPENAMEKWD",
 /* 559 */ "typenamekwd ::= TYPENAMEKWD comment_list",
 /* 560 */ "namespacekwd ::= NAMESPACEKWD",
 /* 561 */ "namespacekwd ::= NAMESPACEKWD comment_list",
 /* 562 */ "comment_list ::= comment_list COMMENT",
 /* 563 */ "comment_list ::= COMMENT",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param block_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new block_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 137, 'rhs' => 5 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 137, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 137, 'rhs' => 5 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 4 ),
  array( 'lhs' => 144, 'rhs' => 4 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 2 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 162, 'rhs' => 2 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 5 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 5 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 184, 'rhs' => 3 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 192, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 3 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 3 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 2 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 202, 'rhs' => 2 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 2 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 205, 'rhs' => 2 ),
  array( 'lhs' => 204, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 5 ),
  array( 'lhs' => 131, 'rhs' => 7 ),
  array( 'lhs' => 131, 'rhs' => 9 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 2 ),
  array( 'lhs' => 221, 'rhs' => 3 ),
  array( 'lhs' => 221, 'rhs' => 4 ),
  array( 'lhs' => 222, 'rhs' => 2 ),
  array( 'lhs' => 222, 'rhs' => 1 ),
  array( 'lhs' => 224, 'rhs' => 6 ),
  array( 'lhs' => 224, 'rhs' => 7 ),
  array( 'lhs' => 226, 'rhs' => 1 ),
  array( 'lhs' => 226, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 228, 'rhs' => 6 ),
  array( 'lhs' => 228, 'rhs' => 7 ),
  array( 'lhs' => 230, 'rhs' => 1 ),
  array( 'lhs' => 230, 'rhs' => 2 ),
  array( 'lhs' => 231, 'rhs' => 4 ),
  array( 'lhs' => 231, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 3 ),
  array( 'lhs' => 235, 'rhs' => 5 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 5 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 215, 'rhs' => 2 ),
  array( 'lhs' => 215, 'rhs' => 4 ),
  array( 'lhs' => 215, 'rhs' => 2 ),
  array( 'lhs' => 215, 'rhs' => 2 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 245, 'rhs' => 3 ),
  array( 'lhs' => 245, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 246, 'rhs' => 2 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 253, 'rhs' => 3 ),
  array( 'lhs' => 253, 'rhs' => 3 ),
  array( 'lhs' => 253, 'rhs' => 1 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 1 ),
  array( 'lhs' => 268, 'rhs' => 3 ),
  array( 'lhs' => 268, 'rhs' => 3 ),
  array( 'lhs' => 268, 'rhs' => 1 ),
  array( 'lhs' => 271, 'rhs' => 3 ),
  array( 'lhs' => 271, 'rhs' => 3 ),
  array( 'lhs' => 271, 'rhs' => 3 ),
  array( 'lhs' => 271, 'rhs' => 3 ),
  array( 'lhs' => 271, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 276, 'rhs' => 3 ),
  array( 'lhs' => 276, 'rhs' => 3 ),
  array( 'lhs' => 276, 'rhs' => 1 ),
  array( 'lhs' => 279, 'rhs' => 3 ),
  array( 'lhs' => 279, 'rhs' => 3 ),
  array( 'lhs' => 279, 'rhs' => 3 ),
  array( 'lhs' => 279, 'rhs' => 1 ),
  array( 'lhs' => 282, 'rhs' => 3 ),
  array( 'lhs' => 282, 'rhs' => 3 ),
  array( 'lhs' => 282, 'rhs' => 1 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 1 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 4 ),
  array( 'lhs' => 289, 'rhs' => 4 ),
  array( 'lhs' => 289, 'rhs' => 4 ),
  array( 'lhs' => 289, 'rhs' => 3 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 1 ),
  array( 'lhs' => 284, 'rhs' => 2 ),
  array( 'lhs' => 285, 'rhs' => 2 ),
  array( 'lhs' => 292, 'rhs' => 4 ),
  array( 'lhs' => 292, 'rhs' => 4 ),
  array( 'lhs' => 292, 'rhs' => 4 ),
  array( 'lhs' => 292, 'rhs' => 4 ),
  array( 'lhs' => 244, 'rhs' => 1 ),
  array( 'lhs' => 244, 'rhs' => 3 ),
  array( 'lhs' => 299, 'rhs' => 1 ),
  array( 'lhs' => 299, 'rhs' => 3 ),
  array( 'lhs' => 299, 'rhs' => 3 ),
  array( 'lhs' => 300, 'rhs' => 2 ),
  array( 'lhs' => 300, 'rhs' => 3 ),
  array( 'lhs' => 301, 'rhs' => 1 ),
  array( 'lhs' => 301, 'rhs' => 1 ),
  array( 'lhs' => 301, 'rhs' => 3 ),
  array( 'lhs' => 301, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
  array( 'lhs' => 179, 'rhs' => 4 ),
  array( 'lhs' => 302, 'rhs' => 2 ),
  array( 'lhs' => 302, 'rhs' => 1 ),
  array( 'lhs' => 303, 'rhs' => 1 ),
  array( 'lhs' => 303, 'rhs' => 2 ),
  array( 'lhs' => 303, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 305, 'rhs' => 1 ),
  array( 'lhs' => 305, 'rhs' => 1 ),
  array( 'lhs' => 308, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 4 ),
  array( 'lhs' => 174, 'rhs' => 4 ),
  array( 'lhs' => 287, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 312, 'rhs' => 1 ),
  array( 'lhs' => 312, 'rhs' => 1 ),
  array( 'lhs' => 312, 'rhs' => 1 ),
  array( 'lhs' => 313, 'rhs' => 3 ),
  array( 'lhs' => 313, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 318, 'rhs' => 1 ),
  array( 'lhs' => 316, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 319, 'rhs' => 2 ),
  array( 'lhs' => 320, 'rhs' => 1 ),
  array( 'lhs' => 314, 'rhs' => 1 ),
  array( 'lhs' => 314, 'rhs' => 2 ),
  array( 'lhs' => 321, 'rhs' => 2 ),
  array( 'lhs' => 322, 'rhs' => 2 ),
  array( 'lhs' => 323, 'rhs' => 1 ),
  array( 'lhs' => 323, 'rhs' => 1 ),
  array( 'lhs' => 324, 'rhs' => 1 ),
  array( 'lhs' => 324, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 325, 'rhs' => 1 ),
  array( 'lhs' => 325, 'rhs' => 1 ),
  array( 'lhs' => 325, 'rhs' => 3 ),
  array( 'lhs' => 325, 'rhs' => 3 ),
  array( 'lhs' => 326, 'rhs' => 1 ),
  array( 'lhs' => 327, 'rhs' => 1 ),
  array( 'lhs' => 315, 'rhs' => 2 ),
  array( 'lhs' => 315, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 4 ),
  array( 'lhs' => 153, 'rhs' => 4 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 334, 'rhs' => 1 ),
  array( 'lhs' => 334, 'rhs' => 2 ),
  array( 'lhs' => 333, 'rhs' => 1 ),
  array( 'lhs' => 333, 'rhs' => 2 ),
  array( 'lhs' => 331, 'rhs' => 1 ),
  array( 'lhs' => 331, 'rhs' => 2 ),
  array( 'lhs' => 336, 'rhs' => 1 ),
  array( 'lhs' => 336, 'rhs' => 2 ),
  array( 'lhs' => 335, 'rhs' => 1 ),
  array( 'lhs' => 335, 'rhs' => 2 ),
  array( 'lhs' => 332, 'rhs' => 1 ),
  array( 'lhs' => 332, 'rhs' => 2 ),
  array( 'lhs' => 330, 'rhs' => 1 ),
  array( 'lhs' => 330, 'rhs' => 2 ),
  array( 'lhs' => 329, 'rhs' => 1 ),
  array( 'lhs' => 329, 'rhs' => 2 ),
  array( 'lhs' => 328, 'rhs' => 1 ),
  array( 'lhs' => 328, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 2 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 186, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 317, 'rhs' => 1 ),
  array( 'lhs' => 317, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 197, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 311, 'rhs' => 1 ),
  array( 'lhs' => 311, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 310, 'rhs' => 1 ),
  array( 'lhs' => 310, 'rhs' => 2 ),
  array( 'lhs' => 309, 'rhs' => 1 ),
  array( 'lhs' => 309, 'rhs' => 2 ),
  array( 'lhs' => 307, 'rhs' => 1 ),
  array( 'lhs' => 307, 'rhs' => 2 ),
  array( 'lhs' => 307, 'rhs' => 2 ),
  array( 'lhs' => 307, 'rhs' => 3 ),
  array( 'lhs' => 306, 'rhs' => 1 ),
  array( 'lhs' => 306, 'rhs' => 2 ),
  array( 'lhs' => 304, 'rhs' => 1 ),
  array( 'lhs' => 304, 'rhs' => 2 ),
  array( 'lhs' => 242, 'rhs' => 1 ),
  array( 'lhs' => 242, 'rhs' => 2 ),
  array( 'lhs' => 243, 'rhs' => 1 ),
  array( 'lhs' => 243, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 298, 'rhs' => 1 ),
  array( 'lhs' => 298, 'rhs' => 2 ),
  array( 'lhs' => 297, 'rhs' => 1 ),
  array( 'lhs' => 297, 'rhs' => 2 ),
  array( 'lhs' => 296, 'rhs' => 1 ),
  array( 'lhs' => 296, 'rhs' => 2 ),
  array( 'lhs' => 295, 'rhs' => 1 ),
  array( 'lhs' => 295, 'rhs' => 2 ),
  array( 'lhs' => 294, 'rhs' => 1 ),
  array( 'lhs' => 294, 'rhs' => 2 ),
  array( 'lhs' => 293, 'rhs' => 1 ),
  array( 'lhs' => 293, 'rhs' => 2 ),
  array( 'lhs' => 290, 'rhs' => 1 ),
  array( 'lhs' => 290, 'rhs' => 2 ),
  array( 'lhs' => 291, 'rhs' => 1 ),
  array( 'lhs' => 291, 'rhs' => 2 ),
  array( 'lhs' => 280, 'rhs' => 1 ),
  array( 'lhs' => 280, 'rhs' => 2 ),
  array( 'lhs' => 278, 'rhs' => 1 ),
  array( 'lhs' => 278, 'rhs' => 2 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 2 ),
  array( 'lhs' => 288, 'rhs' => 1 ),
  array( 'lhs' => 288, 'rhs' => 2 ),
  array( 'lhs' => 283, 'rhs' => 1 ),
  array( 'lhs' => 283, 'rhs' => 2 ),
  array( 'lhs' => 281, 'rhs' => 1 ),
  array( 'lhs' => 281, 'rhs' => 2 ),
  array( 'lhs' => 277, 'rhs' => 1 ),
  array( 'lhs' => 277, 'rhs' => 2 ),
  array( 'lhs' => 275, 'rhs' => 1 ),
  array( 'lhs' => 275, 'rhs' => 2 ),
  array( 'lhs' => 274, 'rhs' => 1 ),
  array( 'lhs' => 274, 'rhs' => 2 ),
  array( 'lhs' => 273, 'rhs' => 1 ),
  array( 'lhs' => 273, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 1 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 270, 'rhs' => 1 ),
  array( 'lhs' => 270, 'rhs' => 2 ),
  array( 'lhs' => 269, 'rhs' => 1 ),
  array( 'lhs' => 269, 'rhs' => 2 ),
  array( 'lhs' => 267, 'rhs' => 1 ),
  array( 'lhs' => 267, 'rhs' => 2 ),
  array( 'lhs' => 266, 'rhs' => 1 ),
  array( 'lhs' => 266, 'rhs' => 2 ),
  array( 'lhs' => 264, 'rhs' => 1 ),
  array( 'lhs' => 264, 'rhs' => 2 ),
  array( 'lhs' => 263, 'rhs' => 1 ),
  array( 'lhs' => 263, 'rhs' => 2 ),
  array( 'lhs' => 262, 'rhs' => 1 ),
  array( 'lhs' => 262, 'rhs' => 2 ),
  array( 'lhs' => 261, 'rhs' => 1 ),
  array( 'lhs' => 261, 'rhs' => 2 ),
  array( 'lhs' => 260, 'rhs' => 1 ),
  array( 'lhs' => 260, 'rhs' => 2 ),
  array( 'lhs' => 259, 'rhs' => 1 ),
  array( 'lhs' => 259, 'rhs' => 2 ),
  array( 'lhs' => 258, 'rhs' => 1 ),
  array( 'lhs' => 258, 'rhs' => 2 ),
  array( 'lhs' => 257, 'rhs' => 1 ),
  array( 'lhs' => 257, 'rhs' => 2 ),
  array( 'lhs' => 256, 'rhs' => 1 ),
  array( 'lhs' => 256, 'rhs' => 2 ),
  array( 'lhs' => 255, 'rhs' => 1 ),
  array( 'lhs' => 255, 'rhs' => 2 ),
  array( 'lhs' => 254, 'rhs' => 1 ),
  array( 'lhs' => 254, 'rhs' => 2 ),
  array( 'lhs' => 252, 'rhs' => 1 ),
  array( 'lhs' => 252, 'rhs' => 2 ),
  array( 'lhs' => 251, 'rhs' => 1 ),
  array( 'lhs' => 251, 'rhs' => 2 ),
  array( 'lhs' => 250, 'rhs' => 1 ),
  array( 'lhs' => 250, 'rhs' => 2 ),
  array( 'lhs' => 249, 'rhs' => 1 ),
  array( 'lhs' => 249, 'rhs' => 2 ),
  array( 'lhs' => 248, 'rhs' => 1 ),
  array( 'lhs' => 248, 'rhs' => 2 ),
  array( 'lhs' => 241, 'rhs' => 1 ),
  array( 'lhs' => 241, 'rhs' => 2 ),
  array( 'lhs' => 240, 'rhs' => 1 ),
  array( 'lhs' => 240, 'rhs' => 2 ),
  array( 'lhs' => 239, 'rhs' => 1 ),
  array( 'lhs' => 239, 'rhs' => 2 ),
  array( 'lhs' => 238, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 2 ),
  array( 'lhs' => 237, 'rhs' => 1 ),
  array( 'lhs' => 237, 'rhs' => 2 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 236, 'rhs' => 2 ),
  array( 'lhs' => 233, 'rhs' => 1 ),
  array( 'lhs' => 233, 'rhs' => 2 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 229, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 2 ),
  array( 'lhs' => 227, 'rhs' => 1 ),
  array( 'lhs' => 227, 'rhs' => 2 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 2 ),
  array( 'lhs' => 223, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 2 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 2 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 218, 'rhs' => 2 ),
  array( 'lhs' => 217, 'rhs' => 1 ),
  array( 'lhs' => 217, 'rhs' => 2 ),
  array( 'lhs' => 216, 'rhs' => 1 ),
  array( 'lhs' => 216, 'rhs' => 2 ),
  array( 'lhs' => 214, 'rhs' => 1 ),
  array( 'lhs' => 214, 'rhs' => 2 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 210, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 209, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 2 ),
  array( 'lhs' => 206, 'rhs' => 1 ),
  array( 'lhs' => 206, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 2 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 2 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        9 => 7,
        8 => 8,
        10 => 10,
        11 => 11,
        25 => 11,
        29 => 11,
        30 => 11,
        31 => 11,
        32 => 11,
        33 => 11,
        37 => 11,
        38 => 11,
        39 => 11,
        40 => 11,
        43 => 11,
        46 => 11,
        49 => 11,
        50 => 11,
        51 => 11,
        52 => 11,
        57 => 11,
        74 => 11,
        76 => 11,
        79 => 11,
        100 => 11,
        102 => 11,
        166 => 11,
        169 => 11,
        170 => 11,
        242 => 11,
        244 => 11,
        249 => 11,
        250 => 11,
        253 => 11,
        256 => 11,
        257 => 11,
        265 => 11,
        279 => 11,
        280 => 11,
        281 => 11,
        293 => 11,
        297 => 11,
        298 => 11,
        299 => 11,
        300 => 11,
        301 => 11,
        304 => 11,
        305 => 11,
        340 => 11,
        342 => 11,
        344 => 11,
        346 => 11,
        348 => 11,
        350 => 11,
        352 => 11,
        354 => 11,
        356 => 11,
        358 => 11,
        360 => 11,
        362 => 11,
        364 => 11,
        366 => 11,
        368 => 11,
        370 => 11,
        372 => 11,
        374 => 11,
        376 => 11,
        378 => 11,
        380 => 11,
        382 => 11,
        384 => 11,
        386 => 11,
        390 => 11,
        392 => 11,
        394 => 11,
        396 => 11,
        398 => 11,
        400 => 11,
        402 => 11,
        404 => 11,
        406 => 11,
        408 => 11,
        410 => 11,
        412 => 11,
        414 => 11,
        416 => 11,
        418 => 11,
        420 => 11,
        422 => 11,
        424 => 11,
        426 => 11,
        428 => 11,
        430 => 11,
        432 => 11,
        434 => 11,
        436 => 11,
        438 => 11,
        440 => 11,
        442 => 11,
        444 => 11,
        446 => 11,
        486 => 11,
        488 => 11,
        490 => 11,
        492 => 11,
        494 => 11,
        496 => 11,
        498 => 11,
        500 => 11,
        502 => 11,
        504 => 11,
        506 => 11,
        508 => 11,
        510 => 11,
        512 => 11,
        514 => 11,
        516 => 11,
        518 => 11,
        520 => 11,
        522 => 11,
        524 => 11,
        526 => 11,
        528 => 11,
        530 => 11,
        532 => 11,
        534 => 11,
        536 => 11,
        538 => 11,
        540 => 11,
        542 => 11,
        544 => 11,
        546 => 11,
        548 => 11,
        550 => 11,
        552 => 11,
        554 => 11,
        556 => 11,
        558 => 11,
        560 => 11,
        563 => 11,
        12 => 12,
        13 => 13,
        20 => 13,
        14 => 14,
        21 => 14,
        15 => 15,
        22 => 15,
        16 => 16,
        23 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        24 => 24,
        26 => 26,
        27 => 27,
        28 => 27,
        34 => 34,
        35 => 35,
        36 => 36,
        41 => 41,
        42 => 42,
        44 => 44,
        45 => 45,
        191 => 45,
        195 => 45,
        448 => 45,
        450 => 45,
        452 => 45,
        454 => 45,
        456 => 45,
        458 => 45,
        460 => 45,
        462 => 45,
        464 => 45,
        466 => 45,
        468 => 45,
        470 => 45,
        472 => 45,
        474 => 45,
        476 => 45,
        478 => 45,
        480 => 45,
        482 => 45,
        484 => 45,
        47 => 47,
        48 => 48,
        53 => 53,
        278 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        58 => 58,
        59 => 59,
        60 => 60,
        61 => 61,
        62 => 62,
        63 => 63,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        80 => 73,
        75 => 75,
        77 => 77,
        78 => 78,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        101 => 101,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 112,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        129 => 127,
        128 => 128,
        130 => 128,
        131 => 131,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        151 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        167 => 167,
        168 => 168,
        188 => 168,
        198 => 168,
        203 => 168,
        206 => 168,
        209 => 168,
        213 => 168,
        216 => 168,
        226 => 168,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        175 => 175,
        176 => 176,
        177 => 177,
        178 => 178,
        179 => 179,
        180 => 180,
        181 => 181,
        182 => 182,
        183 => 183,
        184 => 184,
        185 => 185,
        186 => 186,
        187 => 187,
        189 => 189,
        190 => 190,
        192 => 192,
        193 => 193,
        194 => 194,
        196 => 196,
        197 => 197,
        199 => 199,
        200 => 200,
        201 => 201,
        202 => 202,
        204 => 204,
        205 => 205,
        207 => 207,
        208 => 208,
        210 => 210,
        211 => 211,
        212 => 212,
        214 => 214,
        215 => 214,
        217 => 217,
        218 => 218,
        219 => 219,
        220 => 220,
        221 => 221,
        222 => 222,
        223 => 223,
        224 => 224,
        225 => 225,
        227 => 227,
        228 => 227,
        229 => 229,
        230 => 230,
        231 => 231,
        232 => 232,
        233 => 233,
        234 => 234,
        235 => 235,
        236 => 236,
        237 => 237,
        238 => 238,
        239 => 239,
        240 => 240,
        241 => 241,
        243 => 243,
        245 => 245,
        246 => 245,
        247 => 247,
        248 => 248,
        251 => 251,
        252 => 251,
        254 => 254,
        255 => 255,
        258 => 258,
        259 => 259,
        260 => 260,
        262 => 260,
        263 => 260,
        264 => 260,
        261 => 261,
        266 => 266,
        267 => 267,
        268 => 268,
        269 => 268,
        270 => 270,
        271 => 270,
        272 => 270,
        273 => 270,
        274 => 274,
        275 => 275,
        276 => 276,
        277 => 277,
        282 => 282,
        283 => 283,
        284 => 284,
        285 => 285,
        286 => 286,
        287 => 287,
        288 => 288,
        289 => 288,
        290 => 290,
        291 => 291,
        292 => 292,
        294 => 294,
        295 => 295,
        296 => 296,
        302 => 302,
        303 => 303,
        306 => 306,
        307 => 307,
        308 => 308,
        309 => 309,
        310 => 310,
        311 => 311,
        312 => 312,
        313 => 313,
        314 => 314,
        315 => 315,
        316 => 316,
        317 => 317,
        318 => 318,
        319 => 319,
        320 => 320,
        321 => 321,
        322 => 322,
        323 => 323,
        324 => 324,
        325 => 325,
        326 => 326,
        327 => 327,
        328 => 328,
        329 => 329,
        330 => 330,
        331 => 331,
        332 => 332,
        333 => 333,
        334 => 334,
        335 => 335,
        336 => 336,
        337 => 337,
        338 => 338,
        339 => 339,
        341 => 341,
        343 => 343,
        345 => 345,
        347 => 347,
        349 => 349,
        351 => 351,
        353 => 353,
        355 => 355,
        357 => 357,
        359 => 359,
        361 => 361,
        363 => 363,
        365 => 365,
        367 => 367,
        369 => 369,
        371 => 371,
        373 => 373,
        375 => 375,
        377 => 377,
        379 => 379,
        381 => 381,
        383 => 383,
        385 => 385,
        387 => 387,
        388 => 387,
        389 => 389,
        391 => 391,
        393 => 393,
        395 => 395,
        397 => 397,
        399 => 399,
        401 => 401,
        403 => 403,
        405 => 405,
        407 => 407,
        409 => 409,
        411 => 411,
        413 => 413,
        415 => 415,
        417 => 417,
        419 => 417,
        421 => 421,
        423 => 423,
        425 => 425,
        427 => 427,
        429 => 429,
        431 => 431,
        433 => 433,
        435 => 435,
        437 => 437,
        439 => 439,
        441 => 441,
        443 => 443,
        445 => 445,
        447 => 445,
        449 => 449,
        451 => 451,
        453 => 453,
        455 => 455,
        457 => 457,
        459 => 459,
        461 => 461,
        463 => 463,
        465 => 465,
        467 => 467,
        469 => 469,
        471 => 471,
        473 => 473,
        475 => 475,
        477 => 475,
        479 => 475,
        481 => 481,
        483 => 483,
        485 => 483,
        487 => 487,
        489 => 489,
        491 => 491,
        493 => 493,
        495 => 495,
        497 => 497,
        499 => 499,
        501 => 501,
        503 => 503,
        505 => 505,
        507 => 507,
        509 => 509,
        511 => 511,
        513 => 513,
        515 => 515,
        517 => 517,
        519 => 519,
        521 => 521,
        523 => 523,
        525 => 525,
        527 => 527,
        529 => 529,
        531 => 531,
        533 => 533,
        535 => 535,
        537 => 537,
        539 => 539,
        541 => 541,
        543 => 543,
        545 => 545,
        547 => 547,
        549 => 549,
        551 => 551,
        553 => 553,
        555 => 555,
        557 => 557,
        559 => 559,
        561 => 561,
        562 => 562,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 88 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 6772 "langs_src/parser_cpp_language.php"
#line 103 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 6788 "langs_src/parser_cpp_language.php"
#line 119 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6794 "langs_src/parser_cpp_language.php"
#line 124 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6800 "langs_src/parser_cpp_language.php"
#line 129 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->mapper->push_anonymous_type();
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6806 "langs_src/parser_cpp_language.php"
#line 134 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6814 "langs_src/parser_cpp_language.php"
#line 141 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('namespace', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6820 "langs_src/parser_cpp_language.php"
#line 146 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6826 "langs_src/parser_cpp_language.php"
#line 151 "langs_src/parser_cpp_language.y"
    function yy_r8(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6832 "langs_src/parser_cpp_language.php"
#line 161 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6838 "langs_src/parser_cpp_language.php"
#line 168 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6843 "langs_src/parser_cpp_language.php"
#line 172 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_constructable($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value(), $this->mapper->extract_template_parameters($this->yystack[$this->yyidx + -1]->minor));
	$this->_retvalue = $this->create_node('identified_type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6851 "langs_src/parser_cpp_language.php"
#line 179 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6857 "langs_src/parser_cpp_language.php"
#line 184 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6863 "langs_src/parser_cpp_language.php"
#line 189 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6869 "langs_src/parser_cpp_language.php"
#line 194 "langs_src/parser_cpp_language.y"
    function yy_r16(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6875 "langs_src/parser_cpp_language.php"
#line 200 "langs_src/parser_cpp_language.y"
    function yy_r17(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6881 "langs_src/parser_cpp_language.php"
#line 205 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6887 "langs_src/parser_cpp_language.php"
#line 210 "langs_src/parser_cpp_language.y"
    function yy_r19(){
	$this->mapper->push_anonymous_type($this->mapper->extract_template_parameters($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6893 "langs_src/parser_cpp_language.php"
#line 240 "langs_src/parser_cpp_language.y"
    function yy_r24(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6899 "langs_src/parser_cpp_language.php"
#line 249 "langs_src/parser_cpp_language.y"
    function yy_r26(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6906 "langs_src/parser_cpp_language.php"
#line 255 "langs_src/parser_cpp_language.y"
    function yy_r27(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6913 "langs_src/parser_cpp_language.php"
#line 288 "langs_src/parser_cpp_language.y"
    function yy_r34(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6919 "langs_src/parser_cpp_language.php"
#line 293 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6925 "langs_src/parser_cpp_language.php"
#line 299 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6931 "langs_src/parser_cpp_language.php"
#line 320 "langs_src/parser_cpp_language.y"
    function yy_r41(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6938 "langs_src/parser_cpp_language.php"
#line 326 "langs_src/parser_cpp_language.y"
    function yy_r42(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6945 "langs_src/parser_cpp_language.php"
#line 336 "langs_src/parser_cpp_language.y"
    function yy_r44(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6951 "langs_src/parser_cpp_language.php"
#line 343 "langs_src/parser_cpp_language.y"
    function yy_r45(){
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6956 "langs_src/parser_cpp_language.php"
#line 351 "langs_src/parser_cpp_language.y"
    function yy_r47(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6962 "langs_src/parser_cpp_language.php"
#line 356 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6968 "langs_src/parser_cpp_language.php"
#line 377 "langs_src/parser_cpp_language.y"
    function yy_r53(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6973 "langs_src/parser_cpp_language.php"
#line 384 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6979 "langs_src/parser_cpp_language.php"
#line 389 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6985 "langs_src/parser_cpp_language.php"
#line 394 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6991 "langs_src/parser_cpp_language.php"
#line 403 "langs_src/parser_cpp_language.y"
    function yy_r58(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6997 "langs_src/parser_cpp_language.php"
#line 408 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7003 "langs_src/parser_cpp_language.php"
#line 414 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('enum_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7010 "langs_src/parser_cpp_language.php"
#line 420 "langs_src/parser_cpp_language.y"
    function yy_r61(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7016 "langs_src/parser_cpp_language.php"
#line 425 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7022 "langs_src/parser_cpp_language.php"
#line 430 "langs_src/parser_cpp_language.y"
    function yy_r63(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7028 "langs_src/parser_cpp_language.php"
#line 435 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7034 "langs_src/parser_cpp_language.php"
#line 440 "langs_src/parser_cpp_language.y"
    function yy_r65(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7040 "langs_src/parser_cpp_language.php"
#line 445 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7046 "langs_src/parser_cpp_language.php"
#line 450 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7052 "langs_src/parser_cpp_language.php"
#line 455 "langs_src/parser_cpp_language.y"
    function yy_r68(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7058 "langs_src/parser_cpp_language.php"
#line 460 "langs_src/parser_cpp_language.y"
    function yy_r69(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7064 "langs_src/parser_cpp_language.php"
#line 465 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7070 "langs_src/parser_cpp_language.php"
#line 472 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7076 "langs_src/parser_cpp_language.php"
#line 477 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7082 "langs_src/parser_cpp_language.php"
#line 482 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('function_definition_without_type', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7088 "langs_src/parser_cpp_language.php"
#line 491 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7094 "langs_src/parser_cpp_language.php"
#line 500 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7100 "langs_src/parser_cpp_language.php"
#line 505 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7106 "langs_src/parser_cpp_language.php"
#line 522 "langs_src/parser_cpp_language.y"
    function yy_r81(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7112 "langs_src/parser_cpp_language.php"
#line 528 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7118 "langs_src/parser_cpp_language.php"
#line 534 "langs_src/parser_cpp_language.y"
    function yy_r83(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('destructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7124 "langs_src/parser_cpp_language.php"
#line 542 "langs_src/parser_cpp_language.y"
    function yy_r84(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('outer_constructor_name', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7131 "langs_src/parser_cpp_language.php"
#line 548 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, E));
    }
#line 7138 "langs_src/parser_cpp_language.php"
#line 555 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7145 "langs_src/parser_cpp_language.php"
#line 561 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->mapper->clear_lookup_namespace();
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('outer_destructor_name', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7152 "langs_src/parser_cpp_language.php"
#line 568 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7158 "langs_src/parser_cpp_language.php"
#line 574 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7164 "langs_src/parser_cpp_language.php"
#line 579 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7170 "langs_src/parser_cpp_language.php"
#line 584 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7176 "langs_src/parser_cpp_language.php"
#line 589 "langs_src/parser_cpp_language.y"
    function yy_r92(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7182 "langs_src/parser_cpp_language.php"
#line 594 "langs_src/parser_cpp_language.y"
    function yy_r93(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7188 "langs_src/parser_cpp_language.php"
#line 602 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7194 "langs_src/parser_cpp_language.php"
#line 607 "langs_src/parser_cpp_language.y"
    function yy_r95(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7200 "langs_src/parser_cpp_language.php"
#line 612 "langs_src/parser_cpp_language.y"
    function yy_r96(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7206 "langs_src/parser_cpp_language.php"
#line 617 "langs_src/parser_cpp_language.y"
    function yy_r97(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7212 "langs_src/parser_cpp_language.php"
#line 622 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7218 "langs_src/parser_cpp_language.php"
#line 627 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7224 "langs_src/parser_cpp_language.php"
#line 636 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7230 "langs_src/parser_cpp_language.php"
#line 648 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7236 "langs_src/parser_cpp_language.php"
#line 653 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7242 "langs_src/parser_cpp_language.php"
#line 658 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7248 "langs_src/parser_cpp_language.php"
#line 663 "langs_src/parser_cpp_language.y"
    function yy_r106(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7254 "langs_src/parser_cpp_language.php"
#line 668 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7260 "langs_src/parser_cpp_language.php"
#line 673 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7266 "langs_src/parser_cpp_language.php"
#line 678 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7272 "langs_src/parser_cpp_language.php"
#line 683 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7278 "langs_src/parser_cpp_language.php"
#line 688 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7284 "langs_src/parser_cpp_language.php"
#line 693 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 7290 "langs_src/parser_cpp_language.php"
#line 703 "langs_src/parser_cpp_language.y"
    function yy_r114(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 7296 "langs_src/parser_cpp_language.php"
#line 708 "langs_src/parser_cpp_language.y"
    function yy_r115(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 7302 "langs_src/parser_cpp_language.php"
#line 713 "langs_src/parser_cpp_language.y"
    function yy_r116(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7308 "langs_src/parser_cpp_language.php"
#line 718 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7314 "langs_src/parser_cpp_language.php"
#line 730 "langs_src/parser_cpp_language.y"
    function yy_r118(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7320 "langs_src/parser_cpp_language.php"
#line 742 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7326 "langs_src/parser_cpp_language.php"
#line 755 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7332 "langs_src/parser_cpp_language.php"
#line 763 "langs_src/parser_cpp_language.y"
    function yy_r121(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7338 "langs_src/parser_cpp_language.php"
#line 768 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7344 "langs_src/parser_cpp_language.php"
#line 774 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7350 "langs_src/parser_cpp_language.php"
#line 779 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7356 "langs_src/parser_cpp_language.php"
#line 787 "langs_src/parser_cpp_language.y"
    function yy_r125(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7362 "langs_src/parser_cpp_language.php"
#line 792 "langs_src/parser_cpp_language.y"
    function yy_r126(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7368 "langs_src/parser_cpp_language.php"
#line 799 "langs_src/parser_cpp_language.y"
    function yy_r127(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7374 "langs_src/parser_cpp_language.php"
#line 804 "langs_src/parser_cpp_language.y"
    function yy_r128(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7380 "langs_src/parser_cpp_language.php"
#line 819 "langs_src/parser_cpp_language.y"
    function yy_r131(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7386 "langs_src/parser_cpp_language.php"
#line 826 "langs_src/parser_cpp_language.y"
    function yy_r132(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7392 "langs_src/parser_cpp_language.php"
#line 831 "langs_src/parser_cpp_language.y"
    function yy_r133(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7398 "langs_src/parser_cpp_language.php"
#line 836 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7404 "langs_src/parser_cpp_language.php"
#line 841 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7410 "langs_src/parser_cpp_language.php"
#line 846 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7416 "langs_src/parser_cpp_language.php"
#line 851 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7422 "langs_src/parser_cpp_language.php"
#line 856 "langs_src/parser_cpp_language.y"
    function yy_r138(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7428 "langs_src/parser_cpp_language.php"
#line 861 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7434 "langs_src/parser_cpp_language.php"
#line 866 "langs_src/parser_cpp_language.y"
    function yy_r140(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7440 "langs_src/parser_cpp_language.php"
#line 871 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7446 "langs_src/parser_cpp_language.php"
#line 878 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7452 "langs_src/parser_cpp_language.php"
#line 883 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7458 "langs_src/parser_cpp_language.php"
#line 890 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7464 "langs_src/parser_cpp_language.php"
#line 895 "langs_src/parser_cpp_language.y"
    function yy_r145(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7470 "langs_src/parser_cpp_language.php"
#line 900 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7476 "langs_src/parser_cpp_language.php"
#line 905 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7482 "langs_src/parser_cpp_language.php"
#line 910 "langs_src/parser_cpp_language.y"
    function yy_r148(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7488 "langs_src/parser_cpp_language.php"
#line 915 "langs_src/parser_cpp_language.y"
    function yy_r149(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7494 "langs_src/parser_cpp_language.php"
#line 920 "langs_src/parser_cpp_language.y"
    function yy_r150(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7500 "langs_src/parser_cpp_language.php"
#line 932 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 7506 "langs_src/parser_cpp_language.php"
#line 937 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7512 "langs_src/parser_cpp_language.php"
#line 942 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7518 "langs_src/parser_cpp_language.php"
#line 949 "langs_src/parser_cpp_language.y"
    function yy_r155(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7524 "langs_src/parser_cpp_language.php"
#line 954 "langs_src/parser_cpp_language.y"
    function yy_r156(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 7531 "langs_src/parser_cpp_language.php"
#line 960 "langs_src/parser_cpp_language.y"
    function yy_r157(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
    }
#line 7538 "langs_src/parser_cpp_language.php"
#line 967 "langs_src/parser_cpp_language.y"
    function yy_r158(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7544 "langs_src/parser_cpp_language.php"
#line 972 "langs_src/parser_cpp_language.y"
    function yy_r159(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7550 "langs_src/parser_cpp_language.php"
#line 977 "langs_src/parser_cpp_language.y"
    function yy_r160(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7556 "langs_src/parser_cpp_language.php"
#line 982 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7562 "langs_src/parser_cpp_language.php"
#line 989 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('new_kwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7568 "langs_src/parser_cpp_language.php"
#line 994 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_array', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7574 "langs_src/parser_cpp_language.php"
#line 999 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_pointer', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7580 "langs_src/parser_cpp_language.php"
#line 1005 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменных", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7586 "langs_src/parser_cpp_language.php"
#line 1016 "langs_src/parser_cpp_language.y"
    function yy_r167(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7592 "langs_src/parser_cpp_language.php"
#line 1021 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7598 "langs_src/parser_cpp_language.php"
#line 1036 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 7605 "langs_src/parser_cpp_language.php"
#line 1042 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7611 "langs_src/parser_cpp_language.php"
#line 1047 "langs_src/parser_cpp_language.y"
    function yy_r173(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7617 "langs_src/parser_cpp_language.php"
#line 1052 "langs_src/parser_cpp_language.y"
    function yy_r174(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7623 "langs_src/parser_cpp_language.php"
#line 1057 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7629 "langs_src/parser_cpp_language.php"
#line 1062 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7635 "langs_src/parser_cpp_language.php"
#line 1069 "langs_src/parser_cpp_language.y"
    function yy_r177(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryxor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7641 "langs_src/parser_cpp_language.php"
#line 1074 "langs_src/parser_cpp_language.y"
    function yy_r178(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7647 "langs_src/parser_cpp_language.php"
#line 1079 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryand_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7653 "langs_src/parser_cpp_language.php"
#line 1084 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7659 "langs_src/parser_cpp_language.php"
#line 1089 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7665 "langs_src/parser_cpp_language.php"
#line 1094 "langs_src/parser_cpp_language.y"
    function yy_r182(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulo_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7671 "langs_src/parser_cpp_language.php"
#line 1099 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7677 "langs_src/parser_cpp_language.php"
#line 1104 "langs_src/parser_cpp_language.y"
    function yy_r184(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7683 "langs_src/parser_cpp_language.php"
#line 1109 "langs_src/parser_cpp_language.y"
    function yy_r185(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7689 "langs_src/parser_cpp_language.php"
#line 1114 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7695 "langs_src/parser_cpp_language.php"
#line 1119 "langs_src/parser_cpp_language.y"
    function yy_r187(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7701 "langs_src/parser_cpp_language.php"
#line 1131 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7707 "langs_src/parser_cpp_language.php"
#line 1136 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7713 "langs_src/parser_cpp_language.php"
#line 1145 "langs_src/parser_cpp_language.y"
    function yy_r192(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_xor', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7719 "langs_src/parser_cpp_language.php"
#line 1150 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7725 "langs_src/parser_cpp_language.php"
#line 1155 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	// Well, that's what you get when you mix binary and and adress taking
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7732 "langs_src/parser_cpp_language.php"
#line 1165 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_notequal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7738 "langs_src/parser_cpp_language.php"
#line 1170 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7744 "langs_src/parser_cpp_language.php"
#line 1182 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7750 "langs_src/parser_cpp_language.php"
#line 1187 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7756 "langs_src/parser_cpp_language.php"
#line 1192 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7762 "langs_src/parser_cpp_language.php"
#line 1197 "langs_src/parser_cpp_language.y"
    function yy_r202(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7768 "langs_src/parser_cpp_language.php"
#line 1209 "langs_src/parser_cpp_language.y"
    function yy_r204(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7774 "langs_src/parser_cpp_language.php"
#line 1214 "langs_src/parser_cpp_language.y"
    function yy_r205(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7780 "langs_src/parser_cpp_language.php"
#line 1226 "langs_src/parser_cpp_language.y"
    function yy_r207(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7786 "langs_src/parser_cpp_language.php"
#line 1231 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7792 "langs_src/parser_cpp_language.php"
#line 1243 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulosign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7798 "langs_src/parser_cpp_language.php"
#line 1248 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7804 "langs_src/parser_cpp_language.php"
#line 1253 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7810 "langs_src/parser_cpp_language.php"
#line 1265 "langs_src/parser_cpp_language.y"
    function yy_r214(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_get_property', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7816 "langs_src/parser_cpp_language.php"
#line 1282 "langs_src/parser_cpp_language.y"
    function yy_r217(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_take_adress', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7822 "langs_src/parser_cpp_language.php"
#line 1287 "langs_src/parser_cpp_language.y"
    function yy_r218(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_dereference', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7828 "langs_src/parser_cpp_language.php"
#line 1292 "langs_src/parser_cpp_language.y"
    function yy_r219(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_typecast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7834 "langs_src/parser_cpp_language.php"
#line 1297 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7840 "langs_src/parser_cpp_language.php"
#line 1302 "langs_src/parser_cpp_language.y"
    function yy_r221(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7846 "langs_src/parser_cpp_language.php"
#line 1307 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7852 "langs_src/parser_cpp_language.php"
#line 1312 "langs_src/parser_cpp_language.y"
    function yy_r223(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7858 "langs_src/parser_cpp_language.php"
#line 1317 "langs_src/parser_cpp_language.y"
    function yy_r224(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7864 "langs_src/parser_cpp_language.php"
#line 1322 "langs_src/parser_cpp_language.y"
    function yy_r225(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7870 "langs_src/parser_cpp_language.php"
#line 1334 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_property_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7876 "langs_src/parser_cpp_language.php"
#line 1344 "langs_src/parser_cpp_language.y"
    function yy_r229(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7882 "langs_src/parser_cpp_language.php"
#line 1349 "langs_src/parser_cpp_language.y"
    function yy_r230(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7888 "langs_src/parser_cpp_language.php"
#line 1354 "langs_src/parser_cpp_language.y"
    function yy_r231(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7894 "langs_src/parser_cpp_language.php"
#line 1359 "langs_src/parser_cpp_language.y"
    function yy_r232(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7900 "langs_src/parser_cpp_language.php"
#line 1364 "langs_src/parser_cpp_language.y"
    function yy_r233(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_postfix_increment', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7906 "langs_src/parser_cpp_language.php"
#line 1369 "langs_src/parser_cpp_language.y"
    function yy_r234(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_postfix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7912 "langs_src/parser_cpp_language.php"
#line 1374 "langs_src/parser_cpp_language.y"
    function yy_r235(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7918 "langs_src/parser_cpp_language.php"
#line 1381 "langs_src/parser_cpp_language.y"
    function yy_r236(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7924 "langs_src/parser_cpp_language.php"
#line 1386 "langs_src/parser_cpp_language.y"
    function yy_r237(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7930 "langs_src/parser_cpp_language.php"
#line 1393 "langs_src/parser_cpp_language.y"
    function yy_r238(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_const_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7936 "langs_src/parser_cpp_language.php"
#line 1398 "langs_src/parser_cpp_language.y"
    function yy_r239(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_static_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7942 "langs_src/parser_cpp_language.php"
#line 1403 "langs_src/parser_cpp_language.y"
    function yy_r240(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_dynamic_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7948 "langs_src/parser_cpp_language.php"
#line 1408 "langs_src/parser_cpp_language.y"
    function yy_r241(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_reinterpret_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7954 "langs_src/parser_cpp_language.php"
#line 1419 "langs_src/parser_cpp_language.y"
    function yy_r243(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue_or_assignment_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7960 "langs_src/parser_cpp_language.php"
#line 1428 "langs_src/parser_cpp_language.y"
    function yy_r245(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7966 "langs_src/parser_cpp_language.php"
#line 1438 "langs_src/parser_cpp_language.y"
    function yy_r247(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7972 "langs_src/parser_cpp_language.php"
#line 1443 "langs_src/parser_cpp_language.y"
    function yy_r248(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7978 "langs_src/parser_cpp_language.php"
#line 1457 "langs_src/parser_cpp_language.y"
    function yy_r251(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('initialization_list_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, C));
    }
#line 7984 "langs_src/parser_cpp_language.php"
#line 1471 "langs_src/parser_cpp_language.y"
    function yy_r254(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7990 "langs_src/parser_cpp_language.php"
#line 1476 "langs_src/parser_cpp_language.y"
    function yy_r255(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7996 "langs_src/parser_cpp_language.php"
#line 1489 "langs_src/parser_cpp_language.y"
    function yy_r258(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8002 "langs_src/parser_cpp_language.php"
#line 1494 "langs_src/parser_cpp_language.y"
    function yy_r259(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8008 "langs_src/parser_cpp_language.php"
#line 1502 "langs_src/parser_cpp_language.y"
    function yy_r260(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8014 "langs_src/parser_cpp_language.php"
#line 1507 "langs_src/parser_cpp_language.y"
    function yy_r261(){
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8019 "langs_src/parser_cpp_language.php"
#line 1530 "langs_src/parser_cpp_language.y"
    function yy_r266(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('scoped_identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8025 "langs_src/parser_cpp_language.php"
#line 1536 "langs_src/parser_cpp_language.y"
    function yy_r267(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_brackets', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8031 "langs_src/parser_cpp_language.php"
#line 1541 "langs_src/parser_cpp_language.y"
    function yy_r268(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_stringify', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8037 "langs_src/parser_cpp_language.php"
#line 1551 "langs_src/parser_cpp_language.y"
    function yy_r270(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_concat', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8043 "langs_src/parser_cpp_language.php"
#line 1573 "langs_src/parser_cpp_language.y"
    function yy_r274(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8049 "langs_src/parser_cpp_language.php"
#line 1578 "langs_src/parser_cpp_language.y"
    function yy_r275(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8055 "langs_src/parser_cpp_language.php"
#line 1585 "langs_src/parser_cpp_language.y"
    function yy_r276(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('c_style_typecast_operator', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 8062 "langs_src/parser_cpp_language.php"
#line 1593 "langs_src/parser_cpp_language.y"
    function yy_r277(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8068 "langs_src/parser_cpp_language.php"
#line 1614 "langs_src/parser_cpp_language.y"
    function yy_r282(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8075 "langs_src/parser_cpp_language.php"
#line 1620 "langs_src/parser_cpp_language.y"
    function yy_r283(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -1]->minor,  $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8082 "langs_src/parser_cpp_language.php"
#line 1626 "langs_src/parser_cpp_language.y"
    function yy_r284(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8088 "langs_src/parser_cpp_language.php"
#line 1631 "langs_src/parser_cpp_language.y"
    function yy_r285(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8094 "langs_src/parser_cpp_language.php"
#line 1636 "langs_src/parser_cpp_language.y"
    function yy_r286(){
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8100 "langs_src/parser_cpp_language.php"
#line 1641 "langs_src/parser_cpp_language.y"
    function yy_r287(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8107 "langs_src/parser_cpp_language.php"
#line 1647 "langs_src/parser_cpp_language.y"
    function yy_r288(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8113 "langs_src/parser_cpp_language.php"
#line 1658 "langs_src/parser_cpp_language.y"
    function yy_r290(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8119 "langs_src/parser_cpp_language.php"
#line 1663 "langs_src/parser_cpp_language.y"
    function yy_r291(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8127 "langs_src/parser_cpp_language.php"
#line 1670 "langs_src/parser_cpp_language.y"
    function yy_r292(){
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8134 "langs_src/parser_cpp_language.php"
#line 1682 "langs_src/parser_cpp_language.y"
    function yy_r294(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8140 "langs_src/parser_cpp_language.php"
#line 1690 "langs_src/parser_cpp_language.y"
    function yy_r295(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак  ссылки"));
	$this->_retvalue = $this->create_node('type_ref', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8146 "langs_src/parser_cpp_language.php"
#line 1695 "langs_src/parser_cpp_language.y"
    function yy_r296(){
	$this->yystack[$this->yyidx + -1]->minor->add_child($this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 8152 "langs_src/parser_cpp_language.php"
#line 1720 "langs_src/parser_cpp_language.y"
    function yy_r302(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8158 "langs_src/parser_cpp_language.php"
#line 1725 "langs_src/parser_cpp_language.y"
    function yy_r303(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8164 "langs_src/parser_cpp_language.php"
#line 1740 "langs_src/parser_cpp_language.y"
    function yy_r306(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_instantiation_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8170 "langs_src/parser_cpp_language.php"
#line 1745 "langs_src/parser_cpp_language.y"
    function yy_r307(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8176 "langs_src/parser_cpp_language.php"
#line 1750 "langs_src/parser_cpp_language.y"
    function yy_r308(){
	$this->mapper->start_new_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8182 "langs_src/parser_cpp_language.php"
#line 1755 "langs_src/parser_cpp_language.y"
    function yy_r309(){
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 8188 "langs_src/parser_cpp_language.php"
#line 1760 "langs_src/parser_cpp_language.y"
    function yy_r310(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8194 "langs_src/parser_cpp_language.php"
#line 1765 "langs_src/parser_cpp_language.y"
    function yy_r311(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "%ur(именительный)", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8200 "langs_src/parser_cpp_language.php"
#line 1772 "langs_src/parser_cpp_language.y"
    function yy_r312(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя пустого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8206 "langs_src/parser_cpp_language.php"
#line 1780 "langs_src/parser_cpp_language.y"
    function yy_r313(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой одинарной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8212 "langs_src/parser_cpp_language.php"
#line 1785 "langs_src/parser_cpp_language.y"
    function yy_r314(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8218 "langs_src/parser_cpp_language.php"
#line 1790 "langs_src/parser_cpp_language.y"
    function yy_r315(){
    $this->currentrule = new block_formal_langs_description_rule("имя длинного типа c плавающей запятой двойной точности", array("признак длинного числа", "имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8224 "langs_src/parser_cpp_language.php"
#line 1798 "langs_src/parser_cpp_language.y"
    function yy_r316(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя символьного типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8230 "langs_src/parser_cpp_language.php"
#line 1803 "langs_src/parser_cpp_language.y"
    function yy_r317(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый символьный тип", array("признак знаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8236 "langs_src/parser_cpp_language.php"
#line 1808 "langs_src/parser_cpp_language.y"
    function yy_r318(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый символьный тип", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8242 "langs_src/parser_cpp_language.php"
#line 1816 "langs_src/parser_cpp_language.y"
    function yy_r319(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8248 "langs_src/parser_cpp_language.php"
#line 1821 "langs_src/parser_cpp_language.y"
    function yy_r320(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый целый тип", array("признак знаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8254 "langs_src/parser_cpp_language.php"
#line 1826 "langs_src/parser_cpp_language.y"
    function yy_r321(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый целый тип", array("признак беззнаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8260 "langs_src/parser_cpp_language.php"
#line 1831 "langs_src/parser_cpp_language.y"
    function yy_r322(){
    $this->currentrule = new block_formal_langs_description_rule("короткий целый тип", array("признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8266 "langs_src/parser_cpp_language.php"
#line 1836 "langs_src/parser_cpp_language.y"
    function yy_r323(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8272 "langs_src/parser_cpp_language.php"
#line 1841 "langs_src/parser_cpp_language.y"
    function yy_r324(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8278 "langs_src/parser_cpp_language.php"
#line 1846 "langs_src/parser_cpp_language.y"
    function yy_r325(){
    $this->currentrule = new block_formal_langs_description_rule("длинный целый тип", array("признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8284 "langs_src/parser_cpp_language.php"
#line 1851 "langs_src/parser_cpp_language.y"
    function yy_r326(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целый тип", array("признак знаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8290 "langs_src/parser_cpp_language.php"
#line 1856 "langs_src/parser_cpp_language.y"
    function yy_r327(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целый тип", array("признак беззнаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8296 "langs_src/parser_cpp_language.php"
#line 1861 "langs_src/parser_cpp_language.y"
    function yy_r328(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8302 "langs_src/parser_cpp_language.php"
#line 1867 "langs_src/parser_cpp_language.y"
    function yy_r329(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8308 "langs_src/parser_cpp_language.php"
#line 1872 "langs_src/parser_cpp_language.y"
    function yy_r330(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8314 "langs_src/parser_cpp_language.php"
#line 1880 "langs_src/parser_cpp_language.y"
    function yy_r331(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8320 "langs_src/parser_cpp_language.php"
#line 1885 "langs_src/parser_cpp_language.y"
    function yy_r332(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8326 "langs_src/parser_cpp_language.php"
#line 1890 "langs_src/parser_cpp_language.y"
    function yy_r333(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8332 "langs_src/parser_cpp_language.php"
#line 1897 "langs_src/parser_cpp_language.y"
    function yy_r334(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8338 "langs_src/parser_cpp_language.php"
#line 1902 "langs_src/parser_cpp_language.y"
    function yy_r335(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целвый тип", array("признак знаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8344 "langs_src/parser_cpp_language.php"
#line 1907 "langs_src/parser_cpp_language.y"
    function yy_r336(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целвый тип", array("признак беззнаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8350 "langs_src/parser_cpp_language.php"
#line 1914 "langs_src/parser_cpp_language.y"
    function yy_r337(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8356 "langs_src/parser_cpp_language.php"
#line 1919 "langs_src/parser_cpp_language.y"
    function yy_r338(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8362 "langs_src/parser_cpp_language.php"
#line 1924 "langs_src/parser_cpp_language.y"
    function yy_r339(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 8368 "langs_src/parser_cpp_language.php"
#line 1937 "langs_src/parser_cpp_language.y"
    function yy_r341(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('unsigned', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8374 "langs_src/parser_cpp_language.php"
#line 1946 "langs_src/parser_cpp_language.y"
    function yy_r343(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('signed', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8380 "langs_src/parser_cpp_language.php"
#line 1955 "langs_src/parser_cpp_language.y"
    function yy_r345(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('long', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8386 "langs_src/parser_cpp_language.php"
#line 1964 "langs_src/parser_cpp_language.y"
    function yy_r347(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('short', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8392 "langs_src/parser_cpp_language.php"
#line 1973 "langs_src/parser_cpp_language.y"
    function yy_r349(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('int', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8398 "langs_src/parser_cpp_language.php"
#line 1982 "langs_src/parser_cpp_language.y"
    function yy_r351(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('char', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8404 "langs_src/parser_cpp_language.php"
#line 1991 "langs_src/parser_cpp_language.y"
    function yy_r353(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('double', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8410 "langs_src/parser_cpp_language.php"
#line 2000 "langs_src/parser_cpp_language.y"
    function yy_r355(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('float', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8416 "langs_src/parser_cpp_language.php"
#line 2009 "langs_src/parser_cpp_language.y"
    function yy_r357(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('void', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8422 "langs_src/parser_cpp_language.php"
#line 2018 "langs_src/parser_cpp_language.y"
    function yy_r359(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('greater', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8428 "langs_src/parser_cpp_language.php"
#line 2027 "langs_src/parser_cpp_language.y"
    function yy_r361(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('comma', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8434 "langs_src/parser_cpp_language.php"
#line 2036 "langs_src/parser_cpp_language.y"
    function yy_r363(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('lesser', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8440 "langs_src/parser_cpp_language.php"
#line 2045 "langs_src/parser_cpp_language.y"
    function yy_r365(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('multiply', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8446 "langs_src/parser_cpp_language.php"
#line 2054 "langs_src/parser_cpp_language.y"
    function yy_r367(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ampersand', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8452 "langs_src/parser_cpp_language.php"
#line 2063 "langs_src/parser_cpp_language.y"
    function yy_r369(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('constkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8458 "langs_src/parser_cpp_language.php"
#line 2072 "langs_src/parser_cpp_language.y"
    function yy_r371(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typename', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8464 "langs_src/parser_cpp_language.php"
#line 2081 "langs_src/parser_cpp_language.y"
    function yy_r373(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('namespace_resolve_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8470 "langs_src/parser_cpp_language.php"
#line 2090 "langs_src/parser_cpp_language.y"
    function yy_r375(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftroundbracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8476 "langs_src/parser_cpp_language.php"
#line 2099 "langs_src/parser_cpp_language.y"
    function yy_r377(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightroundbracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8482 "langs_src/parser_cpp_language.php"
#line 2108 "langs_src/parser_cpp_language.y"
    function yy_r379(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8488 "langs_src/parser_cpp_language.php"
#line 2117 "langs_src/parser_cpp_language.y"
    function yy_r381(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8494 "langs_src/parser_cpp_language.php"
#line 2126 "langs_src/parser_cpp_language.y"
    function yy_r383(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_concat_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8500 "langs_src/parser_cpp_language.php"
#line 2135 "langs_src/parser_cpp_language.y"
    function yy_r385(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_stringify_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8506 "langs_src/parser_cpp_language.php"
#line 2145 "langs_src/parser_cpp_language.y"
    function yy_r387(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('string', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8512 "langs_src/parser_cpp_language.php"
#line 2155 "langs_src/parser_cpp_language.y"
    function yy_r389(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue = $this->create_node('string', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8518 "langs_src/parser_cpp_language.php"
#line 2164 "langs_src/parser_cpp_language.y"
    function yy_r391(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('character', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8524 "langs_src/parser_cpp_language.php"
#line 2173 "langs_src/parser_cpp_language.y"
    function yy_r393(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('numeric', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8530 "langs_src/parser_cpp_language.php"
#line 2182 "langs_src/parser_cpp_language.y"
    function yy_r395(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftsquarebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8536 "langs_src/parser_cpp_language.php"
#line 2191 "langs_src/parser_cpp_language.y"
    function yy_r397(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightsquarebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8542 "langs_src/parser_cpp_language.php"
#line 2200 "langs_src/parser_cpp_language.y"
    function yy_r399(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftfigurebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8548 "langs_src/parser_cpp_language.php"
#line 2209 "langs_src/parser_cpp_language.y"
    function yy_r401(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightfigurebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8554 "langs_src/parser_cpp_language.php"
#line 2218 "langs_src/parser_cpp_language.y"
    function yy_r403(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8560 "langs_src/parser_cpp_language.php"
#line 2227 "langs_src/parser_cpp_language.y"
    function yy_r405(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('reinterpret_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8566 "langs_src/parser_cpp_language.php"
#line 2236 "langs_src/parser_cpp_language.y"
    function yy_r407(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dynamic_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8572 "langs_src/parser_cpp_language.php"
#line 2245 "langs_src/parser_cpp_language.y"
    function yy_r409(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('static_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8578 "langs_src/parser_cpp_language.php"
#line 2254 "langs_src/parser_cpp_language.y"
    function yy_r411(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('const_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8584 "langs_src/parser_cpp_language.php"
#line 2263 "langs_src/parser_cpp_language.y"
    function yy_r413(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightarrow', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8590 "langs_src/parser_cpp_language.php"
#line 2272 "langs_src/parser_cpp_language.y"
    function yy_r415(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8596 "langs_src/parser_cpp_language.php"
#line 2281 "langs_src/parser_cpp_language.y"
    function yy_r417(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8602 "langs_src/parser_cpp_language.php"
#line 2299 "langs_src/parser_cpp_language.y"
    function yy_r421(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8608 "langs_src/parser_cpp_language.php"
#line 2308 "langs_src/parser_cpp_language.y"
    function yy_r423(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8614 "langs_src/parser_cpp_language.php"
#line 2317 "langs_src/parser_cpp_language.y"
    function yy_r425(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binarynot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8620 "langs_src/parser_cpp_language.php"
#line 2326 "langs_src/parser_cpp_language.y"
    function yy_r427(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicalnot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8626 "langs_src/parser_cpp_language.php"
#line 2335 "langs_src/parser_cpp_language.y"
    function yy_r429(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('division', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8632 "langs_src/parser_cpp_language.php"
#line 2344 "langs_src/parser_cpp_language.y"
    function yy_r431(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('modulosign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8638 "langs_src/parser_cpp_language.php"
#line 2353 "langs_src/parser_cpp_language.y"
    function yy_r433(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightshift', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8644 "langs_src/parser_cpp_language.php"
#line 2362 "langs_src/parser_cpp_language.y"
    function yy_r435(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftshift', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8650 "langs_src/parser_cpp_language.php"
#line 2371 "langs_src/parser_cpp_language.y"
    function yy_r437(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('greater_or_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8656 "langs_src/parser_cpp_language.php"
#line 2380 "langs_src/parser_cpp_language.y"
    function yy_r439(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('lesser_or_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8662 "langs_src/parser_cpp_language.php"
#line 2389 "langs_src/parser_cpp_language.y"
    function yy_r441(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8668 "langs_src/parser_cpp_language.php"
#line 2398 "langs_src/parser_cpp_language.y"
    function yy_r443(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('not_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8674 "langs_src/parser_cpp_language.php"
#line 2407 "langs_src/parser_cpp_language.y"
    function yy_r445(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryor', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8680 "langs_src/parser_cpp_language.php"
#line 2425 "langs_src/parser_cpp_language.y"
    function yy_r449(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicalor', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8686 "langs_src/parser_cpp_language.php"
#line 2434 "langs_src/parser_cpp_language.y"
    function yy_r451(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicaland', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8692 "langs_src/parser_cpp_language.php"
#line 2443 "langs_src/parser_cpp_language.y"
    function yy_r453(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('minus_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8698 "langs_src/parser_cpp_language.php"
#line 2452 "langs_src/parser_cpp_language.y"
    function yy_r455(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('plus_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8704 "langs_src/parser_cpp_language.php"
#line 2461 "langs_src/parser_cpp_language.y"
    function yy_r457(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('multiply_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8710 "langs_src/parser_cpp_language.php"
#line 2470 "langs_src/parser_cpp_language.y"
    function yy_r459(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('division_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8716 "langs_src/parser_cpp_language.php"
#line 2479 "langs_src/parser_cpp_language.y"
    function yy_r461(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('modulo_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8722 "langs_src/parser_cpp_language.php"
#line 2488 "langs_src/parser_cpp_language.y"
    function yy_r463(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftshift_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8728 "langs_src/parser_cpp_language.php"
#line 2497 "langs_src/parser_cpp_language.y"
    function yy_r465(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightshift_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8734 "langs_src/parser_cpp_language.php"
#line 2506 "langs_src/parser_cpp_language.y"
    function yy_r467(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryand_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8740 "langs_src/parser_cpp_language.php"
#line 2515 "langs_src/parser_cpp_language.y"
    function yy_r469(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryor_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8746 "langs_src/parser_cpp_language.php"
#line 2524 "langs_src/parser_cpp_language.y"
    function yy_r471(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryxor_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8752 "langs_src/parser_cpp_language.php"
#line 2533 "langs_src/parser_cpp_language.y"
    function yy_r473(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('friendkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8758 "langs_src/parser_cpp_language.php"
#line 2542 "langs_src/parser_cpp_language.y"
    function yy_r475(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('volatilekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8764 "langs_src/parser_cpp_language.php"
#line 2569 "langs_src/parser_cpp_language.y"
    function yy_r481(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('statickwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8770 "langs_src/parser_cpp_language.php"
#line 2578 "langs_src/parser_cpp_language.y"
    function yy_r483(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('delete', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8776 "langs_src/parser_cpp_language.php"
#line 2596 "langs_src/parser_cpp_language.y"
    function yy_r487(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('breakkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8782 "langs_src/parser_cpp_language.php"
#line 2605 "langs_src/parser_cpp_language.y"
    function yy_r489(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typedef', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8788 "langs_src/parser_cpp_language.php"
#line 2614 "langs_src/parser_cpp_language.y"
    function yy_r491(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ifkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8794 "langs_src/parser_cpp_language.php"
#line 2623 "langs_src/parser_cpp_language.y"
    function yy_r493(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('elsekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8800 "langs_src/parser_cpp_language.php"
#line 2632 "langs_src/parser_cpp_language.y"
    function yy_r495(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('defaultkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8806 "langs_src/parser_cpp_language.php"
#line 2641 "langs_src/parser_cpp_language.y"
    function yy_r497(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('casekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8812 "langs_src/parser_cpp_language.php"
#line 2650 "langs_src/parser_cpp_language.y"
    function yy_r499(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('colon', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8818 "langs_src/parser_cpp_language.php"
#line 2659 "langs_src/parser_cpp_language.y"
    function yy_r501(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('switchkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8824 "langs_src/parser_cpp_language.php"
#line 2668 "langs_src/parser_cpp_language.y"
    function yy_r503(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ellipsis', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8830 "langs_src/parser_cpp_language.php"
#line 2677 "langs_src/parser_cpp_language.y"
    function yy_r505(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('catchkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8836 "langs_src/parser_cpp_language.php"
#line 2686 "langs_src/parser_cpp_language.y"
    function yy_r507(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('trykwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8842 "langs_src/parser_cpp_language.php"
#line 2695 "langs_src/parser_cpp_language.y"
    function yy_r509(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('gotokwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8848 "langs_src/parser_cpp_language.php"
#line 2704 "langs_src/parser_cpp_language.y"
    function yy_r511(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('continuekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8854 "langs_src/parser_cpp_language.php"
#line 2713 "langs_src/parser_cpp_language.y"
    function yy_r513(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('returnkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8860 "langs_src/parser_cpp_language.php"
#line 2722 "langs_src/parser_cpp_language.y"
    function yy_r515(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('semicolon', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8866 "langs_src/parser_cpp_language.php"
#line 2731 "langs_src/parser_cpp_language.y"
    function yy_r517(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dokwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8872 "langs_src/parser_cpp_language.php"
#line 2740 "langs_src/parser_cpp_language.y"
    function yy_r519(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('whilekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8878 "langs_src/parser_cpp_language.php"
#line 2749 "langs_src/parser_cpp_language.y"
    function yy_r521(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_include', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8884 "langs_src/parser_cpp_language.php"
#line 2758 "langs_src/parser_cpp_language.y"
    function yy_r523(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_define', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8890 "langs_src/parser_cpp_language.php"
#line 2767 "langs_src/parser_cpp_language.y"
    function yy_r525(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_if', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8896 "langs_src/parser_cpp_language.php"
#line 2776 "langs_src/parser_cpp_language.y"
    function yy_r527(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_ifdef', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8902 "langs_src/parser_cpp_language.php"
#line 2785 "langs_src/parser_cpp_language.y"
    function yy_r529(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_else_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8908 "langs_src/parser_cpp_language.php"
#line 2794 "langs_src/parser_cpp_language.y"
    function yy_r531(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_elif_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8914 "langs_src/parser_cpp_language.php"
#line 2803 "langs_src/parser_cpp_language.y"
    function yy_r533(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_endif', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8920 "langs_src/parser_cpp_language.php"
#line 2812 "langs_src/parser_cpp_language.y"
    function yy_r535(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('outer_constructor_name_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8926 "langs_src/parser_cpp_language.php"
#line 2821 "langs_src/parser_cpp_language.y"
    function yy_r537(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('operatoroverloaddeclaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8932 "langs_src/parser_cpp_language.php"
#line 2830 "langs_src/parser_cpp_language.y"
    function yy_r539(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('enumkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8938 "langs_src/parser_cpp_language.php"
#line 2839 "langs_src/parser_cpp_language.y"
    function yy_r541(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('slotskwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8944 "langs_src/parser_cpp_language.php"
#line 2848 "langs_src/parser_cpp_language.y"
    function yy_r543(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('signalskwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8950 "langs_src/parser_cpp_language.php"
#line 2857 "langs_src/parser_cpp_language.y"
    function yy_r545(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('privatekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8956 "langs_src/parser_cpp_language.php"
#line 2866 "langs_src/parser_cpp_language.y"
    function yy_r547(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('protectedkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8962 "langs_src/parser_cpp_language.php"
#line 2875 "langs_src/parser_cpp_language.y"
    function yy_r549(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('publickwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8968 "langs_src/parser_cpp_language.php"
#line 2884 "langs_src/parser_cpp_language.y"
    function yy_r551(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('unionkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8974 "langs_src/parser_cpp_language.php"
#line 2893 "langs_src/parser_cpp_language.y"
    function yy_r553(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('structkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8980 "langs_src/parser_cpp_language.php"
#line 2902 "langs_src/parser_cpp_language.y"
    function yy_r555(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('classkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8986 "langs_src/parser_cpp_language.php"
#line 2911 "langs_src/parser_cpp_language.y"
    function yy_r557(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('templatekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8992 "langs_src/parser_cpp_language.php"
#line 2920 "langs_src/parser_cpp_language.y"
    function yy_r559(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typenamekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8998 "langs_src/parser_cpp_language.php"
#line 2929 "langs_src/parser_cpp_language.y"
    function yy_r561(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('namespacekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9004 "langs_src/parser_cpp_language.php"
#line 2936 "langs_src/parser_cpp_language.y"
    function yy_r562(){
	$this->currentrule = new block_formal_langs_description_rule("список комментариев", array("%s", "%s"));
	$this->_retvalue = $this->create_node('comment_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 9010 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //block_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 40 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 9155 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
