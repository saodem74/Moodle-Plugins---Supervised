<?php
/* Driver template for the PHP_lock_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class lock_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof lock_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof lock_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof lock_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof lock_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class lock_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 102 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 3 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 137 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const LOGICALOR                      =  3;
    const LOGICALAND                     =  4;
    const BINARYXOR                      =  5;
    const BINARYAND                      =  6;
    const NOTEQUAL                       =  7;
    const EQUAL                          =  8;
    const UINDIRECTION                   =  9;
    const UADRESS                        = 10;
    const NAMESPACE_RESOLVE              = 11;
    const UMINUS                         = 12;
    const UPLUS                          = 13;
    const UBRACKET                       = 14;
    const TYPEUNARY                      = 15;
    const MACROPARAMETERPRIORITY         = 16;
    const NAMESPACEKWD                   = 17;
    const IDENTIFIER                     = 18;
    const LEFTFIGUREBRACKET              = 19;
    const RIGHTFIGUREBRACKET             = 20;
    const SEMICOLON                      = 21;
    const CLASSKWD                       = 22;
    const STRUCTKWD                      = 23;
    const UNIONKWD                       = 24;
    const COLON                          = 25;
    const PUBLICKWD                      = 26;
    const PROTECTEDKWD                   = 27;
    const PRIVATEKWD                     = 28;
    const SIGNALSKWD                     = 29;
    const SLOTSKWD                       = 30;
    const ENUMKWD                        = 31;
    const COMMA                          = 32;
    const ASSIGN                         = 33;
    const LEFTROUNDBRACKET               = 34;
    const RIGHTROUNDBRACKET              = 35;
    const BINARYNOT                      = 36;
    const CUSTOMTYPENAME                 = 37;
    const TEMPLATEKWD                    = 38;
    const LESSER                         = 39;
    const GREATER                        = 40;
    const TYPENAMEKWD                    = 41;
    const OPERATOROVERLOADDECLARATION    = 42;
    const CONSTKWD                       = 43;
    const PREPROCESSOR_ENDIF             = 44;
    const PREPROCESSOR_ELIF              = 45;
    const PREPROCESSOR_ELSE              = 46;
    const PREPROCESSOR_IFDEF             = 47;
    const PREPROCESSOR_IF                = 48;
    const PREPROCESSOR_DEFINE            = 49;
    const PREPROCESSOR_INCLUDE           = 50;
    const WHILEKWD                       = 51;
    const DOKWD                          = 52;
    const FORKWD                         = 53;
    const RETURNKWD                      = 54;
    const CONTINUEKWD                    = 55;
    const GOTOKWD                        = 56;
    const TRYKWD                         = 57;
    const CATCHKWD                       = 58;
    const ELLIPSIS                       = 59;
    const SWITCHKWD                      = 60;
    const CASEKWD                        = 61;
    const DEFAULTKWD                     = 62;
    const IFKWD                          = 63;
    const TYPEDEF                        = 64;
    const BREAKKWD                       = 65;
    const NEWKWD                         = 66;
    const DELETE                         = 67;
    const LEFTSQUAREBRACKET              = 68;
    const RIGHTSQUAREBRACKET             = 69;
    const STATICKWD                      = 70;
    const EXTERNKWD                      = 71;
    const REGISTERKWD                    = 72;
    const VOLATILEKWD                    = 73;
    const FRIENDKWD                      = 74;
    const BINARYXOR_ASSIGN               = 75;
    const BINARYOR_ASSIGN                = 76;
    const BINARYAND_ASSIGN               = 77;
    const RIGHTSHIFT_ASSIGN              = 78;
    const LEFTSHIFT_ASSIGN               = 79;
    const MODULO_ASSIGN                  = 80;
    const DIVISION_ASSIGN                = 81;
    const MULTIPLY_ASSIGN                = 82;
    const PLUS_ASSIGN                    = 83;
    const MINUS_ASSIGN                   = 84;
    const NOT_EQUAL                      = 85;
    const LESSER_OR_EQUAL                = 86;
    const GREATER_OR_EQUAL               = 87;
    const LEFTSHIFT                      = 88;
    const RIGHTSHIFT                     = 89;
    const MINUS                          = 90;
    const PLUS                           = 91;
    const MODULOSIGN                     = 92;
    const DIVISION                       = 93;
    const MULTIPLY                       = 94;
    const AMPERSAND                      = 95;
    const LOGICALNOT                     = 96;
    const DECREMENT                      = 97;
    const INCREMENT                      = 98;
    const DOT                            = 99;
    const RIGHTARROW                     = 100;
    const CONST_CAST                     = 101;
    const STATIC_CAST                    = 102;
    const DYNAMIC_CAST                   = 103;
    const REINTERPRET_CAST               = 104;
    const NUMERIC                        = 105;
    const CHARACTER                      = 106;
    const STRING                         = 107;
    const PREPROCESSOR_STRINGIFY         = 108;
    const PREPROCESSOR_CONCAT            = 109;
    const SIGNED                         = 110;
    const TYPENAME                       = 111;
    const UNSIGNED                       = 112;
    const LONG                           = 113;
    const YY_NO_ACTION = 699;
    const YY_ACCEPT_ACTION = 698;
    const YY_ERROR_ACTION = 697;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 3832;
static public $yy_action = array(
 /*     0 */   255,  231,    9,  289,  328,  371,  370,  372,  212,  305,
 /*    10 */   300,  299,   62,  530,  136,  240,    7,   39,  434,   80,
 /*    20 */   244,  230,  192,  364,  248,  219,  104,  228,  241,  192,
 /*    30 */   175,  419,  421,  424,  208,   27,  273,   33,  226,  169,
 /*    40 */   222,  218,  243,  225,   59,  529,  274,   98,  271,   52,
 /*    50 */    43,   61,  529,  442,  441,  436,  435,  437,  282,  142,
 /*    60 */   395,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*    70 */   148,  236,  141,   91,   90,  352,  363,   82,   83,   85,
 /*    80 */    86,   84,  135,  113,  242,  267,  234,  268,  397,  398,
 /*    90 */   393,  281,  433,  265,  356,  278,  283,  255,  231,    9,
 /*   100 */   288,  328,  371,  370,  372,  425,  305,  300,  299,  167,
 /*   110 */   245,  136,  232,  389,   39,  454,   80,  244,  230,   79,
 /*   120 */    77,   78,   32,  104,  420,  241,   35,  175,  419,  421,
 /*   130 */   424,  208,   27,  273,   33,  226,  169,  222,  312,   30,
 /*   140 */   225,   76,   75,  274,   98,  271,   52,   43,  362,   99,
 /*   150 */   442,  441,  436,  435,  437,  387,  142,  366,  154,  196,
 /*   160 */   190,  162,  343,  171,  201,  369,   81,  148,  236,   58,
 /*   170 */    91,   90,   26,   51,   82,   83,   85,   86,   84,  119,
 /*   180 */   279,  242,  267,  234,  268,  397,  398,  393,  281,  261,
 /*   190 */   265,  356,  278,  283,  255,  231,    9,  129,  328,  371,
 /*   200 */   370,  372,  337,  338,  340,  341,  130,    1,  136,   74,
 /*   210 */    73,   39,  326,   80,  244,  230,  192,   71,   72,  241,
 /*   220 */   104,  430,    8,   10,  175,  419,  421,  424,  208,   27,
 /*   230 */   273,   33,  226,  169,  222,  301,   94,  225,   59,  411,
 /*   240 */   274,   98,  271,   52,   43,  139,  315,  442,  441,  436,
 /*   250 */   435,  437,  155,  196,  190,  162,  343,  171,  201,  369,
 /*   260 */    81,  148,  236,  248,   69,   70,  670,   91,   90,  121,
 /*   270 */   325,   82,   83,   85,   86,   84,  119,  279,  242,  267,
 /*   280 */   234,  268,  397,  398,  393,  281,  215,  265,  356,  278,
 /*   290 */   283,  255,  231,    9,  321,  328,  371,  370,  372,  406,
 /*   300 */   229,   65,   63,   64,   67,  136,   68,  303,   39,   38,
 /*   310 */    80,  244,  230,   58,  352,  363,  446,  104,   58,  241,
 /*   320 */    58,  175,  419,  421,  424,  208,   27,  273,   33,  226,
 /*   330 */   169,  222,  179,  453,  225,  670,  530,  274,   98,  271,
 /*   340 */    52,   43,  670,  127,  442,  441,  436,  435,  437,  461,
 /*   350 */   142,  223,  154,  196,  190,  162,  343,  171,  201,  369,
 /*   360 */    81,  148,  236,  254,   91,   90,  382,  194,   82,   83,
 /*   370 */    85,   86,   84,  465,  200,  242,  267,  234,  268,  397,
 /*   380 */   398,  393,  281,   66,  265,  356,  278,  283,  255,  231,
 /*   390 */     9,  317,  328,  371,  370,  372,  206,  427,  229,  371,
 /*   400 */   370,  372,  136,  256,  131,   39,  296,   80,  244,  230,
 /*   410 */    58,  670,  223,   25,  104,   37,  241,  192,  175,  419,
 /*   420 */   421,  424,  208,   27,  273,   33,  226,  169,  222,   58,
 /*   430 */    58,  225,  233,  439,  274,   98,  271,   52,   43,   61,
 /*   440 */    99,  442,  441,  436,  435,  437,  336,  142,  357,  154,
 /*   450 */   196,  190,  162,  343,  171,  201,  369,   81,  148,  236,
 /*   460 */   390,   91,   90,  124,  209,   82,   83,   85,   86,   84,
 /*   470 */     4,  223,  242,  267,  234,  268,  397,  398,  393,  281,
 /*   480 */   166,  265,  356,  278,  283,  255,  231,    9,  322,  328,
 /*   490 */   371,  370,  372,  194,   58,  118,  128,  438,  414,  136,
 /*   500 */   158,  133,   39,  302,   80,  244,  230,  304,  306,  223,
 /*   510 */   252,  104,  451,  241,    6,  175,  419,  421,  424,  208,
 /*   520 */    27,  273,   33,  226,  169,  222,  431,  426,  225,    8,
 /*   530 */    10,  274,   98,  271,   52,   43,  260,  107,  442,  441,
 /*   540 */   436,  435,  437,  464,  142,  405,  154,  196,  190,  162,
 /*   550 */   343,  171,  201,  369,   81,  148,  236,   60,   91,   90,
 /*   560 */    29,  213,   82,   83,   85,   86,   84,  217,   93,  242,
 /*   570 */   267,  234,  268,  397,  398,  393,  281,  388,  265,  356,
 /*   580 */   278,  283,  255,  231,    9,  380,  328,  371,  370,  372,
 /*   590 */   114,  251,  115,  117,  384,  237,  136,  164,  237,   39,
 /*   600 */    40,   80,  244,  230,  113,  364,  374,    1,  104,  377,
 /*   610 */   241,   58,  175,  419,  421,  424,  208,   27,  273,   33,
 /*   620 */   226,  169,  222,  262,  243,  225,  391,  264,  274,   98,
 /*   630 */   271,   52,   43,  258,  400,  442,  441,  436,  435,  437,
 /*   640 */   440,  142,   12,  154,  196,  190,  162,  343,  171,  201,
 /*   650 */   369,   81,  148,  236,  310,   91,   90,  134,  444,   82,
 /*   660 */    83,   85,   86,   84,  163,   58,  242,  267,  234,  268,
 /*   670 */   397,  398,  393,  281,  354,  265,  356,  278,  283,  255,
 /*   680 */   231,    9,  297,  328,  371,  370,  372,  364,   58,   58,
 /*   690 */   258,   28,  211,  136,  295,  450,   39,  396,   80,  244,
 /*   700 */   230,   11,  277,  360,  263,  104,  243,  241,  309,  175,
 /*   710 */   419,  421,  424,  208,   27,  273,   33,  226,  169,  222,
 /*   720 */   358,  244,  225,  332,  275,  274,   98,  271,   52,   43,
 /*   730 */   401,   36,  442,  441,  436,  435,  437,  460,  142,   24,
 /*   740 */   154,  196,  190,  162,  343,  171,  201,  369,   81,  148,
 /*   750 */   236,  389,   91,   90,  355,  100,   82,   83,   85,   86,
 /*   760 */    84,   62,  101,  242,  267,  234,  268,  397,  398,  393,
 /*   770 */   281,  140,  265,  356,  278,  283,  255,  231,    9,  429,
 /*   780 */   328,  371,  370,  372,  383,  258,   96,  390,   41,  192,
 /*   790 */   136,   47,  111,   39,  432,   80,  244,  230,  456,  323,
 /*   800 */   408,  103,  104,  249,  241,  329,  175,  419,  421,  424,
 /*   810 */   208,   27,  273,   33,  226,  169,  222,  385,  138,  225,
 /*   820 */   132,  250,  274,   98,  271,   52,   43,  120,  292,  442,
 /*   830 */   441,  436,  435,  437,  392,  142,  353,  154,  196,  190,
 /*   840 */   162,  343,  171,  201,  369,   81,  148,  236,  342,   91,
 /*   850 */    90,   97,   92,   82,   83,   85,   86,   84,   58,  327,
 /*   860 */   242,  267,  234,  268,  397,  398,  393,  281,  184,  265,
 /*   870 */   356,  278,  283,  255,  231,    9,  335,  328,  371,  370,
 /*   880 */   372,  324,  373,  287,   42,  330,  186,  136,  404,  403,
 /*   890 */    39,  205,   80,  244,  230,  378,  252,  394,  221,  104,
 /*   900 */     5,  241,   89,  175,  419,  421,  424,  208,   27,  273,
 /*   910 */    33,  226,  169,  222,  314,  188,  225,  191,  333,  274,
 /*   920 */    98,  271,   52,   43,  257,  409,  442,  441,  436,  435,
 /*   930 */   437,  462,  142,  253,  154,  196,  190,  162,  343,  171,
 /*   940 */   201,  369,   81,  148,  236,  178,   91,   90,  455,  298,
 /*   950 */    82,   83,   85,   86,   84,  415,  376,  242,  267,  234,
 /*   960 */   268,  397,  398,  393,  281,  412,  265,  356,  278,  283,
 /*   970 */   255,  231,    9,  316,  328,  371,  370,  372,  412,  412,
 /*   980 */   412,  412,  412,  412,  136,  412,  412,   39,  412,   80,
 /*   990 */   244,  230,  412,  412,  412,  412,  104,  412,  241,  412,
 /*  1000 */   175,  419,  421,  424,  208,   27,  273,   33,  226,  169,
 /*  1010 */   222,  412,  412,  225,  412,  412,  274,   98,  271,   52,
 /*  1020 */    43,  412,  412,  442,  441,  436,  435,  437,  459,  142,
 /*  1030 */   412,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  1040 */   148,  236,  412,   91,   90,  412,  412,   82,   83,   85,
 /*  1050 */    86,   84,  412,  412,  242,  267,  234,  268,  397,  398,
 /*  1060 */   393,  281,  412,  265,  356,  278,  283,  255,  231,    9,
 /*  1070 */   318,  328,  371,  370,  372,  412,  412,  412,  412,  412,
 /*  1080 */   412,  136,  412,  412,   39,  412,   80,  244,  230,  412,
 /*  1090 */   412,  412,  412,  104,  412,  241,  412,  175,  419,  421,
 /*  1100 */   424,  208,   27,  273,   33,  226,  169,  222,  412,  412,
 /*  1110 */   225,  412,  412,  274,   98,  271,   52,   43,  412,  412,
 /*  1120 */   442,  441,  436,  435,  437,  350,  142,  412,  154,  196,
 /*  1130 */   190,  162,  343,  171,  201,  369,   81,  148,  236,  412,
 /*  1140 */    91,   90,  412,  412,   82,   83,   85,   86,   84,  412,
 /*  1150 */   412,  242,  267,  234,  268,  397,  398,  393,  281,  412,
 /*  1160 */   265,  356,  278,  283,  255,  231,    9,  182,  328,  371,
 /*  1170 */   370,  372,  412,  412,  412,  412,  412,  412,  136,  412,
 /*  1180 */   412,   39,  412,   80,  244,  230,  244,  412,  412,  412,
 /*  1190 */   104,  410,  241,  412,  175,  419,  421,  424,  208,   27,
 /*  1200 */   273,   33,  226,  169,  222,  412,  412,  225,  412,  412,
 /*  1210 */   274,   98,  271,   52,   43,  412,  412,  442,  441,  436,
 /*  1220 */   435,  437,  463,  142,  412,  154,  196,  190,  162,  343,
 /*  1230 */   171,  201,  369,   81,  148,  236,  412,   91,   90,  412,
 /*  1240 */   412,   82,   83,   85,   86,   84,  412,  412,  242,  267,
 /*  1250 */   234,  268,  397,  398,  393,  281,  412,  265,  356,  278,
 /*  1260 */   283,  255,  231,    9,  331,  328,  371,  370,  372,  365,
 /*  1270 */   412,  412,  412,  412,  160,  245,  412,  412,   39,  412,
 /*  1280 */    87,  244,  230,  244,  417,  418,  412,  104,  410,  241,
 /*  1290 */   412,  412,  412,  428,  424,  208,   27,  273,   33,  226,
 /*  1300 */   169,  222,  402,  407,  225,  412,  412,  274,   98,  271,
 /*  1310 */    52,   43,  195,  362,  442,  441,  436,  435,  437,  457,
 /*  1320 */   142,  412,  154,  196,  190,  162,  343,  171,  201,  369,
 /*  1330 */    81,  148,  236,  412,   91,   90,  412,  412,   82,   83,
 /*  1340 */    85,   86,   84,  412,  412,  242,  267,  234,  268,  397,
 /*  1350 */   398,  393,  281,  412,  265,  356,  278,  283,  412,  307,
 /*  1360 */   422,  412,  381,  137,  412,   88,  375,    3,  294,  290,
 /*  1370 */   123,  412,  412,  244,  412,  241,  102,  412,  412,  104,
 /*  1380 */   109,  160,  220,  417,  418,  412,  412,  412,  412,   13,
 /*  1390 */   412,  412,  428,  241,  187,  334,  116,  412,  412,  412,
 /*  1400 */   308,  412,  407,  293,  269,  448,  142,   95,  154,  196,
 /*  1410 */   190,  162,  343,  171,  201,  369,   81,  148,  236,  412,
 /*  1420 */   362,  412,  379,  422,  412,  381,  137,  412,   88,  375,
 /*  1430 */   345,  171,  201,  369,   81,  148,  236,  412,  241,  102,
 /*  1440 */   412,  412,  412,  109,  160,  220,  265,  356,  278,  283,
 /*  1450 */   412,  412,   13,  227,  112,  311,  313,  187,  334,  116,
 /*  1460 */   241,  412,  412,  308,  412,  412,  293,  269,  448,  142,
 /*  1470 */    95,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  1480 */   148,  236,  412,  362,  307,  422,  412,  381,  137,  412,
 /*  1490 */    88,  375,  412,  285,  290,  123,  412,  412,  266,  235,
 /*  1500 */   241,  102,  147,  236,  412,  109,  160,  220,  412,  244,
 /*  1510 */   241,  412,  359,  412,   13,  104,  412,  276,  412,  187,
 /*  1520 */   334,  116,  160,  245,  412,  308,  412,  241,  293,  269,
 /*  1530 */   448,  142,   95,  154,  196,  190,  162,  343,  171,  201,
 /*  1540 */   369,   81,  148,  236,  412,  362,  159,  343,  171,  201,
 /*  1550 */   369,   81,  148,  236,  698,   20,  319,  422,  412,  381,
 /*  1560 */   137,  362,   88,  375,  351,  171,  201,  369,   81,  148,
 /*  1570 */   236,  412,  241,  102,  412,  412,  412,  109,  160,  220,
 /*  1580 */   412,  412,  265,  356,  278,  283,   13,  412,  412,  412,
 /*  1590 */   241,  187,  334,  116,  412,  412,  412,  308,  412,  412,
 /*  1600 */   293,  269,  448,  142,   95,  154,  196,  190,  162,  343,
 /*  1610 */   171,  201,  369,   81,  148,  236,  412,  362,   14,  319,
 /*  1620 */   422,  412,  381,  137,  412,   88,  375,  165,  266,  235,
 /*  1630 */   349,   81,  148,  236,  412,  241,  102,  412,  412,  412,
 /*  1640 */   109,  160,  220,   31,  241,  412,  244,  412,  412,   13,
 /*  1650 */   412,  410,  412,  412,  187,  334,  116,  412,  412,  412,
 /*  1660 */   308,  412,  241,  293,  269,  448,  142,   95,  154,  196,
 /*  1670 */   190,  162,  343,  171,  201,  369,   81,  148,  236,  412,
 /*  1680 */   362,  386,  171,  201,  369,   81,  148,  236,  412,   23,
 /*  1690 */   319,  422,  412,  381,  137,  412,   88,  375,  161,  343,
 /*  1700 */   171,  201,  369,   81,  148,  236,  241,  102,  412,  412,
 /*  1710 */   412,  109,  160,  220,  397,  398,  393,  281,  412,  412,
 /*  1720 */    13,  412,  412,  412,  241,  187,  334,  116,  412,  412,
 /*  1730 */   412,  308,  412,  412,  293,  269,  448,  142,   95,  154,
 /*  1740 */   196,  190,  162,  343,  171,  201,  369,   81,  148,  236,
 /*  1750 */   412,  362,   19,  319,  422,  412,  381,  137,  412,   88,
 /*  1760 */   375,  173,  266,  235,  348,   81,  148,  236,  173,  241,
 /*  1770 */   102,  412,  412,  412,  109,  160,  220,   34,  443,  412,
 /*  1780 */   244,  412,  412,   13,   34,  412,  412,  244,  187,  334,
 /*  1790 */   116,  412,  412,  412,  308,  412,  241,  293,  269,  448,
 /*  1800 */   142,   95,  154,  196,  190,  162,  343,  171,  201,  369,
 /*  1810 */    81,  148,  236,  412,  362,  412,  412,  412,  412,  412,
 /*  1820 */   412,  412,  412,   15,  319,  422,  244,  381,  137,  361,
 /*  1830 */    88,  375,  104,  412,  266,  235,  346,   81,  148,  236,
 /*  1840 */   241,  102,  412,  412,  412,  109,  160,  220,  397,  398,
 /*  1850 */   393,  281,  412,  412,   13,  397,  398,  393,  281,  187,
 /*  1860 */   334,  116,  412,  412,  412,  308,  412,  412,  293,  269,
 /*  1870 */   448,  142,   95,  154,  196,  190,  162,  343,  171,  201,
 /*  1880 */   369,   81,  148,  236,  412,  362,   22,  319,  422,  412,
 /*  1890 */   381,  137,  412,   88,  375,  412,  399,  412,  412,  265,
 /*  1900 */   356,  278,  283,  241,  102,  412,  412,  412,  109,  160,
 /*  1910 */   220,  241,   34,  412,  412,  412,  412,   13,  412,  412,
 /*  1920 */   412,  412,  187,  334,  116,  412,  412,  412,  308,  412,
 /*  1930 */   241,  293,  269,  448,  142,   95,  154,  196,  190,  162,
 /*  1940 */   343,  171,  201,  369,   81,  148,  236,  412,  362,  266,
 /*  1950 */   235,  368,   81,  148,  236,  412,  412,   18,  319,  422,
 /*  1960 */   412,  381,  137,  412,   88,  375,  412,  412,  266,  235,
 /*  1970 */   339,   81,  148,  236,  241,  102,  412,  412,  412,  109,
 /*  1980 */   160,  220,  412,  397,  398,  393,  281,  412,   13,  412,
 /*  1990 */   412,  241,  412,  187,  334,  116,  412,  412,  412,  308,
 /*  2000 */   412,  412,  293,  269,  448,  142,   95,  154,  196,  190,
 /*  2010 */   162,  343,  171,  201,  369,   81,  148,  236,  412,  362,
 /*  2020 */    16,  319,  422,  412,  381,  137,  412,   88,  375,  266,
 /*  2030 */   235,  347,   81,  148,  236,  412,  412,  241,  102,  412,
 /*  2040 */   412,  412,  109,  160,  220,  241,  412,  412,  412,  412,
 /*  2050 */   412,   13,  412,  412,  412,  412,  187,  334,  116,  412,
 /*  2060 */   412,  412,  308,  412,  412,  293,  269,  448,  142,   95,
 /*  2070 */   154,  196,  190,  162,  343,  171,  201,  369,   81,  148,
 /*  2080 */   236,  412,  362,  266,  235,  344,   81,  148,  236,  412,
 /*  2090 */   412,    2,  319,  422,  412,  381,  137,  412,   88,  375,
 /*  2100 */   412,  412,  412,  412,  412,  412,  244,  412,  241,  102,
 /*  2110 */   412,  412,  104,  109,  160,  220,  376,  412,  412,  247,
 /*  2120 */   412,  412,   13,  412,  160,  245,  110,  187,  334,  116,
 /*  2130 */   108,  152,  259,  308,  412,  412,  293,  269,  448,  142,
 /*  2140 */    95,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  2150 */   148,  236,  412,  362,   17,  319,  422,   95,  381,  137,
 /*  2160 */   412,   88,  375,  362,  412,  244,  412,  412,  412,  412,
 /*  2170 */   362,  241,  102,  412,  412,  412,  109,  160,  220,  265,
 /*  2180 */   356,  278,  283,  412,  412,   13,  412,  412,  412,  412,
 /*  2190 */   187,  334,  116,  412,  412,  412,  308,  412,  412,  293,
 /*  2200 */   269,  448,  142,   95,  154,  196,  190,  162,  343,  171,
 /*  2210 */   201,  369,   81,  148,  236,  365,  362,  412,  412,  412,
 /*  2220 */   160,  245,  412,  412,  412,   21,  319,  422,  412,  381,
 /*  2230 */   137,  412,   88,  375,  412,  412,  412,  412,  265,  356,
 /*  2240 */   278,  283,  241,  102,  412,  412,  412,  109,  160,  220,
 /*  2250 */   412,  412,  412,  412,  412,  412,   13,  412,  193,  362,
 /*  2260 */   241,  187,  334,  116,  412,  412,  412,  308,  412,  412,
 /*  2270 */   293,  269,  448,  142,   95,  154,  196,  190,  162,  343,
 /*  2280 */   171,  201,  369,   81,  148,  236,  412,  362,  412,  379,
 /*  2290 */   422,  412,  381,  137,  412,   88,  375,  412,  266,  235,
 /*  2300 */   412,  412,  145,  236,  399,  241,  102,  412,  412,  412,
 /*  2310 */   109,  160,  220,  412,  412,  412,  412,  412,  412,   13,
 /*  2320 */    39,  449,   87,  244,  187,  334,  116,  412,  412,  104,
 /*  2330 */   308,  412,  412,  293,  269,  448,  142,   95,  154,  196,
 /*  2340 */   190,  162,  343,  171,  201,  369,   81,  148,  236,  412,
 /*  2350 */   362,  412,   52,   43,  399,  412,  442,  441,  436,  435,
 /*  2360 */   437,  280,  412,  412,  412,  412,  160,  245,  412,  412,
 /*  2370 */    39,  126,   87,  244,  412,  412,   91,   90,  412,  104,
 /*  2380 */    82,   83,   85,   86,   84,  412,  412,  242,  267,  234,
 /*  2390 */   268,  397,  398,  393,  281,  399,  265,  356,  278,  283,
 /*  2400 */   412,  412,   52,   43,  412,  362,  442,  441,  436,  435,
 /*  2410 */   437,   39,  412,   87,  224,  412,  412,  241,  412,  412,
 /*  2420 */   412,  412,  412,  412,  412,  412,   91,   90,  412,  412,
 /*  2430 */    82,   83,   85,   86,   84,  412,  412,  242,  267,  234,
 /*  2440 */   268,  397,  398,  393,  281,  399,  265,  356,  278,  283,
 /*  2450 */   156,  196,  190,  162,  343,  171,  201,  369,   81,  148,
 /*  2460 */   236,   39,  412,   87,  244,  412,  412,   91,   90,  412,
 /*  2470 */   104,   82,   83,   85,   86,   84,  412,  412,  242,  267,
 /*  2480 */   234,  268,  397,  398,  393,  281,  320,  412,  412,  412,
 /*  2490 */   412,  399,  412,   52,   43,  412,  412,  442,  441,  436,
 /*  2500 */   435,  437,  412,  412,  412,  367,  412,   39,  412,   87,
 /*  2510 */   160,  245,  412,  412,  216,  412,  412,   91,   90,  160,
 /*  2520 */   245,   82,   83,   85,   86,   84,  413,  412,  242,  267,
 /*  2530 */   234,  268,  397,  398,  393,  281,  399,  265,  356,  278,
 /*  2540 */   283,  238,  412,  412,  412,  371,  370,  372,  412,  362,
 /*  2550 */   412,  412,   39,  412,   87,  244,  412,  412,  362,  239,
 /*  2560 */   244,  104,  412,   91,   90,  412,  104,   82,   83,   85,
 /*  2570 */    86,   84,  412,  412,  242,  267,  234,  268,  397,  398,
 /*  2580 */   393,  281,  412,  412,   52,   43,  412,  412,  442,  441,
 /*  2590 */   436,  435,  437,  442,  441,  436,  435,  437,  412,  412,
 /*  2600 */   412,  412,  412,  412,  412,  447,  412,  412,   91,   90,
 /*  2610 */   160,  245,   82,   83,   85,   86,   84,  412,  412,  242,
 /*  2620 */   267,  234,  268,  397,  398,  393,  281,  241,  265,  356,
 /*  2630 */   278,  283,  412,  265,  356,  278,  283,  423,  412,  381,
 /*  2640 */   137,  412,  122,  375,  412,  412,  412,  412,  412,  362,
 /*  2650 */   412,  412,  241,  106,  412,  412,  412,  125,  160,  245,
 /*  2660 */   153,  196,  190,  162,  343,  171,  201,  369,   81,  148,
 /*  2670 */   236,  187,  334,  116,  412,  412,  412,  308,  412,  412,
 /*  2680 */   293,  269,  448,  142,   95,  154,  196,  190,  162,  343,
 /*  2690 */   171,  201,  369,   81,  148,  236,  412,  362,  412,  412,
 /*  2700 */   412,  412,  412,  291,  399,  381,  137,  412,  122,  375,
 /*  2710 */   412,  412,  412,  412,  412,  412,  412,  412,  241,  106,
 /*  2720 */    34,  412,  412,  125,  160,  245,  272,  412,  412,  216,
 /*  2730 */   412,  160,  245,  412,  160,  245,  412,  187,  334,  116,
 /*  2740 */   185,  416,  412,  308,  412,  412,  293,  269,  448,  142,
 /*  2750 */    95,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  2760 */   148,  236,  284,  362,  381,  137,  412,  122,  375,  412,
 /*  2770 */   362,  412,  412,  362,  412,  412,  412,  241,  106,  412,
 /*  2780 */   412,  412,  125,  160,  245,  412,  412,  242,  267,  234,
 /*  2790 */   268,  397,  398,  393,  281,  412,  187,  334,  116,  412,
 /*  2800 */   412,  412,  308,  412,  412,  293,  269,  448,  142,   95,
 /*  2810 */   154,  196,  190,  162,  343,  171,  201,  369,   81,  148,
 /*  2820 */   236,  412,  362,  412,  210,  412,  381,  137,  412,  122,
 /*  2830 */   375,  412,  412,  412,  412,  412,  412,  412,  412,  241,
 /*  2840 */   106,  412,  412,  270,  125,  160,  245,  412,  160,  245,
 /*  2850 */   412,  412,  412,  412,  412,  412,  412,  412,  187,  334,
 /*  2860 */   116,  412,  412,  412,  308,  412,  412,  293,  269,  448,
 /*  2870 */   142,   95,  154,  196,  190,  162,  343,  171,  201,  369,
 /*  2880 */    81,  148,  236,  286,  362,  381,  137,  362,  122,  375,
 /*  2890 */   412,  412,  412,  412,  412,  412,  412,  412,  241,  106,
 /*  2900 */   412,  412,  412,  125,  160,  245,  412,  412,  412,  412,
 /*  2910 */   412,  412,  412,  412,  412,  412,  412,  187,  334,  116,
 /*  2920 */   412,  412,  412,  308,  412,  412,  293,  269,  448,  142,
 /*  2930 */    95,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  2940 */   148,  236,  412,  362,  241,  106,  412,  412,  412,  125,
 /*  2950 */   160,  245,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  2960 */   412,  412,  412,  246,  412,  412,  412,  412,  214,  412,
 /*  2970 */   412,  412,  412,  412,  448,  142,   95,  154,  196,  190,
 /*  2980 */   162,  343,  171,  201,  369,   81,  148,  236,  412,  362,
 /*  2990 */   412,  412,  241,  106,  412,  412,  412,  125,  160,  245,
 /*  3000 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3010 */   412,  170,  412,  241,  412,  412,  412,  412,  412,  412,
 /*  3020 */   412,  412,  448,  142,   95,  154,  196,  190,  162,  343,
 /*  3030 */   171,  201,  369,   81,  148,  236,  412,  362,  241,  106,
 /*  3040 */   412,  412,  412,  125,  160,  245,  150,  196,  190,  162,
 /*  3050 */   343,  171,  201,  369,   81,  148,  236,  176,  412,  412,
 /*  3060 */   412,  412,  412,  412,  412,  412,  412,  412,  448,  142,
 /*  3070 */    95,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  3080 */   148,  236,  412,  362,  241,  106,  412,  412,  412,  125,
 /*  3090 */   160,  245,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3100 */   412,  412,  412,  198,  412,  412,  412,  412,  412,  412,
 /*  3110 */   412,  412,  412,  412,  448,  142,   95,  154,  196,  190,
 /*  3120 */   162,  343,  171,  201,  369,   81,  148,  236,  412,  362,
 /*  3130 */   412,  241,  106,  412,  412,  412,  125,  160,  245,  412,
 /*  3140 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3150 */   174,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3160 */   412,  448,  142,   95,  154,  196,  190,  162,  343,  171,
 /*  3170 */   201,  369,   81,  148,  236,  412,  362,  241,  106,  412,
 /*  3180 */   412,  412,  125,  160,  245,  412,  412,  412,  412,  412,
 /*  3190 */   412,  412,  412,  412,  412,  412,  177,  412,  412,  412,
 /*  3200 */   412,  412,  412,  412,  412,  412,  412,  448,  142,   95,
 /*  3210 */   154,  196,  190,  162,  343,  171,  201,  369,   81,  148,
 /*  3220 */   236,  412,  362,  241,  105,  412,  412,  412,  125,  160,
 /*  3230 */   245,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3240 */   412,  412,  176,  412,  412,  412,  412,  412,  412,  412,
 /*  3250 */   412,  412,  412,  448,  142,   95,  154,  196,  190,  162,
 /*  3260 */   343,  171,  201,  369,   81,  148,  236,  412,  362,  412,
 /*  3270 */   241,  106,  412,  412,  412,  125,  160,  245,  412,  412,
 /*  3280 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  181,
 /*  3290 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3300 */   448,  142,   95,  154,  196,  190,  162,  343,  171,  201,
 /*  3310 */   369,   81,  148,  236,  412,  362,  241,  106,  412,  412,
 /*  3320 */   412,  125,  160,  245,  412,  412,  412,  412,  412,  412,
 /*  3330 */   412,  412,  412,  412,  412,  199,  412,  412,  412,  412,
 /*  3340 */   412,  412,  412,  412,  412,  412,  448,  142,   95,  154,
 /*  3350 */   196,  190,  162,  343,  171,  201,  369,   81,  148,  236,
 /*  3360 */   412,  362,  241,  106,  412,  412,  412,  125,  160,  245,
 /*  3370 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3380 */   412,  207,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3390 */   412,  412,  448,  142,   95,  154,  196,  190,  162,  343,
 /*  3400 */   171,  201,  369,   81,  148,  236,  412,  362,  412,  241,
 /*  3410 */   106,  412,  412,  412,  125,  160,  245,  412,  412,  412,
 /*  3420 */   412,  412,  412,  412,  412,  412,  412,  412,  203,  412,
 /*  3430 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  448,
 /*  3440 */   142,   95,  154,  196,  190,  162,  343,  171,  201,  369,
 /*  3450 */    81,  148,  236,  412,  362,  241,  106,  412,  412,  412,
 /*  3460 */   125,  160,  245,  412,  412,  412,  412,  412,  412,  412,
 /*  3470 */   412,  412,  412,  412,  168,  412,  412,  412,  412,  412,
 /*  3480 */   412,  412,  412,  412,  412,  448,  142,   95,  154,  196,
 /*  3490 */   190,  162,  343,  171,  201,  369,   81,  148,  236,  412,
 /*  3500 */   362,  241,  106,  412,  412,  399,  125,  160,  245,  412,
 /*  3510 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  3520 */   204,   39,  412,   87,   65,   63,   64,   67,  241,   68,
 /*  3530 */   412,  448,  142,   95,  154,  196,  190,  162,  343,  171,
 /*  3540 */   201,  369,   81,  148,  236,  412,  362,  412,  412,  412,
 /*  3550 */   412,  412,  412,  412,   54,  412,  412,  412,  445,  142,
 /*  3560 */   412,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  3570 */   148,  236,  412,  412,  412,  412,  412,   91,   90,  241,
 /*  3580 */   412,   82,   83,   85,   86,   84,  412,  412,  242,  267,
 /*  3590 */   234,  268,  397,  398,  393,  281,   44,   57,   46,   45,
 /*  3600 */    50,   55,   49,   53,   48,   56,   66,  412,  241,  458,
 /*  3610 */   142,  412,  154,  196,  190,  162,  343,  171,  201,  369,
 /*  3620 */    81,  148,  236,  241,  412,  412,  412,  412,  412,  412,
 /*  3630 */   412,  412,  412,  412,  412,  412,  241,  412,  452,  142,
 /*  3640 */   412,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  3650 */   148,  236,  412,  412,  149,  241,  154,  196,  190,  162,
 /*  3660 */   343,  171,  201,  369,   81,  148,  236,  146,  241,  154,
 /*  3670 */   196,  190,  162,  343,  171,  201,  369,   81,  148,  236,
 /*  3680 */   241,  412,  412,  412,  412,  412,  144,  412,  154,  196,
 /*  3690 */   190,  162,  343,  171,  201,  369,   81,  148,  236,  143,
 /*  3700 */   241,  154,  196,  190,  162,  343,  171,  201,  369,   81,
 /*  3710 */   148,  236,  241,  151,  196,  190,  162,  343,  171,  201,
 /*  3720 */   369,   81,  148,  236,  241,  412,  412,  412,  412,  412,
 /*  3730 */   412,  412,  412,  157,  196,  190,  162,  343,  171,  201,
 /*  3740 */   369,   81,  148,  236,  241,  412,  172,  190,  162,  343,
 /*  3750 */   171,  201,  369,   81,  148,  236,  241,  412,  180,  190,
 /*  3760 */   162,  343,  171,  201,  369,   81,  148,  236,  412,  412,
 /*  3770 */   241,  412,  412,  412,  412,  412,  412,  412,  202,  190,
 /*  3780 */   162,  343,  171,  201,  369,   81,  148,  236,  241,  412,
 /*  3790 */   189,  190,  162,  343,  171,  201,  369,   81,  148,  236,
 /*  3800 */   412,  412,  412,  412,  412,  183,  162,  343,  171,  201,
 /*  3810 */   369,   81,  148,  236,  412,  412,  412,  412,  412,  412,
 /*  3820 */   412,  412,  412,  197,  162,  343,  171,  201,  369,   81,
 /*  3830 */   148,  236,
    );
    static public $yy_lookahead = array(
 /*     0 */    17,   18,   19,   20,   21,   22,   23,   24,   18,   26,
 /*    10 */    27,   28,   33,   34,   31,   34,   19,   34,   21,   36,
 /*    20 */    37,   38,   11,   18,   43,   34,   43,   37,  133,   11,
 /*    30 */    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*    40 */    57,   36,   37,   60,   33,   34,   63,   64,   65,   66,
 /*    50 */    67,   33,   34,   70,   71,   72,   73,   74,  163,  164,
 /*    60 */    20,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*    70 */   175,  176,   32,   90,   91,   94,   95,   94,   95,   96,
 /*    80 */    97,   98,   18,   19,  101,  102,  103,  104,  105,  106,
 /*    90 */   107,  108,   43,  110,  111,  112,  113,   17,   18,   19,
 /*   100 */    20,   21,   22,   23,   24,   18,   26,   27,   28,  139,
 /*   110 */   140,   31,   18,   18,   34,   21,   36,   37,   38,   92,
 /*   120 */    93,   94,   34,   43,   37,  133,   34,   47,   48,   49,
 /*   130 */    50,   51,   52,   53,   54,   55,   56,   57,   20,   34,
 /*   140 */    60,   90,   91,   63,   64,   65,   66,   67,  178,   32,
 /*   150 */    70,   71,   72,   73,   74,  163,  164,   40,  166,  167,
 /*   160 */   168,  169,  170,  171,  172,  173,  174,  175,  176,   32,
 /*   170 */    90,   91,   35,   68,   94,   95,   96,   97,   98,   61,
 /*   180 */    62,  101,  102,  103,  104,  105,  106,  107,  108,   94,
 /*   190 */   110,  111,  112,  113,   17,   18,   19,   35,   21,   22,
 /*   200 */    23,   24,   97,   98,   99,  100,   18,   19,   31,   88,
 /*   210 */    89,   34,   25,   36,   37,   38,   11,   39,   40,  133,
 /*   220 */    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
 /*   230 */    53,   54,   55,   56,   57,   20,   32,   60,   33,   35,
 /*   240 */    63,   64,   65,   66,   67,  155,  156,   70,   71,   72,
 /*   250 */    73,   74,  166,  167,  168,  169,  170,  171,  172,  173,
 /*   260 */   174,  175,  176,   43,   86,   87,   33,   90,   91,  159,
 /*   270 */   160,   94,   95,   96,   97,   98,   61,   62,  101,  102,
 /*   280 */   103,  104,  105,  106,  107,  108,   35,  110,  111,  112,
 /*   290 */   113,   17,   18,   19,   20,   21,   22,   23,   24,  142,
 /*   300 */   143,    3,    4,    5,    6,   31,    8,   21,   34,   21,
 /*   310 */    36,   37,   38,   32,   94,   95,   35,   43,   32,  133,
 /*   320 */    32,   47,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   330 */    56,   57,  131,  132,   60,   33,   34,   63,   64,   65,
 /*   340 */    66,   67,  109,  136,   70,   71,   72,   73,   74,  163,
 /*   350 */   164,  144,  166,  167,  168,  169,  170,  171,  172,  173,
 /*   360 */   174,  175,  176,   18,   90,   91,   21,  133,   94,   95,
 /*   370 */    96,   97,   98,   21,  140,  101,  102,  103,  104,  105,
 /*   380 */   106,  107,  108,   85,  110,  111,  112,  113,   17,   18,
 /*   390 */    19,   20,   21,   22,   23,   24,  141,  142,  143,   22,
 /*   400 */    23,   24,   31,   18,  136,   34,   21,   36,   37,   38,
 /*   410 */    32,  109,  144,   35,   43,   34,  133,   11,   47,   48,
 /*   420 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   32,
 /*   430 */    32,   60,   35,   35,   63,   64,   65,   66,   67,   33,
 /*   440 */    32,   70,   71,   72,   73,   74,  163,  164,   40,  166,
 /*   450 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*   460 */    18,   90,   91,  136,   51,   94,   95,   96,   97,   98,
 /*   470 */    19,  144,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   480 */    11,  110,  111,  112,  113,   17,   18,   19,   20,   21,
 /*   490 */    22,   23,   24,  133,   32,  135,   35,   35,   18,   31,
 /*   500 */   140,  136,   34,   25,   36,   37,   38,   29,   30,  144,
 /*   510 */    18,   43,   20,  133,   19,   47,   48,   49,   50,   51,
 /*   520 */    52,   53,   54,   55,   56,   57,  150,  151,   60,   45,
 /*   530 */    46,   63,   64,   65,   66,   67,   94,   32,   70,   71,
 /*   540 */    72,   73,   74,  163,  164,   40,  166,  167,  168,  169,
 /*   550 */   170,  171,  172,  173,  174,  175,  176,   33,   90,   91,
 /*   560 */    34,   34,   94,   95,   96,   97,   98,   37,   39,  101,
 /*   570 */   102,  103,  104,  105,  106,  107,  108,   18,  110,  111,
 /*   580 */   112,  113,   17,   18,   19,   20,   21,   22,   23,   24,
 /*   590 */   135,   18,  135,  135,   21,  140,   31,  140,  140,   34,
 /*   600 */    21,   36,   37,   38,   19,   18,   21,   19,   43,   21,
 /*   610 */   133,   32,   47,   48,   49,   50,   51,   52,   53,   54,
 /*   620 */    55,   56,   57,   36,   37,   60,   18,   37,   63,   64,
 /*   630 */    65,   66,   67,  109,   40,   70,   71,   72,   73,   74,
 /*   640 */   163,  164,   25,  166,  167,  168,  169,  170,  171,  172,
 /*   650 */   173,  174,  175,  176,   21,   90,   91,   35,   18,   94,
 /*   660 */    95,   96,   97,   98,   11,   32,  101,  102,  103,  104,
 /*   670 */   105,  106,  107,  108,  111,  110,  111,  112,  113,   17,
 /*   680 */    18,   19,   20,   21,   22,   23,   24,   18,   32,   32,
 /*   690 */   109,   35,   35,   31,   21,   69,   34,   18,   36,   37,
 /*   700 */    38,   25,   18,  111,   34,   43,   37,  133,   21,   47,
 /*   710 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   720 */    40,   37,   60,   21,   18,   63,   64,   65,   66,   67,
 /*   730 */    40,   34,   70,   71,   72,   73,   74,  163,  164,    2,
 /*   740 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*   750 */   176,   18,   90,   91,  111,   39,   94,   95,   96,   97,
 /*   760 */    98,   33,   39,  101,  102,  103,  104,  105,  106,  107,
 /*   770 */   108,   18,  110,  111,  112,  113,   17,   18,   19,   20,
 /*   780 */    21,   22,   23,   24,   21,  109,   39,   18,   34,   11,
 /*   790 */    31,   69,   19,   34,   44,   36,   37,   38,   21,   25,
 /*   800 */    18,   39,   43,   37,  133,   25,   47,   48,   49,   50,
 /*   810 */    51,   52,   53,   54,   55,   56,   57,   21,   35,   60,
 /*   820 */    35,   34,   63,   64,   65,   66,   67,   33,   25,   70,
 /*   830 */    71,   72,   73,   74,  163,  164,   94,  166,  167,  168,
 /*   840 */   169,  170,  171,  172,  173,  174,  175,  176,   40,   90,
 /*   850 */    91,   39,   39,   94,   95,   96,   97,   98,   32,   21,
 /*   860 */   101,  102,  103,  104,  105,  106,  107,  108,  130,  110,
 /*   870 */   111,  112,  113,   17,   18,   19,   20,   21,   22,   23,
 /*   880 */    24,  137,  137,  137,   34,  137,  122,   31,  137,  137,
 /*   890 */    34,  130,   36,   37,   38,  119,   18,  132,   58,   43,
 /*   900 */    19,  133,   34,   47,   48,   49,   50,   51,   52,   53,
 /*   910 */    54,   55,   56,   57,  156,  122,   60,  133,  137,   63,
 /*   920 */    64,   65,   66,   67,  133,  137,   70,   71,   72,   73,
 /*   930 */    74,  163,  164,  129,  166,  167,  168,  169,  170,  171,
 /*   940 */   172,  173,  174,  175,  176,  140,   90,   91,  137,  160,
 /*   950 */    94,   95,   96,   97,   98,  137,  124,  101,  102,  103,
 /*   960 */   104,  105,  106,  107,  108,  179,  110,  111,  112,  113,
 /*   970 */    17,   18,   19,   20,   21,   22,   23,   24,  179,  179,
 /*   980 */   179,  179,  179,  179,   31,  179,  179,   34,  179,   36,
 /*   990 */    37,   38,  179,  179,  179,  179,   43,  179,  133,  179,
 /*  1000 */    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*  1010 */    57,  179,  179,   60,  179,  179,   63,   64,   65,   66,
 /*  1020 */    67,  179,  179,   70,   71,   72,   73,   74,  163,  164,
 /*  1030 */   179,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  1040 */   175,  176,  179,   90,   91,  179,  179,   94,   95,   96,
 /*  1050 */    97,   98,  179,  179,  101,  102,  103,  104,  105,  106,
 /*  1060 */   107,  108,  179,  110,  111,  112,  113,   17,   18,   19,
 /*  1070 */    20,   21,   22,   23,   24,  179,  179,  179,  179,  179,
 /*  1080 */   179,   31,  179,  179,   34,  179,   36,   37,   38,  179,
 /*  1090 */   179,  179,  179,   43,  179,  133,  179,   47,   48,   49,
 /*  1100 */    50,   51,   52,   53,   54,   55,   56,   57,  179,  179,
 /*  1110 */    60,  179,  179,   63,   64,   65,   66,   67,  179,  179,
 /*  1120 */    70,   71,   72,   73,   74,  163,  164,  179,  166,  167,
 /*  1130 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  1140 */    90,   91,  179,  179,   94,   95,   96,   97,   98,  179,
 /*  1150 */   179,  101,  102,  103,  104,  105,  106,  107,  108,  179,
 /*  1160 */   110,  111,  112,  113,   17,   18,   19,   18,   21,   22,
 /*  1170 */    23,   24,  179,  179,  179,  179,  179,  179,   31,  179,
 /*  1180 */   179,   34,  179,   36,   37,   38,   37,  179,  179,  179,
 /*  1190 */    43,   42,  133,  179,   47,   48,   49,   50,   51,   52,
 /*  1200 */    53,   54,   55,   56,   57,  179,  179,   60,  179,  179,
 /*  1210 */    63,   64,   65,   66,   67,  179,  179,   70,   71,   72,
 /*  1220 */    73,   74,  163,  164,  179,  166,  167,  168,  169,  170,
 /*  1230 */   171,  172,  173,  174,  175,  176,  179,   90,   91,  179,
 /*  1240 */   179,   94,   95,   96,   97,   98,  179,  179,  101,  102,
 /*  1250 */   103,  104,  105,  106,  107,  108,  179,  110,  111,  112,
 /*  1260 */   113,   17,   18,   19,   18,   21,   22,   23,   24,  134,
 /*  1270 */   179,  179,  179,  179,  139,  140,  179,  179,   34,  179,
 /*  1280 */    36,   37,   38,   37,   22,   23,  179,   43,   42,  133,
 /*  1290 */   179,  179,  179,   31,   50,   51,   52,   53,   54,   55,
 /*  1300 */    56,   57,   40,   41,   60,  179,  179,   63,   64,   65,
 /*  1310 */    66,   67,  177,  178,   70,   71,   72,   73,   74,  163,
 /*  1320 */   164,  179,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  1330 */   174,  175,  176,  179,   90,   91,  179,  179,   94,   95,
 /*  1340 */    96,   97,   98,  179,  179,  101,  102,  103,  104,  105,
 /*  1350 */   106,  107,  108,  179,  110,  111,  112,  113,  179,  117,
 /*  1360 */   118,  179,  120,  121,  179,  123,  124,  125,  126,  127,
 /*  1370 */   128,   35,  179,   37,  179,  133,  134,  179,  179,   43,
 /*  1380 */   138,  139,  140,   22,   23,  179,  179,  179,  179,  147,
 /*  1390 */   179,  179,   31,  133,  152,  153,  154,  179,  179,  179,
 /*  1400 */   158,  179,   41,  161,  162,  163,  164,  165,  166,  167,
 /*  1410 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  1420 */   178,  179,  117,  118,  179,  120,  121,  179,  123,  124,
 /*  1430 */   170,  171,  172,  173,  174,  175,  176,  179,  133,  134,
 /*  1440 */   179,  179,  179,  138,  139,  140,  110,  111,  112,  113,
 /*  1450 */   179,  179,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1460 */   133,  179,  179,  158,  179,  179,  161,  162,  163,  164,
 /*  1470 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  1480 */   175,  176,  179,  178,  117,  118,  179,  120,  121,  179,
 /*  1490 */   123,  124,  179,  126,  127,  128,  179,  179,  171,  172,
 /*  1500 */   133,  134,  175,  176,  179,  138,  139,  140,  179,   37,
 /*  1510 */   133,  179,   40,  179,  147,   43,  179,  134,  179,  152,
 /*  1520 */   153,  154,  139,  140,  179,  158,  179,  133,  161,  162,
 /*  1530 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  1540 */   173,  174,  175,  176,  179,  178,  169,  170,  171,  172,
 /*  1550 */   173,  174,  175,  176,  115,  116,  117,  118,  179,  120,
 /*  1560 */   121,  178,  123,  124,  170,  171,  172,  173,  174,  175,
 /*  1570 */   176,  179,  133,  134,  179,  179,  179,  138,  139,  140,
 /*  1580 */   179,  179,  110,  111,  112,  113,  147,  179,  179,  179,
 /*  1590 */   133,  152,  153,  154,  179,  179,  179,  158,  179,  179,
 /*  1600 */   161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  1610 */   171,  172,  173,  174,  175,  176,  179,  178,  116,  117,
 /*  1620 */   118,  179,  120,  121,  179,  123,  124,   18,  171,  172,
 /*  1630 */   173,  174,  175,  176,  179,  133,  134,  179,  179,  179,
 /*  1640 */   138,  139,  140,   34,  133,  179,   37,  179,  179,  147,
 /*  1650 */   179,   42,  179,  179,  152,  153,  154,  179,  179,  179,
 /*  1660 */   158,  179,  133,  161,  162,  163,  164,  165,  166,  167,
 /*  1670 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  1680 */   178,  170,  171,  172,  173,  174,  175,  176,  179,  116,
 /*  1690 */   117,  118,  179,  120,  121,  179,  123,  124,  169,  170,
 /*  1700 */   171,  172,  173,  174,  175,  176,  133,  134,  179,  179,
 /*  1710 */   179,  138,  139,  140,  105,  106,  107,  108,  179,  179,
 /*  1720 */   147,  179,  179,  179,  133,  152,  153,  154,  179,  179,
 /*  1730 */   179,  158,  179,  179,  161,  162,  163,  164,  165,  166,
 /*  1740 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  1750 */   179,  178,  116,  117,  118,  179,  120,  121,  179,  123,
 /*  1760 */   124,   18,  171,  172,  173,  174,  175,  176,   18,  133,
 /*  1770 */   134,  179,  179,  179,  138,  139,  140,   34,   35,  179,
 /*  1780 */    37,  179,  179,  147,   34,  179,  179,   37,  152,  153,
 /*  1790 */   154,  179,  179,  179,  158,  179,  133,  161,  162,  163,
 /*  1800 */   164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  1810 */   174,  175,  176,  179,  178,  179,  179,  179,  179,  179,
 /*  1820 */   179,  179,  179,  116,  117,  118,   37,  120,  121,   40,
 /*  1830 */   123,  124,   43,  179,  171,  172,  173,  174,  175,  176,
 /*  1840 */   133,  134,  179,  179,  179,  138,  139,  140,  105,  106,
 /*  1850 */   107,  108,  179,  179,  147,  105,  106,  107,  108,  152,
 /*  1860 */   153,  154,  179,  179,  179,  158,  179,  179,  161,  162,
 /*  1870 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  1880 */   173,  174,  175,  176,  179,  178,  116,  117,  118,  179,
 /*  1890 */   120,  121,  179,  123,  124,  179,   18,  179,  179,  110,
 /*  1900 */   111,  112,  113,  133,  134,  179,  179,  179,  138,  139,
 /*  1910 */   140,  133,   34,  179,  179,  179,  179,  147,  179,  179,
 /*  1920 */   179,  179,  152,  153,  154,  179,  179,  179,  158,  179,
 /*  1930 */   133,  161,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  1940 */   170,  171,  172,  173,  174,  175,  176,  179,  178,  171,
 /*  1950 */   172,  173,  174,  175,  176,  179,  179,  116,  117,  118,
 /*  1960 */   179,  120,  121,  179,  123,  124,  179,  179,  171,  172,
 /*  1970 */   173,  174,  175,  176,  133,  134,  179,  179,  179,  138,
 /*  1980 */   139,  140,  179,  105,  106,  107,  108,  179,  147,  179,
 /*  1990 */   179,  133,  179,  152,  153,  154,  179,  179,  179,  158,
 /*  2000 */   179,  179,  161,  162,  163,  164,  165,  166,  167,  168,
 /*  2010 */   169,  170,  171,  172,  173,  174,  175,  176,  179,  178,
 /*  2020 */   116,  117,  118,  179,  120,  121,  179,  123,  124,  171,
 /*  2030 */   172,  173,  174,  175,  176,  179,  179,  133,  134,  179,
 /*  2040 */   179,  179,  138,  139,  140,  133,  179,  179,  179,  179,
 /*  2050 */   179,  147,  179,  179,  179,  179,  152,  153,  154,  179,
 /*  2060 */   179,  179,  158,  179,  179,  161,  162,  163,  164,  165,
 /*  2070 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  2080 */   176,  179,  178,  171,  172,  173,  174,  175,  176,  179,
 /*  2090 */   179,  116,  117,  118,  179,  120,  121,  179,  123,  124,
 /*  2100 */   179,  179,  179,  179,  179,  179,   37,  179,  133,  134,
 /*  2110 */   179,  179,   43,  138,  139,  140,  124,  179,  179,  134,
 /*  2120 */   179,  179,  147,  179,  139,  140,  134,  152,  153,  154,
 /*  2130 */   138,  139,  140,  158,  179,  179,  161,  162,  163,  164,
 /*  2140 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  2150 */   175,  176,  179,  178,  116,  117,  118,  165,  120,  121,
 /*  2160 */   179,  123,  124,  178,  179,   37,  179,  179,  179,  179,
 /*  2170 */   178,  133,  134,  179,  179,  179,  138,  139,  140,  110,
 /*  2180 */   111,  112,  113,  179,  179,  147,  179,  179,  179,  179,
 /*  2190 */   152,  153,  154,  179,  179,  179,  158,  179,  179,  161,
 /*  2200 */   162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  2210 */   172,  173,  174,  175,  176,  134,  178,  179,  179,  179,
 /*  2220 */   139,  140,  179,  179,  179,  116,  117,  118,  179,  120,
 /*  2230 */   121,  179,  123,  124,  179,  179,  179,  179,  110,  111,
 /*  2240 */   112,  113,  133,  134,  179,  179,  179,  138,  139,  140,
 /*  2250 */   179,  179,  179,  179,  179,  179,  147,  179,  177,  178,
 /*  2260 */   133,  152,  153,  154,  179,  179,  179,  158,  179,  179,
 /*  2270 */   161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  2280 */   171,  172,  173,  174,  175,  176,  179,  178,  179,  117,
 /*  2290 */   118,  179,  120,  121,  179,  123,  124,  179,  171,  172,
 /*  2300 */   179,  179,  175,  176,   18,  133,  134,  179,  179,  179,
 /*  2310 */   138,  139,  140,  179,  179,  179,  179,  179,  179,  147,
 /*  2320 */    34,   35,   36,   37,  152,  153,  154,  179,  179,   43,
 /*  2330 */   158,  179,  179,  161,  162,  163,  164,  165,  166,  167,
 /*  2340 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  2350 */   178,  179,   66,   67,   18,  179,   70,   71,   72,   73,
 /*  2360 */    74,  134,  179,  179,  179,  179,  139,  140,  179,  179,
 /*  2370 */    34,   35,   36,   37,  179,  179,   90,   91,  179,   43,
 /*  2380 */    94,   95,   96,   97,   98,  179,  179,  101,  102,  103,
 /*  2390 */   104,  105,  106,  107,  108,   18,  110,  111,  112,  113,
 /*  2400 */   179,  179,   66,   67,  179,  178,   70,   71,   72,   73,
 /*  2410 */    74,   34,  179,   36,   37,  179,  179,  133,  179,  179,
 /*  2420 */   179,  179,  179,  179,  179,  179,   90,   91,  179,  179,
 /*  2430 */    94,   95,   96,   97,   98,  179,  179,  101,  102,  103,
 /*  2440 */   104,  105,  106,  107,  108,   18,  110,  111,  112,  113,
 /*  2450 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  2460 */   176,   34,  179,   36,   37,  179,  179,   90,   91,  179,
 /*  2470 */    43,   94,   95,   96,   97,   98,  179,  179,  101,  102,
 /*  2480 */   103,  104,  105,  106,  107,  108,   59,  179,  179,  179,
 /*  2490 */   179,   18,  179,   66,   67,  179,  179,   70,   71,   72,
 /*  2500 */    73,   74,  179,  179,  179,  134,  179,   34,  179,   36,
 /*  2510 */   139,  140,  179,  179,  134,  179,  179,   90,   91,  139,
 /*  2520 */   140,   94,   95,   96,   97,   98,  146,  179,  101,  102,
 /*  2530 */   103,  104,  105,  106,  107,  108,   18,  110,  111,  112,
 /*  2540 */   113,   68,  179,  179,  179,   22,   23,   24,  179,  178,
 /*  2550 */   179,  179,   34,  179,   36,   37,  179,  179,  178,   36,
 /*  2560 */    37,   43,  179,   90,   91,  179,   43,   94,   95,   96,
 /*  2570 */    97,   98,  179,  179,  101,  102,  103,  104,  105,  106,
 /*  2580 */   107,  108,  179,  179,   66,   67,  179,  179,   70,   71,
 /*  2590 */    72,   73,   74,   70,   71,   72,   73,   74,  179,  179,
 /*  2600 */   179,  179,  179,  179,  179,  134,  179,  179,   90,   91,
 /*  2610 */   139,  140,   94,   95,   96,   97,   98,  179,  179,  101,
 /*  2620 */   102,  103,  104,  105,  106,  107,  108,  133,  110,  111,
 /*  2630 */   112,  113,  179,  110,  111,  112,  113,  118,  179,  120,
 /*  2640 */   121,  179,  123,  124,  179,  179,  179,  179,  179,  178,
 /*  2650 */   179,  179,  133,  134,  179,  179,  179,  138,  139,  140,
 /*  2660 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  2670 */   176,  152,  153,  154,  179,  179,  179,  158,  179,  179,
 /*  2680 */   161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  2690 */   171,  172,  173,  174,  175,  176,  179,  178,  179,  179,
 /*  2700 */   179,  179,  179,  118,   18,  120,  121,  179,  123,  124,
 /*  2710 */   179,  179,  179,  179,  179,  179,  179,  179,  133,  134,
 /*  2720 */    34,  179,  179,  138,  139,  140,  134,  179,  179,  134,
 /*  2730 */   179,  139,  140,  179,  139,  140,  179,  152,  153,  154,
 /*  2740 */   145,  146,  179,  158,  179,  179,  161,  162,  163,  164,
 /*  2750 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  2760 */   175,  176,  118,  178,  120,  121,  179,  123,  124,  179,
 /*  2770 */   178,  179,  179,  178,  179,  179,  179,  133,  134,  179,
 /*  2780 */   179,  179,  138,  139,  140,  179,  179,  101,  102,  103,
 /*  2790 */   104,  105,  106,  107,  108,  179,  152,  153,  154,  179,
 /*  2800 */   179,  179,  158,  179,  179,  161,  162,  163,  164,  165,
 /*  2810 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  2820 */   176,  179,  178,  179,  118,  179,  120,  121,  179,  123,
 /*  2830 */   124,  179,  179,  179,  179,  179,  179,  179,  179,  133,
 /*  2840 */   134,  179,  179,  134,  138,  139,  140,  179,  139,  140,
 /*  2850 */   179,  179,  179,  179,  179,  179,  179,  179,  152,  153,
 /*  2860 */   154,  179,  179,  179,  158,  179,  179,  161,  162,  163,
 /*  2870 */   164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  2880 */   174,  175,  176,  118,  178,  120,  121,  178,  123,  124,
 /*  2890 */   179,  179,  179,  179,  179,  179,  179,  179,  133,  134,
 /*  2900 */   179,  179,  179,  138,  139,  140,  179,  179,  179,  179,
 /*  2910 */   179,  179,  179,  179,  179,  179,  179,  152,  153,  154,
 /*  2920 */   179,  179,  179,  158,  179,  179,  161,  162,  163,  164,
 /*  2930 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  2940 */   175,  176,  179,  178,  133,  134,  179,  179,  179,  138,
 /*  2950 */   139,  140,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  2960 */   179,  179,  179,  152,  179,  179,  179,  179,  157,  179,
 /*  2970 */   179,  179,  179,  179,  163,  164,  165,  166,  167,  168,
 /*  2980 */   169,  170,  171,  172,  173,  174,  175,  176,  179,  178,
 /*  2990 */   179,  179,  133,  134,  179,  179,  179,  138,  139,  140,
 /*  3000 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3010 */   179,  152,  179,  133,  179,  179,  179,  179,  179,  179,
 /*  3020 */   179,  179,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  3030 */   171,  172,  173,  174,  175,  176,  179,  178,  133,  134,
 /*  3040 */   179,  179,  179,  138,  139,  140,  166,  167,  168,  169,
 /*  3050 */   170,  171,  172,  173,  174,  175,  176,  152,  179,  179,
 /*  3060 */   179,  179,  179,  179,  179,  179,  179,  179,  163,  164,
 /*  3070 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3080 */   175,  176,  179,  178,  133,  134,  179,  179,  179,  138,
 /*  3090 */   139,  140,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3100 */   179,  179,  179,  152,  179,  179,  179,  179,  179,  179,
 /*  3110 */   179,  179,  179,  179,  163,  164,  165,  166,  167,  168,
 /*  3120 */   169,  170,  171,  172,  173,  174,  175,  176,  179,  178,
 /*  3130 */   179,  133,  134,  179,  179,  179,  138,  139,  140,  179,
 /*  3140 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3150 */   152,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3160 */   179,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  3170 */   172,  173,  174,  175,  176,  179,  178,  133,  134,  179,
 /*  3180 */   179,  179,  138,  139,  140,  179,  179,  179,  179,  179,
 /*  3190 */   179,  179,  179,  179,  179,  179,  152,  179,  179,  179,
 /*  3200 */   179,  179,  179,  179,  179,  179,  179,  163,  164,  165,
 /*  3210 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  3220 */   176,  179,  178,  133,  134,  179,  179,  179,  138,  139,
 /*  3230 */   140,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3240 */   179,  179,  152,  179,  179,  179,  179,  179,  179,  179,
 /*  3250 */   179,  179,  179,  163,  164,  165,  166,  167,  168,  169,
 /*  3260 */   170,  171,  172,  173,  174,  175,  176,  179,  178,  179,
 /*  3270 */   133,  134,  179,  179,  179,  138,  139,  140,  179,  179,
 /*  3280 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  152,
 /*  3290 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3300 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  3310 */   173,  174,  175,  176,  179,  178,  133,  134,  179,  179,
 /*  3320 */   179,  138,  139,  140,  179,  179,  179,  179,  179,  179,
 /*  3330 */   179,  179,  179,  179,  179,  152,  179,  179,  179,  179,
 /*  3340 */   179,  179,  179,  179,  179,  179,  163,  164,  165,  166,
 /*  3350 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  3360 */   179,  178,  133,  134,  179,  179,  179,  138,  139,  140,
 /*  3370 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3380 */   179,  152,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3390 */   179,  179,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  3400 */   171,  172,  173,  174,  175,  176,  179,  178,  179,  133,
 /*  3410 */   134,  179,  179,  179,  138,  139,  140,  179,  179,  179,
 /*  3420 */   179,  179,  179,  179,  179,  179,  179,  179,  152,  179,
 /*  3430 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  163,
 /*  3440 */   164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  3450 */   174,  175,  176,  179,  178,  133,  134,  179,  179,  179,
 /*  3460 */   138,  139,  140,  179,  179,  179,  179,  179,  179,  179,
 /*  3470 */   179,  179,  179,  179,  152,  179,  179,  179,  179,  179,
 /*  3480 */   179,  179,  179,  179,  179,  163,  164,  165,  166,  167,
 /*  3490 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  3500 */   178,  133,  134,  179,  179,   18,  138,  139,  140,  179,
 /*  3510 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3520 */   152,   34,  179,   36,    3,    4,    5,    6,  133,    8,
 /*  3530 */   179,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  3540 */   172,  173,  174,  175,  176,  179,  178,  179,  179,  179,
 /*  3550 */   179,  179,  179,  179,   33,  179,  179,  179,  163,  164,
 /*  3560 */   179,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3570 */   175,  176,  179,  179,  179,  179,  179,   90,   91,  133,
 /*  3580 */   179,   94,   95,   96,   97,   98,  179,  179,  101,  102,
 /*  3590 */   103,  104,  105,  106,  107,  108,   75,   76,   77,   78,
 /*  3600 */    79,   80,   81,   82,   83,   84,   85,  179,  133,  163,
 /*  3610 */   164,  179,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  3620 */   174,  175,  176,  133,  179,  179,  179,  179,  179,  179,
 /*  3630 */   179,  179,  179,  179,  179,  179,  133,  179,  163,  164,
 /*  3640 */   179,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3650 */   175,  176,  179,  179,  164,  133,  166,  167,  168,  169,
 /*  3660 */   170,  171,  172,  173,  174,  175,  176,  164,  133,  166,
 /*  3670 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  3680 */   133,  179,  179,  179,  179,  179,  164,  179,  166,  167,
 /*  3690 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  164,
 /*  3700 */   133,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3710 */   175,  176,  133,  166,  167,  168,  169,  170,  171,  172,
 /*  3720 */   173,  174,  175,  176,  133,  179,  179,  179,  179,  179,
 /*  3730 */   179,  179,  179,  166,  167,  168,  169,  170,  171,  172,
 /*  3740 */   173,  174,  175,  176,  133,  179,  167,  168,  169,  170,
 /*  3750 */   171,  172,  173,  174,  175,  176,  133,  179,  167,  168,
 /*  3760 */   169,  170,  171,  172,  173,  174,  175,  176,  179,  179,
 /*  3770 */   133,  179,  179,  179,  179,  179,  179,  179,  167,  168,
 /*  3780 */   169,  170,  171,  172,  173,  174,  175,  176,  133,  179,
 /*  3790 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  3800 */   179,  179,  179,  179,  179,  168,  169,  170,  171,  172,
 /*  3810 */   173,  174,  175,  176,  179,  179,  179,  179,  179,  179,
 /*  3820 */   179,  179,  179,  168,  169,  170,  171,  172,  173,  174,
 /*  3830 */   175,  176,
);
    const YY_SHIFT_USE_DFLT = -22;
    const YY_SHIFT_MAX = 283;
    static public $yy_shift_ofst = array(
 /*     0 */  1147,   80,  177,  -17, 1050,  662,  371,  274, 1147, 1147,
 /*    10 */  1147, 1147, 1147, 1147,  468,  759,  953,  856,  565, 1147,
 /*    20 */  1147, 1147, 1147, 1147, 1244, 1244, 1244, 1244, 1244, 2427,
 /*    30 */  2286, 2336, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
 /*    40 */  2518, 2518, 2518, 2473, 3487, 3487, 3487, 3487, 3487, 3487,
 /*    50 */  3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487,
 /*    60 */  3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487,
 /*    70 */  3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487, 3487,
 /*    80 */  2377, 3487, 3487, 3487, 3487, 3487, 3487, 3487, 2523, 1336,
 /*    90 */  2686, 2686, 1789, 1472, 2069, 2069, 2069, 2069, 2069, 2069,
 /*   100 */  2069, 2069, 1609, 1262, 2128, 1743, 1750, 1361, 1246, 1149,
 /*   110 */  1246,  215,  484,  492,  868,  868,  840,  868,  868, 1878,
 /*   120 */  1878,  118,  377,  478,   -3,  684,   -3,   -3,   -3,   -3,
 /*   130 */   588,   -3,   -3,   -3,   -3,  585,   64,  188,   -3,  840,
 /*   140 */   881,  878, 3521,  298,  298,  105,  298,  105,  105,  298,
 /*   150 */   178,  178,  -19,  178,  178,  178,  178,  178,   18,   27,
 /*   160 */   220,   27,   27,  587,   11,  302,    5,  220,  579,  -10,
 /*   170 */   137,   95,  121,  233,  378,   87,  281,  286,  205,   40,
 /*   180 */   121,  397,  -21,   51,   94,  204,  345,  633,  385,  121,
 /*   190 */    51,  676,  669,  408,  524,  117,  121,   51,  462,  288,
 /*   200 */   406,  442,  121,  656,  657,  573,  505,  398,  381,   92,
 /*   210 */   413,  352,  187,  162,  251,  451,  480,  527,  530,  461,
 /*   220 */   469,  526,  495,   49,   -9,   88,  838,  750,  774,  782,
 /*   230 */   762,  780,  777,  773,  747,  769,  754,  778,  722,  766,
 /*   240 */   783,  581,  812,  529,  813,  778,  826,  808,  742,  787,
 /*   250 */   785,  796,  794,  803,  763,  753,  673,  581,  679,  653,
 /*   260 */   608,  559,  590,  622,  670,  592,  733,  716,  723,  737,
 /*   270 */   680,  687,  690,  697,  850,  702,  706,  728,  643,  617,
 /*   280 */   594,  640,  626,  563,
);
    const YY_REDUCE_USE_DFLT = -106;
    const YY_REDUCE_MAX = 141;
    static public $yy_reduce_ofst = array(
 /*     0 */  1439, 1242, 1305, 1367, 1904, 1841, 1502, 1707, 1770, 2038,
 /*    10 */  1636, 1573, 2109, 1975, 2172, 2172, 2172, 2172, 2172, 2172,
 /*    20 */  2172, 2172, 2172, 2172, 2644, 2765, 2585, 2706, 2519, 2811,
 /*    30 */  3229, 2905, 3137, 3044, 2905, 3368, 3183, 3276, 3322, 3090,
 /*    40 */  2859, 2951, 2998,  477,   -8,  186,  865,  962, 3446,  380,
 /*    50 */   283, -105,  671, 1059, 3475,  768, 1156,  574, 3395, 3535,
 /*    60 */  3503, 3522, 3490, 2284, 2494, 2880, 3547, 3567,   86, 3591,
 /*    70 */  3611, 3579, 3623, 3655, 3637, 1377, 1529, 1394, 1260, 1511,
 /*    80 */  1457, 1663, 1858, 1778, 1797, 1591, 1912, 1457, 1992, 2595,
 /*    90 */  1327, 2127, 1135, 2081, 2380, 2471, 2227, 1985, 1383, 2371,
 /*   100 */  2709, 2592,  360,  255,  -30,  234,  234,  157,  455,  457,
 /*   110 */   458,  110,  376,  201,  365,  207,   90,  268,  327,  784,
 /*   120 */   791,  789,  832,  804,  811,  805,  818,  788,  751,  752,
 /*   130 */   764,  748,  744,  745,  746,  761,  738,  793,  781,  758,
 /*   140 */   776,  765,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 1 */ array(17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 2 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 3 */ array(17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 4 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 5 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 6 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 7 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 8 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 9 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 10 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 11 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 12 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 13 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 14 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 15 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 16 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 17 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 18 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 19 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 20 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 21 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 22 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 23 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 24 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 25 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 26 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 27 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 28 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 29 */ array(18, 34, 36, 37, 43, 59, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 30 */ array(18, 34, 35, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 31 */ array(18, 34, 35, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 32 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 33 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 34 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 35 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 36 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 37 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 38 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 39 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 40 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 41 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 42 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 43 */ array(18, 34, 36, 68, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 44 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 45 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 46 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 47 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 48 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 49 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 50 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 51 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 52 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 53 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 54 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 55 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 56 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 57 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 58 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 59 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 60 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 61 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 62 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 63 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 64 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 65 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 66 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 67 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 68 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 69 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 70 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 71 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 72 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 73 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 74 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 75 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 76 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 77 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 78 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 79 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 80 */ array(18, 34, 36, 37, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 81 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 82 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 83 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 84 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 85 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 86 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 87 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 88 */ array(22, 23, 24, 36, 37, 43, 70, 71, 72, 73, 74, 110, 111, 112, 113, ),
        /* 89 */ array(35, 37, 43, 110, 111, 112, 113, ),
        /* 90 */ array(18, 34, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 91 */ array(18, 34, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 92 */ array(37, 40, 43, 110, 111, 112, 113, ),
        /* 93 */ array(37, 40, 43, 110, 111, 112, 113, ),
        /* 94 */ array(37, 43, 110, 111, 112, 113, ),
        /* 95 */ array(37, 43, 110, 111, 112, 113, ),
        /* 96 */ array(37, 43, 110, 111, 112, 113, ),
        /* 97 */ array(37, 43, 110, 111, 112, 113, ),
        /* 98 */ array(37, 43, 110, 111, 112, 113, ),
        /* 99 */ array(37, 43, 110, 111, 112, 113, ),
        /* 100 */ array(37, 43, 110, 111, 112, 113, ),
        /* 101 */ array(37, 43, 110, 111, 112, 113, ),
        /* 102 */ array(18, 34, 37, 42, 105, 106, 107, 108, ),
        /* 103 */ array(22, 23, 31, 40, 41, ),
        /* 104 */ array(37, 110, 111, 112, 113, ),
        /* 105 */ array(18, 34, 35, 37, 105, 106, 107, 108, ),
        /* 106 */ array(18, 34, 37, 105, 106, 107, 108, ),
        /* 107 */ array(22, 23, 31, 41, ),
        /* 108 */ array(18, 37, 42, ),
        /* 109 */ array(18, 37, 42, ),
        /* 110 */ array(18, 37, 42, ),
        /* 111 */ array(20, 61, 62, ),
        /* 112 */ array(45, 46, ),
        /* 113 */ array(18, 20, ),
        /* 114 */ array(34, ),
        /* 115 */ array(34, ),
        /* 116 */ array(58, ),
        /* 117 */ array(34, ),
        /* 118 */ array(34, ),
        /* 119 */ array(18, 34, 105, 106, 107, 108, ),
        /* 120 */ array(18, 34, 105, 106, 107, 108, ),
        /* 121 */ array(20, 61, 62, ),
        /* 122 */ array(22, 23, 24, ),
        /* 123 */ array(25, 29, 30, ),
        /* 124 */ array(19, 21, ),
        /* 125 */ array(18, 37, ),
        /* 126 */ array(19, 21, ),
        /* 127 */ array(19, 21, ),
        /* 128 */ array(19, 21, ),
        /* 129 */ array(19, 21, ),
        /* 130 */ array(19, 21, ),
        /* 131 */ array(19, 21, ),
        /* 132 */ array(19, 21, ),
        /* 133 */ array(19, 21, ),
        /* 134 */ array(19, 21, ),
        /* 135 */ array(19, 21, ),
        /* 136 */ array(18, 19, ),
        /* 137 */ array(18, 19, ),
        /* 138 */ array(19, 21, ),
        /* 139 */ array(58, ),
        /* 140 */ array(19, ),
        /* 141 */ array(18, ),
        /* 142 */ array(3, 4, 5, 6, 8, 33, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ),
        /* 143 */ array(3, 4, 5, 6, 8, 85, ),
        /* 144 */ array(3, 4, 5, 6, 8, 85, ),
        /* 145 */ array(34, 68, 97, 98, 99, 100, ),
        /* 146 */ array(3, 4, 5, 6, 8, 85, ),
        /* 147 */ array(34, 68, 97, 98, 99, 100, ),
        /* 148 */ array(34, 68, 97, 98, 99, 100, ),
        /* 149 */ array(3, 4, 5, 6, 8, 85, ),
        /* 150 */ array(39, 40, 86, 87, ),
        /* 151 */ array(39, 40, 86, 87, ),
        /* 152 */ array(34, 43, 94, 95, ),
        /* 153 */ array(39, 40, 86, 87, ),
        /* 154 */ array(39, 40, 86, 87, ),
        /* 155 */ array(39, 40, 86, 87, ),
        /* 156 */ array(39, 40, 86, 87, ),
        /* 157 */ array(39, 40, 86, 87, ),
        /* 158 */ array(11, 33, 34, ),
        /* 159 */ array(92, 93, 94, ),
        /* 160 */ array(43, 94, 95, ),
        /* 161 */ array(92, 93, 94, ),
        /* 162 */ array(92, 93, 94, ),
        /* 163 */ array(18, 36, 37, ),
        /* 164 */ array(11, 33, 34, ),
        /* 165 */ array(33, 34, 109, ),
        /* 166 */ array(18, 36, 37, ),
        /* 167 */ array(43, 94, 95, ),
        /* 168 */ array(21, 32, ),
        /* 169 */ array(18, 37, ),
        /* 170 */ array(32, 35, ),
        /* 171 */ array(18, 94, ),
        /* 172 */ array(88, 89, ),
        /* 173 */ array(33, 109, ),
        /* 174 */ array(32, 35, ),
        /* 175 */ array(18, 37, ),
        /* 176 */ array(32, 35, ),
        /* 177 */ array(21, 32, ),
        /* 178 */ array(11, 33, ),
        /* 179 */ array(20, 32, ),
        /* 180 */ array(88, 89, ),
        /* 181 */ array(32, 35, ),
        /* 182 */ array(33, 34, ),
        /* 183 */ array(90, 91, ),
        /* 184 */ array(18, 21, ),
        /* 185 */ array(32, 35, ),
        /* 186 */ array(18, 21, ),
        /* 187 */ array(21, 32, ),
        /* 188 */ array(18, 21, ),
        /* 189 */ array(88, 89, ),
        /* 190 */ array(90, 91, ),
        /* 191 */ array(25, 109, ),
        /* 192 */ array(18, 37, ),
        /* 193 */ array(32, 40, ),
        /* 194 */ array(33, 109, ),
        /* 195 */ array(32, 40, ),
        /* 196 */ array(88, 89, ),
        /* 197 */ array(90, 91, ),
        /* 198 */ array(32, 35, ),
        /* 199 */ array(21, 32, ),
        /* 200 */ array(11, 33, ),
        /* 201 */ array(18, 94, ),
        /* 202 */ array(88, 89, ),
        /* 203 */ array(32, 35, ),
        /* 204 */ array(32, 35, ),
        /* 205 */ array(18, 21, ),
        /* 206 */ array(32, 40, ),
        /* 207 */ array(32, 35, ),
        /* 208 */ array(34, ),
        /* 209 */ array(34, ),
        /* 210 */ array(51, ),
        /* 211 */ array(21, ),
        /* 212 */ array(25, ),
        /* 213 */ array(35, ),
        /* 214 */ array(35, ),
        /* 215 */ array(19, ),
        /* 216 */ array(18, ),
        /* 217 */ array(34, ),
        /* 218 */ array(37, ),
        /* 219 */ array(35, ),
        /* 220 */ array(11, ),
        /* 221 */ array(34, ),
        /* 222 */ array(19, ),
        /* 223 */ array(43, ),
        /* 224 */ array(34, ),
        /* 225 */ array(34, ),
        /* 226 */ array(21, ),
        /* 227 */ array(44, ),
        /* 228 */ array(25, ),
        /* 229 */ array(18, ),
        /* 230 */ array(39, ),
        /* 231 */ array(25, ),
        /* 232 */ array(21, ),
        /* 233 */ array(19, ),
        /* 234 */ array(39, ),
        /* 235 */ array(18, ),
        /* 236 */ array(34, ),
        /* 237 */ array(11, ),
        /* 238 */ array(69, ),
        /* 239 */ array(37, ),
        /* 240 */ array(35, ),
        /* 241 */ array(109, ),
        /* 242 */ array(39, ),
        /* 243 */ array(39, ),
        /* 244 */ array(39, ),
        /* 245 */ array(11, ),
        /* 246 */ array(32, ),
        /* 247 */ array(40, ),
        /* 248 */ array(94, ),
        /* 249 */ array(34, ),
        /* 250 */ array(35, ),
        /* 251 */ array(21, ),
        /* 252 */ array(33, ),
        /* 253 */ array(25, ),
        /* 254 */ array(21, ),
        /* 255 */ array(18, ),
        /* 256 */ array(21, ),
        /* 257 */ array(109, ),
        /* 258 */ array(18, ),
        /* 259 */ array(11, ),
        /* 260 */ array(18, ),
        /* 261 */ array(18, ),
        /* 262 */ array(37, ),
        /* 263 */ array(35, ),
        /* 264 */ array(34, ),
        /* 265 */ array(111, ),
        /* 266 */ array(18, ),
        /* 267 */ array(39, ),
        /* 268 */ array(39, ),
        /* 269 */ array(2, ),
        /* 270 */ array(40, ),
        /* 271 */ array(21, ),
        /* 272 */ array(40, ),
        /* 273 */ array(34, ),
        /* 274 */ array(34, ),
        /* 275 */ array(21, ),
        /* 276 */ array(18, ),
        /* 277 */ array(33, ),
        /* 278 */ array(111, ),
        /* 279 */ array(25, ),
        /* 280 */ array(40, ),
        /* 281 */ array(18, ),
        /* 282 */ array(69, ),
        /* 283 */ array(111, ),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
        /* 398 */ array(),
        /* 399 */ array(),
        /* 400 */ array(),
        /* 401 */ array(),
        /* 402 */ array(),
        /* 403 */ array(),
        /* 404 */ array(),
        /* 405 */ array(),
        /* 406 */ array(),
        /* 407 */ array(),
        /* 408 */ array(),
        /* 409 */ array(),
        /* 410 */ array(),
        /* 411 */ array(),
        /* 412 */ array(),
        /* 413 */ array(),
        /* 414 */ array(),
        /* 415 */ array(),
        /* 416 */ array(),
        /* 417 */ array(),
        /* 418 */ array(),
        /* 419 */ array(),
        /* 420 */ array(),
        /* 421 */ array(),
        /* 422 */ array(),
        /* 423 */ array(),
        /* 424 */ array(),
        /* 425 */ array(),
        /* 426 */ array(),
        /* 427 */ array(),
        /* 428 */ array(),
        /* 429 */ array(),
        /* 430 */ array(),
        /* 431 */ array(),
        /* 432 */ array(),
        /* 433 */ array(),
        /* 434 */ array(),
        /* 435 */ array(),
        /* 436 */ array(),
        /* 437 */ array(),
        /* 438 */ array(),
        /* 439 */ array(),
        /* 440 */ array(),
        /* 441 */ array(),
        /* 442 */ array(),
        /* 443 */ array(),
        /* 444 */ array(),
        /* 445 */ array(),
        /* 446 */ array(),
        /* 447 */ array(),
        /* 448 */ array(),
        /* 449 */ array(),
        /* 450 */ array(),
        /* 451 */ array(),
        /* 452 */ array(),
        /* 453 */ array(),
        /* 454 */ array(),
        /* 455 */ array(),
        /* 456 */ array(),
        /* 457 */ array(),
        /* 458 */ array(),
        /* 459 */ array(),
        /* 460 */ array(),
        /* 461 */ array(),
        /* 462 */ array(),
        /* 463 */ array(),
        /* 464 */ array(),
        /* 465 */ array(),
);
    static public $yy_default = array(
 /*     0 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*    10 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  547,
 /*    20 */   466,  579,  546,  578,  697,  697,  697,  697,  697,  697,
 /*    30 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*    40 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*    50 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*    60 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*    70 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*    80 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*    90 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*   100 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*   110 */   697,  697,  542,  697,  697,  697,  697,  697,  697,  697,
 /*   120 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*   130 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  563,
 /*   140 */   697,  697,  618,  596,  592,  649,  591,  650,  653,  595,
 /*   150 */   619,  623,  680,  621,  625,  624,  620,  622,  594,  635,
 /*   160 */   680,  634,  636,  697,  598,  593,  697,  679,  697,  697,
 /*   170 */   697,  697,  629,  593,  697,  697,  697,  697,  598,  697,
 /*   180 */   626,  697,  597,  631,  697,  697,  697,  697,  697,  628,
 /*   190 */   633,  697,  697,  697,  697,  697,  630,  632,  697,  697,
 /*   200 */   594,  697,  627,  697,  697,  697,  697,  697,  697,  697,
 /*   210 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
 /*   220 */   685,  697,  697,  532,  697,  697,  697,  697,  697,  697,
 /*   230 */   697,  670,  697,  697,  697,  697,  697,  529,  697,  697,
 /*   240 */   697,  662,  697,  690,  686,  685,  570,  697,  697,  697,
 /*   250 */   697,  697,  505,  697,  697,  697,  697,  506,  697,  685,
 /*   260 */   697,  697,  697,  697,  697,  697,  697,  697,  697,  581,
 /*   270 */   697,  697,  697,  697,  697,  697,  697,  597,  697,  697,
 /*   280 */   697,  697,  697,  697,  582,  486,  583,  514,  483,  484,
 /*   290 */   487,  556,  490,  580,  485,  476,  477,  470,  577,  493,
 /*   300 */   492,  574,  489,  557,  494,  491,  495,  488,  573,  586,
 /*   310 */   587,  543,  575,  545,  566,  567,  569,  564,  568,  468,
 /*   320 */   571,  527,  565,  560,  513,  576,  559,  558,  572,  561,
 /*   330 */   510,  530,  585,  511,  562,  584,  611,  661,  660,  652,
 /*   340 */   663,  664,  665,  640,  651,  639,  646,  645,  647,  648,
 /*   350 */   589,  638,  681,  682,  695,  694,  696,  692,  666,  691,
 /*   360 */   693,  687,  684,  683,  689,  677,  688,  678,  644,  643,
 /*   370 */   481,  480,  482,  509,  496,  479,  478,  475,  469,  467,
 /*   380 */   471,  472,  474,  473,  497,  499,  637,  607,  641,  654,
 /*   390 */   655,  642,  588,  672,  503,  501,  675,  669,  671,  670,
 /*   400 */   667,  668,  517,  516,  515,  518,  519,  522,  521,  508,
 /*   410 */   531,  535,  534,  537,  538,  512,  536,  523,  524,  550,
 /*   420 */   549,  551,  552,  554,  553,  548,  544,  520,  525,  526,
 /*   430 */   539,  541,  540,  533,  528,  605,  604,  606,  656,  658,
 /*   440 */   590,  603,  602,  676,  674,  599,  673,  601,  600,  659,
 /*   450 */   657,  502,  617,  504,  498,  507,  500,  616,  615,  609,
 /*   460 */   608,  610,  612,  614,  613,  555,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 180;
    const YYSTACKDEPTH = 100;
    const lock_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 466;
    const YYNRULE = 231;
    const YYERRORSYMBOL = 114;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'LOGICALOR',   
  'LOGICALAND',    'BINARYXOR',     'BINARYAND',     'NOTEQUAL',    
  'EQUAL',         'UINDIRECTION',  'UADRESS',       'NAMESPACE_RESOLVE',
  'UMINUS',        'UPLUS',         'UBRACKET',      'TYPEUNARY',   
  'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',  'IDENTIFIER',    'LEFTFIGUREBRACKET',
  'RIGHTFIGUREBRACKET',  'SEMICOLON',     'CLASSKWD',      'STRUCTKWD',   
  'UNIONKWD',      'COLON',         'PUBLICKWD',     'PROTECTEDKWD',
  'PRIVATEKWD',    'SIGNALSKWD',    'SLOTSKWD',      'ENUMKWD',     
  'COMMA',         'ASSIGN',        'LEFTROUNDBRACKET',  'RIGHTROUNDBRACKET',
  'BINARYNOT',     'CUSTOMTYPENAME',  'TEMPLATEKWD',   'LESSER',      
  'GREATER',       'TYPENAMEKWD',   'OPERATOROVERLOADDECLARATION',  'CONSTKWD',    
  'PREPROCESSOR_ENDIF',  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ELSE',  'PREPROCESSOR_IFDEF',
  'PREPROCESSOR_IF',  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_INCLUDE',  'WHILEKWD',    
  'DOKWD',         'FORKWD',        'RETURNKWD',     'CONTINUEKWD', 
  'GOTOKWD',       'TRYKWD',        'CATCHKWD',      'ELLIPSIS',    
  'SWITCHKWD',     'CASEKWD',       'DEFAULTKWD',    'IFKWD',       
  'TYPEDEF',       'BREAKKWD',      'NEWKWD',        'DELETE',      
  'LEFTSQUAREBRACKET',  'RIGHTSQUAREBRACKET',  'STATICKWD',     'EXTERNKWD',   
  'REGISTERKWD',   'VOLATILEKWD',   'FRIENDKWD',     'BINARYXOR_ASSIGN',
  'BINARYOR_ASSIGN',  'BINARYAND_ASSIGN',  'RIGHTSHIFT_ASSIGN',  'LEFTSHIFT_ASSIGN',
  'MODULO_ASSIGN',  'DIVISION_ASSIGN',  'MULTIPLY_ASSIGN',  'PLUS_ASSIGN', 
  'MINUS_ASSIGN',  'NOT_EQUAL',     'LESSER_OR_EQUAL',  'GREATER_OR_EQUAL',
  'LEFTSHIFT',     'RIGHTSHIFT',    'MINUS',         'PLUS',        
  'MODULOSIGN',    'DIVISION',      'MULTIPLY',      'AMPERSAND',   
  'LOGICALNOT',    'DECREMENT',     'INCREMENT',     'DOT',         
  'RIGHTARROW',    'CONST_CAST',    'STATIC_CAST',   'DYNAMIC_CAST',
  'REINTERPRET_CAST',  'NUMERIC',       'CHARACTER',     'STRING',      
  'PREPROCESSOR_STRINGIFY',  'PREPROCESSOR_CONCAT',  'SIGNED',        'TYPENAME',    
  'UNSIGNED',      'LONG',          'error',         'program',     
  'stmt_list',     'stmt_or_defined_macro',  'stmt',          'namespace_body',
  'class_or_union_or_struct',  'type_meta_specifier_with_template_def',  'structure_body',  'template_def',
  'type_meta_specifier',  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',  'visibility_spec_full',
  'visibility_spec',  'signal_slots',  'enum_body',     'enum_value_list',
  'enum_value',    'expr_atom',     'type',          'possible_function_name',
  'formal_args_list_with_or_without_const',  'function_body',  'type_with_qualifier',  'non_const_type',
  'primitive_or_complex_type',  'template_spec_list',  'template_spec',  'template_typename',
  'formal_args_list',  'arg_list',      'arg',           'preprocessor_cond',
  'preprocessor_else_clauses',  'preprocessor_elif_list',  'preprocessor_else',  'preprocessor_elif',
  'expr_prec_11',  'try_catch',     'try',           'catch_list',  
  'catch',         'expr_prec_11_or_ellipsis',  'switch_stmt',   'switch_case_list',
  'case',          'if_then_else',  'if_then',       'expr_prec_10',
  'expr_prec_9',   'varqualifier',  'expr_prec_8',   'expr_prec_7', 
  'expr_prec_6',   'expr_prec_5',   'expr_prec_4',   'try_value_access',
  'try_pointer_access',  'expr_prec_3',   'typecast',      'expr_prec_2', 
  'cpp_style_cast',  'type_list',     'builtintype', 
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "stmt ::= NAMESPACEKWD IDENTIFIER namespace_body",
 /*   4 */ "namespace_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*   5 */ "namespace_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*   6 */ "stmt ::= class_or_union_or_struct",
 /*   7 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body IDENTIFIER SEMICOLON",
 /*   8 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body SEMICOLON",
 /*   9 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER SEMICOLON",
 /*  10 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  11 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  12 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  13 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  14 */ "type_meta_specifier ::= CLASSKWD",
 /*  15 */ "type_meta_specifier ::= STRUCTKWD",
 /*  16 */ "type_meta_specifier ::= UNIONKWD",
 /*  17 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  18 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  19 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  20 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  21 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  22 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  23 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  24 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  25 */ "visibility_spec ::= PUBLICKWD",
 /*  26 */ "visibility_spec ::= PROTECTEDKWD",
 /*  27 */ "visibility_spec ::= PRIVATEKWD",
 /*  28 */ "signal_slots ::= SIGNALSKWD",
 /*  29 */ "signal_slots ::= SLOTSKWD",
 /*  30 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER SEMICOLON",
 /*  31 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body SEMICOLON",
 /*  32 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  33 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body IDENTIFIER SEMICOLON",
 /*  34 */ "stmt_or_defined_macro ::= ENUMKWD enum_body IDENTIFIER SEMICOLON",
 /*  35 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  36 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  37 */ "enum_value_list ::= enum_value_list COMMA enum_value",
 /*  38 */ "enum_value_list ::= enum_value",
 /*  39 */ "enum_value ::= IDENTIFIER",
 /*  40 */ "enum_value ::= IDENTIFIER ASSIGN expr_atom",
 /*  41 */ "stmt_or_defined_macro ::= type possible_function_name formal_args_list_with_or_without_const function_body",
 /*  42 */ "stmt_or_defined_macro ::= type_with_qualifier possible_function_name formal_args_list_with_or_without_const function_body",
 /*  43 */ "stmt_or_defined_macro ::= template_def type_with_qualifier possible_function_name formal_args_list_with_or_without_const function_body",
 /*  44 */ "stmt_or_defined_macro ::= template_def type possible_function_name formal_args_list_with_or_without_const function_body",
 /*  45 */ "stmt_or_defined_macro ::= template_def non_const_type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  46 */ "stmt_or_defined_macro ::= type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  47 */ "stmt_or_defined_macro ::= template_def BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  48 */ "stmt_or_defined_macro ::= template_def primitive_or_complex_type NAMESPACE_RESOLVE BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  49 */ "stmt_or_defined_macro ::= BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  50 */ "stmt_or_defined_macro ::= primitive_or_complex_type NAMESPACE_RESOLVE BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  51 */ "template_def ::= TEMPLATEKWD LESSER GREATER",
 /*  52 */ "template_def ::= TEMPLATEKWD LESSER template_spec_list GREATER",
 /*  53 */ "template_spec_list ::= template_spec_list COMMA template_spec",
 /*  54 */ "template_spec_list ::= template_spec",
 /*  55 */ "template_spec ::= template_typename IDENTIFIER",
 /*  56 */ "template_typename ::= TYPENAMEKWD",
 /*  57 */ "template_typename ::= CLASSKWD",
 /*  58 */ "template_typename ::= STRUCTKWD",
 /*  59 */ "template_typename ::= ENUMKWD",
 /*  60 */ "function_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  61 */ "function_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  62 */ "function_body ::= SEMICOLON",
 /*  63 */ "possible_function_name ::= primitive_or_complex_type",
 /*  64 */ "possible_function_name ::= IDENTIFIER",
 /*  65 */ "possible_function_name ::= OPERATOROVERLOADDECLARATION",
 /*  66 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  67 */ "formal_args_list_with_or_without_const ::= formal_args_list CONSTKWD",
 /*  68 */ "formal_args_list ::= LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /*  69 */ "formal_args_list ::= LEFTROUNDBRACKET arg_list RIGHTROUNDBRACKET",
 /*  70 */ "arg_list ::= arg",
 /*  71 */ "arg_list ::= arg_list COMMA arg",
 /*  72 */ "arg ::= type IDENTIFIER",
 /*  73 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list PREPROCESSOR_ENDIF",
 /*  74 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses PREPROCESSOR_ENDIF",
 /*  75 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  76 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  77 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  78 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  79 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  80 */ "preprocessor_elif ::= PREPROCESSOR_ELIF stmt_list",
 /*  81 */ "preprocessor_else ::= PREPROCESSOR_ELSE stmt_list",
 /*  82 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF IDENTIFIER",
 /*  83 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF CUSTOMTYPENAME",
 /*  84 */ "preprocessor_cond ::= PREPROCESSOR_IF",
 /*  85 */ "stmt_or_defined_macro ::= PREPROCESSOR_DEFINE",
 /*  86 */ "stmt_or_defined_macro ::= stmt",
 /*  87 */ "stmt ::= PREPROCESSOR_INCLUDE",
 /*  88 */ "stmt ::= WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  89 */ "stmt ::= DOKWD stmt WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET SEMICOLON",
 /*  90 */ "stmt ::= FORKWD LEFTROUNDBRACKET expr_prec_11 SEMICOLON expr_prec_11 SEMICOLON expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  91 */ "stmt ::= RETURNKWD expr_prec_11 SEMICOLON",
 /*  92 */ "stmt ::= CONTINUEKWD SEMICOLON",
 /*  93 */ "stmt ::= GOTOKWD IDENTIFIER COLON",
 /*  94 */ "stmt ::= GOTOKWD CUSTOMTYPENAME COLON",
 /*  95 */ "stmt ::= IDENTIFIER COLON",
 /*  96 */ "stmt ::= try_catch",
 /*  97 */ "try_catch ::= try catch_list",
 /*  98 */ "try ::= TRYKWD LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  99 */ "try ::= TRYKWD LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 100 */ "catch_list ::= catch_list catch",
 /* 101 */ "catch_list ::= catch",
 /* 102 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 103 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 104 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 105 */ "expr_prec_11_or_ellipsis ::= ELLIPSIS",
 /* 106 */ "stmt ::= SEMICOLON",
 /* 107 */ "stmt ::= switch_stmt",
 /* 108 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 109 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET switch_case_list RIGHTFIGUREBRACKET",
 /* 110 */ "switch_case_list ::= case",
 /* 111 */ "switch_case_list ::= switch_case_list case",
 /* 112 */ "case ::= CASEKWD expr_atom COLON stmt_list",
 /* 113 */ "case ::= DEFAULTKWD COLON stmt_list",
 /* 114 */ "stmt ::= if_then_else",
 /* 115 */ "if_then_else ::= if_then",
 /* 116 */ "if_then_else ::= if_then ELSEKWD stmt",
 /* 117 */ "if_then ::= IFKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 118 */ "stmt ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 119 */ "stmt ::= TYPEDEF type IDENTIFIER SEMICOLON",
 /* 120 */ "stmt ::= BREAKKWD SEMICOLON",
 /* 121 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 122 */ "expr_prec_11 ::= NEWKWD expr_prec_10",
 /* 123 */ "expr_prec_11 ::= DELETE LEFTSQUAREBRACKET RIGHTSQUAREBRACKET expr_prec_10",
 /* 124 */ "expr_prec_11 ::= DELETE expr_prec_10",
 /* 125 */ "expr_prec_11 ::= type expr_atom ASSIGN expr_prec_9",
 /* 126 */ "expr_prec_11 ::= type primitive_or_complex_type ASSIGN expr_prec_9",
 /* 127 */ "expr_prec_11 ::= type IDENTIFIER",
 /* 128 */ "expr_prec_11 ::= type primitive_or_complex_type",
 /* 129 */ "expr_prec_11 ::= type_with_qualifier IDENTIFIER ASSIGN expr_prec_9",
 /* 130 */ "expr_prec_11 ::= type_with_qualifier primitive_or_complex_type ASSIGN expr_prec_9",
 /* 131 */ "expr_prec_11 ::= type_with_qualifier IDENTIFIER",
 /* 132 */ "expr_prec_11 ::= type_with_qualifier primitive_or_complex_type",
 /* 133 */ "expr_prec_11 ::= expr_prec_11 COMMA expr_prec_10",
 /* 134 */ "expr_prec_11 ::= expr_prec_10",
 /* 135 */ "type_with_qualifier ::= varqualifier type",
 /* 136 */ "varqualifier ::= STATICKWD",
 /* 137 */ "varqualifier ::= EXTERNKWD",
 /* 138 */ "varqualifier ::= REGISTERKWD",
 /* 139 */ "varqualifier ::= VOLATILEKWD",
 /* 140 */ "varqualifier ::= FRIENDKWD",
 /* 141 */ "expr_prec_10 ::= expr_prec_9 BINARYXOR_ASSIGN expr_prec_10",
 /* 142 */ "expr_prec_10 ::= expr_prec_9 BINARYOR_ASSIGN expr_prec_10",
 /* 143 */ "expr_prec_10 ::= expr_prec_9 BINARYAND_ASSIGN expr_prec_10",
 /* 144 */ "expr_prec_10 ::= expr_prec_9 RIGHTSHIFT_ASSIGN expr_prec_10",
 /* 145 */ "expr_prec_10 ::= expr_prec_9 LEFTSHIFT_ASSIGN expr_prec_10",
 /* 146 */ "expr_prec_10 ::= expr_prec_9 MODULO_ASSIGN expr_prec_10",
 /* 147 */ "expr_prec_10 ::= expr_prec_9 DIVISION_ASSIGN expr_prec_10",
 /* 148 */ "expr_prec_10 ::= expr_prec_9 MULTIPLY_ASSIGN expr_prec_10",
 /* 149 */ "expr_prec_10 ::= expr_prec_9 PLUS_ASSIGN expr_prec_10",
 /* 150 */ "expr_prec_10 ::= expr_prec_9 MINUS_ASSIGN expr_prec_10",
 /* 151 */ "expr_prec_10 ::= expr_prec_9 ASSIGN expr_prec_10",
 /* 152 */ "expr_prec_10 ::= expr_prec_9",
 /* 153 */ "expr_prec_9 ::= expr_prec_9 LOGICALOR expr_prec_8",
 /* 154 */ "expr_prec_9 ::= expr_prec_9 LOGICALAND expr_prec_8",
 /* 155 */ "expr_prec_9 ::= expr_prec_9 BINARYXOR expr_prec_8",
 /* 156 */ "expr_prec_9 ::= expr_prec_9 BINARYAND expr_prec_8",
 /* 157 */ "expr_prec_9 ::= expr_prec_9 NOT_EQUAL expr_prec_8",
 /* 158 */ "expr_prec_9 ::= expr_prec_9 EQUAL expr_prec_8",
 /* 159 */ "expr_prec_9 ::= expr_prec_8",
 /* 160 */ "expr_prec_8 ::= expr_prec_8 LESSER_OR_EQUAL expr_prec_7",
 /* 161 */ "expr_prec_8 ::= expr_prec_8 GREATER_OR_EQUAL expr_prec_7",
 /* 162 */ "expr_prec_8 ::= expr_prec_8 GREATER expr_prec_7",
 /* 163 */ "expr_prec_8 ::= expr_prec_8 LESSER expr_prec_7",
 /* 164 */ "expr_prec_8 ::= expr_prec_7",
 /* 165 */ "expr_prec_7 ::= expr_prec_7 LEFTSHIFT expr_prec_6",
 /* 166 */ "expr_prec_7 ::= expr_prec_7 RIGHTSHIFT expr_prec_6",
 /* 167 */ "expr_prec_7 ::= expr_prec_6",
 /* 168 */ "expr_prec_6 ::= expr_prec_6 MINUS expr_prec_5",
 /* 169 */ "expr_prec_6 ::= expr_prec_6 PLUS expr_prec_5",
 /* 170 */ "expr_prec_6 ::= expr_prec_5",
 /* 171 */ "expr_prec_5 ::= expr_prec_5 MODULOSIGN expr_prec_4",
 /* 172 */ "expr_prec_5 ::= expr_prec_5 DIVISION expr_prec_4",
 /* 173 */ "expr_prec_5 ::= expr_prec_5 MULTIPLY expr_prec_4",
 /* 174 */ "expr_prec_5 ::= expr_prec_4",
 /* 175 */ "expr_prec_4 ::= try_value_access MULTIPLY IDENTIFIER",
 /* 176 */ "expr_prec_4 ::= try_pointer_access MULTIPLY IDENTIFIER",
 /* 177 */ "expr_prec_4 ::= expr_prec_3",
 /* 178 */ "expr_prec_3 ::= AMPERSAND expr_prec_3",
 /* 179 */ "expr_prec_3 ::= MULTIPLY expr_prec_3",
 /* 180 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 181 */ "expr_prec_3 ::= LOGICALNOT expr_prec_3",
 /* 182 */ "expr_prec_3 ::= BINARYNOT expr_prec_3",
 /* 183 */ "expr_prec_3 ::= MINUS expr_prec_2",
 /* 184 */ "expr_prec_3 ::= PLUS expr_prec_2",
 /* 185 */ "expr_prec_3 ::= DECREMENT expr_prec_3",
 /* 186 */ "expr_prec_3 ::= INCREMENT expr_prec_3",
 /* 187 */ "expr_prec_3 ::= expr_prec_2",
 /* 188 */ "expr_prec_2 ::= try_value_access IDENTIFIER",
 /* 189 */ "expr_prec_2 ::= try_pointer_access IDENTIFIER",
 /* 190 */ "expr_prec_2 ::= cpp_style_cast LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 191 */ "expr_prec_2 ::= expr_prec_2 LEFTSQUAREBRACKET expr_prec_10 RIGHTSQUAREBRACKET",
 /* 192 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 193 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /* 194 */ "expr_prec_2 ::= expr_prec_2 INCREMENT",
 /* 195 */ "expr_prec_2 ::= expr_prec_2 DECREMENT",
 /* 196 */ "expr_prec_2 ::= expr_atom",
 /* 197 */ "try_value_access ::= expr_prec_2 DOT",
 /* 198 */ "try_pointer_access ::= expr_prec_2 RIGHTARROW",
 /* 199 */ "cpp_style_cast ::= CONST_CAST LESSER type GREATER",
 /* 200 */ "cpp_style_cast ::= STATIC_CAST LESSER type GREATER",
 /* 201 */ "cpp_style_cast ::= DYNAMIC_CAST LESSER type GREATER",
 /* 202 */ "cpp_style_cast ::= REINTERPRET_CAST LESSER type GREATER",
 /* 203 */ "expr_atom ::= NUMERIC",
 /* 204 */ "expr_atom ::= IDENTIFIER",
 /* 205 */ "expr_atom ::= CHARACTER",
 /* 206 */ "expr_atom ::= STRING",
 /* 207 */ "expr_atom ::= LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 208 */ "expr_atom ::= PREPROCESSOR_STRINGIFY IDENTIFIER",
 /* 209 */ "expr_atom ::= expr_atom PREPROCESSOR_CONCAT IDENTIFIER",
 /* 210 */ "typecast ::= LEFTROUNDBRACKET type RIGHTROUNDBRACKET",
 /* 211 */ "type_list ::= type",
 /* 212 */ "type_list ::= type_list COMMA type",
 /* 213 */ "type ::= CONSTKWD non_const_type",
 /* 214 */ "type ::= non_const_type",
 /* 215 */ "non_const_type ::= non_const_type MULTIPLY",
 /* 216 */ "non_const_type ::= non_const_type CONSTKWD MULTIPLY",
 /* 217 */ "non_const_type ::= non_const_type AMPERSAND",
 /* 218 */ "non_const_type ::= builtintype",
 /* 219 */ "non_const_type ::= primitive_or_complex_type",
 /* 220 */ "primitive_or_complex_type ::= CUSTOMTYPENAME",
 /* 221 */ "primitive_or_complex_type ::= CUSTOMTYPENAME LESSER GREATER",
 /* 222 */ "primitive_or_complex_type ::= CUSTOMTYPENAME LESSER type_list GREATER",
 /* 223 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE IDENTIFIER",
 /* 224 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME",
 /* 225 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME LESSER GREATER",
 /* 226 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME LESSER type_list GREATER",
 /* 227 */ "builtintype ::= SIGNED TYPENAME",
 /* 228 */ "builtintype ::= UNSIGNED TYPENAME",
 /* 229 */ "builtintype ::= LONG TYPENAME",
 /* 230 */ "builtintype ::= TYPENAME",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param lock_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new lock_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 2 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 2 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 5 ),
  array( 'lhs' => 120, 'rhs' => 4 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 4 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 2 ),
  array( 'lhs' => 121, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 122, 'rhs' => 2 ),
  array( 'lhs' => 122, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 6 ),
  array( 'lhs' => 117, 'rhs' => 8 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 7 ),
  array( 'lhs' => 123, 'rhs' => 3 ),
  array( 'lhs' => 123, 'rhs' => 4 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 148, 'rhs' => 2 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 5 ),
  array( 'lhs' => 118, 'rhs' => 7 ),
  array( 'lhs' => 118, 'rhs' => 9 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 6 ),
  array( 'lhs' => 156, 'rhs' => 7 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 6 ),
  array( 'lhs' => 158, 'rhs' => 7 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 5 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 4 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 3 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 3 ),
  array( 'lhs' => 167, 'rhs' => 3 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 4 ),
  array( 'lhs' => 175, 'rhs' => 4 ),
  array( 'lhs' => 175, 'rhs' => 4 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 140, 'rhs' => 4 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 140, 'rhs' => 5 ),
  array( 'lhs' => 140, 'rhs' => 6 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 14,
        16 => 14,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 25,
        27 => 25,
        28 => 28,
        29 => 28,
        30 => 30,
        31 => 31,
        32 => 32,
        73 => 32,
        33 => 33,
        34 => 34,
        41 => 34,
        42 => 34,
        46 => 34,
        74 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        43 => 43,
        44 => 43,
        49 => 43,
        45 => 45,
        47 => 47,
        48 => 48,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        58 => 56,
        59 => 56,
        57 => 57,
        60 => 60,
        61 => 61,
        62 => 62,
        63 => 63,
        64 => 63,
        65 => 63,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        75 => 75,
        76 => 76,
        77 => 76,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 82,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 93,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 104,
        106 => 106,
        107 => 106,
        114 => 106,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 120,
        122 => 122,
        124 => 122,
        127 => 122,
        128 => 122,
        131 => 122,
        132 => 122,
        123 => 123,
        125 => 123,
        126 => 123,
        130 => 123,
        129 => 129,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 136,
        138 => 136,
        139 => 136,
        140 => 136,
        141 => 141,
        142 => 141,
        143 => 141,
        144 => 141,
        145 => 141,
        147 => 141,
        148 => 141,
        149 => 141,
        150 => 141,
        151 => 141,
        146 => 146,
        152 => 152,
        153 => 153,
        154 => 153,
        155 => 153,
        156 => 153,
        157 => 153,
        158 => 153,
        159 => 159,
        160 => 160,
        161 => 160,
        162 => 160,
        163 => 160,
        164 => 164,
        165 => 165,
        166 => 165,
        167 => 167,
        168 => 168,
        169 => 168,
        170 => 170,
        171 => 171,
        172 => 171,
        173 => 171,
        174 => 174,
        175 => 175,
        176 => 175,
        177 => 177,
        178 => 178,
        179 => 178,
        180 => 180,
        181 => 180,
        182 => 180,
        183 => 180,
        184 => 180,
        185 => 180,
        186 => 180,
        187 => 187,
        188 => 188,
        189 => 188,
        190 => 190,
        191 => 190,
        192 => 190,
        193 => 193,
        194 => 194,
        195 => 194,
        196 => 196,
        197 => 197,
        198 => 198,
        199 => 199,
        200 => 199,
        201 => 199,
        202 => 199,
        203 => 203,
        204 => 203,
        205 => 203,
        206 => 203,
        207 => 207,
        209 => 207,
        208 => 208,
        210 => 210,
        211 => 211,
        212 => 212,
        213 => 213,
        215 => 213,
        217 => 213,
        214 => 214,
        216 => 216,
        218 => 218,
        219 => 218,
        220 => 220,
        221 => 221,
        222 => 222,
        223 => 223,
        224 => 223,
        225 => 225,
        226 => 226,
        227 => 227,
        228 => 227,
        229 => 227,
        230 => 230,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 79 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 2901 "langs_src/parser_cpp_language.php"
#line 95 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2906 "langs_src/parser_cpp_language.php"
#line 99 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2911 "langs_src/parser_cpp_language.php"
#line 103 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2917 "langs_src/parser_cpp_language.php"
#line 108 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 2922 "langs_src/parser_cpp_language.php"
#line 112 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 2927 "langs_src/parser_cpp_language.php"
#line 118 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2932 "langs_src/parser_cpp_language.php"
#line 122 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2938 "langs_src/parser_cpp_language.php"
#line 127 "langs_src/parser_cpp_language.y"
    function yy_r8(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2944 "langs_src/parser_cpp_language.php"
#line 132 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2950 "langs_src/parser_cpp_language.php"
#line 137 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2955 "langs_src/parser_cpp_language.php"
#line 141 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2960 "langs_src/parser_cpp_language.php"
#line 145 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array(A, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2965 "langs_src/parser_cpp_language.php"
#line 149 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2970 "langs_src/parser_cpp_language.php"
#line 153 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2975 "langs_src/parser_cpp_language.php"
#line 165 "langs_src/parser_cpp_language.y"
    function yy_r17(){
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 2980 "langs_src/parser_cpp_language.php"
#line 169 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 2985 "langs_src/parser_cpp_language.php"
#line 173 "langs_src/parser_cpp_language.y"
    function yy_r19(){
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2990 "langs_src/parser_cpp_language.php"
#line 177 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2995 "langs_src/parser_cpp_language.php"
#line 183 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3001 "langs_src/parser_cpp_language.php"
#line 188 "langs_src/parser_cpp_language.y"
    function yy_r22(){
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3006 "langs_src/parser_cpp_language.php"
#line 192 "langs_src/parser_cpp_language.y"
    function yy_r23(){
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3011 "langs_src/parser_cpp_language.php"
#line 196 "langs_src/parser_cpp_language.y"
    function yy_r24(){
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3016 "langs_src/parser_cpp_language.php"
#line 200 "langs_src/parser_cpp_language.y"
    function yy_r25(){
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3021 "langs_src/parser_cpp_language.php"
#line 212 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3026 "langs_src/parser_cpp_language.php"
#line 222 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());	
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3032 "langs_src/parser_cpp_language.php"
#line 227 "langs_src/parser_cpp_language.y"
    function yy_r31(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());	
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3038 "langs_src/parser_cpp_language.php"
#line 232 "langs_src/parser_cpp_language.y"
    function yy_r32(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3043 "langs_src/parser_cpp_language.php"
#line 236 "langs_src/parser_cpp_language.y"
    function yy_r33(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3049 "langs_src/parser_cpp_language.php"
#line 241 "langs_src/parser_cpp_language.y"
    function yy_r34(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3054 "langs_src/parser_cpp_language.php"
#line 245 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3059 "langs_src/parser_cpp_language.php"
#line 249 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3064 "langs_src/parser_cpp_language.php"
#line 253 "langs_src/parser_cpp_language.y"
    function yy_r37(){
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3069 "langs_src/parser_cpp_language.php"
#line 257 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3074 "langs_src/parser_cpp_language.php"
#line 261 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3079 "langs_src/parser_cpp_language.php"
#line 265 "langs_src/parser_cpp_language.y"
    function yy_r40(){
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3084 "langs_src/parser_cpp_language.php"
#line 279 "langs_src/parser_cpp_language.y"
    function yy_r43(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3089 "langs_src/parser_cpp_language.php"
#line 288 "langs_src/parser_cpp_language.y"
    function yy_r45(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor));
    }
#line 3094 "langs_src/parser_cpp_language.php"
#line 297 "langs_src/parser_cpp_language.y"
    function yy_r47(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3099 "langs_src/parser_cpp_language.php"
#line 301 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor));
    }
#line 3104 "langs_src/parser_cpp_language.php"
#line 309 "langs_src/parser_cpp_language.y"
    function yy_r50(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor));
    }
#line 3109 "langs_src/parser_cpp_language.php"
#line 319 "langs_src/parser_cpp_language.y"
    function yy_r51(){
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3114 "langs_src/parser_cpp_language.php"
#line 323 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3119 "langs_src/parser_cpp_language.php"
#line 327 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3124 "langs_src/parser_cpp_language.php"
#line 331 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3129 "langs_src/parser_cpp_language.php"
#line 335 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3135 "langs_src/parser_cpp_language.php"
#line 341 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3140 "langs_src/parser_cpp_language.php"
#line 345 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));

    }
#line 3146 "langs_src/parser_cpp_language.php"
#line 359 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3151 "langs_src/parser_cpp_language.php"
#line 363 "langs_src/parser_cpp_language.y"
    function yy_r61(){
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3156 "langs_src/parser_cpp_language.php"
#line 367 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3161 "langs_src/parser_cpp_language.php"
#line 372 "langs_src/parser_cpp_language.y"
    function yy_r63(){
	$this->_retvalue = $this->create_node('possible_function_name', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3166 "langs_src/parser_cpp_language.php"
#line 387 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3171 "langs_src/parser_cpp_language.php"
#line 391 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3176 "langs_src/parser_cpp_language.php"
#line 395 "langs_src/parser_cpp_language.y"
    function yy_r68(){
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3181 "langs_src/parser_cpp_language.php"
#line 399 "langs_src/parser_cpp_language.y"
    function yy_r69(){
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3186 "langs_src/parser_cpp_language.php"
#line 403 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3191 "langs_src/parser_cpp_language.php"
#line 407 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3196 "langs_src/parser_cpp_language.php"
#line 411 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3201 "langs_src/parser_cpp_language.php"
#line 425 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3206 "langs_src/parser_cpp_language.php"
#line 429 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3211 "langs_src/parser_cpp_language.php"
#line 437 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3216 "langs_src/parser_cpp_language.php"
#line 441 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3221 "langs_src/parser_cpp_language.php"
#line 445 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3226 "langs_src/parser_cpp_language.php"
#line 449 "langs_src/parser_cpp_language.y"
    function yy_r81(){
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3231 "langs_src/parser_cpp_language.php"
#line 453 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3236 "langs_src/parser_cpp_language.php"
#line 461 "langs_src/parser_cpp_language.y"
    function yy_r84(){
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3241 "langs_src/parser_cpp_language.php"
#line 465 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 3246 "langs_src/parser_cpp_language.php"
#line 469 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3251 "langs_src/parser_cpp_language.php"
#line 473 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3256 "langs_src/parser_cpp_language.php"
#line 484 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3261 "langs_src/parser_cpp_language.php"
#line 495 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3266 "langs_src/parser_cpp_language.php"
#line 507 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3271 "langs_src/parser_cpp_language.php"
#line 514 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->_retvalue = $this->create_node('return', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3276 "langs_src/parser_cpp_language.php"
#line 520 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3281 "langs_src/parser_cpp_language.php"
#line 526 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3286 "langs_src/parser_cpp_language.php"
#line 534 "langs_src/parser_cpp_language.y"
    function yy_r95(){
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3291 "langs_src/parser_cpp_language.php"
#line 540 "langs_src/parser_cpp_language.y"
    function yy_r96(){
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3296 "langs_src/parser_cpp_language.php"
#line 544 "langs_src/parser_cpp_language.y"
    function yy_r97(){
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3301 "langs_src/parser_cpp_language.php"
#line 548 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3306 "langs_src/parser_cpp_language.php"
#line 552 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3311 "langs_src/parser_cpp_language.php"
#line 556 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3316 "langs_src/parser_cpp_language.php"
#line 560 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3321 "langs_src/parser_cpp_language.php"
#line 564 "langs_src/parser_cpp_language.y"
    function yy_r102(){
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3326 "langs_src/parser_cpp_language.php"
#line 568 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3331 "langs_src/parser_cpp_language.php"
#line 572 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3336 "langs_src/parser_cpp_language.php"
#line 582 "langs_src/parser_cpp_language.y"
    function yy_r106(){
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3341 "langs_src/parser_cpp_language.php"
#line 592 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3346 "langs_src/parser_cpp_language.php"
#line 596 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3351 "langs_src/parser_cpp_language.php"
#line 600 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3356 "langs_src/parser_cpp_language.php"
#line 604 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3361 "langs_src/parser_cpp_language.php"
#line 608 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3366 "langs_src/parser_cpp_language.php"
#line 612 "langs_src/parser_cpp_language.y"
    function yy_r113(){
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3371 "langs_src/parser_cpp_language.php"
#line 622 "langs_src/parser_cpp_language.y"
    function yy_r115(){
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3376 "langs_src/parser_cpp_language.php"
#line 626 "langs_src/parser_cpp_language.y"
    function yy_r116(){
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3381 "langs_src/parser_cpp_language.php"
#line 630 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3386 "langs_src/parser_cpp_language.php"
#line 636 "langs_src/parser_cpp_language.y"
    function yy_r118(){
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3391 "langs_src/parser_cpp_language.php"
#line 640 "langs_src/parser_cpp_language.y"
    function yy_r119(){ 
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 3397 "langs_src/parser_cpp_language.php"
#line 646 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3402 "langs_src/parser_cpp_language.php"
#line 656 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3407 "langs_src/parser_cpp_language.php"
#line 660 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3412 "langs_src/parser_cpp_language.php"
#line 684 "langs_src/parser_cpp_language.y"
    function yy_r129(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -3]->minor,  $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3417 "langs_src/parser_cpp_language.php"
#line 700 "langs_src/parser_cpp_language.y"
    function yy_r133(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3422 "langs_src/parser_cpp_language.php"
#line 704 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3427 "langs_src/parser_cpp_language.php"
#line 710 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 3433 "langs_src/parser_cpp_language.php"
#line 715 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3438 "langs_src/parser_cpp_language.php"
#line 737 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3443 "langs_src/parser_cpp_language.php"
#line 757 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
     }
#line 3448 "langs_src/parser_cpp_language.php"
#line 781 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3453 "langs_src/parser_cpp_language.php"
#line 787 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3458 "langs_src/parser_cpp_language.php"
#line 811 "langs_src/parser_cpp_language.y"
    function yy_r159(){
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3463 "langs_src/parser_cpp_language.php"
#line 817 "langs_src/parser_cpp_language.y"
    function yy_r160(){
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3468 "langs_src/parser_cpp_language.php"
#line 833 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3473 "langs_src/parser_cpp_language.php"
#line 839 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->_retvalue = $this->create_node('expr_prec_7', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3478 "langs_src/parser_cpp_language.php"
#line 847 "langs_src/parser_cpp_language.y"
    function yy_r167(){
	$this->_retvalue = $this->create_node('expr_prec_7', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3483 "langs_src/parser_cpp_language.php"
#line 853 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->_retvalue = $this->create_node('expr_prec_6', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3488 "langs_src/parser_cpp_language.php"
#line 861 "langs_src/parser_cpp_language.y"
    function yy_r170(){
	$this->_retvalue = $this->create_node('expr_prec_6', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3493 "langs_src/parser_cpp_language.php"
#line 867 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->_retvalue = $this->create_node('expr_prec_5', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3498 "langs_src/parser_cpp_language.php"
#line 879 "langs_src/parser_cpp_language.y"
    function yy_r174(){
	$this->_retvalue = $this->create_node('expr_prec_5', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3503 "langs_src/parser_cpp_language.php"
#line 885 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->_retvalue = $this->create_node('expr_prec_4', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3508 "langs_src/parser_cpp_language.php"
#line 893 "langs_src/parser_cpp_language.y"
    function yy_r177(){
	$this->_retvalue = $this->create_node('expr_prec_4', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3513 "langs_src/parser_cpp_language.php"
#line 899 "langs_src/parser_cpp_language.y"
    function yy_r178(){
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3518 "langs_src/parser_cpp_language.php"
#line 907 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3523 "langs_src/parser_cpp_language.php"
#line 935 "langs_src/parser_cpp_language.y"
    function yy_r187(){
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3528 "langs_src/parser_cpp_language.php"
#line 941 "langs_src/parser_cpp_language.y"
    function yy_r188(){
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 3533 "langs_src/parser_cpp_language.php"
#line 949 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3538 "langs_src/parser_cpp_language.php"
#line 961 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3543 "langs_src/parser_cpp_language.php"
#line 965 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3548 "langs_src/parser_cpp_language.php"
#line 973 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->_retvalue =  $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3553 "langs_src/parser_cpp_language.php"
#line 979 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 3558 "langs_src/parser_cpp_language.php"
#line 983 "langs_src/parser_cpp_language.y"
    function yy_r198(){
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 3563 "langs_src/parser_cpp_language.php"
#line 989 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->_retvalue = $this->create_node('cpp_style_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3568 "langs_src/parser_cpp_language.php"
#line 1007 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3573 "langs_src/parser_cpp_language.php"
#line 1023 "langs_src/parser_cpp_language.y"
    function yy_r207(){
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3578 "langs_src/parser_cpp_language.php"
#line 1027 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3583 "langs_src/parser_cpp_language.php"
#line 1037 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$result = $this->create_node('typecast', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 3589 "langs_src/parser_cpp_language.php"
#line 1044 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->_retvalue = $this->create_node('type_list', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3594 "langs_src/parser_cpp_language.php"
#line 1048 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->_retvalue = $this->create_node('type_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3599 "langs_src/parser_cpp_language.php"
#line 1054 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3604 "langs_src/parser_cpp_language.php"
#line 1058 "langs_src/parser_cpp_language.y"
    function yy_r214(){
    $this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3609 "langs_src/parser_cpp_language.php"
#line 1066 "langs_src/parser_cpp_language.y"
    function yy_r216(){
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3614 "langs_src/parser_cpp_language.php"
#line 1074 "langs_src/parser_cpp_language.y"
    function yy_r218(){
	$this->_retvalue = $this->create_node('non_const_type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3619 "langs_src/parser_cpp_language.php"
#line 1082 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3624 "langs_src/parser_cpp_language.php"
#line 1086 "langs_src/parser_cpp_language.y"
    function yy_r221(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3629 "langs_src/parser_cpp_language.php"
#line 1090 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3634 "langs_src/parser_cpp_language.php"
#line 1094 "langs_src/parser_cpp_language.y"
    function yy_r223(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3639 "langs_src/parser_cpp_language.php"
#line 1101 "langs_src/parser_cpp_language.y"
    function yy_r225(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3644 "langs_src/parser_cpp_language.php"
#line 1105 "langs_src/parser_cpp_language.y"
    function yy_r226(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3649 "langs_src/parser_cpp_language.php"
#line 1109 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3654 "langs_src/parser_cpp_language.php"
#line 1121 "langs_src/parser_cpp_language.y"
    function yy_r230(){
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3659 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //lock_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 34 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
    //var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 3804 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
