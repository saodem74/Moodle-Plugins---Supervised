<?php
/* Driver template for the PHP_lock_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class lock_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof lock_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof lock_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof lock_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof lock_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class lock_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 102 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 3 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 137 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const LOGICALOR                      =  3;
    const LOGICALAND                     =  4;
    const BINARYXOR                      =  5;
    const BINARYAND                      =  6;
    const NOTEQUAL                       =  7;
    const EQUAL                          =  8;
    const UINDIRECTION                   =  9;
    const UADRESS                        = 10;
    const NAMESPACE_RESOLVE              = 11;
    const UMINUS                         = 12;
    const UPLUS                          = 13;
    const UBRACKET                       = 14;
    const TYPEUNARY                      = 15;
    const MACROPARAMETERPRIORITY         = 16;
    const NAMESPACEKWD                   = 17;
    const IDENTIFIER                     = 18;
    const LEFTFIGUREBRACKET              = 19;
    const RIGHTFIGUREBRACKET             = 20;
    const SEMICOLON                      = 21;
    const CLASSKWD                       = 22;
    const STRUCTKWD                      = 23;
    const UNIONKWD                       = 24;
    const COLON                          = 25;
    const PUBLICKWD                      = 26;
    const PROTECTEDKWD                   = 27;
    const PRIVATEKWD                     = 28;
    const SIGNALSKWD                     = 29;
    const SLOTSKWD                       = 30;
    const ENUMKWD                        = 31;
    const COMMA                          = 32;
    const ASSIGN                         = 33;
    const LEFTROUNDBRACKET               = 34;
    const RIGHTROUNDBRACKET              = 35;
    const BINARYNOT                      = 36;
    const CUSTOMTYPENAME                 = 37;
    const TEMPLATEKWD                    = 38;
    const LESSER                         = 39;
    const GREATER                        = 40;
    const TYPENAMEKWD                    = 41;
    const OPERATOROVERLOADDECLARATION    = 42;
    const CONSTKWD                       = 43;
    const PREPROCESSOR_ENDIF             = 44;
    const PREPROCESSOR_ELIF              = 45;
    const PREPROCESSOR_ELSE              = 46;
    const PREPROCESSOR_IFDEF             = 47;
    const PREPROCESSOR_IF                = 48;
    const PREPROCESSOR_DEFINE            = 49;
    const PREPROCESSOR_INCLUDE           = 50;
    const WHILEKWD                       = 51;
    const DOKWD                          = 52;
    const FORKWD                         = 53;
    const RETURNKWD                      = 54;
    const CONTINUEKWD                    = 55;
    const GOTOKWD                        = 56;
    const TRYKWD                         = 57;
    const CATCHKWD                       = 58;
    const ELLIPSIS                       = 59;
    const SWITCHKWD                      = 60;
    const CASEKWD                        = 61;
    const DEFAULTKWD                     = 62;
    const IFKWD                          = 63;
    const TYPEDEF                        = 64;
    const BREAKKWD                       = 65;
    const NEWKWD                         = 66;
    const DELETE                         = 67;
    const LEFTSQUAREBRACKET              = 68;
    const RIGHTSQUAREBRACKET             = 69;
    const STATICKWD                      = 70;
    const EXTERNKWD                      = 71;
    const REGISTERKWD                    = 72;
    const VOLATILEKWD                    = 73;
    const FRIENDKWD                      = 74;
    const BINARYXOR_ASSIGN               = 75;
    const BINARYOR_ASSIGN                = 76;
    const BINARYAND_ASSIGN               = 77;
    const RIGHTSHIFT_ASSIGN              = 78;
    const LEFTSHIFT_ASSIGN               = 79;
    const MODULO_ASSIGN                  = 80;
    const DIVISION_ASSIGN                = 81;
    const MULTIPLY_ASSIGN                = 82;
    const PLUS_ASSIGN                    = 83;
    const MINUS_ASSIGN                   = 84;
    const NOT_EQUAL                      = 85;
    const LESSER_OR_EQUAL                = 86;
    const GREATER_OR_EQUAL               = 87;
    const LEFTSHIFT                      = 88;
    const RIGHTSHIFT                     = 89;
    const MINUS                          = 90;
    const PLUS                           = 91;
    const MODULOSIGN                     = 92;
    const DIVISION                       = 93;
    const MULTIPLY                       = 94;
    const AMPERSAND                      = 95;
    const LOGICALNOT                     = 96;
    const DECREMENT                      = 97;
    const INCREMENT                      = 98;
    const DOT                            = 99;
    const RIGHTARROW                     = 100;
    const CONST_CAST                     = 101;
    const STATIC_CAST                    = 102;
    const DYNAMIC_CAST                   = 103;
    const REINTERPRET_CAST               = 104;
    const NUMERIC                        = 105;
    const CHARACTER                      = 106;
    const STRING                         = 107;
    const PREPROCESSOR_STRINGIFY         = 108;
    const PREPROCESSOR_CONCAT            = 109;
    const SIGNED                         = 110;
    const TYPENAME                       = 111;
    const UNSIGNED                       = 112;
    const LONG                           = 113;
    const YY_NO_ACTION = 708;
    const YY_ACCEPT_ACTION = 707;
    const YY_ERROR_ACTION = 706;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 3908;
static public $yy_action = array(
 /*     0 */   226,  236,   13,  337,  289,  377,  376,  375,  413,  322,
 /*    10 */   320,  340,   74,   73,  129,  267,  397,   34,  311,   80,
 /*    20 */   269,  237,  325,  321,  272,  359,  103,  242,  260,  186,
 /*    30 */   185,  427,  428,  429,  221,   24,  222,   30,  219,  206,
 /*    40 */   212,  310,   48,  213,  339,   26,  279,   96,  275,   47,
 /*    50 */    43,   60,  535,  447,  442,  441,  443,  444,  470,  142,
 /*    60 */   391,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*    70 */   148,  259,  140,   90,   91,  347,  358,   84,   83,   85,
 /*    80 */    86,   82,  120,  248,  261,  244,  255,  253,  402,  405,
 /*    90 */   404,  286,  251,  247,  362,  203,  200,  226,  236,   13,
 /*   100 */   335,  289,  377,  376,  375,  193,  322,  320,  340,  166,
 /*   110 */   271,  129,  179,  193,   34,  114,   80,  269,  237,  186,
 /*   120 */   167,  272,  365,  103,  246,  260,  677,  185,  427,  428,
 /*   130 */   429,  221,   24,  222,   30,  219,  206,  212,  303,   29,
 /*   140 */   213,   61,  535,  279,   96,  275,   47,   43,  368,   95,
 /*   150 */   447,  442,  441,  443,  444,  445,  142,  372,  150,  194,
 /*   160 */   207,  161,  346,  169,  173,  396,   87,  148,  259,  394,
 /*   170 */    90,   91,  347,  358,   84,   83,   85,   86,   82,  120,
 /*   180 */   248,  261,  244,  255,  253,  402,  405,  404,  286,  107,
 /*   190 */   247,  362,  203,  200,  226,  236,   13,  412,  289,  377,
 /*   200 */   376,  375,  677,  239,   64,   68,   63,   67,  129,   66,
 /*   210 */     1,   34,  383,   80,  269,  237,  186,   72,   69,  260,
 /*   220 */   103,  438,   11,   10,  185,  427,  428,  429,  221,   24,
 /*   230 */   222,   30,  219,  206,  212,  318,   32,  213,   60,  233,
 /*   240 */   279,   96,  275,   47,   43,  284,   48,  447,  442,  441,
 /*   250 */   443,  444,  155,  194,  207,  161,  346,  169,  173,  396,
 /*   260 */    87,  148,  259,   48,   70,   71,  454,   90,   91,  327,
 /*   270 */    45,   84,   83,   85,   86,   82,   62,  536,  261,  244,
 /*   280 */   255,  253,  402,  405,  404,  286,   65,  247,  362,  203,
 /*   290 */   200,  226,  236,   13,  299,  289,  377,  376,  375,  343,
 /*   300 */   344,  342,  345,  216,   48,  129,  388,  455,   34,  332,
 /*   310 */    80,  269,  237,  377,  376,  375,    7,  103,  439,  260,
 /*   320 */    48,  185,  427,  428,  429,  221,   24,  222,   30,  219,
 /*   330 */   206,  212,   76,   75,  213,  677,  536,  279,   96,  275,
 /*   340 */    47,   43,  422,   95,  447,  442,  441,  443,  444,  467,
 /*   350 */   142,  364,  150,  194,  207,  161,  346,  169,  173,  396,
 /*   360 */    87,  148,  259,  217,   90,   91,  309,  131,   84,   83,
 /*   370 */    85,   86,   82,  127,    1,  261,  244,  255,  253,  402,
 /*   380 */   405,  404,  286,  158,  247,  362,  203,  200,  226,  236,
 /*   390 */    13,  301,  289,  377,  376,  375,  220,  333,   79,   78,
 /*   400 */    77,   48,  129,    4,  446,   34,   39,   80,  269,  237,
 /*   410 */   113,  677,  381,   12,  103,  228,  260,   48,  185,  427,
 /*   420 */   428,  429,  221,   24,  222,   30,  219,  206,  212,   48,
 /*   430 */   461,  213,  210,   59,  279,   96,  275,   47,   43,  139,
 /*   440 */   288,  447,  442,  441,  443,  444,  356,  142,  186,  150,
 /*   450 */   194,  207,  161,  346,  169,  173,  396,   87,  148,  259,
 /*   460 */    38,   90,   91,   11,   10,   84,   83,   85,   86,   82,
 /*   470 */    61,   48,  261,  244,  255,  253,  402,  405,  404,  286,
 /*   480 */   230,  247,  362,  203,  200,  226,  236,   13,  386,  289,
 /*   490 */   377,  376,  375,  389,  204,  435,  227,  280,  214,  129,
 /*   500 */   243,  462,   34,  380,   80,  269,  237,   94,  367,  280,
 /*   510 */   419,  103,   37,  260,    5,  185,  427,  428,  429,  221,
 /*   520 */    24,  222,   30,  219,  206,  212,  235,  270,  213,  134,
 /*   530 */    62,  279,   96,  275,   47,   43,  338,  240,  447,  442,
 /*   540 */   441,  443,  444,  469,  142,  306,  150,  194,  207,  161,
 /*   550 */   346,  169,  173,  396,   87,  148,  259,   48,   90,   91,
 /*   560 */    28,  437,   84,   83,   85,   86,   82,  432,  431,  261,
 /*   570 */   244,  255,  253,  402,  405,  404,  286,  319,  247,  362,
 /*   580 */   203,  200,  226,  236,   13,  292,  289,  377,  376,  375,
 /*   590 */   426,   48,   48,  117,  223,   25,  129,   41,  265,   34,
 /*   600 */    40,   80,  269,  237,   42,  367,  116,  367,  103,  425,
 /*   610 */   260,  165,  185,  427,  428,  429,  221,   24,  222,   30,
 /*   620 */   219,  206,  212,  282,  270,  213,  270,  224,  279,   96,
 /*   630 */   275,   47,   43,  190,  460,  447,  442,  441,  443,  444,
 /*   640 */   277,  142,  313,  150,  194,  207,  161,  346,  169,  173,
 /*   650 */   396,   87,  148,  259,  104,   90,   91,  125,  141,   84,
 /*   660 */    83,   85,   86,   82,  280,  240,  261,  244,  255,  253,
 /*   670 */   402,  405,  404,  286,  186,  247,  362,  203,  200,  226,
 /*   680 */   236,   13,  328,  289,  377,  376,  375,  276,  278,  132,
 /*   690 */   459,  414,  227,  129,  122,  334,   34,  240,   80,  269,
 /*   700 */   237,  128,  113,  118,  283,  103,  269,  260,  265,  185,
 /*   710 */   427,  428,  429,  221,   24,  222,   30,  219,  206,  212,
 /*   720 */   348,  133,  213,  126,   44,  279,   96,  275,   47,   43,
 /*   730 */   394,  137,  447,  442,  441,  443,  444,  398,  142,  240,
 /*   740 */   150,  194,  207,  161,  346,  169,  173,  396,   87,  148,
 /*   750 */   259,  392,   90,   91,  100,  397,   84,   83,   85,   86,
 /*   760 */    82,  281,  258,  261,  244,  255,  253,  402,  405,  404,
 /*   770 */   286,  400,  247,  362,  203,  200,  226,  236,   13,  296,
 /*   780 */   289,  377,  376,  375,   48,  159,  466,  316,  119,  357,
 /*   790 */   129,   33,   36,   34,  245,   80,  269,  237,  360,   92,
 /*   800 */    93,  366,  103,    8,  260,  390,  185,  427,  428,  429,
 /*   810 */   221,   24,  222,   30,  219,  206,  212,  238,  101,  213,
 /*   820 */   418,   89,  279,   96,  275,   47,   43,  361,  406,  447,
 /*   830 */   442,  441,  443,  444,  463,  142,  314,  150,  194,  207,
 /*   840 */   161,  346,  169,  173,  396,   87,  148,  259,  449,   90,
 /*   850 */    91,  136,  257,   84,   83,   85,   86,   82,   98,   27,
 /*   860 */   261,  244,  255,  253,  402,  405,  404,  286,  407,  247,
 /*   870 */   362,  203,  200,  226,  236,   13,  323,  289,  377,  376,
 /*   880 */   375,  395,  450,   97,  250,  135,  108,  129,  324,  382,
 /*   890 */    34,  211,   80,  269,  237,  229,  176,  208,  196,  103,
 /*   900 */   408,  260,  241,  185,  427,  428,  429,  221,   24,  222,
 /*   910 */    30,  219,  206,  212,  187,  188,  213,  302,  378,  279,
 /*   920 */    96,  275,   47,   43,  180,  401,  447,  442,  441,  443,
 /*   930 */   444,  399,  142,  409,  150,  194,  207,  161,  346,  169,
 /*   940 */   173,  396,   87,  148,  259,  416,   90,   91,  410,  317,
 /*   950 */    84,   83,   85,   86,   82,  330,    6,  261,  244,  255,
 /*   960 */   253,  402,  405,  404,  286,  307,  247,  362,  203,  200,
 /*   970 */   226,  236,   13,  436,  289,  377,  376,  375,  440,  278,
 /*   980 */   294,  384,  415,  415,  129,  415,  415,   34,  415,   80,
 /*   990 */   269,  237,  415,  415,  415,  415,  103,  415,  260,  415,
 /*  1000 */   185,  427,  428,  429,  221,   24,  222,   30,  219,  206,
 /*  1010 */   212,  415,  415,  213,  415,  415,  279,   96,  275,   47,
 /*  1020 */    43,  415,  415,  447,  442,  441,  443,  444,  452,  142,
 /*  1030 */   415,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*  1040 */   148,  259,  415,   90,   91,  415,  415,   84,   83,   85,
 /*  1050 */    86,   82,  415,  415,  261,  244,  255,  253,  402,  405,
 /*  1060 */   404,  286,  415,  247,  362,  203,  200,  226,  236,   13,
 /*  1070 */   295,  289,  377,  376,  375,  415,  415,  415,  415,  415,
 /*  1080 */   415,  129,  415,  415,   34,  415,   80,  269,  237,  415,
 /*  1090 */   415,  415,  415,  103,  415,  260,  415,  185,  427,  428,
 /*  1100 */   429,  221,   24,  222,   30,  219,  206,  212,  415,  415,
 /*  1110 */   213,  415,  415,  279,   96,  275,   47,   43,  415,  415,
 /*  1120 */   447,  442,  441,  443,  444,  458,  142,  415,  150,  194,
 /*  1130 */   207,  161,  346,  169,  173,  396,   87,  148,  259,  415,
 /*  1140 */    90,   91,  415,  415,   84,   83,   85,   86,   82,  415,
 /*  1150 */   415,  261,  244,  255,  253,  402,  405,  404,  286,  415,
 /*  1160 */   247,  362,  203,  200,  226,  236,   13,  300,  289,  377,
 /*  1170 */   376,  375,  415,  415,  415,  415,  415,  415,  129,  415,
 /*  1180 */   415,   34,  415,   80,  269,  237,  269,  415,  415,  415,
 /*  1190 */   103,  415,  260,  415,  185,  427,  428,  429,  221,   24,
 /*  1200 */   222,   30,  219,  206,  212,  415,  415,  213,  415,  415,
 /*  1210 */   279,   96,  275,   47,   43,  415,  415,  447,  442,  441,
 /*  1220 */   443,  444,  468,  142,  415,  150,  194,  207,  161,  346,
 /*  1230 */   169,  173,  396,   87,  148,  259,  415,   90,   91,  415,
 /*  1240 */   415,   84,   83,   85,   86,   82,  415,  415,  261,  244,
 /*  1250 */   255,  253,  402,  405,  404,  286,  415,  247,  362,  203,
 /*  1260 */   200,  226,  236,   13,  199,  289,  377,  376,  375,  369,
 /*  1270 */   415,  415,  415,  415,  163,  271,  415,  415,   34,  415,
 /*  1280 */    81,  269,  237,  269,  424,  434,  415,  103,  415,  260,
 /*  1290 */   415,  415,  415,  433,  429,  221,   24,  222,   30,  219,
 /*  1300 */   206,  212,  411,  423,  213,  415,  415,  279,   96,  275,
 /*  1310 */    47,   43,  205,  368,  447,  442,  441,  443,  444,  457,
 /*  1320 */   142,  415,  150,  194,  207,  161,  346,  169,  173,  396,
 /*  1330 */    87,  148,  259,  415,   90,   91,  415,  415,   84,   83,
 /*  1340 */    85,   86,   82,  415,  415,  261,  244,  255,  253,  402,
 /*  1350 */   405,  404,  286,  415,  247,  362,  203,  200,  415,  298,
 /*  1360 */   430,  415,  387,  124,  415,   88,  379,    3,  308,  305,
 /*  1370 */   121,  417,  415,  269,  415,  260,  102,  415,  415,  103,
 /*  1380 */   110,  163,  234,  424,  434,  415,  415,  415,  415,    9,
 /*  1390 */   415,  415,  433,  260,  201,  315,  115,  415,  415,  415,
 /*  1400 */   290,  415,  423,  293,  285,  453,  142,   99,  150,  194,
 /*  1410 */   207,  161,  346,  169,  173,  396,   87,  148,  259,  415,
 /*  1420 */   368,  415,  385,  430,  415,  387,  124,  415,   88,  379,
 /*  1430 */   354,  169,  173,  396,   87,  148,  259,  415,  260,  102,
 /*  1440 */   415,  415,  415,  110,  163,  234,  247,  362,  203,  200,
 /*  1450 */   415,  415,    9,  218,  112,  297,  304,  201,  315,  115,
 /*  1460 */   260,  415,  415,  290,  415,  415,  293,  285,  453,  142,
 /*  1470 */    99,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*  1480 */   148,  259,  415,  368,  298,  430,  415,  387,  124,  415,
 /*  1490 */    88,  379,  415,  312,  305,  121,  415,  415,  263,  262,
 /*  1500 */   260,  102,  149,  259,  415,  110,  163,  234,  415,  269,
 /*  1510 */   260,  415,  363,  415,    9,  103,  415,  256,  415,  201,
 /*  1520 */   315,  115,  163,  271,  415,  290,  415,  260,  293,  285,
 /*  1530 */   453,  142,   99,  150,  194,  207,  161,  346,  169,  173,
 /*  1540 */   396,   87,  148,  259,  415,  368,  160,  346,  169,  173,
 /*  1550 */   396,   87,  148,  259,  707,   19,  326,  430,  415,  387,
 /*  1560 */   124,  368,   88,  379,  393,  169,  173,  396,   87,  148,
 /*  1570 */   259,  415,  260,  102,  415,  415,  415,  110,  163,  234,
 /*  1580 */   415,  415,  247,  362,  203,  200,    9,  415,  415,  415,
 /*  1590 */   260,  201,  315,  115,  415,  415,  415,  290,  415,  415,
 /*  1600 */   293,  285,  453,  142,   99,  150,  194,  207,  161,  346,
 /*  1610 */   169,  173,  396,   87,  148,  259,  415,  368,   14,  326,
 /*  1620 */   430,  415,  387,  124,  415,   88,  379,  170,  263,  262,
 /*  1630 */   373,   87,  148,  259,  162,  260,  102,  415,  415,  415,
 /*  1640 */   110,  163,  234,   35,  451,  415,  269,  415,  415,    9,
 /*  1650 */    31,  415,  415,  269,  201,  315,  115,  415,  415,  415,
 /*  1660 */   290,  415,  260,  293,  285,  453,  142,   99,  150,  194,
 /*  1670 */   207,  161,  346,  169,  173,  396,   87,  148,  259,  415,
 /*  1680 */   368,  415,  415,  415,  415,  415,  415,  415,  415,   21,
 /*  1690 */   326,  430,  415,  387,  124,  415,   88,  379,  164,  346,
 /*  1700 */   169,  173,  396,   87,  148,  259,  260,  102,  415,  415,
 /*  1710 */   415,  110,  163,  234,  402,  405,  404,  286,  415,  415,
 /*  1720 */     9,  402,  405,  404,  286,  201,  315,  115,  415,  415,
 /*  1730 */   415,  290,  415,  415,  293,  285,  453,  142,   99,  150,
 /*  1740 */   194,  207,  161,  346,  169,  173,  396,   87,  148,  259,
 /*  1750 */   415,  368,   20,  326,  430,  415,  387,  124,  415,   88,
 /*  1760 */   379,  170,  269,  415,  415,  371,  415,  415,  103,  260,
 /*  1770 */   102,  415,  415,  415,  110,  163,  234,   35,  260,  415,
 /*  1780 */   269,  415,  415,    9,  415,  415,  415,  415,  201,  315,
 /*  1790 */   115,  415,  415,  415,  290,  415,  415,  293,  285,  453,
 /*  1800 */   142,   99,  150,  194,  207,  161,  346,  169,  173,  396,
 /*  1810 */    87,  148,  259,  415,  368,  355,  169,  173,  396,   87,
 /*  1820 */   148,  259,  415,   16,  326,  430,  403,  387,  124,  415,
 /*  1830 */    88,  379,  415,  415,  415,  247,  362,  203,  200,  415,
 /*  1840 */   260,  102,   35,  415,  415,  110,  163,  234,  402,  405,
 /*  1850 */   404,  286,  415,  415,    9,  415,  415,  260,  415,  201,
 /*  1860 */   315,  115,  415,  415,  415,  290,  415,  415,  293,  285,
 /*  1870 */   453,  142,   99,  150,  194,  207,  161,  346,  169,  173,
 /*  1880 */   396,   87,  148,  259,  415,  368,   23,  326,  430,  415,
 /*  1890 */   387,  124,  415,   88,  379,  263,  262,  351,   87,  148,
 /*  1900 */   259,  415,  415,  260,  102,  415,  415,  415,  110,  163,
 /*  1910 */   234,  260,  415,  402,  405,  404,  286,    9,  415,  415,
 /*  1920 */   415,  415,  201,  315,  115,  415,  415,  415,  290,  415,
 /*  1930 */   415,  293,  285,  453,  142,   99,  150,  194,  207,  161,
 /*  1940 */   346,  169,  173,  396,   87,  148,  259,  415,  368,  263,
 /*  1950 */   262,  374,   87,  148,  259,  415,  415,   15,  326,  430,
 /*  1960 */   415,  387,  124,  415,   88,  379,  415,  415,  415,  415,
 /*  1970 */   415,  415,  415,  269,  260,  102,  415,  415,  415,  110,
 /*  1980 */   163,  234,  415,  415,  415,  415,  415,  415,    9,  415,
 /*  1990 */   415,  260,  415,  201,  315,  115,  415,  415,  415,  290,
 /*  2000 */   415,  415,  293,  285,  453,  142,   99,  150,  194,  207,
 /*  2010 */   161,  346,  169,  173,  396,   87,  148,  259,  415,  368,
 /*  2020 */    18,  326,  430,  415,  387,  124,  415,   88,  379,  263,
 /*  2030 */   262,  353,   87,  148,  259,  415,  415,  260,  102,  415,
 /*  2040 */   415,  415,  110,  163,  234,  260,  247,  362,  203,  200,
 /*  2050 */   415,    9,  415,  415,  415,  415,  201,  315,  115,  415,
 /*  2060 */   415,  415,  290,  415,  415,  293,  285,  453,  142,   99,
 /*  2070 */   150,  194,  207,  161,  346,  169,  173,  396,   87,  148,
 /*  2080 */   259,  415,  368,  263,  262,  349,   87,  148,  259,  415,
 /*  2090 */   415,   17,  326,  430,  415,  387,  124,  415,   88,  379,
 /*  2100 */   415,  415,  415,  415,  415,  415,  415,  415,  260,  102,
 /*  2110 */   415,  415,  415,  110,  163,  234,  415,  415,  415,  415,
 /*  2120 */   415,  415,    9,  415,  415,  260,  415,  201,  315,  115,
 /*  2130 */   415,  415,  415,  290,  415,  415,  293,  285,  453,  142,
 /*  2140 */    99,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*  2150 */   148,  259,  415,  368,    2,  326,  430,  415,  387,  124,
 /*  2160 */   415,   88,  379,  263,  262,  350,   87,  148,  259,  415,
 /*  2170 */   415,  260,  102,  415,  415,  415,  110,  163,  234,  260,
 /*  2180 */   415,  415,  415,  415,  415,    9,  415,  415,  415,  415,
 /*  2190 */   201,  315,  115,  415,  415,  415,  290,  415,  415,  293,
 /*  2200 */   285,  453,  142,   99,  150,  194,  207,  161,  346,  169,
 /*  2210 */   173,  396,   87,  148,  259,  415,  368,  263,  262,  352,
 /*  2220 */    87,  148,  259,  415,  415,   22,  326,  430,  415,  387,
 /*  2230 */   124,  415,   88,  379,  415,  415,  415,  415,  415,  415,
 /*  2240 */   269,  415,  260,  102,  415,  415,  103,  110,  163,  234,
 /*  2250 */   415,  415,  415,  415,  415,  415,    9,  415,  415,  260,
 /*  2260 */   415,  201,  315,  115,  415,  415,  415,  290,  415,  415,
 /*  2270 */   293,  285,  453,  142,   99,  150,  194,  207,  161,  346,
 /*  2280 */   169,  173,  396,   87,  148,  259,  415,  368,  415,  385,
 /*  2290 */   430,  415,  387,  124,  415,   88,  379,  263,  262,  415,
 /*  2300 */   415,  145,  259,  415,  403,  260,  102,  415,  415,  415,
 /*  2310 */   110,  163,  234,  247,  362,  203,  200,  415,  415,    9,
 /*  2320 */    34,  130,   81,  269,  201,  315,  115,  415,  415,  103,
 /*  2330 */   290,  415,  415,  293,  285,  453,  142,   99,  150,  194,
 /*  2340 */   207,  161,  346,  169,  173,  396,   87,  148,  259,  415,
 /*  2350 */   368,  415,   47,   43,  403,  415,  447,  442,  441,  443,
 /*  2360 */   444,  369,  415,  415,  415,  415,  163,  271,  415,  415,
 /*  2370 */    34,  415,   81,  269,  415,  415,   90,   91,  415,  103,
 /*  2380 */    84,   83,   85,   86,   82,  415,  415,  261,  244,  255,
 /*  2390 */   253,  402,  405,  404,  286,  291,  247,  362,  203,  200,
 /*  2400 */   403,  415,   47,   43,  209,  368,  447,  442,  441,  443,
 /*  2410 */   444,  415,  415,  415,  415,  415,   34,  260,   81,  215,
 /*  2420 */   415,  415,  415,  415,  415,  415,   90,   91,  415,  415,
 /*  2430 */    84,   83,   85,   86,   82,  415,  415,  261,  244,  255,
 /*  2440 */   253,  402,  405,  404,  286,  403,  247,  362,  203,  200,
 /*  2450 */   153,  194,  207,  161,  346,  169,  173,  396,   87,  148,
 /*  2460 */   259,   34,  456,   81,  269,  415,  415,  415,  415,  415,
 /*  2470 */   103,  260,   90,   91,  415,  415,   84,   83,   85,   86,
 /*  2480 */    82,  415,  415,  261,  244,  255,  253,  402,  405,  404,
 /*  2490 */   286,  415,  415,   47,   43,  415,  415,  447,  442,  441,
 /*  2500 */   443,  444,  144,  415,  150,  194,  207,  161,  346,  169,
 /*  2510 */   173,  396,   87,  148,  259,  415,  415,   90,   91,  415,
 /*  2520 */   415,   84,   83,   85,   86,   82,  415,  415,  261,  244,
 /*  2530 */   255,  253,  402,  405,  404,  286,  415,  247,  362,  203,
 /*  2540 */   200,  403,  260,  105,  331,  415,  415,  138,  163,  271,
 /*  2550 */   415,  415,  415,  415,  415,  415,  415,   34,  415,   81,
 /*  2560 */   269,  168,  415,  415,  415,  415,  103,  415,  260,  415,
 /*  2570 */   415,  415,  453,  142,   99,  150,  194,  207,  161,  346,
 /*  2580 */   169,  173,  396,   87,  148,  259,  415,  368,  415,   47,
 /*  2590 */    43,  415,  415,  447,  442,  441,  443,  444,  464,  142,
 /*  2600 */   415,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*  2610 */   148,  259,  415,   90,   91,  415,  415,   84,   83,   85,
 /*  2620 */    86,   82,  415,  415,  261,  244,  255,  253,  402,  405,
 /*  2630 */   404,  286,  403,  247,  362,  203,  200,  415,  415,  254,
 /*  2640 */   415,  377,  376,  375,  163,  271,  415,  415,   34,  415,
 /*  2650 */    81,  269,  415,  415,  415,  268,  269,  103,  415,  260,
 /*  2660 */   415,  415,  103,  231,  415,  415,  415,  415,  163,  271,
 /*  2670 */   415,  415,  415,  415,  178,  421,  415,  415,  415,  415,
 /*  2680 */    47,   43,  415,  368,  447,  442,  441,  443,  444,  447,
 /*  2690 */   442,  441,  443,  444,  195,  161,  346,  169,  173,  396,
 /*  2700 */    87,  148,  259,  415,   90,   91,  415,  368,   84,   83,
 /*  2710 */    85,   86,   82,  415,  415,  261,  244,  255,  253,  402,
 /*  2720 */   405,  404,  286,  260,  247,  362,  203,  200,  415,  247,
 /*  2730 */   362,  203,  200,  287,  415,  387,  124,  415,  123,  379,
 /*  2740 */   415,  415,  415,  415,  415,  415,  415,  415,  260,  106,
 /*  2750 */   415,  415,  415,  138,  163,  271,  156,  194,  207,  161,
 /*  2760 */   346,  169,  173,  396,   87,  148,  259,  201,  315,  115,
 /*  2770 */   415,  415,  415,  290,  415,  415,  293,  285,  453,  142,
 /*  2780 */    99,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*  2790 */   148,  259,  415,  368,  415,  415,  415,  415,  415,  336,
 /*  2800 */   403,  387,  124,  415,  123,  379,  415,  415,  415,  415,
 /*  2810 */   415,  415,  415,  415,  260,  106,   35,  415,  415,  138,
 /*  2820 */   163,  271,  249,  415,  231,  415,  266,  163,  271,  163,
 /*  2830 */   271,  163,  271,  201,  315,  115,  420,  415,  415,  290,
 /*  2840 */   415,  415,  293,  285,  453,  142,   99,  150,  194,  207,
 /*  2850 */   161,  346,  169,  173,  396,   87,  148,  259,  225,  368,
 /*  2860 */   387,  124,  415,  123,  379,  415,  368,  415,  368,  415,
 /*  2870 */   368,  415,  415,  260,  106,  415,  415,  415,  138,  163,
 /*  2880 */   271,  415,  415,  261,  244,  255,  253,  402,  405,  404,
 /*  2890 */   286,  415,  201,  315,  115,  415,  415,  415,  290,  415,
 /*  2900 */   415,  293,  285,  453,  142,   99,  150,  194,  207,  161,
 /*  2910 */   346,  169,  173,  396,   87,  148,  259,  415,  368,  415,
 /*  2920 */   329,  415,  387,  124,  415,  123,  379,  415,  415,  415,
 /*  2930 */   415,  415,  415,  415,  415,  260,  106,  415,  415,  448,
 /*  2940 */   138,  163,  271,  415,  163,  271,  415,  415,  415,  415,
 /*  2950 */   415,  415,  415,  415,  201,  315,  115,  415,  415,  415,
 /*  2960 */   290,  415,  415,  293,  285,  453,  142,   99,  150,  194,
 /*  2970 */   207,  161,  346,  169,  173,  396,   87,  148,  259,  471,
 /*  2980 */   368,  387,  124,  368,  123,  379,  415,  415,  415,  415,
 /*  2990 */   415,  415,  415,  415,  260,  106,  415,  415,  370,  138,
 /*  3000 */   163,  271,  415,  163,  271,  252,  415,  415,  415,  415,
 /*  3010 */   163,  271,  415,  201,  315,  115,  415,  415,  415,  290,
 /*  3020 */   415,  415,  293,  285,  453,  142,   99,  150,  194,  207,
 /*  3030 */   161,  346,  169,  173,  396,   87,  148,  259,  415,  368,
 /*  3040 */   260,  106,  368,  415,  415,  138,  163,  271,  415,  368,
 /*  3050 */   415,  382,  415,  415,  415,  415,  415,  415,  415,  273,
 /*  3060 */   415,  111,  415,  415,  232,  109,  152,  274,  415,  415,
 /*  3070 */   453,  142,   99,  150,  194,  207,  161,  346,  169,  173,
 /*  3080 */   396,   87,  148,  259,  415,  368,  415,  415,  260,  106,
 /*  3090 */   415,  415,   99,  138,  163,  271,  415,  415,  415,  415,
 /*  3100 */   415,  415,  415,  415,  415,  368,  415,  183,  415,  260,
 /*  3110 */   415,  415,  415,  415,  415,  415,  415,  415,  453,  142,
 /*  3120 */    99,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*  3130 */   148,  259,  415,  368,  260,  106,  415,  415,  415,  138,
 /*  3140 */   163,  271,  157,  194,  207,  161,  346,  169,  173,  396,
 /*  3150 */    87,  148,  259,  191,  415,  415,  415,  415,  415,  415,
 /*  3160 */   415,  415,  415,  415,  453,  142,   99,  150,  194,  207,
 /*  3170 */   161,  346,  169,  173,  396,   87,  148,  259,  415,  368,
 /*  3180 */   260,  106,  415,  415,  415,  138,  163,  271,  415,  415,
 /*  3190 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  192,
 /*  3200 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*  3210 */   453,  142,   99,  150,  194,  207,  161,  346,  169,  173,
 /*  3220 */   396,   87,  148,  259,  415,  368,  415,  260,  106,  415,
 /*  3230 */   415,  415,  138,  163,  271,  415,  415,  415,  415,  415,
 /*  3240 */   415,  415,  415,  415,  415,  415,  175,  415,  415,  415,
 /*  3250 */   415,  415,  415,  415,  415,  415,  415,  453,  142,   99,
 /*  3260 */   150,  194,  207,  161,  346,  169,  173,  396,   87,  148,
 /*  3270 */   259,  415,  368,  260,  106,  415,  415,  415,  138,  163,
 /*  3280 */   271,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*  3290 */   415,  415,  198,  415,  415,  415,  415,  415,  415,  415,
 /*  3300 */   415,  415,  415,  453,  142,   99,  150,  194,  207,  161,
 /*  3310 */   346,  169,  173,  396,   87,  148,  259,  415,  368,  260,
 /*  3320 */   106,  415,  415,  415,  138,  163,  271,  415,  415,  415,
 /*  3330 */   415,  415,  415,  415,  415,  415,  415,  415,  168,  415,
 /*  3340 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  453,
 /*  3350 */   142,   99,  150,  194,  207,  161,  346,  169,  173,  396,
 /*  3360 */    87,  148,  259,  415,  368,  415,  260,  106,  415,  415,
 /*  3370 */   415,  138,  163,  271,  415,  415,  415,  415,  415,  415,
 /*  3380 */   415,  415,  415,  415,  415,  197,  415,  415,  415,  415,
 /*  3390 */   415,  415,  415,  415,  415,  415,  453,  142,   99,  150,
 /*  3400 */   194,  207,  161,  346,  169,  173,  396,   87,  148,  259,
 /*  3410 */   415,  368,  260,  106,  415,  415,  415,  138,  163,  271,
 /*  3420 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*  3430 */   415,  202,  415,  415,  415,  415,  415,  415,  415,  415,
 /*  3440 */   415,  415,  453,  142,   99,  150,  194,  207,  161,  346,
 /*  3450 */   169,  173,  396,   87,  148,  259,  415,  368,  260,  106,
 /*  3460 */   415,  415,  415,  138,  163,  271,  415,  415,  415,  415,
 /*  3470 */   415,  415,  415,  415,  415,  415,  415,  182,  415,  415,
 /*  3480 */   415,  415,  415,  415,  415,  415,  415,  415,  453,  142,
 /*  3490 */    99,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*  3500 */   148,  259,  415,  368,  415,  260,  106,  415,  415,  415,
 /*  3510 */   138,  163,  271,  415,  415,  415,  415,  415,  415,  415,
 /*  3520 */   415,  415,  415,  415,  184,  415,  415,  415,  415,  415,
 /*  3530 */   415,  415,  415,  415,  415,  453,  142,   99,  150,  194,
 /*  3540 */   207,  161,  346,  169,  173,  396,   87,  148,  259,  415,
 /*  3550 */   368,  260,  106,  415,  415,  403,  138,  163,  271,  415,
 /*  3560 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*  3570 */   181,   34,  415,   81,   64,   68,   63,   67,  415,   66,
 /*  3580 */   415,  453,  142,   99,  150,  194,  207,  161,  346,  169,
 /*  3590 */   173,  396,   87,  148,  259,  415,  368,  415,  415,  415,
 /*  3600 */   403,  415,  415,  415,   53,  264,  415,  415,  415,  415,
 /*  3610 */   415,  415,  415,  415,  415,  415,   34,  415,   81,  415,
 /*  3620 */   415,  415,  415,  415,  260,  415,  415,   90,   91,  415,
 /*  3630 */   415,   84,   83,   85,   86,   82,  415,  415,  261,  244,
 /*  3640 */   255,  253,  402,  405,  404,  286,   46,   57,   58,   56,
 /*  3650 */    54,   50,   49,   55,   51,   52,   65,  151,  194,  207,
 /*  3660 */   161,  346,  169,  173,  396,   87,  148,  259,  415,  260,
 /*  3670 */   415,  415,   90,   91,  415,  415,   84,   83,   85,   86,
 /*  3680 */    82,  415,  415,  261,  244,  255,  253,  402,  405,  404,
 /*  3690 */   286,  260,  415,  415,  415,  415,  415,  415,  415,  465,
 /*  3700 */   142,  415,  150,  194,  207,  161,  346,  169,  173,  396,
 /*  3710 */    87,  148,  259,  260,  415,  415,  415,  415,  415,  415,
 /*  3720 */   415,  341,  142,  415,  150,  194,  207,  161,  346,  169,
 /*  3730 */   173,  396,   87,  148,  259,  415,  415,  415,  260,  415,
 /*  3740 */   415,  415,  415,  415,  147,  415,  150,  194,  207,  161,
 /*  3750 */   346,  169,  173,  396,   87,  148,  259,  415,  415,  415,
 /*  3760 */   415,  260,  415,  415,  415,  415,  415,  415,  415,  146,
 /*  3770 */   415,  150,  194,  207,  161,  346,  169,  173,  396,   87,
 /*  3780 */   148,  259,  260,  415,  415,  415,  415,  415,  415,  415,
 /*  3790 */   415,  415,  143,  260,  150,  194,  207,  161,  346,  169,
 /*  3800 */   173,  396,   87,  148,  259,  415,  260,  415,  415,  415,
 /*  3810 */   415,  415,  415,  415,  415,  154,  194,  207,  161,  346,
 /*  3820 */   169,  173,  396,   87,  148,  259,  415,  172,  207,  161,
 /*  3830 */   346,  169,  173,  396,   87,  148,  259,  260,  415,  415,
 /*  3840 */   189,  207,  161,  346,  169,  173,  396,   87,  148,  259,
 /*  3850 */   415,  415,  415,  415,  415,  260,  415,  415,  415,  415,
 /*  3860 */   415,  415,  415,  415,  260,  415,  415,  415,  415,  415,
 /*  3870 */   415,  177,  207,  161,  346,  169,  173,  396,   87,  148,
 /*  3880 */   259,  415,  415,  415,  415,  415,  415,  415,  415,  174,
 /*  3890 */   207,  161,  346,  169,  173,  396,   87,  148,  259,  171,
 /*  3900 */   161,  346,  169,  173,  396,   87,  148,  259,
    );
    static public $yy_lookahead = array(
 /*     0 */    17,   18,   19,   20,   21,   22,   23,   24,   18,   26,
 /*    10 */    27,   28,   88,   89,   31,   34,   18,   34,   25,   36,
 /*    20 */    37,   38,   29,   30,   43,  111,   43,  113,  133,   11,
 /*    30 */    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*    40 */    57,   20,   32,   60,   21,   35,   63,   64,   65,   66,
 /*    50 */    67,   33,   34,   70,   71,   72,   73,   74,  163,  164,
 /*    60 */    20,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*    70 */   175,  176,   32,   90,   91,   94,   95,   94,   95,   96,
 /*    80 */    97,   98,   61,   62,  101,  102,  103,  104,  105,  106,
 /*    90 */   107,  108,   94,  110,  111,  112,  113,   17,   18,   19,
 /*   100 */    20,   21,   22,   23,   24,  133,   26,   27,   28,  139,
 /*   110 */   140,   31,  140,  133,   34,  135,   36,   37,   38,   11,
 /*   120 */   140,   43,  111,   43,  113,  133,   33,   47,   48,   49,
 /*   130 */    50,   51,   52,   53,   54,   55,   56,   57,   20,   34,
 /*   140 */    60,   33,   34,   63,   64,   65,   66,   67,  178,   32,
 /*   150 */    70,   71,   72,   73,   74,  163,  164,   40,  166,  167,
 /*   160 */   168,  169,  170,  171,  172,  173,  174,  175,  176,   18,
 /*   170 */    90,   91,   94,   95,   94,   95,   96,   97,   98,   61,
 /*   180 */    62,  101,  102,  103,  104,  105,  106,  107,  108,   32,
 /*   190 */   110,  111,  112,  113,   17,   18,   19,   40,   21,   22,
 /*   200 */    23,   24,  109,   37,    3,    4,    5,    6,   31,    8,
 /*   210 */    19,   34,   21,   36,   37,   38,   11,   39,   40,  133,
 /*   220 */    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
 /*   230 */    53,   54,   55,   56,   57,   21,   34,   60,   33,   35,
 /*   240 */    63,   64,   65,   66,   67,   94,   32,   70,   71,   72,
 /*   250 */    73,   74,  166,  167,  168,  169,  170,  171,  172,  173,
 /*   260 */   174,  175,  176,   32,   86,   87,   35,   90,   91,   25,
 /*   270 */    68,   94,   95,   96,   97,   98,   33,   34,  101,  102,
 /*   280 */   103,  104,  105,  106,  107,  108,   85,  110,  111,  112,
 /*   290 */   113,   17,   18,   19,   20,   21,   22,   23,   24,   97,
 /*   300 */    98,   99,  100,   18,   32,   31,   21,   35,   34,   21,
 /*   310 */    36,   37,   38,   22,   23,   24,   19,   43,   21,  133,
 /*   320 */    32,   47,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   330 */    56,   57,   90,   91,   60,   33,   34,   63,   64,   65,
 /*   340 */    66,   67,   18,   32,   70,   71,   72,   73,   74,  163,
 /*   350 */   164,   40,  166,  167,  168,  169,  170,  171,  172,  173,
 /*   360 */   174,  175,  176,   18,   90,   91,   21,   35,   94,   95,
 /*   370 */    96,   97,   98,   18,   19,  101,  102,  103,  104,  105,
 /*   380 */   106,  107,  108,   11,  110,  111,  112,  113,   17,   18,
 /*   390 */    19,   20,   21,   22,   23,   24,   18,   21,   92,   93,
 /*   400 */    94,   32,   31,   19,   35,   34,   21,   36,   37,   38,
 /*   410 */    19,  109,   21,   25,   43,   37,  133,   32,   47,   48,
 /*   420 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   32,
 /*   430 */    21,   60,   35,   33,   63,   64,   65,   66,   67,  155,
 /*   440 */   156,   70,   71,   72,   73,   74,  163,  164,   11,  166,
 /*   450 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*   460 */    21,   90,   91,   45,   46,   94,   95,   96,   97,   98,
 /*   470 */    33,   32,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   480 */    34,  110,  111,  112,  113,   17,   18,   19,   20,   21,
 /*   490 */    22,   23,   24,   21,  141,  142,  143,  109,   18,   31,
 /*   500 */    18,   21,   34,   21,   36,   37,   38,   32,   18,  109,
 /*   510 */    35,   43,   34,  133,   19,   47,   48,   49,   50,   51,
 /*   520 */    52,   53,   54,   55,   56,   57,   36,   37,   60,  136,
 /*   530 */    33,   63,   64,   65,   66,   67,   25,  144,   70,   71,
 /*   540 */    72,   73,   74,  163,  164,   21,  166,  167,  168,  169,
 /*   550 */   170,  171,  172,  173,  174,  175,  176,   32,   90,   91,
 /*   560 */    35,   44,   94,   95,   96,   97,   98,  150,  151,  101,
 /*   570 */   102,  103,  104,  105,  106,  107,  108,   21,  110,  111,
 /*   580 */   112,  113,   17,   18,   19,   20,   21,   22,   23,   24,
 /*   590 */    18,   32,   32,  135,   35,   35,   31,   34,  140,   34,
 /*   600 */    34,   36,   37,   38,   34,   18,  135,   18,   43,   37,
 /*   610 */   133,  140,   47,   48,   49,   50,   51,   52,   53,   54,
 /*   620 */    55,   56,   57,   36,   37,   60,   37,   51,   63,   64,
 /*   630 */    65,   66,   67,  131,  132,   70,   71,   72,   73,   74,
 /*   640 */   163,  164,   21,  166,  167,  168,  169,  170,  171,  172,
 /*   650 */   173,  174,  175,  176,   39,   90,   91,  136,   18,   94,
 /*   660 */    95,   96,   97,   98,  109,  144,  101,  102,  103,  104,
 /*   670 */   105,  106,  107,  108,   11,  110,  111,  112,  113,   17,
 /*   680 */    18,   19,   20,   21,   22,   23,   24,   18,   18,  136,
 /*   690 */    20,  142,  143,   31,  159,  160,   34,  144,   36,   37,
 /*   700 */    38,   18,   19,  135,   37,   43,   37,  133,  140,   47,
 /*   710 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   720 */    40,   35,   60,   35,   69,   63,   64,   65,   66,   67,
 /*   730 */    18,  136,   70,   71,   72,   73,   74,  163,  164,  144,
 /*   740 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*   750 */   176,   18,   90,   91,   39,   18,   94,   95,   96,   97,
 /*   760 */    98,   34,   37,  101,  102,  103,  104,  105,  106,  107,
 /*   770 */   108,   18,  110,  111,  112,  113,   17,   18,   19,   20,
 /*   780 */    21,   22,   23,   24,   32,   11,   69,   21,   33,   94,
 /*   790 */    31,   34,   34,   34,  113,   36,   37,   38,  111,   39,
 /*   800 */    39,  111,   43,   25,  133,   21,   47,   48,   49,   50,
 /*   810 */    51,   52,   53,   54,   55,   56,   57,   34,   39,   60,
 /*   820 */    43,   34,   63,   64,   65,   66,   67,  111,   40,   70,
 /*   830 */    71,   72,   73,   74,  163,  164,   21,  166,  167,  168,
 /*   840 */   169,  170,  171,  172,  173,  174,  175,  176,   18,   90,
 /*   850 */    91,   35,   34,   94,   95,   96,   97,   98,   39,    2,
 /*   860 */   101,  102,  103,  104,  105,  106,  107,  108,   40,  110,
 /*   870 */   111,  112,  113,   17,   18,   19,   20,   21,   22,   23,
 /*   880 */    24,   18,   40,   39,   18,   35,   19,   31,  137,  124,
 /*   890 */    34,  129,   36,   37,   38,   58,  140,  133,  122,   43,
 /*   900 */   137,  133,  133,   47,   48,   49,   50,   51,   52,   53,
 /*   910 */    54,   55,   56,   57,  122,  130,   60,  137,  137,   63,
 /*   920 */    64,   65,   66,   67,  130,  132,   70,   71,   72,   73,
 /*   930 */    74,  163,  164,  137,  166,  167,  168,  169,  170,  171,
 /*   940 */   172,  173,  174,  175,  176,  137,   90,   91,  137,  137,
 /*   950 */    94,   95,   96,   97,   98,  156,   19,  101,  102,  103,
 /*   960 */   104,  105,  106,  107,  108,  160,  110,  111,  112,  113,
 /*   970 */    17,   18,   19,   20,   21,   22,   23,   24,  137,   18,
 /*   980 */   137,  119,  179,  179,   31,  179,  179,   34,  179,   36,
 /*   990 */    37,   38,  179,  179,  179,  179,   43,  179,  133,  179,
 /*  1000 */    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*  1010 */    57,  179,  179,   60,  179,  179,   63,   64,   65,   66,
 /*  1020 */    67,  179,  179,   70,   71,   72,   73,   74,  163,  164,
 /*  1030 */   179,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  1040 */   175,  176,  179,   90,   91,  179,  179,   94,   95,   96,
 /*  1050 */    97,   98,  179,  179,  101,  102,  103,  104,  105,  106,
 /*  1060 */   107,  108,  179,  110,  111,  112,  113,   17,   18,   19,
 /*  1070 */    20,   21,   22,   23,   24,  179,  179,  179,  179,  179,
 /*  1080 */   179,   31,  179,  179,   34,  179,   36,   37,   38,  179,
 /*  1090 */   179,  179,  179,   43,  179,  133,  179,   47,   48,   49,
 /*  1100 */    50,   51,   52,   53,   54,   55,   56,   57,  179,  179,
 /*  1110 */    60,  179,  179,   63,   64,   65,   66,   67,  179,  179,
 /*  1120 */    70,   71,   72,   73,   74,  163,  164,  179,  166,  167,
 /*  1130 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  1140 */    90,   91,  179,  179,   94,   95,   96,   97,   98,  179,
 /*  1150 */   179,  101,  102,  103,  104,  105,  106,  107,  108,  179,
 /*  1160 */   110,  111,  112,  113,   17,   18,   19,   18,   21,   22,
 /*  1170 */    23,   24,  179,  179,  179,  179,  179,  179,   31,  179,
 /*  1180 */   179,   34,  179,   36,   37,   38,   37,  179,  179,  179,
 /*  1190 */    43,   42,  133,  179,   47,   48,   49,   50,   51,   52,
 /*  1200 */    53,   54,   55,   56,   57,  179,  179,   60,  179,  179,
 /*  1210 */    63,   64,   65,   66,   67,  179,  179,   70,   71,   72,
 /*  1220 */    73,   74,  163,  164,  179,  166,  167,  168,  169,  170,
 /*  1230 */   171,  172,  173,  174,  175,  176,  179,   90,   91,  179,
 /*  1240 */   179,   94,   95,   96,   97,   98,  179,  179,  101,  102,
 /*  1250 */   103,  104,  105,  106,  107,  108,  179,  110,  111,  112,
 /*  1260 */   113,   17,   18,   19,   18,   21,   22,   23,   24,  134,
 /*  1270 */   179,  179,  179,  179,  139,  140,  179,  179,   34,  179,
 /*  1280 */    36,   37,   38,   37,   22,   23,  179,   43,   42,  133,
 /*  1290 */   179,  179,  179,   31,   50,   51,   52,   53,   54,   55,
 /*  1300 */    56,   57,   40,   41,   60,  179,  179,   63,   64,   65,
 /*  1310 */    66,   67,  177,  178,   70,   71,   72,   73,   74,  163,
 /*  1320 */   164,  179,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  1330 */   174,  175,  176,  179,   90,   91,  179,  179,   94,   95,
 /*  1340 */    96,   97,   98,  179,  179,  101,  102,  103,  104,  105,
 /*  1350 */   106,  107,  108,  179,  110,  111,  112,  113,  179,  117,
 /*  1360 */   118,  179,  120,  121,  179,  123,  124,  125,  126,  127,
 /*  1370 */   128,   35,  179,   37,  179,  133,  134,  179,  179,   43,
 /*  1380 */   138,  139,  140,   22,   23,  179,  179,  179,  179,  147,
 /*  1390 */   179,  179,   31,  133,  152,  153,  154,  179,  179,  179,
 /*  1400 */   158,  179,   41,  161,  162,  163,  164,  165,  166,  167,
 /*  1410 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  1420 */   178,  179,  117,  118,  179,  120,  121,  179,  123,  124,
 /*  1430 */   170,  171,  172,  173,  174,  175,  176,  179,  133,  134,
 /*  1440 */   179,  179,  179,  138,  139,  140,  110,  111,  112,  113,
 /*  1450 */   179,  179,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1460 */   133,  179,  179,  158,  179,  179,  161,  162,  163,  164,
 /*  1470 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  1480 */   175,  176,  179,  178,  117,  118,  179,  120,  121,  179,
 /*  1490 */   123,  124,  179,  126,  127,  128,  179,  179,  171,  172,
 /*  1500 */   133,  134,  175,  176,  179,  138,  139,  140,  179,   37,
 /*  1510 */   133,  179,   40,  179,  147,   43,  179,  134,  179,  152,
 /*  1520 */   153,  154,  139,  140,  179,  158,  179,  133,  161,  162,
 /*  1530 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  1540 */   173,  174,  175,  176,  179,  178,  169,  170,  171,  172,
 /*  1550 */   173,  174,  175,  176,  115,  116,  117,  118,  179,  120,
 /*  1560 */   121,  178,  123,  124,  170,  171,  172,  173,  174,  175,
 /*  1570 */   176,  179,  133,  134,  179,  179,  179,  138,  139,  140,
 /*  1580 */   179,  179,  110,  111,  112,  113,  147,  179,  179,  179,
 /*  1590 */   133,  152,  153,  154,  179,  179,  179,  158,  179,  179,
 /*  1600 */   161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  1610 */   171,  172,  173,  174,  175,  176,  179,  178,  116,  117,
 /*  1620 */   118,  179,  120,  121,  179,  123,  124,   18,  171,  172,
 /*  1630 */   173,  174,  175,  176,   18,  133,  134,  179,  179,  179,
 /*  1640 */   138,  139,  140,   34,   35,  179,   37,  179,  179,  147,
 /*  1650 */    34,  179,  179,   37,  152,  153,  154,  179,   42,  179,
 /*  1660 */   158,  179,  133,  161,  162,  163,  164,  165,  166,  167,
 /*  1670 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  1680 */   178,  179,  179,  179,  179,  179,  179,  179,  179,  116,
 /*  1690 */   117,  118,  179,  120,  121,  179,  123,  124,  169,  170,
 /*  1700 */   171,  172,  173,  174,  175,  176,  133,  134,  179,  179,
 /*  1710 */   179,  138,  139,  140,  105,  106,  107,  108,  179,  179,
 /*  1720 */   147,  105,  106,  107,  108,  152,  153,  154,  179,  179,
 /*  1730 */   179,  158,  179,  179,  161,  162,  163,  164,  165,  166,
 /*  1740 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  1750 */   179,  178,  116,  117,  118,  179,  120,  121,  179,  123,
 /*  1760 */   124,   18,   37,  179,  179,   40,  179,  179,   43,  133,
 /*  1770 */   134,  179,  179,  179,  138,  139,  140,   34,  133,  179,
 /*  1780 */    37,  179,  179,  147,  179,  179,  179,  179,  152,  153,
 /*  1790 */   154,  179,  179,  179,  158,  179,  179,  161,  162,  163,
 /*  1800 */   164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  1810 */   174,  175,  176,  179,  178,  170,  171,  172,  173,  174,
 /*  1820 */   175,  176,  179,  116,  117,  118,   18,  120,  121,  179,
 /*  1830 */   123,  124,  179,  179,  179,  110,  111,  112,  113,  179,
 /*  1840 */   133,  134,   34,  179,  179,  138,  139,  140,  105,  106,
 /*  1850 */   107,  108,  179,  179,  147,  179,  179,  133,  179,  152,
 /*  1860 */   153,  154,  179,  179,  179,  158,  179,  179,  161,  162,
 /*  1870 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  1880 */   173,  174,  175,  176,  179,  178,  116,  117,  118,  179,
 /*  1890 */   120,  121,  179,  123,  124,  171,  172,  173,  174,  175,
 /*  1900 */   176,  179,  179,  133,  134,  179,  179,  179,  138,  139,
 /*  1910 */   140,  133,  179,  105,  106,  107,  108,  147,  179,  179,
 /*  1920 */   179,  179,  152,  153,  154,  179,  179,  179,  158,  179,
 /*  1930 */   179,  161,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  1940 */   170,  171,  172,  173,  174,  175,  176,  179,  178,  171,
 /*  1950 */   172,  173,  174,  175,  176,  179,  179,  116,  117,  118,
 /*  1960 */   179,  120,  121,  179,  123,  124,  179,  179,  179,  179,
 /*  1970 */   179,  179,  179,   37,  133,  134,  179,  179,  179,  138,
 /*  1980 */   139,  140,  179,  179,  179,  179,  179,  179,  147,  179,
 /*  1990 */   179,  133,  179,  152,  153,  154,  179,  179,  179,  158,
 /*  2000 */   179,  179,  161,  162,  163,  164,  165,  166,  167,  168,
 /*  2010 */   169,  170,  171,  172,  173,  174,  175,  176,  179,  178,
 /*  2020 */   116,  117,  118,  179,  120,  121,  179,  123,  124,  171,
 /*  2030 */   172,  173,  174,  175,  176,  179,  179,  133,  134,  179,
 /*  2040 */   179,  179,  138,  139,  140,  133,  110,  111,  112,  113,
 /*  2050 */   179,  147,  179,  179,  179,  179,  152,  153,  154,  179,
 /*  2060 */   179,  179,  158,  179,  179,  161,  162,  163,  164,  165,
 /*  2070 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  2080 */   176,  179,  178,  171,  172,  173,  174,  175,  176,  179,
 /*  2090 */   179,  116,  117,  118,  179,  120,  121,  179,  123,  124,
 /*  2100 */   179,  179,  179,  179,  179,  179,  179,  179,  133,  134,
 /*  2110 */   179,  179,  179,  138,  139,  140,  179,  179,  179,  179,
 /*  2120 */   179,  179,  147,  179,  179,  133,  179,  152,  153,  154,
 /*  2130 */   179,  179,  179,  158,  179,  179,  161,  162,  163,  164,
 /*  2140 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  2150 */   175,  176,  179,  178,  116,  117,  118,  179,  120,  121,
 /*  2160 */   179,  123,  124,  171,  172,  173,  174,  175,  176,  179,
 /*  2170 */   179,  133,  134,  179,  179,  179,  138,  139,  140,  133,
 /*  2180 */   179,  179,  179,  179,  179,  147,  179,  179,  179,  179,
 /*  2190 */   152,  153,  154,  179,  179,  179,  158,  179,  179,  161,
 /*  2200 */   162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  2210 */   172,  173,  174,  175,  176,  179,  178,  171,  172,  173,
 /*  2220 */   174,  175,  176,  179,  179,  116,  117,  118,  179,  120,
 /*  2230 */   121,  179,  123,  124,  179,  179,  179,  179,  179,  179,
 /*  2240 */    37,  179,  133,  134,  179,  179,   43,  138,  139,  140,
 /*  2250 */   179,  179,  179,  179,  179,  179,  147,  179,  179,  133,
 /*  2260 */   179,  152,  153,  154,  179,  179,  179,  158,  179,  179,
 /*  2270 */   161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  2280 */   171,  172,  173,  174,  175,  176,  179,  178,  179,  117,
 /*  2290 */   118,  179,  120,  121,  179,  123,  124,  171,  172,  179,
 /*  2300 */   179,  175,  176,  179,   18,  133,  134,  179,  179,  179,
 /*  2310 */   138,  139,  140,  110,  111,  112,  113,  179,  179,  147,
 /*  2320 */    34,   35,   36,   37,  152,  153,  154,  179,  179,   43,
 /*  2330 */   158,  179,  179,  161,  162,  163,  164,  165,  166,  167,
 /*  2340 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  2350 */   178,  179,   66,   67,   18,  179,   70,   71,   72,   73,
 /*  2360 */    74,  134,  179,  179,  179,  179,  139,  140,  179,  179,
 /*  2370 */    34,  179,   36,   37,  179,  179,   90,   91,  179,   43,
 /*  2380 */    94,   95,   96,   97,   98,  179,  179,  101,  102,  103,
 /*  2390 */   104,  105,  106,  107,  108,   59,  110,  111,  112,  113,
 /*  2400 */    18,  179,   66,   67,  177,  178,   70,   71,   72,   73,
 /*  2410 */    74,  179,  179,  179,  179,  179,   34,  133,   36,   37,
 /*  2420 */   179,  179,  179,  179,  179,  179,   90,   91,  179,  179,
 /*  2430 */    94,   95,   96,   97,   98,  179,  179,  101,  102,  103,
 /*  2440 */   104,  105,  106,  107,  108,   18,  110,  111,  112,  113,
 /*  2450 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  2460 */   176,   34,   35,   36,   37,  179,  179,  179,  179,  179,
 /*  2470 */    43,  133,   90,   91,  179,  179,   94,   95,   96,   97,
 /*  2480 */    98,  179,  179,  101,  102,  103,  104,  105,  106,  107,
 /*  2490 */   108,  179,  179,   66,   67,  179,  179,   70,   71,   72,
 /*  2500 */    73,   74,  164,  179,  166,  167,  168,  169,  170,  171,
 /*  2510 */   172,  173,  174,  175,  176,  179,  179,   90,   91,  179,
 /*  2520 */   179,   94,   95,   96,   97,   98,  179,  179,  101,  102,
 /*  2530 */   103,  104,  105,  106,  107,  108,  179,  110,  111,  112,
 /*  2540 */   113,   18,  133,  134,   21,  179,  179,  138,  139,  140,
 /*  2550 */   179,  179,  179,  179,  179,  179,  179,   34,  179,   36,
 /*  2560 */    37,  152,  179,  179,  179,  179,   43,  179,  133,  179,
 /*  2570 */   179,  179,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  2580 */   171,  172,  173,  174,  175,  176,  179,  178,  179,   66,
 /*  2590 */    67,  179,  179,   70,   71,   72,   73,   74,  163,  164,
 /*  2600 */   179,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  2610 */   175,  176,  179,   90,   91,  179,  179,   94,   95,   96,
 /*  2620 */    97,   98,  179,  179,  101,  102,  103,  104,  105,  106,
 /*  2630 */   107,  108,   18,  110,  111,  112,  113,  179,  179,  134,
 /*  2640 */   179,   22,   23,   24,  139,  140,  179,  179,   34,  179,
 /*  2650 */    36,   37,  179,  179,  179,   36,   37,   43,  179,  133,
 /*  2660 */   179,  179,   43,  134,  179,  179,  179,  179,  139,  140,
 /*  2670 */   179,  179,  179,  179,  145,  146,  179,  179,  179,  179,
 /*  2680 */    66,   67,  179,  178,   70,   71,   72,   73,   74,   70,
 /*  2690 */    71,   72,   73,   74,  168,  169,  170,  171,  172,  173,
 /*  2700 */   174,  175,  176,  179,   90,   91,  179,  178,   94,   95,
 /*  2710 */    96,   97,   98,  179,  179,  101,  102,  103,  104,  105,
 /*  2720 */   106,  107,  108,  133,  110,  111,  112,  113,  179,  110,
 /*  2730 */   111,  112,  113,  118,  179,  120,  121,  179,  123,  124,
 /*  2740 */   179,  179,  179,  179,  179,  179,  179,  179,  133,  134,
 /*  2750 */   179,  179,  179,  138,  139,  140,  166,  167,  168,  169,
 /*  2760 */   170,  171,  172,  173,  174,  175,  176,  152,  153,  154,
 /*  2770 */   179,  179,  179,  158,  179,  179,  161,  162,  163,  164,
 /*  2780 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  2790 */   175,  176,  179,  178,  179,  179,  179,  179,  179,  118,
 /*  2800 */    18,  120,  121,  179,  123,  124,  179,  179,  179,  179,
 /*  2810 */   179,  179,  179,  179,  133,  134,   34,  179,  179,  138,
 /*  2820 */   139,  140,  134,  179,  134,  179,  134,  139,  140,  139,
 /*  2830 */   140,  139,  140,  152,  153,  154,  146,  179,  179,  158,
 /*  2840 */   179,  179,  161,  162,  163,  164,  165,  166,  167,  168,
 /*  2850 */   169,  170,  171,  172,  173,  174,  175,  176,  118,  178,
 /*  2860 */   120,  121,  179,  123,  124,  179,  178,  179,  178,  179,
 /*  2870 */   178,  179,  179,  133,  134,  179,  179,  179,  138,  139,
 /*  2880 */   140,  179,  179,  101,  102,  103,  104,  105,  106,  107,
 /*  2890 */   108,  179,  152,  153,  154,  179,  179,  179,  158,  179,
 /*  2900 */   179,  161,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  2910 */   170,  171,  172,  173,  174,  175,  176,  179,  178,  179,
 /*  2920 */   118,  179,  120,  121,  179,  123,  124,  179,  179,  179,
 /*  2930 */   179,  179,  179,  179,  179,  133,  134,  179,  179,  134,
 /*  2940 */   138,  139,  140,  179,  139,  140,  179,  179,  179,  179,
 /*  2950 */   179,  179,  179,  179,  152,  153,  154,  179,  179,  179,
 /*  2960 */   158,  179,  179,  161,  162,  163,  164,  165,  166,  167,
 /*  2970 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  118,
 /*  2980 */   178,  120,  121,  178,  123,  124,  179,  179,  179,  179,
 /*  2990 */   179,  179,  179,  179,  133,  134,  179,  179,  134,  138,
 /*  3000 */   139,  140,  179,  139,  140,  134,  179,  179,  179,  179,
 /*  3010 */   139,  140,  179,  152,  153,  154,  179,  179,  179,  158,
 /*  3020 */   179,  179,  161,  162,  163,  164,  165,  166,  167,  168,
 /*  3030 */   169,  170,  171,  172,  173,  174,  175,  176,  179,  178,
 /*  3040 */   133,  134,  178,  179,  179,  138,  139,  140,  179,  178,
 /*  3050 */   179,  124,  179,  179,  179,  179,  179,  179,  179,  152,
 /*  3060 */   179,  134,  179,  179,  157,  138,  139,  140,  179,  179,
 /*  3070 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  3080 */   173,  174,  175,  176,  179,  178,  179,  179,  133,  134,
 /*  3090 */   179,  179,  165,  138,  139,  140,  179,  179,  179,  179,
 /*  3100 */   179,  179,  179,  179,  179,  178,  179,  152,  179,  133,
 /*  3110 */   179,  179,  179,  179,  179,  179,  179,  179,  163,  164,
 /*  3120 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3130 */   175,  176,  179,  178,  133,  134,  179,  179,  179,  138,
 /*  3140 */   139,  140,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  3150 */   174,  175,  176,  152,  179,  179,  179,  179,  179,  179,
 /*  3160 */   179,  179,  179,  179,  163,  164,  165,  166,  167,  168,
 /*  3170 */   169,  170,  171,  172,  173,  174,  175,  176,  179,  178,
 /*  3180 */   133,  134,  179,  179,  179,  138,  139,  140,  179,  179,
 /*  3190 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  152,
 /*  3200 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3210 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  3220 */   173,  174,  175,  176,  179,  178,  179,  133,  134,  179,
 /*  3230 */   179,  179,  138,  139,  140,  179,  179,  179,  179,  179,
 /*  3240 */   179,  179,  179,  179,  179,  179,  152,  179,  179,  179,
 /*  3250 */   179,  179,  179,  179,  179,  179,  179,  163,  164,  165,
 /*  3260 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  3270 */   176,  179,  178,  133,  134,  179,  179,  179,  138,  139,
 /*  3280 */   140,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3290 */   179,  179,  152,  179,  179,  179,  179,  179,  179,  179,
 /*  3300 */   179,  179,  179,  163,  164,  165,  166,  167,  168,  169,
 /*  3310 */   170,  171,  172,  173,  174,  175,  176,  179,  178,  133,
 /*  3320 */   134,  179,  179,  179,  138,  139,  140,  179,  179,  179,
 /*  3330 */   179,  179,  179,  179,  179,  179,  179,  179,  152,  179,
 /*  3340 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  163,
 /*  3350 */   164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  3360 */   174,  175,  176,  179,  178,  179,  133,  134,  179,  179,
 /*  3370 */   179,  138,  139,  140,  179,  179,  179,  179,  179,  179,
 /*  3380 */   179,  179,  179,  179,  179,  152,  179,  179,  179,  179,
 /*  3390 */   179,  179,  179,  179,  179,  179,  163,  164,  165,  166,
 /*  3400 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  3410 */   179,  178,  133,  134,  179,  179,  179,  138,  139,  140,
 /*  3420 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3430 */   179,  152,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3440 */   179,  179,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  3450 */   171,  172,  173,  174,  175,  176,  179,  178,  133,  134,
 /*  3460 */   179,  179,  179,  138,  139,  140,  179,  179,  179,  179,
 /*  3470 */   179,  179,  179,  179,  179,  179,  179,  152,  179,  179,
 /*  3480 */   179,  179,  179,  179,  179,  179,  179,  179,  163,  164,
 /*  3490 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3500 */   175,  176,  179,  178,  179,  133,  134,  179,  179,  179,
 /*  3510 */   138,  139,  140,  179,  179,  179,  179,  179,  179,  179,
 /*  3520 */   179,  179,  179,  179,  152,  179,  179,  179,  179,  179,
 /*  3530 */   179,  179,  179,  179,  179,  163,  164,  165,  166,  167,
 /*  3540 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  179,
 /*  3550 */   178,  133,  134,  179,  179,   18,  138,  139,  140,  179,
 /*  3560 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*  3570 */   152,   34,  179,   36,    3,    4,    5,    6,  179,    8,
 /*  3580 */   179,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  3590 */   172,  173,  174,  175,  176,  179,  178,  179,  179,  179,
 /*  3600 */    18,  179,  179,  179,   33,   68,  179,  179,  179,  179,
 /*  3610 */   179,  179,  179,  179,  179,  179,   34,  179,   36,  179,
 /*  3620 */   179,  179,  179,  179,  133,  179,  179,   90,   91,  179,
 /*  3630 */   179,   94,   95,   96,   97,   98,  179,  179,  101,  102,
 /*  3640 */   103,  104,  105,  106,  107,  108,   75,   76,   77,   78,
 /*  3650 */    79,   80,   81,   82,   83,   84,   85,  166,  167,  168,
 /*  3660 */   169,  170,  171,  172,  173,  174,  175,  176,  179,  133,
 /*  3670 */   179,  179,   90,   91,  179,  179,   94,   95,   96,   97,
 /*  3680 */    98,  179,  179,  101,  102,  103,  104,  105,  106,  107,
 /*  3690 */   108,  133,  179,  179,  179,  179,  179,  179,  179,  163,
 /*  3700 */   164,  179,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  3710 */   174,  175,  176,  133,  179,  179,  179,  179,  179,  179,
 /*  3720 */   179,  163,  164,  179,  166,  167,  168,  169,  170,  171,
 /*  3730 */   172,  173,  174,  175,  176,  179,  179,  179,  133,  179,
 /*  3740 */   179,  179,  179,  179,  164,  179,  166,  167,  168,  169,
 /*  3750 */   170,  171,  172,  173,  174,  175,  176,  179,  179,  179,
 /*  3760 */   179,  133,  179,  179,  179,  179,  179,  179,  179,  164,
 /*  3770 */   179,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3780 */   175,  176,  133,  179,  179,  179,  179,  179,  179,  179,
 /*  3790 */   179,  179,  164,  133,  166,  167,  168,  169,  170,  171,
 /*  3800 */   172,  173,  174,  175,  176,  179,  133,  179,  179,  179,
 /*  3810 */   179,  179,  179,  179,  179,  166,  167,  168,  169,  170,
 /*  3820 */   171,  172,  173,  174,  175,  176,  179,  167,  168,  169,
 /*  3830 */   170,  171,  172,  173,  174,  175,  176,  133,  179,  179,
 /*  3840 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  3850 */   179,  179,  179,  179,  179,  133,  179,  179,  179,  179,
 /*  3860 */   179,  179,  179,  179,  133,  179,  179,  179,  179,  179,
 /*  3870 */   179,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  3880 */   176,  179,  179,  179,  179,  179,  179,  179,  179,  167,
 /*  3890 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  168,
 /*  3900 */   169,  170,  171,  172,  173,  174,  175,  176,
);
    const YY_SHIFT_USE_DFLT = -87;
    const YY_SHIFT_MAX = 286;
    static public $yy_shift_ofst = array(
 /*     0 */  1147,   80,  177,  -17, 1050,  662,  371,  274, 1147, 1147,
 /*    10 */  1147, 1147, 1147, 1147,  468,  759,  953,  856,  565, 1147,
 /*    20 */  1147, 1147, 1147, 1147, 1244, 1244, 1244, 1244, 1244, 2336,
 /*    30 */  2523, 2286, 2427, 2614, 2614, 2614, 2614, 2614, 2614, 2614,
 /*    40 */  2614, 2614, 2614, 3537, 3582, 3582, 3582, 3582, 3582, 3582,
 /*    50 */  3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582,
 /*    60 */  3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582,
 /*    70 */  3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582,
 /*    80 */  2382, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 2619, 1336,
 /*    90 */  2782, 2782, 1725, 1472, 2203, 2203, 2203, 2203, 2203, 2203,
 /*   100 */  2203, 2203, 1616, 1936, 1262, 1609, 1743, 1361,  118, 1149,
 /*   110 */  1246, 1149,  418,  670,  787,  837,  787,  787,  787, 1808,
 /*   120 */  1808,   -7,   21,  291,  355,  297,  297,  191,  391,  683,
 /*   130 */   297,  297,  297,  297,  297,  297,  297,  297,  669,  837,
 /*   140 */   961,  937, 3571,  201,  201,  202,  201,  201,  202,  202,
 /*   150 */   178,  178,  -19,  178,  178,  178,  178,  178,  490,  587,
 /*   160 */   306,  306,  302,   78,  306,   18,   78,  108,  231,  151,
 /*   170 */    93,  242,  -76,   -2,  -76,   10,  205,  -76,  475,  437,
 /*   180 */   480,  439,  397,  385,  525,  572,  589,  285,  482,  -76,
 /*   190 */    40,  559,  560,  400,  -76,  242,  345,  288,  272,  243,
 /*   200 */   -86,  214,  369,   11,  157,  311,  378,  242,  388,  117,
 /*   210 */   867,  511,  495,  478,  409,  446,  472,  524,  517,  621,
 /*   220 */   376,  570,  566,  556,  563,  576,  640,  -10,   23,  105,
 /*   230 */   332,  324,  204,  384,  372,  166,  244,  615,  850,  783,
 /*   240 */   777,  555,  716,  784,  779,  687,  681,  690,  778,  788,
 /*   250 */   815,  863,  842,  844,  866,  819,  828,  816,  818,  758,
 /*   260 */   555,  715,  737,  712,  655,  663,  680,  688,  725,  760,
 /*   270 */   761,  663,  695,  752,  774,  766,  497,  717,  755,  757,
 /*   280 */   753,  686,  667,  727,  733,  857,  830,
);
    const YY_REDUCE_USE_DFLT = -106;
    const YY_REDUCE_MAX = 141;
    static public $yy_reduce_ofst = array(
 /*     0 */  1439, 1242, 1305, 1367, 1904, 1841, 1502, 1707, 1770, 2038,
 /*    10 */  1636, 1573, 2109, 1975, 2172, 2172, 2172, 2172, 2172, 2172,
 /*    20 */  2172, 2172, 2172, 2172, 2740, 2861, 2681, 2802, 2615, 2907,
 /*    30 */  3233, 3186, 3140, 3094, 2409, 3186, 3279, 3325, 3372, 3418,
 /*    40 */  2955, 3001, 3047,   -8,  283,  477,  574,  768,  865,  380,
 /*    50 */  -105,  671,  962, 1156, 1059, 2435, 3558, 3536,  186, 3628,
 /*    60 */  2338, 3580, 3605, 2284, 2590,   86, 2976, 3649, 3491, 3704,
 /*    70 */  3660, 3673, 3722, 2526, 3731, 1377, 1529, 1645, 1260, 1394,
 /*    80 */  1858, 1858, 1912, 1778, 1457, 1724, 1992, 2046, 2927, 2529,
 /*    90 */  2126, 1327, 2227, 1135, 2690, 2864, 2505, 2871, 1383, 2805,
 /*   100 */  2692, 2688,  -20,  -30,  353,  -28,  -28,  549,  535,  568,
 /*   110 */   471,  458,  417,  502,  521,  284,  553,  595,  393,  769,
 /*   120 */   764,  762,  805,  765,  776,  841,  843,  792,  785,  794,
 /*   130 */   808,  796,  811,  812,  781,  763,  751,  780,  756,  799,
 /*   140 */   793,  862,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 1 */ array(17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 2 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 3 */ array(17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 4 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 5 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 6 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 7 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 8 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 9 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 10 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 11 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 12 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 13 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 14 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 15 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 16 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 17 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 18 */ array(17, 18, 19, 20, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 19 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 20 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 21 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 22 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 23 */ array(17, 18, 19, 21, 22, 23, 24, 31, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 24 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 25 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 26 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 27 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 28 */ array(17, 18, 19, 21, 22, 23, 24, 34, 36, 37, 38, 43, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 29 */ array(18, 34, 36, 37, 43, 59, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 30 */ array(18, 21, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 31 */ array(18, 34, 35, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 32 */ array(18, 34, 35, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 33 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 34 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 35 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 36 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 37 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 38 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 39 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 40 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 41 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 42 */ array(18, 34, 36, 37, 43, 66, 67, 70, 71, 72, 73, 74, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, ),
        /* 43 */ array(18, 34, 36, 68, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 44 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 45 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 46 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 47 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 48 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 49 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 50 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 51 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 52 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 53 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 54 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 55 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 56 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 57 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 58 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 59 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 60 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 61 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 62 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 63 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 64 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 65 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 66 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 67 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 68 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 69 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 70 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 71 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 72 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 73 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 74 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 75 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 76 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 77 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 78 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 79 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 80 */ array(18, 34, 36, 37, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 81 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 82 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 83 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 84 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 85 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 86 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 87 */ array(18, 34, 36, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 88 */ array(22, 23, 24, 36, 37, 43, 70, 71, 72, 73, 74, 110, 111, 112, 113, ),
        /* 89 */ array(35, 37, 43, 110, 111, 112, 113, ),
        /* 90 */ array(18, 34, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 91 */ array(18, 34, 101, 102, 103, 104, 105, 106, 107, 108, ),
        /* 92 */ array(37, 40, 43, 110, 111, 112, 113, ),
        /* 93 */ array(37, 40, 43, 110, 111, 112, 113, ),
        /* 94 */ array(37, 43, 110, 111, 112, 113, ),
        /* 95 */ array(37, 43, 110, 111, 112, 113, ),
        /* 96 */ array(37, 43, 110, 111, 112, 113, ),
        /* 97 */ array(37, 43, 110, 111, 112, 113, ),
        /* 98 */ array(37, 43, 110, 111, 112, 113, ),
        /* 99 */ array(37, 43, 110, 111, 112, 113, ),
        /* 100 */ array(37, 43, 110, 111, 112, 113, ),
        /* 101 */ array(37, 43, 110, 111, 112, 113, ),
        /* 102 */ array(18, 34, 37, 42, 105, 106, 107, 108, ),
        /* 103 */ array(37, 110, 111, 112, 113, ),
        /* 104 */ array(22, 23, 31, 40, 41, ),
        /* 105 */ array(18, 34, 35, 37, 105, 106, 107, 108, ),
        /* 106 */ array(18, 34, 37, 105, 106, 107, 108, ),
        /* 107 */ array(22, 23, 31, 41, ),
        /* 108 */ array(20, 61, 62, ),
        /* 109 */ array(18, 37, 42, ),
        /* 110 */ array(18, 37, 42, ),
        /* 111 */ array(18, 37, 42, ),
        /* 112 */ array(45, 46, ),
        /* 113 */ array(18, 20, ),
        /* 114 */ array(34, ),
        /* 115 */ array(58, ),
        /* 116 */ array(34, ),
        /* 117 */ array(34, ),
        /* 118 */ array(34, ),
        /* 119 */ array(18, 34, 105, 106, 107, 108, ),
        /* 120 */ array(18, 34, 105, 106, 107, 108, ),
        /* 121 */ array(25, 29, 30, ),
        /* 122 */ array(20, 61, 62, ),
        /* 123 */ array(22, 23, 24, ),
        /* 124 */ array(18, 19, ),
        /* 125 */ array(19, 21, ),
        /* 126 */ array(19, 21, ),
        /* 127 */ array(19, 21, ),
        /* 128 */ array(19, 21, ),
        /* 129 */ array(18, 19, ),
        /* 130 */ array(19, 21, ),
        /* 131 */ array(19, 21, ),
        /* 132 */ array(19, 21, ),
        /* 133 */ array(19, 21, ),
        /* 134 */ array(19, 21, ),
        /* 135 */ array(19, 21, ),
        /* 136 */ array(19, 21, ),
        /* 137 */ array(19, 21, ),
        /* 138 */ array(18, 37, ),
        /* 139 */ array(58, ),
        /* 140 */ array(18, ),
        /* 141 */ array(19, ),
        /* 142 */ array(3, 4, 5, 6, 8, 33, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ),
        /* 143 */ array(3, 4, 5, 6, 8, 85, ),
        /* 144 */ array(3, 4, 5, 6, 8, 85, ),
        /* 145 */ array(34, 68, 97, 98, 99, 100, ),
        /* 146 */ array(3, 4, 5, 6, 8, 85, ),
        /* 147 */ array(3, 4, 5, 6, 8, 85, ),
        /* 148 */ array(34, 68, 97, 98, 99, 100, ),
        /* 149 */ array(34, 68, 97, 98, 99, 100, ),
        /* 150 */ array(39, 40, 86, 87, ),
        /* 151 */ array(39, 40, 86, 87, ),
        /* 152 */ array(34, 43, 94, 95, ),
        /* 153 */ array(39, 40, 86, 87, ),
        /* 154 */ array(39, 40, 86, 87, ),
        /* 155 */ array(39, 40, 86, 87, ),
        /* 156 */ array(39, 40, 86, 87, ),
        /* 157 */ array(39, 40, 86, 87, ),
        /* 158 */ array(18, 36, 37, ),
        /* 159 */ array(18, 36, 37, ),
        /* 160 */ array(92, 93, 94, ),
        /* 161 */ array(92, 93, 94, ),
        /* 162 */ array(33, 34, 109, ),
        /* 163 */ array(43, 94, 95, ),
        /* 164 */ array(92, 93, 94, ),
        /* 165 */ array(11, 33, 34, ),
        /* 166 */ array(43, 94, 95, ),
        /* 167 */ array(11, 33, 34, ),
        /* 168 */ array(32, 35, ),
        /* 169 */ array(18, 94, ),
        /* 170 */ array(33, 109, ),
        /* 171 */ array(90, 91, ),
        /* 172 */ array(88, 89, ),
        /* 173 */ array(18, 94, ),
        /* 174 */ array(88, 89, ),
        /* 175 */ array(32, 35, ),
        /* 176 */ array(11, 33, ),
        /* 177 */ array(88, 89, ),
        /* 178 */ array(32, 35, ),
        /* 179 */ array(11, 33, ),
        /* 180 */ array(18, 21, ),
        /* 181 */ array(21, 32, ),
        /* 182 */ array(32, 35, ),
        /* 183 */ array(21, 32, ),
        /* 184 */ array(32, 35, ),
        /* 185 */ array(18, 37, ),
        /* 186 */ array(18, 37, ),
        /* 187 */ array(18, 21, ),
        /* 188 */ array(18, 21, ),
        /* 189 */ array(88, 89, ),
        /* 190 */ array(20, 32, ),
        /* 191 */ array(32, 35, ),
        /* 192 */ array(32, 35, ),
        /* 193 */ array(33, 109, ),
        /* 194 */ array(88, 89, ),
        /* 195 */ array(90, 91, ),
        /* 196 */ array(18, 21, ),
        /* 197 */ array(21, 32, ),
        /* 198 */ array(32, 35, ),
        /* 199 */ array(33, 34, ),
        /* 200 */ array(111, 113, ),
        /* 201 */ array(21, 32, ),
        /* 202 */ array(32, 35, ),
        /* 203 */ array(111, 113, ),
        /* 204 */ array(32, 40, ),
        /* 205 */ array(32, 40, ),
        /* 206 */ array(18, 37, ),
        /* 207 */ array(90, 91, ),
        /* 208 */ array(25, 109, ),
        /* 209 */ array(32, 40, ),
        /* 210 */ array(19, ),
        /* 211 */ array(25, ),
        /* 212 */ array(19, ),
        /* 213 */ array(34, ),
        /* 214 */ array(21, ),
        /* 215 */ array(34, ),
        /* 216 */ array(21, ),
        /* 217 */ array(21, ),
        /* 218 */ array(44, ),
        /* 219 */ array(21, ),
        /* 220 */ array(21, ),
        /* 221 */ array(34, ),
        /* 222 */ array(34, ),
        /* 223 */ array(21, ),
        /* 224 */ array(34, ),
        /* 225 */ array(51, ),
        /* 226 */ array(18, ),
        /* 227 */ array(18, ),
        /* 228 */ array(21, ),
        /* 229 */ array(34, ),
        /* 230 */ array(35, ),
        /* 231 */ array(18, ),
        /* 232 */ array(35, ),
        /* 233 */ array(19, ),
        /* 234 */ array(11, ),
        /* 235 */ array(37, ),
        /* 236 */ array(25, ),
        /* 237 */ array(39, ),
        /* 238 */ array(35, ),
        /* 239 */ array(34, ),
        /* 240 */ array(43, ),
        /* 241 */ array(109, ),
        /* 242 */ array(111, ),
        /* 243 */ array(21, ),
        /* 244 */ array(39, ),
        /* 245 */ array(111, ),
        /* 246 */ array(113, ),
        /* 247 */ array(111, ),
        /* 248 */ array(25, ),
        /* 249 */ array(40, ),
        /* 250 */ array(21, ),
        /* 251 */ array(18, ),
        /* 252 */ array(40, ),
        /* 253 */ array(39, ),
        /* 254 */ array(18, ),
        /* 255 */ array(39, ),
        /* 256 */ array(40, ),
        /* 257 */ array(35, ),
        /* 258 */ array(34, ),
        /* 259 */ array(34, ),
        /* 260 */ array(109, ),
        /* 261 */ array(39, ),
        /* 262 */ array(18, ),
        /* 263 */ array(18, ),
        /* 264 */ array(69, ),
        /* 265 */ array(11, ),
        /* 266 */ array(40, ),
        /* 267 */ array(35, ),
        /* 268 */ array(37, ),
        /* 269 */ array(39, ),
        /* 270 */ array(39, ),
        /* 271 */ array(11, ),
        /* 272 */ array(94, ),
        /* 273 */ array(32, ),
        /* 274 */ array(11, ),
        /* 275 */ array(21, ),
        /* 276 */ array(33, ),
        /* 277 */ array(69, ),
        /* 278 */ array(33, ),
        /* 279 */ array(34, ),
        /* 280 */ array(18, ),
        /* 281 */ array(35, ),
        /* 282 */ array(37, ),
        /* 283 */ array(34, ),
        /* 284 */ array(18, ),
        /* 285 */ array(2, ),
        /* 286 */ array(18, ),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
        /* 398 */ array(),
        /* 399 */ array(),
        /* 400 */ array(),
        /* 401 */ array(),
        /* 402 */ array(),
        /* 403 */ array(),
        /* 404 */ array(),
        /* 405 */ array(),
        /* 406 */ array(),
        /* 407 */ array(),
        /* 408 */ array(),
        /* 409 */ array(),
        /* 410 */ array(),
        /* 411 */ array(),
        /* 412 */ array(),
        /* 413 */ array(),
        /* 414 */ array(),
        /* 415 */ array(),
        /* 416 */ array(),
        /* 417 */ array(),
        /* 418 */ array(),
        /* 419 */ array(),
        /* 420 */ array(),
        /* 421 */ array(),
        /* 422 */ array(),
        /* 423 */ array(),
        /* 424 */ array(),
        /* 425 */ array(),
        /* 426 */ array(),
        /* 427 */ array(),
        /* 428 */ array(),
        /* 429 */ array(),
        /* 430 */ array(),
        /* 431 */ array(),
        /* 432 */ array(),
        /* 433 */ array(),
        /* 434 */ array(),
        /* 435 */ array(),
        /* 436 */ array(),
        /* 437 */ array(),
        /* 438 */ array(),
        /* 439 */ array(),
        /* 440 */ array(),
        /* 441 */ array(),
        /* 442 */ array(),
        /* 443 */ array(),
        /* 444 */ array(),
        /* 445 */ array(),
        /* 446 */ array(),
        /* 447 */ array(),
        /* 448 */ array(),
        /* 449 */ array(),
        /* 450 */ array(),
        /* 451 */ array(),
        /* 452 */ array(),
        /* 453 */ array(),
        /* 454 */ array(),
        /* 455 */ array(),
        /* 456 */ array(),
        /* 457 */ array(),
        /* 458 */ array(),
        /* 459 */ array(),
        /* 460 */ array(),
        /* 461 */ array(),
        /* 462 */ array(),
        /* 463 */ array(),
        /* 464 */ array(),
        /* 465 */ array(),
        /* 466 */ array(),
        /* 467 */ array(),
        /* 468 */ array(),
        /* 469 */ array(),
        /* 470 */ array(),
        /* 471 */ array(),
);
    static public $yy_default = array(
 /*     0 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*    10 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  472,
 /*    20 */   553,  552,  585,  586,  706,  706,  706,  706,  706,  706,
 /*    30 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*    40 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*    50 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*    60 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*    70 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*    80 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*    90 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*   100 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*   110 */   706,  706,  548,  706,  706,  706,  706,  706,  706,  706,
 /*   120 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*   130 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  570,
 /*   140 */   706,  706,  625,  598,  603,  656,  602,  599,  660,  657,
 /*   150 */   632,  627,  687,  628,  629,  630,  626,  631,  706,  706,
 /*   160 */   642,  643,  600,  687,  641,  605,  686,  601,  706,  706,
 /*   170 */   600,  638,  633,  706,  636,  706,  605,  635,  706,  601,
 /*   180 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  634,
 /*   190 */   706,  706,  706,  706,  637,  639,  706,  706,  706,  604,
 /*   200 */   706,  706,  706,  706,  706,  706,  706,  640,  706,  706,
 /*   210 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*   220 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*   230 */   706,  706,  706,  706,  692,  706,  677,  706,  706,  706,
 /*   240 */   538,  512,  706,  706,  706,  706,  706,  706,  706,  706,
 /*   250 */   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
 /*   260 */   669,  706,  706,  706,  706,  535,  706,  706,  706,  693,
 /*   270 */   697,  692,  706,  577,  692,  706,  604,  706,  511,  706,
 /*   280 */   706,  706,  706,  706,  706,  588,  706,  562,  574,  579,
 /*   290 */   580,  578,  576,  587,  517,  575,  572,  549,  494,  533,
 /*   300 */   536,  476,  516,  581,  551,  493,  482,  584,  491,  483,
 /*   310 */   582,  495,  492,  565,  592,  569,  593,  520,  594,  561,
 /*   320 */   498,  501,  497,  591,  519,  500,  474,  568,  571,  589,
 /*   330 */   573,  564,  563,  566,  583,  489,  590,  490,  496,  567,
 /*   340 */   499,  617,  670,  668,  667,  671,  647,  688,  672,  659,
 /*   350 */   658,  654,  653,  655,  645,  646,  596,  689,  690,  702,
 /*   360 */   704,  703,  705,  698,  699,  701,  700,  696,  691,  684,
 /*   370 */   685,  694,  695,  652,  651,  488,  487,  486,  515,  485,
 /*   380 */   503,  502,  484,  481,  475,  473,  477,  478,  480,  479,
 /*   390 */   505,  507,  648,  644,  661,  649,  650,  662,  614,  595,
 /*   400 */   682,  509,  676,  677,  679,  678,  673,  674,  522,  521,
 /*   410 */   514,  523,  524,  527,  525,  537,  518,  540,  539,  541,
 /*   420 */   543,  542,  544,  528,  529,  555,  554,  556,  557,  559,
 /*   430 */   558,  550,  547,  531,  530,  526,  532,  546,  545,  534,
 /*   440 */   513,  611,  610,  612,  613,  597,  663,  609,  608,  681,
 /*   450 */   675,  683,  606,  607,  680,  665,  666,  624,  623,  508,
 /*   460 */   510,  506,  504,  622,  621,  615,  664,  616,  618,  620,
 /*   470 */   619,  560,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 180;
    const YYSTACKDEPTH = 100;
    const lock_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 472;
    const YYNRULE = 234;
    const YYERRORSYMBOL = 114;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'LOGICALOR',   
  'LOGICALAND',    'BINARYXOR',     'BINARYAND',     'NOTEQUAL',    
  'EQUAL',         'UINDIRECTION',  'UADRESS',       'NAMESPACE_RESOLVE',
  'UMINUS',        'UPLUS',         'UBRACKET',      'TYPEUNARY',   
  'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',  'IDENTIFIER',    'LEFTFIGUREBRACKET',
  'RIGHTFIGUREBRACKET',  'SEMICOLON',     'CLASSKWD',      'STRUCTKWD',   
  'UNIONKWD',      'COLON',         'PUBLICKWD',     'PROTECTEDKWD',
  'PRIVATEKWD',    'SIGNALSKWD',    'SLOTSKWD',      'ENUMKWD',     
  'COMMA',         'ASSIGN',        'LEFTROUNDBRACKET',  'RIGHTROUNDBRACKET',
  'BINARYNOT',     'CUSTOMTYPENAME',  'TEMPLATEKWD',   'LESSER',      
  'GREATER',       'TYPENAMEKWD',   'OPERATOROVERLOADDECLARATION',  'CONSTKWD',    
  'PREPROCESSOR_ENDIF',  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ELSE',  'PREPROCESSOR_IFDEF',
  'PREPROCESSOR_IF',  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_INCLUDE',  'WHILEKWD',    
  'DOKWD',         'FORKWD',        'RETURNKWD',     'CONTINUEKWD', 
  'GOTOKWD',       'TRYKWD',        'CATCHKWD',      'ELLIPSIS',    
  'SWITCHKWD',     'CASEKWD',       'DEFAULTKWD',    'IFKWD',       
  'TYPEDEF',       'BREAKKWD',      'NEWKWD',        'DELETE',      
  'LEFTSQUAREBRACKET',  'RIGHTSQUAREBRACKET',  'STATICKWD',     'EXTERNKWD',   
  'REGISTERKWD',   'VOLATILEKWD',   'FRIENDKWD',     'BINARYXOR_ASSIGN',
  'BINARYOR_ASSIGN',  'BINARYAND_ASSIGN',  'RIGHTSHIFT_ASSIGN',  'LEFTSHIFT_ASSIGN',
  'MODULO_ASSIGN',  'DIVISION_ASSIGN',  'MULTIPLY_ASSIGN',  'PLUS_ASSIGN', 
  'MINUS_ASSIGN',  'NOT_EQUAL',     'LESSER_OR_EQUAL',  'GREATER_OR_EQUAL',
  'LEFTSHIFT',     'RIGHTSHIFT',    'MINUS',         'PLUS',        
  'MODULOSIGN',    'DIVISION',      'MULTIPLY',      'AMPERSAND',   
  'LOGICALNOT',    'DECREMENT',     'INCREMENT',     'DOT',         
  'RIGHTARROW',    'CONST_CAST',    'STATIC_CAST',   'DYNAMIC_CAST',
  'REINTERPRET_CAST',  'NUMERIC',       'CHARACTER',     'STRING',      
  'PREPROCESSOR_STRINGIFY',  'PREPROCESSOR_CONCAT',  'SIGNED',        'TYPENAME',    
  'UNSIGNED',      'LONG',          'error',         'program',     
  'stmt_list',     'stmt_or_defined_macro',  'stmt',          'namespace_body',
  'class_or_union_or_struct',  'type_meta_specifier_with_template_def',  'structure_body',  'template_def',
  'type_meta_specifier',  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',  'visibility_spec_full',
  'visibility_spec',  'signal_slots',  'enum_body',     'enum_value_list',
  'enum_value',    'expr_atom',     'type',          'possible_function_name',
  'formal_args_list_with_or_without_const',  'function_body',  'type_with_qualifier',  'non_const_type',
  'primitive_or_complex_type',  'template_spec_list',  'template_spec',  'template_typename',
  'formal_args_list',  'arg_list',      'arg',           'preprocessor_cond',
  'preprocessor_else_clauses',  'preprocessor_elif_list',  'preprocessor_else',  'preprocessor_elif',
  'expr_prec_11',  'try_catch',     'try',           'catch_list',  
  'catch',         'expr_prec_11_or_ellipsis',  'switch_stmt',   'switch_case_list',
  'case',          'if_then_else',  'if_then',       'expr_prec_10',
  'expr_prec_9',   'varqualifier',  'expr_prec_8',   'expr_prec_7', 
  'expr_prec_6',   'expr_prec_5',   'expr_prec_4',   'try_value_access',
  'try_pointer_access',  'expr_prec_3',   'typecast',      'expr_prec_2', 
  'cpp_style_cast',  'type_list',     'builtintype', 
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "stmt ::= NAMESPACEKWD IDENTIFIER namespace_body",
 /*   4 */ "namespace_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*   5 */ "namespace_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*   6 */ "stmt ::= class_or_union_or_struct",
 /*   7 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body IDENTIFIER SEMICOLON",
 /*   8 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body SEMICOLON",
 /*   9 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER SEMICOLON",
 /*  10 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  11 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  12 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  13 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  14 */ "type_meta_specifier ::= CLASSKWD",
 /*  15 */ "type_meta_specifier ::= STRUCTKWD",
 /*  16 */ "type_meta_specifier ::= UNIONKWD",
 /*  17 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  18 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  19 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  20 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  21 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  22 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  23 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  24 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  25 */ "visibility_spec ::= PUBLICKWD",
 /*  26 */ "visibility_spec ::= PROTECTEDKWD",
 /*  27 */ "visibility_spec ::= PRIVATEKWD",
 /*  28 */ "signal_slots ::= SIGNALSKWD",
 /*  29 */ "signal_slots ::= SLOTSKWD",
 /*  30 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER SEMICOLON",
 /*  31 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body SEMICOLON",
 /*  32 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  33 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body IDENTIFIER SEMICOLON",
 /*  34 */ "stmt_or_defined_macro ::= ENUMKWD enum_body IDENTIFIER SEMICOLON",
 /*  35 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  36 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  37 */ "enum_value_list ::= enum_value_list COMMA enum_value",
 /*  38 */ "enum_value_list ::= enum_value",
 /*  39 */ "enum_value ::= IDENTIFIER",
 /*  40 */ "enum_value ::= IDENTIFIER ASSIGN expr_atom",
 /*  41 */ "stmt_or_defined_macro ::= type possible_function_name formal_args_list_with_or_without_const function_body",
 /*  42 */ "stmt_or_defined_macro ::= type_with_qualifier possible_function_name formal_args_list_with_or_without_const function_body",
 /*  43 */ "stmt_or_defined_macro ::= template_def type_with_qualifier possible_function_name formal_args_list_with_or_without_const function_body",
 /*  44 */ "stmt_or_defined_macro ::= template_def type possible_function_name formal_args_list_with_or_without_const function_body",
 /*  45 */ "stmt_or_defined_macro ::= template_def non_const_type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  46 */ "stmt_or_defined_macro ::= type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  47 */ "stmt_or_defined_macro ::= template_def BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  48 */ "stmt_or_defined_macro ::= template_def primitive_or_complex_type NAMESPACE_RESOLVE BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  49 */ "stmt_or_defined_macro ::= BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  50 */ "stmt_or_defined_macro ::= primitive_or_complex_type NAMESPACE_RESOLVE BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  51 */ "template_def ::= TEMPLATEKWD LESSER GREATER",
 /*  52 */ "template_def ::= TEMPLATEKWD LESSER template_spec_list GREATER",
 /*  53 */ "template_spec_list ::= template_spec_list COMMA template_spec",
 /*  54 */ "template_spec_list ::= template_spec",
 /*  55 */ "template_spec ::= template_typename IDENTIFIER",
 /*  56 */ "template_typename ::= TYPENAMEKWD",
 /*  57 */ "template_typename ::= CLASSKWD",
 /*  58 */ "template_typename ::= STRUCTKWD",
 /*  59 */ "template_typename ::= ENUMKWD",
 /*  60 */ "function_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  61 */ "function_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  62 */ "function_body ::= SEMICOLON",
 /*  63 */ "possible_function_name ::= primitive_or_complex_type",
 /*  64 */ "possible_function_name ::= IDENTIFIER",
 /*  65 */ "possible_function_name ::= OPERATOROVERLOADDECLARATION",
 /*  66 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  67 */ "formal_args_list_with_or_without_const ::= formal_args_list CONSTKWD",
 /*  68 */ "formal_args_list ::= LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /*  69 */ "formal_args_list ::= LEFTROUNDBRACKET arg_list RIGHTROUNDBRACKET",
 /*  70 */ "arg_list ::= arg",
 /*  71 */ "arg_list ::= arg_list COMMA arg",
 /*  72 */ "arg ::= type IDENTIFIER",
 /*  73 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list PREPROCESSOR_ENDIF",
 /*  74 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses PREPROCESSOR_ENDIF",
 /*  75 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  76 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  77 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  78 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  79 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  80 */ "preprocessor_elif ::= PREPROCESSOR_ELIF stmt_list",
 /*  81 */ "preprocessor_else ::= PREPROCESSOR_ELSE stmt_list",
 /*  82 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF IDENTIFIER",
 /*  83 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF CUSTOMTYPENAME",
 /*  84 */ "preprocessor_cond ::= PREPROCESSOR_IF",
 /*  85 */ "stmt_or_defined_macro ::= PREPROCESSOR_DEFINE",
 /*  86 */ "stmt_or_defined_macro ::= stmt",
 /*  87 */ "stmt ::= PREPROCESSOR_INCLUDE",
 /*  88 */ "stmt ::= WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  89 */ "stmt ::= DOKWD stmt WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET SEMICOLON",
 /*  90 */ "stmt ::= FORKWD LEFTROUNDBRACKET expr_prec_11 SEMICOLON expr_prec_11 SEMICOLON expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  91 */ "stmt ::= RETURNKWD expr_prec_11 SEMICOLON",
 /*  92 */ "stmt ::= RETURNKWD SEMICOLON",
 /*  93 */ "stmt ::= CONTINUEKWD SEMICOLON",
 /*  94 */ "stmt ::= GOTOKWD IDENTIFIER SEMICOLON",
 /*  95 */ "stmt ::= GOTOKWD CUSTOMTYPENAME SEMICOLON",
 /*  96 */ "stmt ::= IDENTIFIER COLON",
 /*  97 */ "stmt ::= try_catch",
 /*  98 */ "try_catch ::= try catch_list",
 /*  99 */ "try ::= TRYKWD LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 100 */ "try ::= TRYKWD LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 101 */ "catch_list ::= catch_list catch",
 /* 102 */ "catch_list ::= catch",
 /* 103 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 104 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 105 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 106 */ "expr_prec_11_or_ellipsis ::= ELLIPSIS",
 /* 107 */ "stmt ::= SEMICOLON",
 /* 108 */ "stmt ::= switch_stmt",
 /* 109 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 110 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET switch_case_list RIGHTFIGUREBRACKET",
 /* 111 */ "switch_case_list ::= case",
 /* 112 */ "switch_case_list ::= switch_case_list case",
 /* 113 */ "case ::= CASEKWD expr_atom COLON stmt_list",
 /* 114 */ "case ::= DEFAULTKWD COLON stmt_list",
 /* 115 */ "stmt ::= if_then_else",
 /* 116 */ "if_then_else ::= if_then",
 /* 117 */ "if_then_else ::= if_then ELSEKWD stmt",
 /* 118 */ "if_then ::= IFKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 119 */ "stmt ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 120 */ "stmt ::= TYPEDEF type IDENTIFIER SEMICOLON",
 /* 121 */ "stmt ::= BREAKKWD SEMICOLON",
 /* 122 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 123 */ "expr_prec_11 ::= NEWKWD expr_prec_10",
 /* 124 */ "expr_prec_11 ::= DELETE LEFTSQUAREBRACKET RIGHTSQUAREBRACKET expr_prec_10",
 /* 125 */ "expr_prec_11 ::= DELETE expr_prec_10",
 /* 126 */ "expr_prec_11 ::= type expr_atom ASSIGN expr_prec_9",
 /* 127 */ "expr_prec_11 ::= type primitive_or_complex_type ASSIGN expr_prec_9",
 /* 128 */ "expr_prec_11 ::= type IDENTIFIER",
 /* 129 */ "expr_prec_11 ::= type primitive_or_complex_type",
 /* 130 */ "expr_prec_11 ::= type_with_qualifier IDENTIFIER ASSIGN expr_prec_9",
 /* 131 */ "expr_prec_11 ::= type_with_qualifier primitive_or_complex_type ASSIGN expr_prec_9",
 /* 132 */ "expr_prec_11 ::= type_with_qualifier IDENTIFIER",
 /* 133 */ "expr_prec_11 ::= type_with_qualifier primitive_or_complex_type",
 /* 134 */ "expr_prec_11 ::= expr_prec_11 COMMA expr_prec_10",
 /* 135 */ "expr_prec_11 ::= expr_prec_10",
 /* 136 */ "type_with_qualifier ::= varqualifier type",
 /* 137 */ "varqualifier ::= STATICKWD",
 /* 138 */ "varqualifier ::= EXTERNKWD",
 /* 139 */ "varqualifier ::= REGISTERKWD",
 /* 140 */ "varqualifier ::= VOLATILEKWD",
 /* 141 */ "varqualifier ::= FRIENDKWD",
 /* 142 */ "expr_prec_10 ::= expr_prec_9 BINARYXOR_ASSIGN expr_prec_10",
 /* 143 */ "expr_prec_10 ::= expr_prec_9 BINARYOR_ASSIGN expr_prec_10",
 /* 144 */ "expr_prec_10 ::= expr_prec_9 BINARYAND_ASSIGN expr_prec_10",
 /* 145 */ "expr_prec_10 ::= expr_prec_9 RIGHTSHIFT_ASSIGN expr_prec_10",
 /* 146 */ "expr_prec_10 ::= expr_prec_9 LEFTSHIFT_ASSIGN expr_prec_10",
 /* 147 */ "expr_prec_10 ::= expr_prec_9 MODULO_ASSIGN expr_prec_10",
 /* 148 */ "expr_prec_10 ::= expr_prec_9 DIVISION_ASSIGN expr_prec_10",
 /* 149 */ "expr_prec_10 ::= expr_prec_9 MULTIPLY_ASSIGN expr_prec_10",
 /* 150 */ "expr_prec_10 ::= expr_prec_9 PLUS_ASSIGN expr_prec_10",
 /* 151 */ "expr_prec_10 ::= expr_prec_9 MINUS_ASSIGN expr_prec_10",
 /* 152 */ "expr_prec_10 ::= expr_prec_9 ASSIGN expr_prec_10",
 /* 153 */ "expr_prec_10 ::= expr_prec_9",
 /* 154 */ "expr_prec_9 ::= expr_prec_9 LOGICALOR expr_prec_8",
 /* 155 */ "expr_prec_9 ::= expr_prec_9 LOGICALAND expr_prec_8",
 /* 156 */ "expr_prec_9 ::= expr_prec_9 BINARYXOR expr_prec_8",
 /* 157 */ "expr_prec_9 ::= expr_prec_9 BINARYAND expr_prec_8",
 /* 158 */ "expr_prec_9 ::= expr_prec_9 NOT_EQUAL expr_prec_8",
 /* 159 */ "expr_prec_9 ::= expr_prec_9 EQUAL expr_prec_8",
 /* 160 */ "expr_prec_9 ::= expr_prec_8",
 /* 161 */ "expr_prec_8 ::= expr_prec_8 LESSER_OR_EQUAL expr_prec_7",
 /* 162 */ "expr_prec_8 ::= expr_prec_8 GREATER_OR_EQUAL expr_prec_7",
 /* 163 */ "expr_prec_8 ::= expr_prec_8 GREATER expr_prec_7",
 /* 164 */ "expr_prec_8 ::= expr_prec_8 LESSER expr_prec_7",
 /* 165 */ "expr_prec_8 ::= expr_prec_7",
 /* 166 */ "expr_prec_7 ::= expr_prec_7 LEFTSHIFT expr_prec_6",
 /* 167 */ "expr_prec_7 ::= expr_prec_7 RIGHTSHIFT expr_prec_6",
 /* 168 */ "expr_prec_7 ::= expr_prec_6",
 /* 169 */ "expr_prec_6 ::= expr_prec_6 MINUS expr_prec_5",
 /* 170 */ "expr_prec_6 ::= expr_prec_6 PLUS expr_prec_5",
 /* 171 */ "expr_prec_6 ::= expr_prec_5",
 /* 172 */ "expr_prec_5 ::= expr_prec_5 MODULOSIGN expr_prec_4",
 /* 173 */ "expr_prec_5 ::= expr_prec_5 DIVISION expr_prec_4",
 /* 174 */ "expr_prec_5 ::= expr_prec_5 MULTIPLY expr_prec_4",
 /* 175 */ "expr_prec_5 ::= expr_prec_4",
 /* 176 */ "expr_prec_4 ::= try_value_access MULTIPLY IDENTIFIER",
 /* 177 */ "expr_prec_4 ::= try_pointer_access MULTIPLY IDENTIFIER",
 /* 178 */ "expr_prec_4 ::= expr_prec_3",
 /* 179 */ "expr_prec_3 ::= AMPERSAND expr_prec_3",
 /* 180 */ "expr_prec_3 ::= MULTIPLY expr_prec_3",
 /* 181 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 182 */ "expr_prec_3 ::= LOGICALNOT expr_prec_3",
 /* 183 */ "expr_prec_3 ::= BINARYNOT expr_prec_3",
 /* 184 */ "expr_prec_3 ::= MINUS expr_prec_2",
 /* 185 */ "expr_prec_3 ::= PLUS expr_prec_2",
 /* 186 */ "expr_prec_3 ::= DECREMENT expr_prec_3",
 /* 187 */ "expr_prec_3 ::= INCREMENT expr_prec_3",
 /* 188 */ "expr_prec_3 ::= expr_prec_2",
 /* 189 */ "expr_prec_2 ::= try_value_access IDENTIFIER",
 /* 190 */ "expr_prec_2 ::= try_pointer_access IDENTIFIER",
 /* 191 */ "expr_prec_2 ::= cpp_style_cast LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 192 */ "expr_prec_2 ::= expr_prec_2 LEFTSQUAREBRACKET expr_prec_10 RIGHTSQUAREBRACKET",
 /* 193 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 194 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /* 195 */ "expr_prec_2 ::= expr_prec_2 INCREMENT",
 /* 196 */ "expr_prec_2 ::= expr_prec_2 DECREMENT",
 /* 197 */ "expr_prec_2 ::= expr_atom",
 /* 198 */ "try_value_access ::= expr_prec_2 DOT",
 /* 199 */ "try_pointer_access ::= expr_prec_2 RIGHTARROW",
 /* 200 */ "cpp_style_cast ::= CONST_CAST LESSER type GREATER",
 /* 201 */ "cpp_style_cast ::= STATIC_CAST LESSER type GREATER",
 /* 202 */ "cpp_style_cast ::= DYNAMIC_CAST LESSER type GREATER",
 /* 203 */ "cpp_style_cast ::= REINTERPRET_CAST LESSER type GREATER",
 /* 204 */ "expr_atom ::= NUMERIC",
 /* 205 */ "expr_atom ::= IDENTIFIER",
 /* 206 */ "expr_atom ::= CHARACTER",
 /* 207 */ "expr_atom ::= STRING",
 /* 208 */ "expr_atom ::= LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 209 */ "expr_atom ::= PREPROCESSOR_STRINGIFY IDENTIFIER",
 /* 210 */ "expr_atom ::= expr_atom PREPROCESSOR_CONCAT IDENTIFIER",
 /* 211 */ "typecast ::= LEFTROUNDBRACKET type RIGHTROUNDBRACKET",
 /* 212 */ "type_list ::= type",
 /* 213 */ "type_list ::= type_list COMMA type",
 /* 214 */ "type ::= CONSTKWD non_const_type",
 /* 215 */ "type ::= non_const_type",
 /* 216 */ "non_const_type ::= non_const_type MULTIPLY",
 /* 217 */ "non_const_type ::= non_const_type CONSTKWD MULTIPLY",
 /* 218 */ "non_const_type ::= non_const_type AMPERSAND",
 /* 219 */ "non_const_type ::= builtintype",
 /* 220 */ "non_const_type ::= primitive_or_complex_type",
 /* 221 */ "primitive_or_complex_type ::= CUSTOMTYPENAME",
 /* 222 */ "primitive_or_complex_type ::= CUSTOMTYPENAME LESSER GREATER",
 /* 223 */ "primitive_or_complex_type ::= CUSTOMTYPENAME LESSER type_list GREATER",
 /* 224 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE IDENTIFIER",
 /* 225 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME",
 /* 226 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME LESSER GREATER",
 /* 227 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME LESSER type_list GREATER",
 /* 228 */ "builtintype ::= SIGNED TYPENAME",
 /* 229 */ "builtintype ::= UNSIGNED TYPENAME",
 /* 230 */ "builtintype ::= LONG TYPENAME",
 /* 231 */ "builtintype ::= LONG LONG TYPENAME",
 /* 232 */ "builtintype ::= UNSIGNED LONG LONG TYPENAME",
 /* 233 */ "builtintype ::= TYPENAME",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param lock_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new lock_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 2 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 2 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 5 ),
  array( 'lhs' => 120, 'rhs' => 4 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 4 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 2 ),
  array( 'lhs' => 121, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 122, 'rhs' => 2 ),
  array( 'lhs' => 122, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 6 ),
  array( 'lhs' => 117, 'rhs' => 8 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 7 ),
  array( 'lhs' => 123, 'rhs' => 3 ),
  array( 'lhs' => 123, 'rhs' => 4 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 148, 'rhs' => 2 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 5 ),
  array( 'lhs' => 118, 'rhs' => 7 ),
  array( 'lhs' => 118, 'rhs' => 9 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 6 ),
  array( 'lhs' => 156, 'rhs' => 7 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 6 ),
  array( 'lhs' => 158, 'rhs' => 7 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 5 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 4 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 3 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 3 ),
  array( 'lhs' => 167, 'rhs' => 3 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 4 ),
  array( 'lhs' => 175, 'rhs' => 4 ),
  array( 'lhs' => 175, 'rhs' => 4 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 140, 'rhs' => 4 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 140, 'rhs' => 5 ),
  array( 'lhs' => 140, 'rhs' => 6 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 4 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 14,
        16 => 14,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 25,
        27 => 25,
        28 => 28,
        29 => 28,
        30 => 30,
        31 => 31,
        32 => 32,
        73 => 32,
        33 => 33,
        34 => 34,
        41 => 34,
        42 => 34,
        46 => 34,
        74 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        43 => 43,
        44 => 43,
        49 => 43,
        45 => 45,
        47 => 47,
        48 => 48,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        58 => 56,
        59 => 56,
        57 => 57,
        60 => 60,
        61 => 61,
        62 => 62,
        63 => 63,
        64 => 63,
        65 => 63,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        75 => 75,
        76 => 76,
        77 => 76,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 82,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        121 => 92,
        122 => 92,
        93 => 93,
        94 => 94,
        95 => 94,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 105,
        107 => 107,
        108 => 107,
        115 => 107,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        123 => 123,
        125 => 123,
        128 => 123,
        129 => 123,
        132 => 123,
        133 => 123,
        124 => 124,
        126 => 124,
        127 => 124,
        131 => 124,
        130 => 130,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 137,
        139 => 137,
        140 => 137,
        141 => 137,
        142 => 142,
        143 => 142,
        144 => 142,
        145 => 142,
        146 => 142,
        148 => 142,
        149 => 142,
        150 => 142,
        151 => 142,
        152 => 142,
        147 => 147,
        153 => 153,
        154 => 154,
        155 => 154,
        156 => 154,
        157 => 154,
        158 => 154,
        159 => 154,
        160 => 160,
        161 => 161,
        162 => 161,
        163 => 161,
        164 => 161,
        165 => 165,
        166 => 166,
        167 => 166,
        168 => 168,
        169 => 169,
        170 => 169,
        171 => 171,
        172 => 172,
        173 => 172,
        174 => 172,
        175 => 175,
        176 => 176,
        177 => 176,
        178 => 178,
        179 => 179,
        180 => 179,
        181 => 181,
        182 => 181,
        183 => 181,
        184 => 181,
        185 => 181,
        186 => 181,
        187 => 181,
        188 => 188,
        189 => 189,
        190 => 189,
        191 => 191,
        192 => 191,
        193 => 191,
        194 => 194,
        195 => 195,
        196 => 195,
        197 => 197,
        198 => 198,
        199 => 199,
        200 => 200,
        201 => 200,
        202 => 200,
        203 => 200,
        204 => 204,
        205 => 204,
        206 => 204,
        207 => 204,
        208 => 208,
        210 => 208,
        209 => 209,
        211 => 211,
        212 => 212,
        213 => 213,
        214 => 214,
        216 => 214,
        218 => 214,
        215 => 215,
        217 => 217,
        219 => 219,
        220 => 219,
        221 => 221,
        222 => 222,
        223 => 223,
        224 => 224,
        225 => 224,
        226 => 226,
        227 => 227,
        228 => 228,
        229 => 228,
        230 => 228,
        231 => 231,
        232 => 232,
        233 => 233,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 79 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 2931 "langs_src/parser_cpp_language.php"
#line 95 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2936 "langs_src/parser_cpp_language.php"
#line 99 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2941 "langs_src/parser_cpp_language.php"
#line 103 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2947 "langs_src/parser_cpp_language.php"
#line 108 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 2952 "langs_src/parser_cpp_language.php"
#line 112 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 2957 "langs_src/parser_cpp_language.php"
#line 118 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2962 "langs_src/parser_cpp_language.php"
#line 122 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2968 "langs_src/parser_cpp_language.php"
#line 127 "langs_src/parser_cpp_language.y"
    function yy_r8(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2974 "langs_src/parser_cpp_language.php"
#line 132 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2980 "langs_src/parser_cpp_language.php"
#line 137 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2985 "langs_src/parser_cpp_language.php"
#line 141 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2990 "langs_src/parser_cpp_language.php"
#line 145 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array(A, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2995 "langs_src/parser_cpp_language.php"
#line 149 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3000 "langs_src/parser_cpp_language.php"
#line 153 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3005 "langs_src/parser_cpp_language.php"
#line 165 "langs_src/parser_cpp_language.y"
    function yy_r17(){
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3010 "langs_src/parser_cpp_language.php"
#line 169 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3015 "langs_src/parser_cpp_language.php"
#line 173 "langs_src/parser_cpp_language.y"
    function yy_r19(){
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3020 "langs_src/parser_cpp_language.php"
#line 177 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3025 "langs_src/parser_cpp_language.php"
#line 183 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3031 "langs_src/parser_cpp_language.php"
#line 188 "langs_src/parser_cpp_language.y"
    function yy_r22(){
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3036 "langs_src/parser_cpp_language.php"
#line 192 "langs_src/parser_cpp_language.y"
    function yy_r23(){
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3041 "langs_src/parser_cpp_language.php"
#line 196 "langs_src/parser_cpp_language.y"
    function yy_r24(){
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3046 "langs_src/parser_cpp_language.php"
#line 200 "langs_src/parser_cpp_language.y"
    function yy_r25(){
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3051 "langs_src/parser_cpp_language.php"
#line 212 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3056 "langs_src/parser_cpp_language.php"
#line 222 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());	
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3062 "langs_src/parser_cpp_language.php"
#line 227 "langs_src/parser_cpp_language.y"
    function yy_r31(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());	
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3068 "langs_src/parser_cpp_language.php"
#line 232 "langs_src/parser_cpp_language.y"
    function yy_r32(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3073 "langs_src/parser_cpp_language.php"
#line 236 "langs_src/parser_cpp_language.y"
    function yy_r33(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3079 "langs_src/parser_cpp_language.php"
#line 241 "langs_src/parser_cpp_language.y"
    function yy_r34(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3084 "langs_src/parser_cpp_language.php"
#line 245 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3089 "langs_src/parser_cpp_language.php"
#line 249 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3094 "langs_src/parser_cpp_language.php"
#line 253 "langs_src/parser_cpp_language.y"
    function yy_r37(){
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3099 "langs_src/parser_cpp_language.php"
#line 257 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3104 "langs_src/parser_cpp_language.php"
#line 261 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3109 "langs_src/parser_cpp_language.php"
#line 265 "langs_src/parser_cpp_language.y"
    function yy_r40(){
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3114 "langs_src/parser_cpp_language.php"
#line 279 "langs_src/parser_cpp_language.y"
    function yy_r43(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3119 "langs_src/parser_cpp_language.php"
#line 288 "langs_src/parser_cpp_language.y"
    function yy_r45(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor));
    }
#line 3124 "langs_src/parser_cpp_language.php"
#line 297 "langs_src/parser_cpp_language.y"
    function yy_r47(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3129 "langs_src/parser_cpp_language.php"
#line 301 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor));
    }
#line 3134 "langs_src/parser_cpp_language.php"
#line 309 "langs_src/parser_cpp_language.y"
    function yy_r50(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor));
    }
#line 3139 "langs_src/parser_cpp_language.php"
#line 319 "langs_src/parser_cpp_language.y"
    function yy_r51(){
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3144 "langs_src/parser_cpp_language.php"
#line 323 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3149 "langs_src/parser_cpp_language.php"
#line 327 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3154 "langs_src/parser_cpp_language.php"
#line 331 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3159 "langs_src/parser_cpp_language.php"
#line 335 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3165 "langs_src/parser_cpp_language.php"
#line 341 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3170 "langs_src/parser_cpp_language.php"
#line 345 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));

    }
#line 3176 "langs_src/parser_cpp_language.php"
#line 359 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3181 "langs_src/parser_cpp_language.php"
#line 363 "langs_src/parser_cpp_language.y"
    function yy_r61(){
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3186 "langs_src/parser_cpp_language.php"
#line 367 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3191 "langs_src/parser_cpp_language.php"
#line 372 "langs_src/parser_cpp_language.y"
    function yy_r63(){
	$this->_retvalue = $this->create_node('possible_function_name', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3196 "langs_src/parser_cpp_language.php"
#line 387 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3201 "langs_src/parser_cpp_language.php"
#line 391 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3206 "langs_src/parser_cpp_language.php"
#line 395 "langs_src/parser_cpp_language.y"
    function yy_r68(){
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3211 "langs_src/parser_cpp_language.php"
#line 399 "langs_src/parser_cpp_language.y"
    function yy_r69(){
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3216 "langs_src/parser_cpp_language.php"
#line 403 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3221 "langs_src/parser_cpp_language.php"
#line 407 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3226 "langs_src/parser_cpp_language.php"
#line 411 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3231 "langs_src/parser_cpp_language.php"
#line 425 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3236 "langs_src/parser_cpp_language.php"
#line 429 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3241 "langs_src/parser_cpp_language.php"
#line 437 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3246 "langs_src/parser_cpp_language.php"
#line 441 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3251 "langs_src/parser_cpp_language.php"
#line 445 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3256 "langs_src/parser_cpp_language.php"
#line 449 "langs_src/parser_cpp_language.y"
    function yy_r81(){
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3261 "langs_src/parser_cpp_language.php"
#line 453 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 3266 "langs_src/parser_cpp_language.php"
#line 461 "langs_src/parser_cpp_language.y"
    function yy_r84(){
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 3271 "langs_src/parser_cpp_language.php"
#line 465 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 3276 "langs_src/parser_cpp_language.php"
#line 469 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3281 "langs_src/parser_cpp_language.php"
#line 473 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3286 "langs_src/parser_cpp_language.php"
#line 484 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3291 "langs_src/parser_cpp_language.php"
#line 495 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3296 "langs_src/parser_cpp_language.php"
#line 507 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3301 "langs_src/parser_cpp_language.php"
#line 514 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3306 "langs_src/parser_cpp_language.php"
#line 518 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3311 "langs_src/parser_cpp_language.php"
#line 525 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3316 "langs_src/parser_cpp_language.php"
#line 531 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3321 "langs_src/parser_cpp_language.php"
#line 539 "langs_src/parser_cpp_language.y"
    function yy_r96(){
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3326 "langs_src/parser_cpp_language.php"
#line 545 "langs_src/parser_cpp_language.y"
    function yy_r97(){
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3331 "langs_src/parser_cpp_language.php"
#line 549 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3336 "langs_src/parser_cpp_language.php"
#line 553 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3341 "langs_src/parser_cpp_language.php"
#line 557 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3346 "langs_src/parser_cpp_language.php"
#line 561 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3351 "langs_src/parser_cpp_language.php"
#line 565 "langs_src/parser_cpp_language.y"
    function yy_r102(){
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3356 "langs_src/parser_cpp_language.php"
#line 569 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3361 "langs_src/parser_cpp_language.php"
#line 573 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3366 "langs_src/parser_cpp_language.php"
#line 577 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3371 "langs_src/parser_cpp_language.php"
#line 587 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3376 "langs_src/parser_cpp_language.php"
#line 597 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3381 "langs_src/parser_cpp_language.php"
#line 601 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3386 "langs_src/parser_cpp_language.php"
#line 605 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3391 "langs_src/parser_cpp_language.php"
#line 609 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3396 "langs_src/parser_cpp_language.php"
#line 613 "langs_src/parser_cpp_language.y"
    function yy_r113(){
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3401 "langs_src/parser_cpp_language.php"
#line 617 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3406 "langs_src/parser_cpp_language.php"
#line 627 "langs_src/parser_cpp_language.y"
    function yy_r116(){
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3411 "langs_src/parser_cpp_language.php"
#line 631 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3416 "langs_src/parser_cpp_language.php"
#line 635 "langs_src/parser_cpp_language.y"
    function yy_r118(){
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3421 "langs_src/parser_cpp_language.php"
#line 641 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3426 "langs_src/parser_cpp_language.php"
#line 645 "langs_src/parser_cpp_language.y"
    function yy_r120(){ 
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 3432 "langs_src/parser_cpp_language.php"
#line 661 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3437 "langs_src/parser_cpp_language.php"
#line 665 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3442 "langs_src/parser_cpp_language.php"
#line 689 "langs_src/parser_cpp_language.y"
    function yy_r130(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -3]->minor,  $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3447 "langs_src/parser_cpp_language.php"
#line 705 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3452 "langs_src/parser_cpp_language.php"
#line 709 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3457 "langs_src/parser_cpp_language.php"
#line 715 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 3463 "langs_src/parser_cpp_language.php"
#line 720 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3468 "langs_src/parser_cpp_language.php"
#line 742 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3473 "langs_src/parser_cpp_language.php"
#line 762 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
     }
#line 3478 "langs_src/parser_cpp_language.php"
#line 786 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3483 "langs_src/parser_cpp_language.php"
#line 792 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3488 "langs_src/parser_cpp_language.php"
#line 816 "langs_src/parser_cpp_language.y"
    function yy_r160(){
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3493 "langs_src/parser_cpp_language.php"
#line 822 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3498 "langs_src/parser_cpp_language.php"
#line 838 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3503 "langs_src/parser_cpp_language.php"
#line 844 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	$this->_retvalue = $this->create_node('expr_prec_7', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3508 "langs_src/parser_cpp_language.php"
#line 852 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->_retvalue = $this->create_node('expr_prec_7', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3513 "langs_src/parser_cpp_language.php"
#line 858 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->_retvalue = $this->create_node('expr_prec_6', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3518 "langs_src/parser_cpp_language.php"
#line 866 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->_retvalue = $this->create_node('expr_prec_6', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3523 "langs_src/parser_cpp_language.php"
#line 872 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->_retvalue = $this->create_node('expr_prec_5', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3528 "langs_src/parser_cpp_language.php"
#line 884 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->_retvalue = $this->create_node('expr_prec_5', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3533 "langs_src/parser_cpp_language.php"
#line 890 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->_retvalue = $this->create_node('expr_prec_4', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3538 "langs_src/parser_cpp_language.php"
#line 898 "langs_src/parser_cpp_language.y"
    function yy_r178(){
	$this->_retvalue = $this->create_node('expr_prec_4', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3543 "langs_src/parser_cpp_language.php"
#line 904 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3548 "langs_src/parser_cpp_language.php"
#line 912 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3553 "langs_src/parser_cpp_language.php"
#line 940 "langs_src/parser_cpp_language.y"
    function yy_r188(){
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3558 "langs_src/parser_cpp_language.php"
#line 946 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 3563 "langs_src/parser_cpp_language.php"
#line 954 "langs_src/parser_cpp_language.y"
    function yy_r191(){
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3568 "langs_src/parser_cpp_language.php"
#line 966 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3573 "langs_src/parser_cpp_language.php"
#line 970 "langs_src/parser_cpp_language.y"
    function yy_r195(){
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3578 "langs_src/parser_cpp_language.php"
#line 978 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->_retvalue =  $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3583 "langs_src/parser_cpp_language.php"
#line 984 "langs_src/parser_cpp_language.y"
    function yy_r198(){
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 3588 "langs_src/parser_cpp_language.php"
#line 988 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 3593 "langs_src/parser_cpp_language.php"
#line 994 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->_retvalue = $this->create_node('cpp_style_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3598 "langs_src/parser_cpp_language.php"
#line 1012 "langs_src/parser_cpp_language.y"
    function yy_r204(){
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3603 "langs_src/parser_cpp_language.php"
#line 1028 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3608 "langs_src/parser_cpp_language.php"
#line 1032 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3613 "langs_src/parser_cpp_language.php"
#line 1042 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$result = $this->create_node('typecast', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 3619 "langs_src/parser_cpp_language.php"
#line 1049 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->_retvalue = $this->create_node('type_list', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3624 "langs_src/parser_cpp_language.php"
#line 1053 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->_retvalue = $this->create_node('type_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3629 "langs_src/parser_cpp_language.php"
#line 1059 "langs_src/parser_cpp_language.y"
    function yy_r214(){
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3634 "langs_src/parser_cpp_language.php"
#line 1063 "langs_src/parser_cpp_language.y"
    function yy_r215(){
    $this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3639 "langs_src/parser_cpp_language.php"
#line 1071 "langs_src/parser_cpp_language.y"
    function yy_r217(){
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3644 "langs_src/parser_cpp_language.php"
#line 1079 "langs_src/parser_cpp_language.y"
    function yy_r219(){
	$this->_retvalue = $this->create_node('non_const_type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3649 "langs_src/parser_cpp_language.php"
#line 1087 "langs_src/parser_cpp_language.y"
    function yy_r221(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3654 "langs_src/parser_cpp_language.php"
#line 1091 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3659 "langs_src/parser_cpp_language.php"
#line 1095 "langs_src/parser_cpp_language.y"
    function yy_r223(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3664 "langs_src/parser_cpp_language.php"
#line 1099 "langs_src/parser_cpp_language.y"
    function yy_r224(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3669 "langs_src/parser_cpp_language.php"
#line 1106 "langs_src/parser_cpp_language.y"
    function yy_r226(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3674 "langs_src/parser_cpp_language.php"
#line 1110 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3679 "langs_src/parser_cpp_language.php"
#line 1114 "langs_src/parser_cpp_language.y"
    function yy_r228(){
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3684 "langs_src/parser_cpp_language.php"
#line 1126 "langs_src/parser_cpp_language.y"
    function yy_r231(){
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3689 "langs_src/parser_cpp_language.php"
#line 1130 "langs_src/parser_cpp_language.y"
    function yy_r232(){
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3694 "langs_src/parser_cpp_language.php"
#line 1134 "langs_src/parser_cpp_language.y"
    function yy_r233(){
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3699 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //lock_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 34 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 3844 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
