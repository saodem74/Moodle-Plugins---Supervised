<?php
/* Driver template for the PHP_block_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class block_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof block_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof block_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof block_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof block_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class block_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 3 "langs_src/parser_cpp_language.y"

require_once($CFG->dirroot.'/blocks/formal_langs/descriptions/descriptionrule.php');
#line 102 "langs_src/parser_cpp_language.php"

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 107 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 6 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 145 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const NOTEQUAL                       =  3;
    const EQUAL                          =  4;
    const LOGICALAND                     =  5;
    const BINARYAND                      =  6;
    const BINARYOR                       =  7;
    const LOGICALOR                      =  8;
    const AMPERSAND                      =  9;
    const BINARYXOR                      = 10;
    const UINDIRECTION                   = 11;
    const UADRESS                        = 12;
    const NAMESPACE_RESOLVE              = 13;
    const UMINUS                         = 14;
    const UPLUS                          = 15;
    const UBRACKET                       = 16;
    const TYPEUNARY                      = 17;
    const MACROPARAMETERPRIORITY         = 18;
    const NAMESPACEKWD                   = 19;
    const LEFTFIGUREBRACKET              = 20;
    const RIGHTFIGUREBRACKET             = 21;
    const SEMICOLON                      = 22;
    const IDENTIFIER                     = 23;
    const ASSIGN                         = 24;
    const TYPENAMEKWD                    = 25;
    const CLASSKWD                       = 26;
    const STRUCTKWD                      = 27;
    const ENUMKWD                        = 28;
    const TEMPLATEKWD                    = 29;
    const UNIONKWD                       = 30;
    const COLON                          = 31;
    const PUBLICKWD                      = 32;
    const PROTECTEDKWD                   = 33;
    const PRIVATEKWD                     = 34;
    const SIGNALSKWD                     = 35;
    const SLOTSKWD                       = 36;
    const OPERATOROVERLOADDECLARATION    = 37;
    const OUTER_CONSTRUCTOR_NAME         = 38;
    const FORKWD                         = 39;
    const UNSIGNED                       = 40;
    const SIGNED                         = 41;
    const LONG                           = 42;
    const SHORT                          = 43;
    const INT                            = 44;
    const CHAR                           = 45;
    const DOUBLE                         = 46;
    const FLOAT                          = 47;
    const VOID                           = 48;
    const GREATER                        = 49;
    const COMMA                          = 50;
    const LESSER                         = 51;
    const MULTIPLY                       = 52;
    const CONSTKWD                       = 53;
    const TYPENAME                       = 54;
    const LEFTROUNDBRACKET               = 55;
    const RIGHTROUNDBRACKET              = 56;
    const SIZEOF                         = 57;
    const PREPROCESSOR_CONCAT            = 58;
    const PREPROCESSOR_STRINGIFY         = 59;
    const STRING                         = 60;
    const CHARACTER                      = 61;
    const NUMERIC                        = 62;
    const LEFTSQUAREBRACKET              = 63;
    const RIGHTSQUAREBRACKET             = 64;
    const REINTERPRET_CAST               = 65;
    const DYNAMIC_CAST                   = 66;
    const STATIC_CAST                    = 67;
    const CONST_CAST                     = 68;
    const RIGHTARROW                     = 69;
    const DOT                            = 70;
    const DECREMENT                      = 71;
    const INCREMENT                      = 72;
    const PLUS                           = 73;
    const MINUS                          = 74;
    const BINARYNOT                      = 75;
    const LOGICALNOT                     = 76;
    const DIVISION                       = 77;
    const MODULOSIGN                     = 78;
    const RIGHTSHIFT                     = 79;
    const LEFTSHIFT                      = 80;
    const GREATER_OR_EQUAL               = 81;
    const LESSER_OR_EQUAL                = 82;
    const NOT_EQUAL                      = 83;
    const MINUS_ASSIGN                   = 84;
    const PLUS_ASSIGN                    = 85;
    const MULTIPLY_ASSIGN                = 86;
    const DIVISION_ASSIGN                = 87;
    const MODULO_ASSIGN                  = 88;
    const LEFTSHIFT_ASSIGN               = 89;
    const RIGHTSHIFT_ASSIGN              = 90;
    const BINARYAND_ASSIGN               = 91;
    const BINARYOR_ASSIGN                = 92;
    const BINARYXOR_ASSIGN               = 93;
    const FRIENDKWD                      = 94;
    const VOLATILEKWD                    = 95;
    const REGISTERKWD                    = 96;
    const EXTERNKWD                      = 97;
    const STATICKWD                      = 98;
    const DELETE                         = 99;
    const NEWKWD                         = 100;
    const BREAKKWD                       = 101;
    const TYPEDEF                        = 102;
    const IFKWD                          = 103;
    const DEFAULTKWD                     = 104;
    const CASEKWD                        = 105;
    const SWITCHKWD                      = 106;
    const ELLIPSIS                       = 107;
    const CATCHKWD                       = 108;
    const TRYKWD                         = 109;
    const GOTOKWD                        = 110;
    const CONTINUEKWD                    = 111;
    const RETURNKWD                      = 112;
    const DOKWD                          = 113;
    const WHILEKWD                       = 114;
    const PREPROCESSOR_INCLUDE           = 115;
    const PREPROCESSOR_DEFINE            = 116;
    const PREPROCESSOR_IF                = 117;
    const PREPROCESSOR_IFDEF             = 118;
    const PREPROCESSOR_ELSE              = 119;
    const PREPROCESSOR_ELIF              = 120;
    const PREPROCESSOR_ENDIF             = 121;
    const COMMENT                        = 122;
    const YY_NO_ACTION = 1293;
    const YY_ACCEPT_ACTION = 1292;
    const YY_ERROR_ACTION = 1291;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 13644;
static public $yy_action = array(
 /*     0 */   547,  214,  193,  721,  707,  740,  367,  599,  218,  322,
 /*    10 */   738,  365,  343,  354,  348,  357,  356,  167,  713,   98,
 /*    20 */   338,  590,  744,  386,  256,  329,  368,  388,  380,  384,
 /*    30 */   165,  540,  221,  109,    6,  670, 1047,   82,   84,   69,
 /*    40 */    85,   68,  104,   90,  258,  118,  282,   87,  210,  122,
 /*    50 */   212,   15,  707,  362,   38,  244,  240,  622,   16,  691,
 /*    60 */   281,  139,  594,  593,   17,   12,  202,  717,  720,  724,
 /*    70 */   280,  701,   27,  399,  329,   30,  403,  197,  343,  527,
 /*    80 */   161,  377,  236,  321,  324,   43,  335,  600,  226,  705,
 /*    90 */   706,   17,   12,  555,  237,  707,  255,  102,  448,   58,
 /*   100 */    44,  350,  542,  263,  301,  669,  101,  672,  671,  644,
 /*   110 */   643,  617,  108,  361,  344,  354,  348,  357,  356,  353,
 /*   120 */   327,  325,   65,  579,  339,  143,  364,  383,  198,  182,
 /*   130 */   639,  130,   49,  638,  355,   83,  185,   81,   99,  153,
 /*   140 */   100,   75,  539,   76,  189,  186,  588,   86,   88,  115,
 /*   150 */    91,   92,  371,  347,  176,  352,  333,  369,  341,  454,
 /*   160 */   136,  586,  105,  228,  708,  709,  715,  402,  692,  171,
 /*   170 */    70,  336,  699,  714,  711,   73,   74,  207,  581,  332,
 /*   180 */   323,  580,  582,  386,  589,  554,  347,  364,  742,  743,
 /*   190 */   741,  148,  642,  129,  127,  618,  359,  553,  214,  193,
 /*   200 */   721,  707,  176,  755,  599,  218,  322,  660,  365,   66,
 /*   210 */   345,   67,  350,  542,  167,  713,   98,  675,   70,  744,
 /*   220 */     3,  537,  523,  216,  339,  648,  487,  166,  540,  221,
 /*   230 */   109,  223,  670,  345,  225,   84,  423,   85,  164,  104,
 /*   240 */    90,  748,  118,  183,   87,  210,  122,  212,   15,  339,
 /*   250 */   679,   38,  278,  347,  364,   16,  752,  284,  120,  725,
 /*   260 */    84,   70,  688,  202,  717,  720,  724,  280,  701,   27,
 /*   270 */   399,  441,   30,  403,  197,    6,  527,  161,  765,  236,
 /*   280 */   383,  350,  542,  335,  600,  226,  675,  497,   71,   72,
 /*   290 */   555,  237,  562,  255,  102,  448,   58,   44,   53,  350,
 /*   300 */   542,  301,  669,  101,  672,  671,  644,  643,  617,  108,
 /*   310 */   361,  344,  354,  348,  357,  356,  353,  327,  325,  675,
 /*   320 */   330,  331,  143,  522,  383,  198,  262,  133,  130,  707,
 /*   330 */   563,  105,  228,  185,  494,   99,  153,  100,  326,  539,
 /*   340 */   621,  189,  186,  588,   86,   88,  115,   91,   92,  371,
 /*   350 */   205,  176,  352,  333,  369,  341,  660,  676,   84,  262,
 /*   360 */   133,  708,  709,  715,  402,  692,  171,   70,  336,  699,
 /*   370 */   714,  711,  229,  315,  207,  233,  332,  323,  668,   63,
 /*   380 */   694,   64,  160,  347,  437,  742,  743,  741,  148,  642,
 /*   390 */   129,  127,  618,  359,  553,  214,  193,  721,  347,  364,
 /*   400 */   377,  599,  218,  322,  160,  365,  347,  364,  296,  264,
 /*   410 */   340,  167,  713,   98,  675,  203,  744,  675,  526,  523,
 /*   420 */   216,  172,    2,  162,  572,  540,  221,  109,  482,  670,
 /*   430 */   278,  242,  694,  733,   85,  696,  104,   90,   84,  118,
 /*   440 */   456,   87,  210,  122,  212,   15,  694,  681,   38,  707,
 /*   450 */   329,  383,   16,  754,  284,  120,  725,  262,  133,  220,
 /*   460 */   202,  717,  720,  724,  280,  701,   27,  399,  675,   30,
 /*   470 */   403,  197,  391,  527,  161,  160,  236,  437,  184,  176,
 /*   480 */   668,  600,  226,  452,  454,   62,   84,  555,  237,  160,
 /*   490 */   255,  102,  448,   58,   44,   70,  685,  339,  301,  669,
 /*   500 */   101,  672,  671,  644,  643,  617,  108,  726,  284,  120,
 /*   510 */   725,  164,  578,  385,  722,  334,  631,  630,  707,  143,
 /*   520 */   684,  707,  198,  206,  546,  130,  347,  364,  549,  534,
 /*   530 */   185,   84,   99,  153,  100,  385,  539,  334,  189,  186,
 /*   540 */   588,   86,   88,  115,   91,   92,  371,  200,  435,  352,
 /*   550 */   333,  369,  341,  363,  385,   84,  334,  723,  708,  709,
 /*   560 */   715,  402,  692,  171,  174,  336,  699,  714,  711,   95,
 /*   570 */   445,  207,   84,  332,  323,  681,  170,  604,  674,   53,
 /*   580 */   606,  366,  742,  743,  741,  148,  642,  129,  127,  618,
 /*   590 */   359,    8,  529,  214,  193,  721,  342,  219,  734,  599,
 /*   600 */   218,  322,  340,  365,  417,  445,  385,  335,  334,  167,
 /*   610 */   713,   98,  386,  342,  744,   70,   77,  339,   78,  172,
 /*   620 */   385,  702,  334,  540,  221,  109,  257,  670,  278,  674,
 /*   630 */   591,  485,   85,  728,  104,   90,   84,  118,  345,   87,
 /*   640 */   210,  122,  212,   15,  587,  157,   38,  759,  383,  343,
 /*   650 */    16,  387,  339,  392,  382,  378,  379,  357,  202,  717,
 /*   660 */   720,  724,  280,  701,   27,  399,  735,   30,  403,  197,
 /*   670 */   481,  527,  161,  454,  236,  213,  454,  561,  306,  600,
 /*   680 */   226,  347,  364,   62,   70,  555,  237,   70,  255,  102,
 /*   690 */   448,   58,   44,  339,  682,  342,  301,  669,  101,  672,
 /*   700 */   671,  644,  643,  617,  108,   41,   79,   42,  696,  319,
 /*   710 */   305,  110,  350,  542,  657,  350,  542,  143,  343,  625,
 /*   720 */   198,  577,  339,  130,  383,  651,  556,  339,  185, 1047,
 /*   730 */    99,  153,  100,  680,  539,  652,  189,  186,  588,   86,
 /*   740 */    88,  115,   91,   92,  371,  391,  646,  352,  333,  369,
 /*   750 */   341,  347,  364,  339,  350,  542,  708,  709,  715,  402,
 /*   760 */   692,  171,  358,  336,  699,  714,  711,  329,  340,  207,
 /*   770 */   719,  332,  323,  354,  377,  357,  677,  353, 1047,  203,
 /*   780 */   742,  743,  741,  148,  642,  129,  127,  618,  359,   10,
 /*   790 */   529,  214,  193,  721,  531,  306,  329,  599,  218,  322,
 /*   800 */   343,  365,  687,  377,  745,  339,  698,  167,  713,   98,
 /*   810 */   758,  339,  744,  718,  320,    6,  329,  532,  521,  678,
 /*   820 */   343,  540,  221,  109,  377,  670,  257,  350,  542,  354,
 /*   830 */    85,  357,  104,   90,   93,  118,  737,   87,  210,  122,
 /*   840 */   212,   15,  596, 1047,   38,  343,  343, 1041,   16,    6,
 /*   850 */   731,  703,  339,  338,  338,  342,  202,  717,  720,  724,
 /*   860 */   280,  701,   27,  399,    6,   30,  403,  197,  320,  527,
 /*   870 */   161,   62,  236,   36,  266,  267,  762,  600,  226,  704,
 /*   880 */   656,  329,  577,  555,  237,  329,  255,  102,  448,   58,
 /*   890 */    44,  614,    6,   41,  301,  669,  101,  672,  671,  644,
 /*   900 */   643,  617,  108,  329,  346,  447,  697,  338,  636,  157,
 /*   910 */   377,  602,  339,  483,  525,  143,  492,  665,  198,    6,
 /*   920 */   578,  130,  585,  495,    6,  432,  185,    6,   99,  153,
 /*   930 */   100,  450,  539,  335,  189,  186,  588,   86,   88,  115,
 /*   940 */    91,   92,  371,  429,  690,  352,  333,  369,  341,  479,
 /*   950 */   410,  489,  427,  444,  708,  709,  715,  402,  692,  171,
 /*   960 */   664,  336,  699,  714,  711,  474,  107,  207,  623,  332,
 /*   970 */   323,  347,  436,  508,  552,  415,  438,  433,  742,  743,
 /*   980 */   741,  148,  642,  129,  127,  618,  359,   21,  529,  214,
 /*   990 */   193,  721,   80,  464,  486,  599,  218,  322,  425,  365,
 /*  1000 */    94,  545,  471,  732,  345,  167,  713,   98,    2,  615,
 /*  1010 */   744,  619,  394,  592,  396,  567,  259,   96,  504,  540,
 /*  1020 */   221,  109,  409,  670,  412,  541,  511,  635,   85,  535,
 /*  1030 */   104,   90,  565,  118,  530,   87,  210,  122,  212,   15,
 /*  1040 */   434,   39,   38,  313,  548, 1042,   16,  746,  317,  390,
 /*  1050 */   314,  260,  757, 1046,  202,  717,  720,  724,  280,  701,
 /*  1060 */    27,  399,  695,   30,  403,  197,  316,  527,  161,  106,
 /*  1070 */   236,  261,  491,  490,  478,  600,  226,  398,  493,    7,
 /*  1080 */    31,  555,  237,  400,  255,  102,  448,   58,   44,  383,
 /*  1090 */   632,  401,  301,  669,  101,  672,  671,  644,  643,  617,
 /*  1100 */   108,  500,   25,  516,  292,  458,  405,  277,   33,  499,
 /*  1110 */    32,  459,  411,  143,  475,   28,  198,  134,  446,  130,
 /*  1120 */   515,  496,  465,   35,  185,   34,   99,  153,  100,    5,
 /*  1130 */   539,  258,  189,  186,  588,   86,   88,  115,   91,   92,
 /*  1140 */   371,  125,  230,  352,  333,  369,  341,  242,  442,  467,
 /*  1150 */    26,  426,  708,  709,  715,  402,  692,  171,  505,  336,
 /*  1160 */   699,  714,  711,  509,  507,  207,  460,  332,  323,  315,
 /*  1170 */    13,  463,   61,   14,  422,  208,  742,  743,  741,  148,
 /*  1180 */   642,  129,  127,  618,  359,    9,  529,  214,  193,  721,
 /*  1190 */   420,  222,  476,  599,  218,  322,  235,  365,  395,  217,
 /*  1200 */   449,  418,  416,  167,  713,   98,  414,  113,  744,  342,
 /*  1210 */   484,  749,  397,  480,   53,    4,  761,  540,  221,  109,
 /*  1220 */   466,  670,  488,  300,   97,  117,   85,  408,  104,   90,
 /*  1230 */   503,  118,  512,   87,  210,  122,  212,   15,  595,  616,
 /*  1240 */    38,  473,  564,  689,   16,  513,  519,  710,  440,  439,
 /*  1250 */   404,  279,  202,  717,  720,  724,  280,  701,   27,  399,
 /*  1260 */   501,   30,  403,  197,   29,  527,  161,  498,  236,  518,
 /*  1270 */   472,  514,  470,  600,  226,  455,  457,  469,  451,  555,
 /*  1280 */   237,  753,  255,  102,  448,   58,   44,  453,  462,  517,
 /*  1290 */   301,  669,  101,  672,  671,  644,  643,  617,  108,  461,
 /*  1300 */   421,  443,  428,  430,  751,  510,  413,  641,  424,   24,
 /*  1310 */   764,  143,   55,  431,  198,  364,  406,  130,  693,   37,
 /*  1320 */   477,  288,  185,  468,   99,  153,  100,  287,  539,  502,
 /*  1330 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  506,
 /*  1340 */   520,  352,  333,  369,  341,  407,  269,  338,  850,  850,
 /*  1350 */   708,  709,  715,  402,  692,  171,  850,  336,  699,  714,
 /*  1360 */   711,  850,   62,  207,  850,  332,  323,  850,  850,  850,
 /*  1370 */   850,  850,  850,  850,  742,  743,  741,  148,  642,  129,
 /*  1380 */   127,  618,  359, 1292,   22,  529,  214,  193,  721,  850,
 /*  1390 */   850,  850,  599,  218,  322,  850,  365,  850,  850,  850,
 /*  1400 */   850,  850,  167,  713,   98,  850,  850,  744,  675,  850,
 /*  1410 */   850,  850,  850,  850,  850,  850,  540,  221,  109,  850,
 /*  1420 */   670,  850,  850,  850,  850,   85,  850,  104,   90,  850,
 /*  1430 */   118,  850,   87,  210,  122,  212,   15,  850,  850,   38,
 /*  1440 */   739,  850,  141,   16,  850,  750,  119,  603,  284,  120,
 /*  1450 */   725,  202,  717,  720,  724,  280,  701,   27,  399,  850,
 /*  1460 */    30,  403,  197,  850,  527,  161,  850,  236,  850,  850,
 /*  1470 */   850,  850,  600,  226,  850,  850,  850,  850,  555,  237,
 /*  1480 */   850,  255,  102,  448,   58,   44,  850,  850,  850,  301,
 /*  1490 */   669,  101,  672,  671,  644,  643,  617,  108,  850,  850,
 /*  1500 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  1510 */   143,  850,  850,  198,  850,  850,  130,  850,  850,  850,
 /*  1520 */   850,  185,  850,   99,  153,  100,  850,  539,  850,  189,
 /*  1530 */   186,  588,   86,   88,  115,   91,   92,  371,  850,  850,
 /*  1540 */   352,  333,  369,  341,  850,  850,  850,  850,  850,  708,
 /*  1550 */   709,  715,  402,  692,  171,  850,  336,  699,  714,  711,
 /*  1560 */   850,  850,  207,  850,  332,  323,  850,  850,  683,  667,
 /*  1570 */   850,  850,  850,  742,  743,  741,  148,  642,  129,  127,
 /*  1580 */   618,  359,    1,  529,  214,  193,  721,  850,  850,  850,
 /*  1590 */   599,  218,  322,  850,  365,  850,  850,  850,  850,  850,
 /*  1600 */   167,  713,   98,  850,  850,  744,  850,  850,  850,  850,
 /*  1610 */   850,  850,  850,  850,  540,  221,  109,  850,  670,  850,
 /*  1620 */   850,  850,  850,   85,  850,  104,   90,  850,  118,  850,
 /*  1630 */    87,  210,  122,  212,   15,  850,  850,   38,  850,  850,
 /*  1640 */   850,   16,  850,  850,  850,  850,  850,  850,  850,  202,
 /*  1650 */   717,  720,  724,  280,  701,   27,  399,  850,   30,  403,
 /*  1660 */   197,  850,  527,  161,  850,  236,  850,  850,  850,  850,
 /*  1670 */   600,  226,  850,  850,  850,  850,  555,  237,  850,  255,
 /*  1680 */   102,  448,   58,   44,  850,  850,  850,  301,  669,  101,
 /*  1690 */   672,  671,  644,  643,  617,  108,  850,  850,  850,  850,
 /*  1700 */   850,  850,  850,  850,  850,  850,  850,  850,  143,  850,
 /*  1710 */   850,  198,  850,  850,  130,  850,  850,  850,  850,  185,
 /*  1720 */   850,   99,  153,  100,  850,  539,  850,  189,  186,  588,
 /*  1730 */    86,   88,  115,   91,   92,  371,  850,  850,  352,  333,
 /*  1740 */   369,  341,  850,  850,  850,  850,  850,  708,  709,  715,
 /*  1750 */   402,  692,  171,  850,  336,  699,  714,  711,  850,  850,
 /*  1760 */   207,  850,  332,  323,  850,  850,  850,  850,  850,  850,
 /*  1770 */   850,  742,  743,  741,  148,  642,  129,  127,  618,  359,
 /*  1780 */   547,  214,  193,  721,  850,  850,  850,  599,  218,  322,
 /*  1790 */   850,  365,  850,  850,  850,  850,  850,  167,  713,   98,
 /*  1800 */   850,  850,  744,  850,  850,  850,  850,  850,  850,  850,
 /*  1810 */   850,  540,  221,  109,  850,  670,  850,  850,  850,  850,
 /*  1820 */    85,  850,  104,   90,  850,  118,  850,   87,  210,  122,
 /*  1830 */   212,   15,  583,  850,   38,  850,  850,  850,   16,  850,
 /*  1840 */   850,  850,  850,  850,  850,  850,  202,  717,  720,  724,
 /*  1850 */   280,  701,   27,  399,  850,   30,  403,  197,  850,  527,
 /*  1860 */   161,  850,  236,  850,  850,  850,  850,  600,  226,  850,
 /*  1870 */   850,  850,  850,  555,  237,  850,  255,  102,  448,   58,
 /*  1880 */    44,  850,  850,  850,  301,  669,  101,  672,  671,  644,
 /*  1890 */   643,  617,  108,  850,  850,  850,  850,  850,  850,  850,
 /*  1900 */   850,  850,  850,  850,  850,  143,  850,  850,  198,  850,
 /*  1910 */   850,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /*  1920 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /*  1930 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /*  1940 */   850,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /*  1950 */   850,  336,  699,  714,  711,  850,  850,  207,  850,  332,
 /*  1960 */   323,  850,  850,  850,  850,  850,  850,  850,  742,  743,
 /*  1970 */   741,  148,  642,  129,  127,  618,  359,  547,  214,  193,
 /*  1980 */   721,  850,  850,  850,  599,  218,  322,  850,  365,  850,
 /*  1990 */   850,  850,  850,  850,  167,  713,   98,  850,  850,  744,
 /*  2000 */   850,  850,  850,  850,  850,  850,  850,  850,  540,  221,
 /*  2010 */   109,  850,  670,  850,  850,  850,  850,   85,  850,  104,
 /*  2020 */    90,  850,  118,  850,   87,  210,  122,  212,   15,  686,
 /*  2030 */   850,   38,  850,  850,  850,   16,  850,  850,  850,  850,
 /*  2040 */   850,  850,  850,  202,  717,  720,  724,  280,  701,   27,
 /*  2050 */   399,  850,   30,  403,  197,  850,  527,  161,  850,  236,
 /*  2060 */   850,  850,  850,  850,  600,  226,  850,  850,  850,  850,
 /*  2070 */   555,  237,  850,  255,  102,  448,   58,   44,  850,  850,
 /*  2080 */   850,  301,  669,  101,  672,  671,  644,  643,  617,  108,
 /*  2090 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  2100 */   850,  850,  143,  850,  850,  198,  850,  850,  130,  850,
 /*  2110 */   850,  850,  850,  185,  850,   99,  153,  100,  850,  539,
 /*  2120 */   850,  189,  186,  588,   86,   88,  115,   91,   92,  371,
 /*  2130 */   850,  850,  352,  333,  369,  341,  850,  850,  850,  850,
 /*  2140 */   850,  708,  709,  715,  402,  692,  171,  850,  336,  699,
 /*  2150 */   714,  711,  850,  850,  207,  850,  332,  323,  850,  850,
 /*  2160 */   850,  850,  850,  850,  850,  742,  743,  741,  148,  642,
 /*  2170 */   129,  127,  618,  359,  547,  214,  193,  721,  850,  850,
 /*  2180 */   850,  599,  218,  322,  850,  365,  850,  850,  850,  850,
 /*  2190 */   850,  167,  713,   98,  850,  850,  744,  850,  850,  850,
 /*  2200 */   850,  850,  850,  850,  850,  540,  221,  109,  850,  670,
 /*  2210 */   850,  850,  850,  850,   85,  850,  104,   90,  850,  118,
 /*  2220 */   850,   87,  210,  122,  212,   15,  584,  850,   38,  850,
 /*  2230 */   850,  850,   16,  850,  850,  850,  850,  850,  850,  850,
 /*  2240 */   202,  717,  720,  724,  280,  701,   27,  399,  850,   30,
 /*  2250 */   403,  197,  850,  527,  161,  850,  236,  850,  850,  850,
 /*  2260 */   850,  600,  226,  850,  850,  850,  850,  555,  237,  850,
 /*  2270 */   255,  102,  448,   58,   44,  850,  850,  850,  301,  669,
 /*  2280 */   101,  672,  671,  644,  643,  617,  108,  850,  850,  850,
 /*  2290 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  143,
 /*  2300 */   850,  850,  198,  850,  850,  130,  850,  850,  850,  850,
 /*  2310 */   185,  850,   99,  153,  100,  850,  539,  850,  189,  186,
 /*  2320 */   588,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /*  2330 */   333,  369,  341,  850,  850,  850,  850,  850,  708,  709,
 /*  2340 */   715,  402,  692,  171,  850,  336,  699,  714,  711,  850,
 /*  2350 */   850,  207,  850,  332,  323,  850,  850,  850,  850,  850,
 /*  2360 */   850,  850,  742,  743,  741,  148,  642,  129,  127,  618,
 /*  2370 */   359,  547,  214,  193,  721,  850,  850,  850,  599,  218,
 /*  2380 */   322,  850,  365,  850,  850,  850,  850,  850,  167,  713,
 /*  2390 */    98,  850,  850,  744,  850,  850,  850,  850,  850,  850,
 /*  2400 */   850,  850,  540,  221,  109,  850,  670,  850,  850,  850,
 /*  2410 */   850,   85,  850,  104,   90,  850,  118,  850,   87,  210,
 /*  2420 */   122,  212,   15,  571,  850,   38,  850,  850,  850,   16,
 /*  2430 */   850,  850,  850,  850,  850,  850,  850,  202,  717,  720,
 /*  2440 */   724,  280,  701,   27,  399,  850,   30,  403,  197,  850,
 /*  2450 */   527,  161,  850,  236,  850,  850,  850,  850,  600,  226,
 /*  2460 */   850,  850,  850,  850,  555,  237,  850,  255,  102,  448,
 /*  2470 */    58,   44,  850,  850,  850,  301,  669,  101,  672,  671,
 /*  2480 */   644,  643,  617,  108,  850,  850,  850,  850,  850,  850,
 /*  2490 */   850,  850,  850,  850,  850,  850,  143,  850,  850,  198,
 /*  2500 */   850,  850,  130,  850,  850,  850,  850,  185,  850,   99,
 /*  2510 */   153,  100,  850,  539,  850,  189,  186,  588,   86,   88,
 /*  2520 */   115,   91,   92,  371,  850,  850,  352,  333,  369,  341,
 /*  2530 */   850,  850,  850,  850,  850,  708,  709,  715,  402,  692,
 /*  2540 */   171,  850,  336,  699,  714,  711,  850,  850,  207,  850,
 /*  2550 */   332,  323,  850,  850,  850,  850,  850,  850,  850,  742,
 /*  2560 */   743,  741,  148,  642,  129,  127,  618,  359,   11,  529,
 /*  2570 */   214,  193,  721,  850,  850,  850,  599,  218,  322,  850,
 /*  2580 */   365,  850,  850,  850,  850,  850,  167,  713,   98,  850,
 /*  2590 */   850,  744,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  2600 */   540,  221,  109,  850,  670,  850,  850,  850,  850,   85,
 /*  2610 */   850,  104,   90,  850,  118,  850,   87,  210,  122,  212,
 /*  2620 */    15,  850,  850,   38,  850,  850,  850,   16,  850,  850,
 /*  2630 */   850,  850,  850,  850,  850,  202,  717,  720,  724,  280,
 /*  2640 */   701,   27,  399,  850,   30,  403,  197,  850,  527,  161,
 /*  2650 */   850,  236,  850,  850,  850,  850,  600,  226,  850,  850,
 /*  2660 */   850,  850,  555,  237,  850,  255,  102,  448,   58,   44,
 /*  2670 */   850,  850,  850,  301,  669,  101,  672,  671,  644,  643,
 /*  2680 */   617,  108,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  2690 */   850,  850,  850,  850,  143,  850,  850,  198,  850,  850,
 /*  2700 */   130,  850,  850,  850,  850,  185,  850,   99,  153,  100,
 /*  2710 */   850,  539,  850,  189,  186,  588,   86,   88,  115,   91,
 /*  2720 */    92,  371,  850,  850,  352,  333,  369,  341,  850,  850,
 /*  2730 */   850,  850,  850,  708,  709,  715,  402,  692,  171,  850,
 /*  2740 */   336,  699,  714,  711,  850,  850,  207,  850,  332,  323,
 /*  2750 */   850,  850,  850,  850,  850,  850,  850,  742,  743,  741,
 /*  2760 */   148,  642,  129,  127,  618,  359,   18,  529,  214,  193,
 /*  2770 */   721,  850,  850,  850,  599,  218,  322,  850,  365,  850,
 /*  2780 */   850,  850,  850,  850,  167,  713,   98,  850,  850,  744,
 /*  2790 */   850,  850,  850,  850,  850,  850,  850,  850,  540,  221,
 /*  2800 */   109,  850,  670,  850,  850,  850,  850,   85,  850,  104,
 /*  2810 */    90,  850,  118,  850,   87,  210,  122,  212,   15,  850,
 /*  2820 */   850,   38,  850,  850,  850,   16,  850,  850,  850,  850,
 /*  2830 */   850,  850,  850,  202,  717,  720,  724,  280,  701,   27,
 /*  2840 */   399,  850,   30,  403,  197,  850,  527,  161,  850,  236,
 /*  2850 */   850,  850,  850,  850,  600,  226,  850,  850,  850,  850,
 /*  2860 */   555,  237,  850,  255,  102,  448,   58,   44,  850,  850,
 /*  2870 */   850,  301,  669,  101,  672,  671,  644,  643,  617,  108,
 /*  2880 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  2890 */   850,  850,  143,  850,  850,  198,  850,  850,  130,  850,
 /*  2900 */   850,  850,  850,  185,  850,   99,  153,  100,  850,  539,
 /*  2910 */   850,  189,  186,  588,   86,   88,  115,   91,   92,  371,
 /*  2920 */   850,  850,  352,  333,  369,  341,  850,  850,  850,  850,
 /*  2930 */   850,  708,  709,  715,  402,  692,  171,  850,  336,  699,
 /*  2940 */   714,  711,  850,  850,  207,  850,  332,  323,  850,  850,
 /*  2950 */   850,  850,  850,  850,  850,  742,  743,  741,  148,  642,
 /*  2960 */   129,  127,  618,  359,   19,  529,  214,  193,  721,  850,
 /*  2970 */   850,  850,  599,  218,  322,  850,  365,  850,  850,  850,
 /*  2980 */   850,  850,  167,  713,   98,  850,  850,  744,  850,  850,
 /*  2990 */   850,  850,  850,  850,  850,  850,  540,  221,  109,  850,
 /*  3000 */   670,  850,  850,  850,  850,   85,  850,  104,   90,  850,
 /*  3010 */   118,  850,   87,  210,  122,  212,   15,  850,  850,   38,
 /*  3020 */   850,  850,  850,   16,  850,  850,  850,  850,  850,  850,
 /*  3030 */   850,  202,  717,  720,  724,  280,  701,   27,  399,  850,
 /*  3040 */    30,  403,  197,  850,  527,  161,  850,  236,  850,  850,
 /*  3050 */   850,  850,  600,  226,  850,  850,  850,  850,  555,  237,
 /*  3060 */   850,  255,  102,  448,   58,   44,  850,  850,  850,  301,
 /*  3070 */   669,  101,  672,  671,  644,  643,  617,  108,  850,  850,
 /*  3080 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  3090 */   143,  850,  850,  198,  850,  850,  130,  850,  850,  850,
 /*  3100 */   850,  185,  850,   99,  153,  100,  850,  539,  850,  189,
 /*  3110 */   186,  588,   86,   88,  115,   91,   92,  371,  850,  850,
 /*  3120 */   352,  333,  369,  341,  850,  850,  850,  850,  850,  708,
 /*  3130 */   709,  715,  402,  692,  171,  850,  336,  699,  714,  711,
 /*  3140 */   850,  850,  207,  850,  332,  323,  850,  850,  850,  850,
 /*  3150 */   850,  850,  850,  742,  743,  741,  148,  642,  129,  127,
 /*  3160 */   618,  359,   23,  529,  214,  193,  721,  850,  850,  850,
 /*  3170 */   599,  218,  322,  850,  365,  850,  850,  850,  850,  850,
 /*  3180 */   167,  713,   98,  850,  850,  744,  850,  850,  850,  850,
 /*  3190 */   850,  850,  850,  850,  540,  221,  109,  850,  670,  850,
 /*  3200 */   850,  850,  850,   85,  850,  104,   90,  850,  118,  850,
 /*  3210 */    87,  210,  122,  212,   15,  850,  850,   38,  850,  850,
 /*  3220 */   850,   16,  850,  850,  850,  850,  850,  850,  850,  202,
 /*  3230 */   717,  720,  724,  280,  701,   27,  399,  850,   30,  403,
 /*  3240 */   197,  850,  527,  161,  850,  236,  850,  850,  850,  850,
 /*  3250 */   600,  226,  850,  850,  850,  850,  555,  237,  850,  255,
 /*  3260 */   102,  448,   58,   44,  850,  850,  850,  301,  669,  101,
 /*  3270 */   672,  671,  644,  643,  617,  108,  850,  850,  850,  850,
 /*  3280 */   850,  850,  850,  850,  850,  850,  850,  850,  143,  850,
 /*  3290 */   850,  198,  850,  850,  130,  850,  850,  850,  850,  185,
 /*  3300 */   850,   99,  153,  100,  850,  539,  850,  189,  186,  588,
 /*  3310 */    86,   88,  115,   91,   92,  371,  850,  850,  352,  333,
 /*  3320 */   369,  341,  850,  850,  850,  850,  850,  708,  709,  715,
 /*  3330 */   402,  692,  171,  850,  336,  699,  714,  711,  850,  850,
 /*  3340 */   207,  850,  332,  323,  850,  850,  850,  850,  850,  850,
 /*  3350 */   850,  742,  743,  741,  148,  642,  129,  127,  618,  359,
 /*  3360 */    20,  529,  214,  193,  721,  850,  850,  850,  599,  218,
 /*  3370 */   322,  850,  365,  850,  850,  850,  850,  850,  167,  713,
 /*  3380 */    98,  850,  850,  744,  850,  850,  850,  850,  850,  850,
 /*  3390 */   850,  850,  540,  221,  109,  850,  670,  850,  850,  850,
 /*  3400 */   850,   85,  850,  104,   90,  850,  118,  850,   87,  210,
 /*  3410 */   122,  212,   15,  850,  850,   38,  850,  850,  850,   16,
 /*  3420 */   850,  850,  850,  850,  850,  850,  850,  202,  717,  720,
 /*  3430 */   724,  280,  701,   27,  399,  850,   30,  403,  197,  850,
 /*  3440 */   527,  161,  850,  236,  850,  850,  850,  850,  600,  226,
 /*  3450 */   850,  850,  850,  850,  555,  237,  850,  255,  102,  448,
 /*  3460 */    58,   44,  850,  850,  850,  301,  669,  101,  672,  671,
 /*  3470 */   644,  643,  617,  108,  850,  850,  850,  850,  850,  850,
 /*  3480 */   850,  850,  850,  850,  850,  850,  143,  850,  850,  198,
 /*  3490 */   850,  850,  130,  850,  850,  850,  850,  185,  850,   99,
 /*  3500 */   153,  100,  850,  539,  850,  189,  186,  588,   86,   88,
 /*  3510 */   115,   91,   92,  371,  850,  850,  352,  333,  369,  341,
 /*  3520 */   850,  850,  850,  850,  850,  708,  709,  715,  402,  692,
 /*  3530 */   171,  850,  336,  699,  714,  711,  850,  850,  207,  850,
 /*  3540 */   332,  323,  850,  850,  850,  850,  850,  850,  850,  742,
 /*  3550 */   743,  741,  148,  642,  129,  127,  618,  359,  547,  214,
 /*  3560 */   193,  721,  850,  850,  850,  599,  218,  322,  850,  365,
 /*  3570 */   850,  850,  850,  850,  850,  167,  713,   98,  850,  850,
 /*  3580 */   744,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /*  3590 */   221,  109,  850,  670,  850,  850,  850,  850,   85,  850,
 /*  3600 */   104,   90,  850,  118,  850,   87,  210,  122,  212,   15,
 /*  3610 */   850,  850,   38,  850,  850,  850,   16,  850,  850,  850,
 /*  3620 */   850,  850,  850,  850,  202,  717,  720,  724,  280,  701,
 /*  3630 */    27,  399,  850,   30,  403,  197,  850,  527,  161,  850,
 /*  3640 */   236,  850,  850,  850,  850,  600,  226,  850,  850,  850,
 /*  3650 */   850,  555,  237,  850,  255,  102,  448,   58,   44,  850,
 /*  3660 */   850,  850,  301,  669,  101,  672,  671,  644,  643,  617,
 /*  3670 */   108,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  3680 */   850,  850,  850,  143,  850,  850,  198,  850,  850,  130,
 /*  3690 */   850,  850,  850,  850,  185,  850,   99,  153,  100,  850,
 /*  3700 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /*  3710 */   371,  850,  850,  352,  333,  369,  341,  850,  850,  850,
 /*  3720 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /*  3730 */   699,  714,  711,  850,  850,  207,  850,  332,  323,  850,
 /*  3740 */   850,  850,  850,  850,  850,  850,  742,  743,  741,  148,
 /*  3750 */   642,  129,  127,  618,  359,  214,  193,  568,  850,  850,
 /*  3760 */   850,  599,  218,  322,  850,  365,  850,  850,  850,  850,
 /*  3770 */   850,  167,  713,  215,  850,  675,  744,  850,  850,  850,
 /*  3780 */   850,  850,  850,  850,  850,  540,  850,  112,  850,  670,
 /*  3790 */   850,  850,  850,  850,   85,  850,  104,   90,  850,  131,
 /*  3800 */   850,   89,  850,  140,  850,   15,  850,  760,   38,  124,
 /*  3810 */   850,  850,  750,  119,  603,  284,  120,  725,  850,  850,
 /*  3820 */   850,  850,  850,  724,  280,  701,   27,  399,  850,   30,
 /*  3830 */   403,  197,  850,  527,  161,  850,  236,  850,  850,  850,
 /*  3840 */   850,  600,  226,  850,  850,  850,  850,  555,  237,  850,
 /*  3850 */   255,  102,  448,   58,   44,  850,  850,  850,  301,  669,
 /*  3860 */   101,  672,  671,  644,  643,  617,  108,  850,  850,  850,
 /*  3870 */   850,  850,  850,  850,  850,  850,  243,  850,  850,  143,
 /*  3880 */   850,  850,  198,  850,  850,  130,  850,  850,  850,  850,
 /*  3890 */   185,  850,   99,  153,  100,  850,  539,  850,  189,  186,
 /*  3900 */   588,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /*  3910 */   333,  369,  341,  850,  850,  850,  850,  850,  708,  709,
 /*  3920 */   715,  402,  692,  171,  850,  336,  699,  714,  711,  850,
 /*  3930 */   850,  207,  666,  332,  323,  683,  667,  850,  850,  850,
 /*  3940 */   850,  850,  742,  743,  741,  148,  642,  129,  127,  618,
 /*  3950 */   359,  214,  193,  566,  850,  850,  850,  599,  218,  322,
 /*  3960 */   850,  365,  850,  850,  850,  850,  850,  167,  713,  215,
 /*  3970 */   850,  850,  744,  850,  850,  850,  850,  850,  850,  850,
 /*  3980 */   850,  540,  850,  112,  850,  670,  850,  850,  850,  850,
 /*  3990 */    85,  850,  104,   90,  850,  131,  850,   89,  850,  140,
 /*  4000 */   850,   15,  850,  850,   38,   48,   51,   52,   50,   54,
 /*  4010 */    46,   47,   56,   59,   60,   57,   63,  850,   64,  724,
 /*  4020 */   280,  701,   27,  399,  850,   30,  403,  197,  850,  527,
 /*  4030 */   161,  850,  236,  850,  850,  850,  850,  600,  226,  850,
 /*  4040 */   850,  850,  850,  555,  237,  850,  255,  102,  448,   58,
 /*  4050 */    44,  850,  850,  850,  301,  669,  101,  672,  671,  644,
 /*  4060 */   643,  617,  108,  850,  850,  850,  850,  850,  850,  850,
 /*  4070 */   850,  850,  850,  850,  850,  143,  850,  850,  198,  850,
 /*  4080 */   850,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /*  4090 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /*  4100 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /*  4110 */   850,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /*  4120 */   850,  336,  699,  714,  711,  850,  850,  207,  850,  332,
 /*  4130 */   323,  850,  850,  850,  850,  850,  850,  850,  742,  743,
 /*  4140 */   741,  148,  642,  129,  127,  618,  359,  214,  193,  716,
 /*  4150 */   850,  850,  850,  599,  218,  322,  850,  365,  850,  850,
 /*  4160 */   850,  850,  850,  167,  713,  215,  850,  675,  744,  850,
 /*  4170 */   850,  850,  675,  850,  850,  850,  850,  540,  850,  112,
 /*  4180 */   850,  670,  850,  850,  850,  850,   85,  850,  104,   90,
 /*  4190 */   850,  131,  850,   89,  850,  140,  850,   15,  850,  850,
 /*  4200 */    38,  180,  850,  850,  850,  135,  180,  262,  133,  850,
 /*  4210 */   135,  850,  262,  133,  850,  724,  280,  701,   27,  399,
 /*  4220 */   850,   30,  403,  197,  850,  527,  161,  850,  236,  850,
 /*  4230 */   850,  850,  850,  600,  226,  850,  850,  850,  850,  555,
 /*  4240 */   237,  850,  255,  102,  448,   58,   44,  850,  850,  850,
 /*  4250 */   301,  669,  101,  672,  671,  644,  643,  617,  108,  850,
 /*  4260 */   850,  850,  850,  850,  850,  850,  850,  850,  243,  850,
 /*  4270 */   850,  143,  850,  850,  198,  850,  850,  130,  850,  850,
 /*  4280 */   850,  850,  185,  850,   99,  153,  100,  850,  539,  850,
 /*  4290 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  850,
 /*  4300 */   850,  352,  333,  369,  341,  850,  850,  850,  850,  850,
 /*  4310 */   708,  709,  715,  402,  692,  171,  850,  336,  699,  714,
 /*  4320 */   711,  850,  850,  207,  666,  332,  323,  683,  667,  661,
 /*  4330 */   850,  850,  683,  667,  742,  743,  741,  148,  642,  129,
 /*  4340 */   127,  618,  359,  214,  193,  289,  850,  850,  850,  599,
 /*  4350 */   218,  322,  850,  365,  850,  850,  850,  850,  850,  167,
 /*  4360 */   713,  215,  850,  850,  744,  850,  850,  850,  850,  850,
 /*  4370 */   850,  850,  850,  540,  850,  112,  850,  670,  850,  850,
 /*  4380 */   850,  850,   85,  850,  104,   90,  850,  131,  850,   89,
 /*  4390 */   850,  140,  850,   15,  850,  850,   38,  850,  850,  850,
 /*  4400 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  4410 */   850,  724,  280,  701,   27,  399,  850,   30,  403,  197,
 /*  4420 */   850,  527,  161,  850,  236,  850,  850,  850,  850,  600,
 /*  4430 */   226,  850,  850,  850,  850,  555,  237,  850,  255,  102,
 /*  4440 */   448,   58,   44,  850,  850,  850,  301,  669,  101,  672,
 /*  4450 */   671,  644,  643,  617,  108,  850,  850,  850,  850,  850,
 /*  4460 */   850,  850,  850,  850,  850,  850,  850,  143,  850,  850,
 /*  4470 */   198,  850,  850,  130,  850,  850,  850,  850,  185,  850,
 /*  4480 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /*  4490 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /*  4500 */   341,  850,  850,  850,  850,  850,  708,  709,  715,  402,
 /*  4510 */   692,  171,  850,  336,  699,  714,  711,  850,  850,  207,
 /*  4520 */   850,  332,  323,  850,  850,  850,  850,  850,  850,  850,
 /*  4530 */   742,  743,  741,  148,  642,  129,  127,  618,  359,  214,
 /*  4540 */   193,  538,  850,  850,  850,  599,  218,  322,  850,  365,
 /*  4550 */   850,  850,  850,  850,  850,  167,  713,  215,  850,  850,
 /*  4560 */   744,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /*  4570 */   850,  112,  850,  670,  850,  850,  850,  850,   85,  850,
 /*  4580 */   104,   90,  850,  131,  850,   89,  850,  140,  850,   15,
 /*  4590 */   850,  850,   38,  850,  850,  850,  850,  850,  850,  850,
 /*  4600 */   850,  850,  850,  850,  850,  850,  850,  724,  280,  701,
 /*  4610 */    27,  399,  850,   30,  403,  197,  850,  527,  161,  850,
 /*  4620 */   236,  850,  850,  850,  850,  600,  226,  850,  850,  850,
 /*  4630 */   850,  555,  237,  850,  255,  102,  448,   58,   44,  850,
 /*  4640 */   850,  850,  301,  669,  101,  672,  671,  644,  643,  617,
 /*  4650 */   108,  850,  850,  850,  850,  850,  850,  850,  190,  850,
 /*  4660 */   628,  351,  850,  143,  626,  850,  198,  629,  850,  130,
 /*  4670 */   850,  850,  850,  850,  185,  850,   99,  153,  100,  850,
 /*  4680 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /*  4690 */   371,  850,  850,  352,  333,  369,  341,  850,  850,  850,
 /*  4700 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /*  4710 */   699,  714,  711,  850,  850,  207,  850,  332,  323,  850,
 /*  4720 */   850,  372,  850,  850,  850,  850,  742,  743,  741,  148,
 /*  4730 */   642,  129,  127,  618,  359,  850,  167,  713,  850,  850,
 /*  4740 */   850,  850,  850,  850,  850,  850,  850,  335,  850,  850,
 /*  4750 */   540,  850,  112,  850,  670,  850,  850,  339,  850,   85,
 /*  4760 */   850,  104,   90,  850,  131,  850,   89,  850,  140,  850,
 /*  4770 */   850,  850,  850,   38,  361,  344,  354,  348,  357,  356,
 /*  4780 */   353,  327,  325,  386,  850,  850,  850,  364,  383,  343,
 /*  4790 */   701,  387,  560,  392,  382,  378,  379,  850,  850,  850,
 /*  4800 */   850,  850,  850,  850,  297,  558,  850,  850,  850,  850,
 /*  4810 */   850,  850,  850,  850,  850,  850,  850,  850,   58,   44,
 /*  4820 */   850,  850,  850,  301,  669,  101,  672,  671,  644,  643,
 /*  4830 */   617,  108,  850,  850,  742,  743,  741,  148,  642,  129,
 /*  4840 */   127,  618,  359,  850,  143,  850,  850,  198,  850,  850,
 /*  4850 */   130,  850,  850,  850,  850,  185,  850,   99,  153,  100,
 /*  4860 */   850,  539,  850,  189,  186,  588,   86,   88,  115,   91,
 /*  4870 */    92,  371,  850,  850,  352,  333,  369,  341,  850,  850,
 /*  4880 */   850,  850,  850,  708,  709,  715,  402,  692,  171,  850,
 /*  4890 */   336,  699,  714,  711,  850,  850,  207,  850,  332,  323,
 /*  4900 */   850,  850,  372,  850,  850,  850,  850,  742,  743,  741,
 /*  4910 */   148,  642,  129,  127,  618,  359,  850,  167,  713,  850,
 /*  4920 */   850,  850,  850,  850,  345,  850,  850,  850,  335,  850,
 /*  4930 */   850,  540,  850,  112,  229,  670,  850,  233,  339,  850,
 /*  4940 */    85,  850,  104,   90,  850,  131,  850,   89,  850,  140,
 /*  4950 */   850,  850,  850,  320,   38,  361,  344,  354,  348,  357,
 /*  4960 */   356,  353,  327,  325,  850,  850,  850,  347,  364,  383,
 /*  4970 */   343,  701,  387,  271,  392,  382,  378,  379,  850,  850,
 /*  4980 */   393,  381,  376,  370,  850,  850,  380,  384,  321,  324,
 /*  4990 */   391,  375,  850,  850,  850,  850,  850,  850,  850,   58,
 /*  5000 */    44,  850,  850,  850,  301,  669,  101,  672,  671,  644,
 /*  5010 */   643,  617,  108,  312,  307,  309,  310,  311,  291,  273,
 /*  5020 */   272,  274,  275,  850,  850,  143,  850,  850,  198,  850,
 /*  5030 */   850,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /*  5040 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /*  5050 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /*  5060 */   850,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /*  5070 */   850,  336,  699,  714,  711,  850,  850,  207,  850,  332,
 /*  5080 */   323,  850,  850,  372,  850,  850,  850,  850,  742,  743,
 /*  5090 */   741,  148,  642,  129,  127,  618,  359,  850,  167,  713,
 /*  5100 */   850,  850,  850,  850,  850,  345,  850,  850,  850,  335,
 /*  5110 */   850,  850,  540,  850,  112,  850,  670,  850,  850,  339,
 /*  5120 */   850,   85,  850,  104,   90,  850,  131,  850,   89,  850,
 /*  5130 */   140,  850,  850,  850,  850,   38,  850,  850,  850,  850,
 /*  5140 */   850,  850,  850,  850,  850,  551,  351,  850,  347,  626,
 /*  5150 */   383,  343,  701,  387,  252,  392,  382,  378,  379,  338,
 /*  5160 */   850,  393,  381,  376,  370,  850,  850,  380,  384,  321,
 /*  5170 */   324,  391,  375,  850,  850,  850,  850,  850,  850,  850,
 /*  5180 */    58,   44,  850,  850,  850,  301,  669,  101,  672,  671,
 /*  5190 */   644,  643,  617,  108,  850,  850,  850,  850,  850,  850,
 /*  5200 */   850,  850,  850,  850,  850,  850,  143,  850,  850,  198,
 /*  5210 */   850,  850,  130,  850,  850,  850,  850,  185,  850,   99,
 /*  5220 */   153,  100,  850,  539,  850,  189,  186,  588,   86,   88,
 /*  5230 */   115,   91,   92,  371,  850,  850,  352,  333,  369,  341,
 /*  5240 */   850,  850,  850,  850,  850,  708,  709,  715,  402,  692,
 /*  5250 */   171,  850,  336,  699,  714,  711,  850,  850,  207,  850,
 /*  5260 */   332,  323,  850,  850,  372,  850,  850,  850,  850,  742,
 /*  5270 */   743,  741,  148,  642,  129,  127,  618,  359,  850,  167,
 /*  5280 */   713,  850,  850,  850,  850,  850,  345,  850,  850,  850,
 /*  5290 */   335,  850,  850,  540,  850,  112,  850,  670,  850,  850,
 /*  5300 */   339,  850,   85,  850,  104,   90,  850,  131,  850,   89,
 /*  5310 */   850,  140,  850,  850,  850,  850,   38,  850,  850,  742,
 /*  5320 */   743,  741,  148,  642,  129,  127,  618,  359,  850,  347,
 /*  5330 */   850,  383,  343,  701,  387,  419,  392,  382,  378,  379,
 /*  5340 */   850,  850,  393,  381,  376,  370,  850,  850,  380,  384,
 /*  5350 */   321,  324,  391,  375,  850,  850,  850,  850,  850,  850,
 /*  5360 */   850,   58,   44,  850,  850,  850,  301,  669,  101,  672,
 /*  5370 */   671,  644,  643,  617,  108,  850,  850,  850,  850,  850,
 /*  5380 */   850,  850,  850,  850,  850,  850,  850,  143,  850,  850,
 /*  5390 */   198,  850,  850,  130,  850,  850,  850,  850,  185,  850,
 /*  5400 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /*  5410 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /*  5420 */   341,  850,  850,  850,  850,  850,  708,  709,  715,  402,
 /*  5430 */   692,  171,  850,  336,  699,  714,  711,  850,  850,  207,
 /*  5440 */   850,  332,  323,  850,  850,  372,  850,  850,  850,  850,
 /*  5450 */   742,  743,  741,  148,  642,  129,  127,  618,  359,  850,
 /*  5460 */   167,  713,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  5470 */   850,  335,  850,  850,  540,  850,  112,  850,  670,  850,
 /*  5480 */   850,  339,  850,   85,  850,  104,   90,  850,  131,  850,
 /*  5490 */    89,  850,  140,  850,  850,  850,  850,   38,  361,  344,
 /*  5500 */   354,  348,  357,  356,  353,  327,  325,  640,  634,  633,
 /*  5510 */   627,  364,  383,  343,  701,  387,  286,  392,  382,  378,
 /*  5520 */   379,  850,  361,  344,  354,  348,  357,  356,  353,  327,
 /*  5530 */   325,  386,  713,  850,  850,  850,  850,  850,  850,  850,
 /*  5540 */   850,  850,   58,   44,  850,  850,  850,  301,  669,  101,
 /*  5550 */   672,  671,  644,  643,  617,  108,  850,  134,  850,  159,
 /*  5560 */   850,  850,  850,  163,  850,  850,  850,  850,  143,  850,
 /*  5570 */   850,  198,  850,  850,  130,  850,  850,  850,  850,  185,
 /*  5580 */   850,   99,  153,  100,  850,  539,  850,  189,  186,  588,
 /*  5590 */    86,   88,  115,   91,   92,  371,  850,  850,  352,  333,
 /*  5600 */   369,  341,  850,  850,  850,  850,  850,  708,  709,  715,
 /*  5610 */   402,  692,  171,  850,  336,  699,  714,  711,  850,  850,
 /*  5620 */   207,  850,  332,  323,  850,  850,  372,  850,  850,  850,
 /*  5630 */   850,  742,  743,  741,  148,  642,  129,  127,  618,  359,
 /*  5640 */   850,  167,  713,  850,  850,  850,  850,  850,  850,  850,
 /*  5650 */   850,  850,  850,  850,  850,  540,  850,  112,  850,  670,
 /*  5660 */   850,  850,  850,  850,   85,  850,  104,   90,  850,  131,
 /*  5670 */   850,   89,  850,  140,  850,  850,  850,  850,   38,  850,
 /*  5680 */   850,  850,  850,  850,  850,  850,  712,  714,  711,  850,
 /*  5690 */   850,  207,  850,  332,  323,  701,  850,  265,  850,  850,
 /*  5700 */   850,  850,  742,  743,  741,  148,  642,  129,  127,  618,
 /*  5710 */   359,  850,  850,  713,  850,  850,  850,  850,  850,  850,
 /*  5720 */   850,  850,  850,   58,   44,  850,  850,  850,  301,  669,
 /*  5730 */   101,  672,  671,  644,  643,  617,  108,  850,  850,  850,
 /*  5740 */   159,  850,  850,  850,  163,  850,  850,  850,  850,  143,
 /*  5750 */   850,  850,  198,  850,  850,  130,  850,  850,  850,  850,
 /*  5760 */   185,  850,   99,  153,  100,  850,  539,  850,  189,  186,
 /*  5770 */   588,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /*  5780 */   333,  369,  341,  850,  850,  850,  850,  850,  708,  709,
 /*  5790 */   715,  402,  692,  171,  850,  336,  699,  714,  711,  850,
 /*  5800 */   850,  207,  850,  332,  323,  850,  850,  372,  850,  850,
 /*  5810 */   850,  850,  742,  743,  741,  148,  642,  129,  127,  618,
 /*  5820 */   359,  850,  167,  713,  850,  850,  850,  850,  850,  850,
 /*  5830 */   850,  850,  850,  850,  850,  850,  540,  850,  112,  850,
 /*  5840 */   670,  850,  850,  850,  850,   85,  850,  104,   90,  850,
 /*  5850 */   131,  850,   89,  850,  140,  850,  850,  850,  850,   38,
 /*  5860 */   850,  850,  850,  850,  850,  850,  850,  712,  714,  711,
 /*  5870 */   850,  850,  207,  850,  332,  323,  701,  850,  302,  850,
 /*  5880 */   850,  850,  850,  742,  743,  741,  148,  642,  129,  127,
 /*  5890 */   618,  359,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  5900 */   850,  850,  850,  850,   58,   44,  850,  850,  850,  301,
 /*  5910 */   669,  101,  672,  671,  644,  643,  617,  108,  850,  850,
 /*  5920 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  5930 */   143,  850,  850,  198,  850,  850,  130,  850,  850,  850,
 /*  5940 */   850,  185,  850,   99,  153,  100,  850,  539,  850,  189,
 /*  5950 */   186,  588,   86,   88,  115,   91,   92,  371,  850,  850,
 /*  5960 */   352,  333,  369,  341,  850,  850,  850,  850,  850,  708,
 /*  5970 */   709,  715,  402,  692,  171,  850,  336,  699,  714,  711,
 /*  5980 */   850,  850,  207,  850,  332,  323,  850,  850,  372,  850,
 /*  5990 */   850,  850,  850,  742,  743,  741,  148,  642,  129,  127,
 /*  6000 */   618,  359,  850,  167,  713,  850,  850,  850,  850,  850,
 /*  6010 */   850,  345,  850,  850,  850,  335,  850,  540,  850,  112,
 /*  6020 */   850,  670,  850,  850,  850,  339,   85,  850,  104,   90,
 /*  6030 */   850,  131,  850,   89,  850,  140,  850,  850,  850,  850,
 /*  6040 */    38,  850,  361,  344,  354,  348,  357,  356,  353,  327,
 /*  6050 */   325,  850,  850,  850,  347,  364,  383,  701,  340,  270,
 /*  6060 */   850,  640,  634,  633,  627,  850,  850,  850,  850,  850,
 /*  6070 */   850,  850,  850,  850,  850,  850,  361,  344,  354,  348,
 /*  6080 */   357,  356,  353,  327,  325,   58,   44,  850,  850,  850,
 /*  6090 */   301,  669,  101,  672,  671,  644,  643,  617,  108,  850,
 /*  6100 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  6110 */   850,  143,  850,  850,  198,  850,  850,  130,  850,  850,
 /*  6120 */   850,  850,  185,  850,   99,  153,  100,  850,  539,  850,
 /*  6130 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  850,
 /*  6140 */   850,  352,  333,  369,  341,  850,  850,  850,  850,  850,
 /*  6150 */   708,  709,  715,  402,  692,  171,  850,  336,  699,  714,
 /*  6160 */   711,  850,  850,  207,  850,  332,  323,  850,  850,  372,
 /*  6170 */   850,  850,  850,  850,  742,  743,  741,  148,  642,  129,
 /*  6180 */   127,  618,  359,  850,  167,  713,  850,  850,  850,  850,
 /*  6190 */   850,  345,  850,  850,  850,  335,  850,  850,  540,  850,
 /*  6200 */   112,  850,  670,  850,  850,  339,  850,   85,  850,  104,
 /*  6210 */    90,  850,  131,  850,   89,  850,  140,  850,  850,  335,
 /*  6220 */   850,   38,  361,  344,  354,  348,  357,  356,  353,  327,
 /*  6230 */   325,  850,  850,  850,  347,  364,  383,  850,  701,  850,
 /*  6240 */   224,  850,  850,  850,  850,  850,  361,  344,  354,  348,
 /*  6250 */   357,  356,  353,  327,  325,  850,  850,  850,  347,  850,
 /*  6260 */   383,  850,  850,  850,  850,  850,   58,   44,  850,  850,
 /*  6270 */   850,  301,  669,  101,  672,  671,  644,  643,  617,  108,
 /*  6280 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  6290 */   850,  850,  143,  850,  850,  198,  850,  850,  130,  850,
 /*  6300 */   850,  850,  850,  185,  850,   99,  153,  100,  850,  539,
 /*  6310 */   850,  189,  186,  588,   86,   88,  115,   91,   92,  371,
 /*  6320 */   850,  850,  352,  333,  369,  341,  850,  850,  850,  850,
 /*  6330 */   850,  708,  709,  715,  402,  692,  171,  850,  336,  699,
 /*  6340 */   714,  711,  850,  850,  207,  850,  332,  323,  850,  850,
 /*  6350 */   850,  850,  850,  850,  850,  742,  743,  741,  148,  642,
 /*  6360 */   129,  127,  618,  359,  850,  345,  850,  850,  850,  335,
 /*  6370 */   850,  850,  850,  850,  850,  337,  258,  533,  234,  339,
 /*  6380 */   850,  850,  631,  630,  181,  349,  684,  850,  550,  544,
 /*  6390 */   543,  850,  850,  850,  850,  268,  361,  344,  354,  348,
 /*  6400 */   357,  356,  353,  327,  325,  850,  850,  850,  347,  364,
 /*  6410 */   383,  343,  850,  387,  850,  392,  382,  378,  379,  850,
 /*  6420 */   850,  393,  381,  376,  370,  850,  850,  380,  384,  321,
 /*  6430 */   324,  391,  375,  850,  850,  850,  850,  850,  850,  850,
 /*  6440 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  6450 */   303,  304,  299,  298,  294,  293,  295,  251,  250,  241,
 /*  6460 */   850,  850,  245,  850,  850,  249,  248,  247,  246,  283,
 /*  6470 */   269,  253,  254,  227,  231,  345,  850,  850,  850,  335,
 /*  6480 */   850,  850,  850,  850,  850,  337,  258,  528,  234,  339,
 /*  6490 */   850,  850,  631,  630,  181,  349,  684,  850,  550,  544,
 /*  6500 */   543,  850,  850,  850,  850,  268,  361,  344,  354,  348,
 /*  6510 */   357,  356,  353,  327,  325,  850,  850,  850,  347,  364,
 /*  6520 */   383,  343,  850,  387,  850,  392,  382,  378,  379,  850,
 /*  6530 */   850,  393,  381,  376,  370,  850,  850,  380,  384,  321,
 /*  6540 */   324,  391,  375,  850,  850,  850,  850,  850,  850,  850,
 /*  6550 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  6560 */   303,  304,  299,  298,  294,  293,  295,  251,  250,  241,
 /*  6570 */   850,  850,  245,  850,  850,  249,  248,  247,  246,  283,
 /*  6580 */   269,  253,  254,  227,  231,  345,  850,  850,  850,  335,
 /*  6590 */   850,  850,  850,  850,  850,  337,  258,  850,  234,  339,
 /*  6600 */   850,  850,  631,  630,  181,  349,  684,  850,  850,  850,
 /*  6610 */   850,  850,  850,  850,  850,  268,  361,  344,  354,  348,
 /*  6620 */   357,  356,  353,  327,  325,  850,  850,  850,  347,  364,
 /*  6630 */   383,  343,  850,  387,  850,  392,  382,  378,  379,  850,
 /*  6640 */   850,  393,  381,  376,  370,  850,  850,  380,  384,  321,
 /*  6650 */   324,  391,  375,  850,  850,  850,  850,  850,  850,  850,
 /*  6660 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  6670 */   303,  304,  299,  298,  294,  293,  295,  251,  250,  241,
 /*  6680 */   850,  850,  245,  850,  850,  249,  248,  247,  246,  283,
 /*  6690 */   269,  253,  254,  227,  231,  266,  267,  279,  372,  850,
 /*  6700 */   850,  850,  850,  850,  850,  850,  345,  850,  850,  850,
 /*  6710 */   335,  850,  152,  167,  713,  850,  850,  258,  257,  850,
 /*  6720 */   339,  850,  850,  850,  850,  850,  850,  540,  850,  850,
 /*  6730 */   850,  328,  850,  850,  850,  850,   85,  850,  104,   90,
 /*  6740 */   850,  131,  850,   89,  850,  140,  850,  850,  850,  347,
 /*  6750 */    38,  383,  343,  850,  387,  850,  392,  382,  378,  379,
 /*  6760 */   850,  850,  393,  381,  376,  370,  850,  701,  380,  384,
 /*  6770 */   321,  324,  391,  375,  850,  850,  850,  850,  850,  850,
 /*  6780 */   850,  850,  335,  850,  850,  850,  850,  850,  850,  850,
 /*  6790 */   850,  850,  850,  850,  850,  631,  630,  850,  850,  684,
 /*  6800 */   201,  850,  850,  850,  850,  850,  850,  850,  108,  361,
 /*  6810 */   344,  354,  348,  357,  356,  353,  327,  325,  850,  850,
 /*  6820 */   850,  143,  364,  383,  198,  850,  850,  130,  850,  850,
 /*  6830 */   850,  850,  185,  850,   99,  153,  100,  850,  539,  850,
 /*  6840 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  850,
 /*  6850 */   850,  352,  333,  369,  341,  850,  850,  850,  850,  850,
 /*  6860 */   708,  709,  715,  402,  692,  171,  850,  336,  699,  714,
 /*  6870 */   711,  850,  850,  207,  850,  332,  323,  360,  727,  729,
 /*  6880 */   736,  850,  850,  850,  742,  743,  741,  148,  642,  129,
 /*  6890 */   127,  618,  359,  850,  345,  850,  850,  850,  335,  850,
 /*  6900 */   850,  850,  850,  850,  337,  258,  257,  234,  339,  850,
 /*  6910 */   850,  631,  630,  181,  349,  684,  850,  850,  850,  850,
 /*  6920 */   850,  850,  850,  850,  268,  361,  344,  354,  348,  357,
 /*  6930 */   356,  353,  327,  325,  850,  850,  850,  347,  364,  383,
 /*  6940 */   343,  850,  387,  850,  392,  382,  378,  379,  850,  850,
 /*  6950 */   393,  381,  376,  370,  850,  850,  380,  384,  321,  324,
 /*  6960 */   391,  375,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  6970 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  303,
 /*  6980 */   304,  299,  298,  294,  293,  295,  251,  250,  241,  850,
 /*  6990 */   850,  245,  850,  850,  249,  248,  247,  246,  283,  269,
 /*  7000 */   253,  254,  227,  231,  345,  850,  850,  850,  335,  850,
 /*  7010 */   850,  850,  850,  850,  337,  258,  850,  234,  339,  850,
 /*  7020 */   850,  631,  630,  181,  349,  684,  850,  850,  850,  850,
 /*  7030 */   850,  850,  850,  850,  268,  361,  344,  354,  348,  357,
 /*  7040 */   356,  353,  327,  325,  850,  850,  850,  347,  364,  383,
 /*  7050 */   343,  850,  387,  850,  392,  382,  378,  379,  850,  850,
 /*  7060 */   393,  381,  376,  370,  850,  850,  380,  384,  321,  324,
 /*  7070 */   391,  375,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  7080 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  303,
 /*  7090 */   304,  299,  298,  294,  293,  295,  251,  250,  241,  850,
 /*  7100 */   850,  245,  850,  850,  249,  248,  247,  246,  283,  269,
 /*  7110 */   253,  254,  227,  231,  345,  850,  850,  850,  335,  850,
 /*  7120 */   850,  850,  850,  850,  337,  258,  850,  234,  339,  850,
 /*  7130 */   850,  631,  630,  850,  349,  684,  850,  850,  850,  850,
 /*  7140 */   850,  850,  850,  850,  268,  361,  344,  354,  348,  357,
 /*  7150 */   356,  353,  327,  325,  850,  850,  850,  347,  364,  383,
 /*  7160 */   343,  850,  387,  850,  392,  382,  378,  379,  850,  850,
 /*  7170 */   393,  381,  376,  370,  850,  850,  380,  384,  321,  324,
 /*  7180 */   391,  375,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  7190 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  303,
 /*  7200 */   304,  299,  298,  294,  293,  295,  251,  250,  241,  850,
 /*  7210 */   850,  245,  850,  850,  249,  248,  247,  246,  283,  269,
 /*  7220 */   253,  372,  850,  850,  345,  850,  850,  850,  335,  850,
 /*  7230 */   850,  850,  850,  850,  850,  199,  204,  713,  339,  850,
 /*  7240 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  7250 */   540,  850,  850,  850,  328,  850,  850,  850,  850,   85,
 /*  7260 */   850,  104,   90,  850,  131,  850,   89,  347,  140,  383,
 /*  7270 */   343,  340,  387,   38,  392,  382,  378,  379,  850,  850,
 /*  7280 */   393,  381,  376,  370,  850,  850,  380,  384,  321,  324,
 /*  7290 */   391,  375,  850,  850,  372,  850,  850,  850,  850,  850,
 /*  7300 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  167,
 /*  7310 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  7320 */   850,  850,  850,  540,  850,  850,  850,  850,  850,  850,
 /*  7330 */   850,  850,   85,  850,  850,   90,  850,  138,  850,   89,
 /*  7340 */   850,  137,  850,  850,  850,  850,   38,  850,  850,  850,
 /*  7350 */   850,  850,  850,  850,  850,  185,  850,   99,  153,  100,
 /*  7360 */   850,  539,  850,  189,  186,  588,   86,   88,  115,   91,
 /*  7370 */    92,  371,  850,  850,  352,  333,  369,  341,  850,  850,
 /*  7380 */   850,  850,  850,  708,  709,  715,  402,  692,  171,  850,
 /*  7390 */   336,  699,  714,  711,  850,  850,  207,  850,  332,  323,
 /*  7400 */   360,  727,  729,  736,  151,  850,  850,  742,  743,  741,
 /*  7410 */   148,  642,  129,  127,  618,  359,  850,  143,  850,  850,
 /*  7420 */   198,  850,  850,  130,  850,  850,  850,  850,  185,  850,
 /*  7430 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /*  7440 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /*  7450 */   341,  850,  850,  850,  335,  850,  708,  709,  715,  402,
 /*  7460 */   692,  171,  850,  336,  339,  850,  850,  850,  850,  207,
 /*  7470 */   850,  332,  323,  850,  850,  850,  850,  850,  850,  850,
 /*  7480 */   850,  850,  850,  850,  372,  850,  850,  850,  850,  850,
 /*  7490 */   850,  850,  850,  850,  850,  383,  343,  850,  387,  167,
 /*  7500 */   392,  382,  378,  379,  850,  850,  393,  381,  376,  370,
 /*  7510 */   850,  850,  372,  540,  850,  850,  850,  850,  850,  850,
 /*  7520 */   850,  850,   85,  850,  850,   90,  850,  138,  850,   89,
 /*  7530 */   850,  137,  850,   40,  647,  850,   38,  850,  850,  850,
 /*  7540 */   850,  730,  850,  850,  850,  850,  850,  850,  850,  372,
 /*  7550 */   850,  850,  850,  650,  850,  138,  850,  850,  850,  137,
 /*  7560 */   850,  850,  850,  177,   45,  713,  850,  850,  657,  850,
 /*  7570 */   850,  850,  850,  850,  850,  850,  850,  850,  700,  850,
 /*  7580 */   850,  850,  328,  850,  850,  850,  850,  850,  850,  104,
 /*  7590 */   850,  850,  131,  850,  108,  850,  140,  850,  850,  850,
 /*  7600 */   850,   45,  850,  850,  850,  850,  850,  143,  850,  850,
 /*  7610 */   198,  850,  850,  130,  850,  850,  850,  850,  185,  850,
 /*  7620 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /*  7630 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /*  7640 */   341,  850,  653,  168,  850,  850,  708,  709,  715,  402,
 /*  7650 */   692,  171,  850,  336,  372,  850,  850,  850,  850,  207,
 /*  7660 */   850,  332,  323,  850,  850,  850,  850,  850,  850,  167,
 /*  7670 */   850,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /*  7680 */   850,  336,  850,  540,  850,  850,  850,  207,  850,  332,
 /*  7690 */   323,  850,   85,  850,  850,   90,  850,  138,  850,   89,
 /*  7700 */   850,  137,  850,  850,  850,  850,   38,  620,  850,  850,
 /*  7710 */   850,  708,  709,  715,  402,  692,  171,  850,  336,  699,
 /*  7720 */   714,  711,  850,  701,  207,  850,  332,  323,  360,  727,
 /*  7730 */   729,  736,  158,  850,  659,  742,  743,  741,  148,  642,
 /*  7740 */   129,  127,  618,  359,  850,  850,  850,  850,  850,  850,
 /*  7750 */   850,  850,  850,  850,  850,  850,  194,  850,  850,  850,
 /*  7760 */   850,  850,  850,  850,  108,  850,  850,  850,  850,  850,
 /*  7770 */   850,  850,  850,  850,  850,  850,  850,  143,  850,  850,
 /*  7780 */   198,  850,  850,  130,  850,  850,  850,  850,  185,  850,
 /*  7790 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /*  7800 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /*  7810 */   341,  850,  372,  850,  850,  850,  708,  709,  715,  402,
 /*  7820 */   692,  171,  850,  336,  850,  850,  850,  167,  850,  207,
 /*  7830 */   850,  332,  323,  850,  850,  850,  850,  850,  850,  850,
 /*  7840 */   372,  540,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  7850 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /*  7860 */   850,   40,  850,  850,   38,  850,  850,  850,  850,  232,
 /*  7870 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  7880 */   850,  655,  850,  138,  850,  675,  850,  137,  850,  850,
 /*  7890 */   850,  850,   45,  850,  850,  850,  850,  850,  850,  145,
 /*  7900 */   850,  713,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  7910 */   850,  850,  850,  850,  850,  850,  850,  850,  328,  290,
 /*  7920 */   850,  850,  108,  135,  850,  103,  133,  850,  159,  850,
 /*  7930 */   850,  850,  163,  850,  850,  143,  850,  850,  198,  850,
 /*  7940 */   756,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /*  7950 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /*  7960 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /*  7970 */   654,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /*  7980 */   850,  336,  372,  850,  850,  850,  850,  207,  850,  332,
 /*  7990 */   323,  850,  850,  850,  850,  850,  850,  167,  850,  850,
 /*  8000 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /*  8010 */   850,  540,  850,  850,  850,  207,  850,  332,  323,  850,
 /*  8020 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /*  8030 */   850,   40,  850,  850,   38,  850,  850,  850,  850,  850,
 /*  8040 */   850,  850,  850,  850,  850,  683,  667,  850,  850,  850,
 /*  8050 */   850,  645,  850,  850,  850,  699,  714,  711,  850,  850,
 /*  8060 */   207,  850,  332,  323,  360,  727,  729,  736,  146,  850,
 /*  8070 */   713,  742,  743,  741,  148,  642,  129,  127,  618,  359,
 /*  8080 */   850,  850,  850,  850,  850,  850,  850,  328,  850,  850,
 /*  8090 */   850,  850,  108,  850,  104,  850,  850,  159,  850,  850,
 /*  8100 */   850,  163,  850,  850,  850,  143,  850,  850,  198,  850,
 /*  8110 */   850,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /*  8120 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /*  8130 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /*  8140 */   649,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /*  8150 */   850,  336,  372,  850,  850,  850,  850,  207,  850,  332,
 /*  8160 */   323,  850,  850,  850,  850,  850,  850,  167,  850,  850,
 /*  8170 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  8180 */   850,  540,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  8190 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /*  8200 */   850,  850,  850,  850,   38,  850,  850,  850,  850,  850,
 /*  8210 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  8220 */   850,  662,  850,  850,  699,  714,  711,  850,  850,  207,
 /*  8230 */   850,  332,  323,  360,  727,  729,  736,  850,  850,  850,
 /*  8240 */   742,  743,  741,  148,  642,  129,  127,  618,  359,  850,
 /*  8250 */   850,  239,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  8260 */   850,  850,  108,  850,  850,  850,  850,  850,  850,  850,
 /*  8270 */   850,  850,  850,  850,  850,  143,  850,  850,  198,  850,
 /*  8280 */   850,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /*  8290 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /*  8300 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /*  8310 */   372,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /*  8320 */   850,  336,  850,  850,  850,  167,  850,  207,  850,  332,
 /*  8330 */   323,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /*  8340 */   850,  850,  850,  850,  850,  850,  850,  850,   85,  850,
 /*  8350 */   850,   90,  850,  138,  850,   89,  850,  137,  850,  850,
 /*  8360 */   850,  850,   38,  850,  850,  850,  850,  850,  850,  850,
 /*  8370 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  701,
 /*  8380 */   372,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  8390 */   850,  850,  850,  850,  850,  167,  850,  850,  850,  850,
 /*  8400 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /*  8410 */   850,  850,  201,  850,  850,  850,  850,  850,   85,  850,
 /*  8420 */   108,   90,  850,  138,  850,   89,  850,  137,  850,  850,
 /*  8430 */   850,  850,   38,  143,  850,  850,  198,  850,  850,  130,
 /*  8440 */   850,  850,  850,  850,  185,  850,   99,  153,  100,  609,
 /*  8450 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /*  8460 */   371,  850,  850,  352,  333,  369,  341,  850,  850,  850,
 /*  8470 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /*  8480 */   850,  850,  850,  850,  850,  207,  850,  332,  323,  850,
 /*  8490 */   108,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  8500 */   850,  850,  850,  143,  850,  850,  198,  850,  850,  130,
 /*  8510 */   850,  850,  850,  850,  185,  850,   99,  153,  100,  850,
 /*  8520 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /*  8530 */   371,  850,  850,  352,  333,  369,  341,  850,  372,  850,
 /*  8540 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /*  8550 */   850,  850,  850,  167,  850,  207,  850,  332,  323,  850,
 /*  8560 */   850,  850,  850,  850,  850,  850,  850,  540,  850,  850,
 /*  8570 */   850,  850,  850,  850,  850,  850,   85,  850,  850,   90,
 /*  8580 */   850,  138,  850,   89,  850,  137,  850,  850,  372,  850,
 /*  8590 */    38,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  8600 */   850,  850,  850,  167,  850,  850,  850,  613,  850,  850,
 /*  8610 */   850,  850,  850,  850,  850,  850,  850,  540,  850,  850,
 /*  8620 */   850,  850,  850,  850,  850,  850,   85,  850,  850,   90,
 /*  8630 */   850,  138,  850,   89,  850,  137,  850,  850,  850,  850,
 /*  8640 */    38,  850,  850,  850,  850,  850,  850,  850,  108,  850,
 /*  8650 */   850,  850,  850,  850,  850,  850,  850,  612,  850,  850,
 /*  8660 */   850,  143,  850,  850,  198,  850,  850,  130,  850,  850,
 /*  8670 */   850,  850,  185,  850,   99,  153,  100,  850,  539,  850,
 /*  8680 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  850,
 /*  8690 */   850,  352,  333,  369,  341,  850,  850,  850,  108,  850,
 /*  8700 */   708,  709,  715,  402,  692,  171,  850,  336,  850,  850,
 /*  8710 */   850,  143,  850,  207,  198,  332,  323,  130,  850,  850,
 /*  8720 */   850,  850,  185,  850,   99,  153,  100,  850,  539,  850,
 /*  8730 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  850,
 /*  8740 */   850,  352,  333,  369,  341,  850,  372,  850,  850,  850,
 /*  8750 */   708,  709,  715,  402,  692,  171,  850,  336,  850,  850,
 /*  8760 */   850,  167,  850,  207,  850,  332,  323,  850,  850,  850,
 /*  8770 */   850,  850,  850,  850,  850,  540,  850,  850,  850,  850,
 /*  8780 */   850,  850,  850,  850,   85,  850,  850,   90,  850,  138,
 /*  8790 */   850,   89,  850,  137,  850,  850,  372,  850,   38,  850,
 /*  8800 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  8810 */   850,  167,  850,  850,  850,  574,  850,  850,  850,  850,
 /*  8820 */   850,  850,  850,  850,  850,  540,  850,  850,  850,  850,
 /*  8830 */   850,  850,  850,  850,   85,  850,  850,   90,  850,  138,
 /*  8840 */   850,   89,  850,  137,  850,  850,  850,  850,   38,  850,
 /*  8850 */   850,  850,  850,  850,  850,  850,  108,  850,  850,  850,
 /*  8860 */   850,  850,  850,  850,  850,  605,  850,  850,  850,  143,
 /*  8870 */   850,  850,  198,  850,  850,  130,  850,  850,  850,  850,
 /*  8880 */   185,  850,   99,  153,  100,  850,  539,  850,  189,  186,
 /*  8890 */   588,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /*  8900 */   333,  369,  341,  850,  850,  850,  108,  850,  708,  709,
 /*  8910 */   715,  402,  692,  171,  850,  336,  850,  850,  850,  143,
 /*  8920 */   850,  207,  198,  332,  323,  130,  850,  850,  850,  850,
 /*  8930 */   185,  850,   99,  153,  100,  850,  539,  850,  189,  186,
 /*  8940 */   588,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /*  8950 */   333,  369,  341,  850,  372,  850,  850,  850,  708,  709,
 /*  8960 */   715,  402,  692,  171,  850,  336,  850,  850,  850,  167,
 /*  8970 */   850,  207,  850,  332,  323,  850,  850,  850,  850,  850,
 /*  8980 */   850,  850,  850,  540,  850,  850,  850,  850,  850,  850,
 /*  8990 */   850,  850,   85,  850,  850,   90,  850,  138,  850,   89,
 /*  9000 */   850,  137,  850,  850,  372,  850,   38,  850,  850,  850,
 /*  9010 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  167,
 /*  9020 */   850,  850,  850,  611,  850,  850,  850,  850,  850,  850,
 /*  9030 */   850,  850,  850,  540,  850,  850,  850,  850,  850,  850,
 /*  9040 */   850,  850,   85,  850,  850,   90,  850,  138,  850,   89,
 /*  9050 */   850,  137,  850,  850,  850,  850,   38,  850,  850,  850,
 /*  9060 */   850,  850,  850,  850,  108,  850,  850,  850,  850,  850,
 /*  9070 */   850,  850,  850,  610,  850,  850,  850,  143,  850,  850,
 /*  9080 */   198,  850,  850,  130,  850,  850,  850,  850,  185,  850,
 /*  9090 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /*  9100 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /*  9110 */   341,  850,  850,  850,  108,  850,  708,  709,  715,  402,
 /*  9120 */   692,  171,  850,  336,  850,  850,  850,  143,  850,  207,
 /*  9130 */   198,  332,  323,  130,  850,  850,  850,  850,  185,  850,
 /*  9140 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /*  9150 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /*  9160 */   341,  850,  372,  850,  850,  850,  708,  709,  715,  402,
 /*  9170 */   692,  171,  850,  336,  850,  850,  850,  167,  850,  207,
 /*  9180 */   850,  332,  323,  850,  850,  850,  850,  850,  850,  850,
 /*  9190 */   850,  540,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  9200 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /*  9210 */   850,  850,  372,  850,   38,  850,  850,  850,  850,  850,
 /*  9220 */   850,  850,  850,  850,  850,  850,  850,  167,  850,  850,
 /*  9230 */   850,  624,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  9240 */   850,  540,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  9250 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /*  9260 */   850,  850,  850,  850,   38,  850,  850,  850,  850,  850,
 /*  9270 */   850,  850,  108,  850,  850,  850,  850,  850,  850,  850,
 /*  9280 */   850,  663,  850,  850,  850,  143,  850,  850,  198,  850,
 /*  9290 */   850,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /*  9300 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /*  9310 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /*  9320 */   850,  850,  108,  850,  708,  709,  715,  402,  692,  171,
 /*  9330 */   850,  336,  850,  850,  850,  143,  850,  207,  198,  332,
 /*  9340 */   323,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /*  9350 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /*  9360 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /*  9370 */   372,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /*  9380 */   850,  336,  850,  850,  850,  167,  850,  207,  850,  332,
 /*  9390 */   323,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /*  9400 */   850,  850,  850,  850,  850,  850,  850,  850,   85,  850,
 /*  9410 */   850,   90,  850,  138,  850,   89,  850,  137,  850,  850,
 /*  9420 */   372,  850,   38,  850,  850,  850,  850,  850,  850,  850,
 /*  9430 */   850,  850,  850,  850,  850,  167,  850,  850,  850,  536,
 /*  9440 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /*  9450 */   850,  850,  850,  850,  850,  850,  850,  850,   85,  850,
 /*  9460 */   850,   90,  850,  138,  850,   89,  850,  137,  850,  850,
 /*  9470 */   850,  850,   38,  850,  850,  850,  850,  850,  850,  850,
 /*  9480 */   108,  850,  850,  850,  850,  850,  850,  850,  850,  637,
 /*  9490 */   850,  850,  850,  143,  850,  850,  198,  850,  850,  130,
 /*  9500 */   850,  850,  850,  850,  185,  850,   99,  153,  100,  850,
 /*  9510 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /*  9520 */   371,  850,  850,  352,  333,  369,  341,  850,  850,  850,
 /*  9530 */   108,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /*  9540 */   850,  850,  850,  143,  850,  207,  198,  332,  323,  130,
 /*  9550 */   850,  850,  850,  850,  185,  850,   99,  153,  100,  850,
 /*  9560 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /*  9570 */   371,  850,  850,  352,  333,  369,  341,  850,  372,  850,
 /*  9580 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /*  9590 */   850,  850,  850,  167,  850,  207,  850,  332,  323,  850,
 /*  9600 */   850,  850,  850,  850,  850,  850,  850,  540,  850,  850,
 /*  9610 */   850,  850,  850,  850,  850,  850,   85,  850,  850,   90,
 /*  9620 */   850,  138,  850,   89,  850,  137,  850,  850,  372,  850,
 /*  9630 */    38,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  9640 */   850,  850,  850,  167,  850,  850,  850,  557,  850,  850,
 /*  9650 */   850,  850,  850,  850,  850,  850,  850,  540,  850,  850,
 /*  9660 */   850,  850,  850,  850,  850,  850,   85,  850,  850,   90,
 /*  9670 */   850,  138,  850,   89,  850,  137,  850,  850,  850,  850,
 /*  9680 */    38,  850,  850,  850,  850,  850,  850,  850,  108,  850,
 /*  9690 */   850,  850,  850,  850,  850,  850,  850,  608,  850,  850,
 /*  9700 */   850,  143,  850,  850,  198,  850,  850,  130,  850,  850,
 /*  9710 */   850,  850,  185,  850,   99,  153,  100,  850,  539,  850,
 /*  9720 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  850,
 /*  9730 */   850,  352,  333,  369,  341,  850,  850,  850,  108,  850,
 /*  9740 */   708,  709,  715,  402,  692,  171,  850,  336,  850,  850,
 /*  9750 */   850,  143,  850,  207,  198,  332,  323,  130,  850,  850,
 /*  9760 */   850,  850,  185,  850,   99,  153,  100,  850,  539,  850,
 /*  9770 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  850,
 /*  9780 */   850,  352,  333,  369,  341,  850,  372,  850,  850,  850,
 /*  9790 */   708,  709,  715,  402,  692,  171,  850,  336,  850,  850,
 /*  9800 */   850,  167,  850,  207,  850,  332,  323,  850,  850,  850,
 /*  9810 */   850,  850,  850,  850,  850,  540,  850,  850,  850,  850,
 /*  9820 */   850,  850,  850,  850,   85,  850,  850,   90,  850,  138,
 /*  9830 */   850,   89,  850,  137,  850,  850,  372,  850,   38,  850,
 /*  9840 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /*  9850 */   850,  167,  850,  850,  850,  285,  850,  850,  850,  850,
 /*  9860 */   850,  850,  850,  850,  850,  540,  850,  850,  850,  850,
 /*  9870 */   850,  850,  850,  850,   85,  850,  850,   90,  850,  138,
 /*  9880 */   850,   89,  850,  137,  850,  850,  850,  850,   38,  850,
 /*  9890 */   850,  850,  850,  850,  850,  850,  108,  850,  850,  850,
 /*  9900 */   850,  850,  850,  850,  850,  607,  850,  850,  850,  143,
 /*  9910 */   850,  850,  198,  850,  850,  130,  850,  850,  850,  850,
 /*  9920 */   185,  850,   99,  153,  100,  850,  539,  850,  189,  186,
 /*  9930 */   588,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /*  9940 */   333,  369,  341,  850,  850,  850,  108,  850,  708,  709,
 /*  9950 */   715,  402,  692,  171,  850,  336,  850,  850,  850,  143,
 /*  9960 */   850,  207,  198,  332,  323,  130,  850,  850,  850,  850,
 /*  9970 */   185,  850,   99,  153,  100,  850,  539,  850,  189,  186,
 /*  9980 */   588,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /*  9990 */   333,  369,  341,  850,  372,  850,  850,  850,  708,  709,
 /* 10000 */   715,  402,  692,  171,  850,  336,  850,  850,  850,  167,
 /* 10010 */   850,  207,  850,  332,  323,  850,  850,  850,  850,  850,
 /* 10020 */   850,  850,  850,  540,  850,  850,  850,  850,  850,  850,
 /* 10030 */   850,  850,   85,  850,  850,   90,  850,  138,  850,   89,
 /* 10040 */   850,  137,  850,  850,  372,  850,   38,  850,  850,  850,
 /* 10050 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  167,
 /* 10060 */   850,  850,  850,  276,  850,  850,  850,  850,  850,  850,
 /* 10070 */   850,  850,  850,  540,  850,  850,  850,  850,  850,  850,
 /* 10080 */   850,  850,   85,  850,  850,   90,  850,  138,  850,   89,
 /* 10090 */   850,  137,  850,  850,  850,  850,   38,  850,  850,  850,
 /* 10100 */   850,  850,  850,  850,  108,  850,  850,  850,  850,  850,
 /* 10110 */   850,  850,  850,  850,  850,  850,  850,  143,  850,  850,
 /* 10120 */   198,  850,  850,  130,  850,  850,  850,  850,  185,  850,
 /* 10130 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /* 10140 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /* 10150 */   341,  850,  850,  850,  850,  850,  708,  709,  715,  402,
 /* 10160 */   692,  171,  850,  336,  850,  850,  850,  150,  850,  207,
 /* 10170 */   198,  332,  323,  130,  850,  850,  850,  850,  185,  850,
 /* 10180 */    99,  153,  100,  850,  539,  850,  189,  186,  588,   86,
 /* 10190 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /* 10200 */   341,  850,  372,  850,  850,  850,  708,  709,  715,  402,
 /* 10210 */   692,  171,  345,  336,  850,  850,  335,  167,  850,  207,
 /* 10220 */   850,  332,  323,  258,  850,  850,  339,  850,  850,  850,
 /* 10230 */   850,  540,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10240 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /* 10250 */   850,  850,  372,  850,   38,  347,  850,  383,  343,  850,
 /* 10260 */   387,  850,  392,  382,  378,  379,  850,  167,  393,  381,
 /* 10270 */   376,  370,  850,  850,  380,  384,  321,  324,  391,  375,
 /* 10280 */   850,  540,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10290 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /* 10300 */   850,  850,  850,  850,   38,  850,  850,  850,  850,  850,
 /* 10310 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10320 */   850,  850,  850,  850,  850,  154,  850,  850,  198,  850,
 /* 10330 */   850,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /* 10340 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /* 10350 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /* 10360 */   850,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /* 10370 */   850,  336,  850,  850,  850,  850,  850,  207,  196,  332,
 /* 10380 */   323,  130,  850,  850,  850,  850,  185,  850,   99,  153,
 /* 10390 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /* 10400 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /* 10410 */   372,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /* 10420 */   850,  336,  850,  850,  850,  167,  850,  207,  850,  332,
 /* 10430 */   323,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /* 10440 */   345,  850,  850,  850,  335,  850,  850,  850,   85,  850,
 /* 10450 */   850,   90,  850,  138,  339,   89,  850,  137,  850,  850,
 /* 10460 */   850,  850,   38,  850,  850,  850,  850,  850,  850,  850,
 /* 10470 */   850,  361,  344,  354,  348,  357,  356,  353,  327,  325,
 /* 10480 */   850,  850,  850,  347,  364,  383,  343,  850,  387,  850,
 /* 10490 */   392,  382,  378,  379,  850,  850,  393,  381,  376,  370,
 /* 10500 */   850,  850,  380,  384,  321,  324,  391,  375,  850,  850,
 /* 10510 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10520 */   850,  850,  850,  850,  850,  303,  304,  299,  298,  294,
 /* 10530 */   293,  295,  850,  850,  850,  850,  169,  850,  308,  130,
 /* 10540 */   850,  850,  850,  850,  185,  850,   99,  153,  100,  850,
 /* 10550 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /* 10560 */   371,  850,  850,  352,  333,  369,  341,  345,  850,  850,
 /* 10570 */   850,  335,  708,  709,  715,  402,  692,  171,  850,  336,
 /* 10580 */   318,  339,  850,  850,  850,  207,  850,  332,  323,  850,
 /* 10590 */   850,  850,  850,  850,  850,  850,  850,  850,  361,  344,
 /* 10600 */   354,  348,  357,  356,  353,  327,  325,  850,  850,  850,
 /* 10610 */   347,  364,  383,  343,  850,  387,  850,  392,  382,  378,
 /* 10620 */   379,  850,  850,  393,  381,  376,  370,  850,  850,  380,
 /* 10630 */   384,  321,  324,  391,  375,  850,  850,  850,  850,  850,
 /* 10640 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10650 */   850,  850,  303,  304,  299,  298,  294,  293,  295,  850,
 /* 10660 */   850,  850,  850,  850,  850,  372,  850,  850,  850,  850,
 /* 10670 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10680 */   167,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10690 */   850,  850,  850,  850,  540,  850,  850,  850,  850,  850,
 /* 10700 */   850,  850,  850,   85,  850,  850,   90,  850,  138,  850,
 /* 10710 */    89,  850,  137,  850,  850,  850,  850,   38,  850,  850,
 /* 10720 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10730 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10740 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10750 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10760 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  713,
 /* 10770 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10780 */   850,  850,  850,  850,  850,  850,  238,  850,  850,  850,
 /* 10790 */   850,  175,  850,  104,  130,  850,  159,  850,  850,  185,
 /* 10800 */   163,   99,  153,  100,  850,  539,  850,  189,  186,  588,
 /* 10810 */    86,   88,  115,   91,   92,  371,  850,  850,  352,  333,
 /* 10820 */   369,  341,  345,  850,  850,  850,  335,  708,  709,  715,
 /* 10830 */   402,  692,  171,  850,  336,  850,  339,  850,  850,  850,
 /* 10840 */   207,  850,  332,  323,  850,  850,  850,  850,  850,  850,
 /* 10850 */   850,  850,  850,  361,  344,  354,  348,  357,  356,  353,
 /* 10860 */   327,  325,  850,  850,  850,  347,  364,  383,  343,  850,
 /* 10870 */   387,  850,  392,  382,  378,  379,  850,  850,  393,  381,
 /* 10880 */   376,  370,  850,  850,  380,  384,  321,  324,  391,  375,
 /* 10890 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 10900 */   850,  850,  850,  850,  850,  850,  850,  303,  304,  299,
 /* 10910 */   298,  294,  293,  295,  850,  850,  850,  850,  850,  850,
 /* 10920 */   372,  850,  850,  699,  714,  711,  850,  850,  207,  850,
 /* 10930 */   332,  323,  850,  850,  850,  167,  850,  850,  850,  742,
 /* 10940 */   743,  741,  148,  642,  129,  127,  618,  359,  850,  540,
 /* 10950 */   850,  850,  850,  850,  850,  850,  850,  850,   85,  850,
 /* 10960 */   850,   90,  850,  138,  850,   89,  850,  137,  850,  850,
 /* 10970 */   850,  372,   38,  850,  850,  850,  850,  850,  850,  850,
 /* 10980 */   850,  850,  850,  850,  850,  850,  167,  850,  850,  850,
 /* 10990 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11000 */   540,  850,  850,  850,  850,  850,  850,  850,  850,   85,
 /* 11010 */   850,  850,   90,  850,  138,  850,   89,  850,  137,  850,
 /* 11020 */   850,  850,  850,   38,  850,  850,  850,  850,  850,  850,
 /* 11030 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11040 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  128,
 /* 11050 */   850,  850,  850,  850,  185,  850,   99,  153,  100,  850,
 /* 11060 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /* 11070 */   371,  850,  850,  352,  333,  369,  341,  850,  850,  850,
 /* 11080 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /* 11090 */   850,  850,  850,  850,  850,  207,  850,  332,  323,  850,
 /* 11100 */   126,  850,  850,  850,  850,  185,  850,   99,  153,  100,
 /* 11110 */   850,  539,  850,  189,  186,  588,   86,   88,  115,   91,
 /* 11120 */    92,  371,  850,  850,  352,  333,  369,  341,  850,  372,
 /* 11130 */   850,  850,  850,  708,  709,  715,  402,  692,  171,  850,
 /* 11140 */   336,  850,  850,  850,  192,  850,  207,  850,  332,  323,
 /* 11150 */   850,  850,  850,  850,  850,  850,  850,  850,  540,  850,
 /* 11160 */   850,  850,  850,  850,  850,  850,  850,   85,  850,  850,
 /* 11170 */    90,  850,  138,  850,   89,  850,  137,  850,  372,  850,
 /* 11180 */   850,   38,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11190 */   850,  850,  850,  195,  850,  850,  850,  850,  850,  850,
 /* 11200 */   850,  850,  850,  850,  850,  850,  850,  540,  850,  850,
 /* 11210 */   850,  850,  850,  850,  850,  850,   85,  850,  850,   90,
 /* 11220 */   850,  138,  850,   89,  850,  137,  850,  850,  850,  850,
 /* 11230 */    38,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11240 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11250 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11260 */   850,  850,  850,  185,  850,   99,  153,  100,  850,  539,
 /* 11270 */   850,  189,  186,  588,   86,   88,  115,   91,   92,  371,
 /* 11280 */   850,  850,  352,  333,  369,  341,  850,  850,  850,  850,
 /* 11290 */   850,  708,  709,  715,  402,  692,  171,  850,  336,  850,
 /* 11300 */   850,  850,  850,  850,  207,  850,  332,  323,  850,  850,
 /* 11310 */   850,  850,  185,  850,   99,  153,  100,  850,  539,  850,
 /* 11320 */   189,  186,  588,   86,   88,  115,   91,   92,  371,  850,
 /* 11330 */   850,  352,  333,  369,  341,  850,  372,  850,  850,  850,
 /* 11340 */   708,  709,  715,  402,  692,  171,  850,  336,  850,  850,
 /* 11350 */   850,  178,  850,  207,  850,  332,  323,  850,  850,  850,
 /* 11360 */   850,  850,  850,  850,  850,  540,  850,  850,  850,  850,
 /* 11370 */   850,  850,  850,  850,   85,  850,  850,   90,  850,  138,
 /* 11380 */   850,   89,  850,  137,  850,  850,  850,  850,   38,  850,
 /* 11390 */   850,  850,  372,  850,  850,  850,  850,  850,  850,  850,
 /* 11400 */   850,  850,  850,  850,  850,  850,  850,  187,  850,  850,
 /* 11410 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11420 */   850,  540,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11430 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /* 11440 */   850,  850,  850,  850,   38,  850,  850,  850,  850,  850,
 /* 11450 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11460 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11470 */   185,  850,   99,  153,  100,  850,  539,  850,  189,  186,
 /* 11480 */   588,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /* 11490 */   333,  369,  341,  850,  850,  850,  850,  850,  708,  709,
 /* 11500 */   715,  402,  692,  171,  850,  336,  850,  850,  850,  850,
 /* 11510 */   850,  207,  850,  332,  323,  850,  850,  850,  850,  850,
 /* 11520 */   850,  850,  850,  850,  850,  850,  185,  850,   99,  153,
 /* 11530 */   100,  850,  539,  850,  189,  186,  588,   86,   88,  115,
 /* 11540 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /* 11550 */   372,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /* 11560 */   850,  336,  850,  850,  850,  850,  850,  207,  850,  332,
 /* 11570 */   323,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /* 11580 */   850,  850,  850,  850,  850,  850,  850,  850,   85,  850,
 /* 11590 */   850,   90,  850,  138,  850,   89,  850,  137,  850,  372,
 /* 11600 */   850,  850,   38,  850,  850,  850,  850,  850,  850,  850,
 /* 11610 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11620 */   850,  850,  850,  850,  850,  850,  850,  850,  540,  850,
 /* 11630 */   850,  850,  850,  850,  850,  850,  850,   85,  850,  850,
 /* 11640 */    90,  850,  138,  850,   89,  850,  137,  850,  850,  850,
 /* 11650 */   850,   38,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11660 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11670 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11680 */   850,  850,  850,  850,  191,  850,   99,  153,  100,  850,
 /* 11690 */   539,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /* 11700 */   371,  850,  850,  352,  333,  369,  341,  850,  850,  850,
 /* 11710 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /* 11720 */   850,  850,  850,  850,  850,  207,  850,  332,  323,  850,
 /* 11730 */   850,  850,  850,  188,  850,   99,  153,  100,  850,  539,
 /* 11740 */   850,  189,  186,  588,   86,   88,  115,   91,   92,  371,
 /* 11750 */   850,  850,  352,  333,  369,  341,  850,  372,  850,  850,
 /* 11760 */   850,  708,  709,  715,  402,  692,  171,  850,  336,  850,
 /* 11770 */   850,  850,  850,  850,  207,  850,  332,  323,  850,  850,
 /* 11780 */   850,  850,  850,  850,  850,  850,  540,  850,  850,  850,
 /* 11790 */   850,  850,  850,  850,  850,   85,  850,  850,   90,  850,
 /* 11800 */   138,  850,   89,  850,  137,  850,  850,  850,  850,   38,
 /* 11810 */   850,  850,  850,  372,  850,  850,  850,  850,  850,  850,
 /* 11820 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 11830 */   850,  850,  850,  372,  850,  850,  850,  850,  850,  850,
 /* 11840 */   850,  850,  540,  850,  850,  850,  850,  179,  850,  713,
 /* 11850 */   850,   85,  850,  850,   90,  850,  138,  850,   89,  850,
 /* 11860 */   137,  850,  658,  850,  850,   38,  328,  850,  850,  850,
 /* 11870 */   850,  850,  850,  104,  850,  850,  131,  850,  850,  850,
 /* 11880 */   140,  850,  850,  850,  850,   45,  850,  850,  850,  850,
 /* 11890 */   850,  850,  850,   99,  149,  100,  850,  539,  850,  189,
 /* 11900 */   186,  588,   86,   88,  115,   91,   92,  371,  850,  850,
 /* 11910 */   352,  333,  369,  341,  850,  850,  850,  850,  850,  708,
 /* 11920 */   709,  715,  402,  692,  171,  850,  336,  850,  850,  850,
 /* 11930 */   850,  850,  207,  850,  332,  323,  850,  850,  850,  850,
 /* 11940 */   850,  850,  850,  850,  850,  850,  850,  850,  850,   99,
 /* 11950 */   144,  100,  850,  539,  850,  189,  186,  588,   86,   88,
 /* 11960 */   115,   91,   92,  371,  850,  850,  352,  333,  369,  341,
 /* 11970 */   850,  850,  850,  850,  850,  708,  709,  715,  402,  692,
 /* 11980 */   171,  850,  336,  850,  850,  850,  850,  850,  207,  850,
 /* 11990 */   332,  323,  850,  850,  850,  708,  709,  715,  402,  692,
 /* 12000 */   171,  850,  336,  699,  714,  711,  850,  850,  207,  850,
 /* 12010 */   332,  323,  360,  727,  729,  736,  850,  850,  850,  742,
 /* 12020 */   743,  741,  148,  642,  129,  127,  618,  359,  372,  850,
 /* 12030 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12040 */   850,  850,  142,  850,  713,  850,  850,  850,  850,  850,
 /* 12050 */   850,  850,  850,  850,  850,  850,  850,  373,  850,  850,
 /* 12060 */   850,  328,  850,  850,  850,  850,  850,  850,  104,  850,
 /* 12070 */   850,  131,  850,  850,  850,  140,  850,  850,  850,  850,
 /* 12080 */    45,  850,  850,  850,  850,  850,  850,  372,  850,  850,
 /* 12090 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12100 */   850,  850,  850,  850,  850,  850,  850,  675,  850,  850,
 /* 12110 */   850,  850,  850,  850,  850,  850,  540,  850,  850,  850,
 /* 12120 */   850,  145,  850,  713,  850,   85,  850,  850,   90,  850,
 /* 12130 */   138,  850,   89,  850,  137,  850,  850,  850,  850,   38,
 /* 12140 */   328,  290,  850,  850,  850,  135,  850,  103,  133,  850,
 /* 12150 */   159,  850,  850,  850,  163,  850,  850,  850,  850,  850,
 /* 12160 */   763,  173,  747,  850,  850,  850,  850,  850,  850,  850,
 /* 12170 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12180 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12190 */   708,  709,  715,  402,  692,  171,  850,  336,  699,  714,
 /* 12200 */   711,  850,  850,  207,  850,  332,  323,  360,  727,  729,
 /* 12210 */   736,  850,  850,  850,  742,  743,  741,  148,  642,  129,
 /* 12220 */   127,  618,  359,   99,  850,  100,  850,  559,  850,  189,
 /* 12230 */   186,  588,   86,   88,  115,   91,   92,  371,  850,  850,
 /* 12240 */   352,  333,  369,  341,  850,  850,  850,  850,  850,  708,
 /* 12250 */   709,  715,  402,  692,  171,  850,  336,  850,  850,  850,
 /* 12260 */   850,  850,  207,  850,  332,  323,  850,  683,  667,  850,
 /* 12270 */   850,  850,  850,  850,  372,  850,  850,  699,  714,  711,
 /* 12280 */   850,  850,  207,  850,  332,  323,  360,  727,  729,  736,
 /* 12290 */   850,  850,  850,  742,  743,  741,  148,  642,  129,  127,
 /* 12300 */   618,  359,  850,  540,  850,  850,  850,  850,  850,  850,
 /* 12310 */   850,  850,   85,  850,  850,   90,  850,  138,  850,   89,
 /* 12320 */   372,  137,  850,  850,  850,  850,   38,  850,  850,  850,
 /* 12330 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12340 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /* 12350 */   850,  850,  850,  850,  850,  850,  850,  850,   85,  850,
 /* 12360 */   850,   90,  850,  138,  850,   89,  850,  137,  850,  850,
 /* 12370 */   850,  850,   38,  850,  850,  850,  850,  850,  850,  850,
 /* 12380 */   155,  850,  713,  850,  850,  850,  850,  850,  850,  850,
 /* 12390 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  328,
 /* 12400 */   850,  850,  850,  850,  850,  850,  104,  850,  850,  159,
 /* 12410 */    99,  850,  100,  163,  597,  850,  189,  186,  588,   86,
 /* 12420 */    88,  115,   91,   92,  371,  850,  850,  352,  333,  369,
 /* 12430 */   341,  850,  850,  850,  850,  850,  708,  709,  715,  402,
 /* 12440 */   692,  171,  850,  336,  850,  850,  850,  850,  850,  207,
 /* 12450 */   850,  332,  323,  850,  850,  850,   99,  850,  100,  850,
 /* 12460 */   524,  850,  189,  186,  588,   86,   88,  115,   91,   92,
 /* 12470 */   371,  850,  850,  352,  333,  369,  341,  850,  372,  850,
 /* 12480 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /* 12490 */   850,  850,  850,  850,  850,  207,  850,  332,  323,  850,
 /* 12500 */   850,  850,  850,  850,  850,  850,  850,  540,  850,  850,
 /* 12510 */   850,  850,  850,  850,  850,  850,   85,  850,  850,   90,
 /* 12520 */   850,  138,  850,   89,  850,  137,  850,  850,  850,  850,
 /* 12530 */    38,  850,  850,  850,  850,  850,  699,  714,  711,  372,
 /* 12540 */   850,  207,  850,  332,  323,  360,  727,  729,  736,  850,
 /* 12550 */   850,  850,  742,  743,  741,  148,  642,  129,  127,  618,
 /* 12560 */   359,  850,  850,  850,  850,  850,  850,  850,  540,  850,
 /* 12570 */   850,  850,  850,  850,  850,  850,  850,   85,  850,  850,
 /* 12580 */    90,  850,  138,  850,   89,  850,  137,  850,  850,  850,
 /* 12590 */   850,   38,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12600 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12610 */   850,  850,  850,  850,   99,  850,  100,  850,  850,  850,
 /* 12620 */   389,  374,  569,   86,   88,  115,   91,   92,  371,  850,
 /* 12630 */   850,  352,  333,  369,  341,  850,  850,  850,  850,  850,
 /* 12640 */   708,  709,  715,  402,  692,  171,  850,  336,  850,  850,
 /* 12650 */   850,  850,  850,  207,  850,  332,  323,  850,  850,  850,
 /* 12660 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12670 */   850,  850,  850,  850,  850,   99,  850,  100,  850,  850,
 /* 12680 */   850,  389,  374,  575,   86,   88,  115,   91,   92,  371,
 /* 12690 */   850,  850,  352,  333,  369,  341,  850,  372,  850,  850,
 /* 12700 */   850,  708,  709,  715,  402,  692,  171,  850,  336,  850,
 /* 12710 */   850,  850,  850,  850,  207,  850,  332,  323,  850,  850,
 /* 12720 */   850,  850,  850,  850,  850,  850,  540,  850,  850,  850,
 /* 12730 */   850,  850,  850,  850,  850,   85,  850,  850,   90,  850,
 /* 12740 */   121,  850,   89,  372,  137,  850,  850,  850,  850,   38,
 /* 12750 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12760 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12770 */   850,  850,  540,  850,  850,  850,  850,  850,  850,  850,
 /* 12780 */   850,   85,  850,  850,   90,  850,  138,  850,   89,  850,
 /* 12790 */   137,  850,  850,  850,  850,   38,  850,  850,  850,  850,
 /* 12800 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12810 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12820 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12830 */   850,  850,  850,   99,  850,  100,  850,  850,  850,  389,
 /* 12840 */   374,  575,   86,   88,  115,   91,   92,  371,  850,  850,
 /* 12850 */   352,  333,  369,  341,  850,  850,  850,  850,  850,  708,
 /* 12860 */   709,  715,  402,  692,  171,  850,  336,  850,  850,  850,
 /* 12870 */   850,  850,  207,  850,  332,  323,  850,  850,  850,   99,
 /* 12880 */   850,  100,  850,  850,  850,  389,  374,  570,   86,   88,
 /* 12890 */   115,   91,   92,  371,  850,  850,  352,  333,  369,  341,
 /* 12900 */   850,  372,  850,  850,  850,  708,  709,  715,  402,  692,
 /* 12910 */   171,  850,  336,  850,  850,  850,  850,  850,  207,  850,
 /* 12920 */   332,  323,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12930 */   540,  850,  850,  850,  850,  850,  850,  850,  850,   85,
 /* 12940 */   850,  850,   90,  850,  138,  850,   89,  850,  137,  850,
 /* 12950 */   850,  850,  850,   38,  850,  850,  850,  850,  850,  850,
 /* 12960 */   850,  850,  372,  850,  850,  850,  850,  850,  850,  850,
 /* 12970 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12980 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 12990 */   850,  540,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 13000 */    85,  850,  850,   90,  850,  138,  850,   89,  850,  137,
 /* 13010 */   850,  850,  850,  850,   38,  850,  850,  850,  850,  850,
 /* 13020 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 13030 */   850,  850,  850,  850,  850,  850,  850,   99,  850,  100,
 /* 13040 */   850,  850,  850,  389,  374,  576,   86,   88,  115,   91,
 /* 13050 */    92,  371,  850,  850,  352,  333,  369,  341,  850,  850,
 /* 13060 */   850,  850,  850,  708,  709,  715,  402,  692,  171,  850,
 /* 13070 */   336,  850,  850,  850,  850,  850,  207,  850,  332,  323,
 /* 13080 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 13090 */   850,  850,  850,  850,  850,  850,  850,  850,   99,  850,
 /* 13100 */   100,  850,  850,  850,  389,  374,  601,   86,   88,  115,
 /* 13110 */    91,   92,  371,  850,  850,  352,  333,  369,  341,  850,
 /* 13120 */   372,  850,  850,  850,  708,  709,  715,  402,  692,  171,
 /* 13130 */   850,  336,  850,  850,  850,  850,  850,  207,  850,  332,
 /* 13140 */   323,  850,  850,  850,  850,  850,  850,  850,  850,  540,
 /* 13150 */   850,  850,  850,  850,  850,  850,  850,  850,   85,  850,
 /* 13160 */   850,   90,  850,  138,  850,   89,  372,  137,  850,  850,
 /* 13170 */   850,  850,   38,  850,  850,  850,  850,  850,  850,  850,
 /* 13180 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 13190 */   850,  147,  850,  713,  850,  540,  850,  850,  850,  850,
 /* 13200 */   850,  850,  850,  850,   85,  850,  850,   90,  850,  138,
 /* 13210 */   328,   89,  850,  137,  850,  850,  850,  104,   38,  156,
 /* 13220 */   159,  713,  850,  850,  163,  850,  850,  850,  850,  850,
 /* 13230 */   850,  850,  850,  850,  850,  850,  850,  850,  328,  850,
 /* 13240 */   850,  850,  850,  850,  850,  104,  850,  850,  159,  850,
 /* 13250 */   850,  850,  163,  850,  850,  850,   99,  850,  100,  850,
 /* 13260 */   850,  850,  389,  374,  598,   86,   88,  115,   91,   92,
 /* 13270 */   371,  850,  850,  352,  333,  369,  341,  850,  850,  850,
 /* 13280 */   850,  850,  708,  709,  715,  402,  692,  171,  850,  336,
 /* 13290 */   850,  850,  850,  850,  850,  207,  850,  332,  323,  850,
 /* 13300 */   850,  850,   99,  850,  100,  850,  850,  850,  389,  374,
 /* 13310 */   573,   86,   88,  115,   91,   92,  371,  850,  850,  352,
 /* 13320 */   333,  369,  341,  850,  850,  850,  850,  850,  708,  709,
 /* 13330 */   715,  402,  692,  171,  850,  336,  850,  850,  850,  850,
 /* 13340 */   850,  207,  850,  332,  323,  850,  850,  699,  714,  711,
 /* 13350 */   850,  850,  207,  850,  332,  323,  360,  727,  729,  736,
 /* 13360 */   850,  850,  850,  742,  743,  741,  148,  642,  129,  127,
 /* 13370 */   618,  359,  850,  850,  372,  699,  714,  711,  850,  850,
 /* 13380 */   207,  850,  332,  323,  360,  727,  729,  736,  850,  850,
 /* 13390 */   850,  742,  743,  741,  148,  642,  129,  127,  618,  359,
 /* 13400 */   850,  713,  850,  540,  850,  632,  850,  850,  850,  850,
 /* 13410 */   850,  850,  850,  850,  850,  850,  850,  138,  111,  850,
 /* 13420 */   850,  137,  850,  850,  850,  104,   45,  850,  123,  850,
 /* 13430 */   850,  211,  132,  209,  850,  850,  850,  850,  372,  850,
 /* 13440 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 13450 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 13460 */   850,  850,  850,  850,  850,  713,  850,  540,  850,  850,
 /* 13470 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 13480 */   850,  138,  673,  850,  850,  137,  850,  850,  850,  104,
 /* 13490 */    45,  850,  159,  850,  850,  850,  163,  850,  850,  850,
 /* 13500 */   850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
 /* 13510 */   850,  850,  850,  850,  850,  850,  389,  374,  850,  850,
 /* 13520 */   850,  114,  850,  850,  371,  850,  850,  352,  333,  369,
 /* 13530 */   341,  850,  850,  850,  850,  850,  708,  709,  715,  402,
 /* 13540 */   692,  171,  850,  336,  850,  850,  850,  850,  850,  207,
 /* 13550 */   850,  332,  323,  850,  850,  699,  714,  711,  850,  850,
 /* 13560 */   207,  850,  332,  323,  850,  850,  850,  850,  850,  850,
 /* 13570 */   850,  742,  743,  741,  148,  642,  129,  127,  618,  359,
 /* 13580 */   389,  374,  850,  850,  850,  116,  850,  850,  371,  850,
 /* 13590 */   850,  352,  333,  369,  341,  850,  850,  850,  850,  850,
 /* 13600 */   708,  709,  715,  402,  692,  171,  850,  336,  850,  850,
 /* 13610 */   850,  850,  850,  207,  850,  332,  323,  850,  850,  699,
 /* 13620 */   714,  711,  850,  850,  207,  850,  332,  323,  850,  850,
 /* 13630 */   850,  850,  850,  850,  850,  742,  743,  741,  148,  642,
 /* 13640 */   129,  127,  618,  359,
    );
    static public $yy_lookahead = array(
 /*     0 */   126,  127,  128,  129,  146,  316,  317,  133,  134,  135,
 /*    10 */   321,  137,   55,   42,   43,   44,   45,  143,  144,  145,
 /*    20 */    63,  164,  148,   49,    4,   51,   69,   70,   71,   72,
 /*    30 */   172,  157,  158,  159,  177,  161,   13,  169,  180,  256,
 /*    40 */   166,  258,  168,  169,   20,  171,   22,  173,  174,  175,
 /*    50 */   176,  177,  146,  317,  180,   81,   82,  321,  184,  185,
 /*    60 */   186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
 /*    70 */   196,  197,  198,  199,   51,  201,  202,  203,   55,  205,
 /*    80 */   206,   58,  208,   73,   74,  180,   13,  213,  214,  188,
 /*    90 */   189,  190,  191,  219,  220,  146,  222,  223,  224,  225,
 /*   100 */   226,  168,  169,   83,  230,  231,  232,  233,  234,  235,
 /*   110 */   236,  237,  238,   40,   41,   42,   43,   44,   45,   46,
 /*   120 */    47,   48,  166,  178,   23,  251,   53,   54,  254,  317,
 /*   130 */   318,  257,  227,  321,  322,  267,  262,  269,  264,  265,
 /*   140 */   266,  261,  268,  263,  270,  271,  272,  273,  274,  275,
 /*   150 */   276,  277,  278,   52,  296,  281,  282,  283,  284,  301,
 /*   160 */   215,  216,  217,  218,  290,  291,  292,  293,  294,  295,
 /*   170 */   312,  297,  298,  299,  300,  146,  147,  303,  122,  305,
 /*   180 */   306,  276,  277,   49,  279,  280,   52,   53,  314,  315,
 /*   190 */   316,  317,  318,  319,  320,  321,  322,  126,  127,  128,
 /*   200 */   129,  146,  296,  171,  133,  134,  135,  301,  137,  253,
 /*   210 */     9,  255,  168,  169,  143,  144,  145,  128,  312,  148,
 /*   220 */   149,  150,  151,  152,   23,  181,  179,  172,  157,  158,
 /*   230 */   159,    7,  161,    9,   10,  180,  179,  166,   37,  168,
 /*   240 */   169,  128,  171,  163,  173,  174,  175,  176,  177,   23,
 /*   250 */   301,  180,  172,   52,   53,  184,  167,  168,  169,  170,
 /*   260 */   180,  312,  164,  192,  193,  194,  195,  196,  197,  198,
 /*   270 */   199,  179,  201,  202,  203,  177,  205,  206,  147,  208,
 /*   280 */    54,  168,  169,   13,  213,  214,  128,  179,  259,  260,
 /*   290 */   219,  220,  178,  222,  223,  224,  225,  226,  139,  168,
 /*   300 */   169,  230,  231,  232,  233,  234,  235,  236,  237,  238,
 /*   310 */    40,   41,   42,   43,   44,   45,   46,   47,   48,  128,
 /*   320 */    79,   80,  251,  204,   54,  254,  168,  169,  257,  146,
 /*   330 */   216,  217,  218,  262,  179,  264,  265,  266,  306,  268,
 /*   340 */   181,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /*   350 */   172,  296,  281,  282,  283,  284,  301,  228,  180,  168,
 /*   360 */   169,  290,  291,  292,  293,  294,  295,  312,  297,  298,
 /*   370 */   299,  300,    5,   31,  303,    8,  305,  306,  289,  250,
 /*   380 */   128,  252,  171,   52,  173,  314,  315,  316,  317,  318,
 /*   390 */   319,  320,  321,  322,  126,  127,  128,  129,   52,   53,
 /*   400 */    58,  133,  134,  135,  171,  137,   52,   53,   77,   78,
 /*   410 */    56,  143,  144,  145,  128,  296,  148,  128,  150,  151,
 /*   420 */   152,  163,   20,  171,   22,  157,  158,  159,  179,  161,
 /*   430 */   172,   64,  128,  128,  166,   38,  168,  169,  180,  171,
 /*   440 */   128,  173,  174,  175,  176,  177,  128,  289,  180,  146,
 /*   450 */    51,   54,  184,  167,  168,  169,  170,  168,  169,  154,
 /*   460 */   192,  193,  194,  195,  196,  197,  198,  199,  128,  201,
 /*   470 */   202,  203,   75,  205,  206,  171,  208,  173,  172,  296,
 /*   480 */   289,  213,  214,  171,  301,  227,  180,  219,  220,  171,
 /*   490 */   222,  223,  224,  225,  226,  312,  321,   23,  230,  231,
 /*   500 */   232,  233,  234,  235,  236,  237,  238,  167,  168,  169,
 /*   510 */   170,   37,  128,  302,  128,  304,   26,   27,  146,  251,
 /*   520 */    30,  146,  254,  172,   31,  257,   52,   53,   35,   36,
 /*   530 */   262,  180,  264,  265,  266,  302,  268,  304,  270,  271,
 /*   540 */   272,  273,  274,  275,  276,  277,  278,  172,  179,  281,
 /*   550 */   282,  283,  284,  169,  302,  180,  304,  171,  290,  291,
 /*   560 */   292,  293,  294,  295,  172,  297,  298,  299,  300,  146,
 /*   570 */   128,  303,  180,  305,  306,  289,  317,  318,  289,  139,
 /*   580 */   321,  322,  314,  315,  316,  317,  318,  319,  320,  321,
 /*   590 */   322,  125,  126,  127,  128,  129,   50,  155,  156,  133,
 /*   600 */   134,  135,   56,  137,  301,  128,  302,   13,  304,  143,
 /*   610 */   144,  145,   49,   50,  148,  312,  264,   23,  266,  163,
 /*   620 */   302,  181,  304,  157,  158,  159,   21,  161,  172,  289,
 /*   630 */   130,  131,  166,  156,  168,  169,  180,  171,    9,  173,
 /*   640 */   174,  175,  176,  177,  178,   20,  180,   22,   54,   55,
 /*   650 */   184,   57,   23,   59,   60,   61,   62,   44,  192,  193,
 /*   660 */   194,  195,  196,  197,  198,  199,   21,  201,  202,  203,
 /*   670 */   179,  205,  206,  301,  208,  207,  301,  209,  210,  213,
 /*   680 */   214,   52,   53,  227,  312,  219,  220,  312,  222,  223,
 /*   690 */   224,  225,  226,   23,  147,   50,  230,  231,  232,  233,
 /*   700 */   234,  235,  236,  237,  238,  249,  139,  139,   38,  104,
 /*   710 */   105,  139,  168,  169,  147,  168,  169,  251,   55,  147,
 /*   720 */   254,  128,   23,  257,   54,  181,   22,   23,  262,   13,
 /*   730 */   264,  265,  266,  147,  268,  181,  270,  271,  272,  273,
 /*   740 */   274,  275,  276,  277,  278,   75,  178,  281,  282,  283,
 /*   750 */   284,   52,   53,   23,  168,  169,  290,  291,  292,  293,
 /*   760 */   294,  295,  169,  297,  298,  299,  300,   51,   56,  303,
 /*   770 */   128,  305,  306,   42,   58,   44,  128,   46,   13,  296,
 /*   780 */   314,  315,  316,  317,  318,  319,  320,  321,  322,  125,
 /*   790 */   126,  127,  128,  129,  209,  210,   51,  133,  134,  135,
 /*   800 */    55,  137,  164,   58,   22,   23,  147,  143,  144,  145,
 /*   810 */    22,   23,  148,  171,   24,  177,   51,   22,   23,  171,
 /*   820 */    55,  157,  158,  159,   58,  161,   21,  168,  169,   42,
 /*   830 */   166,   44,  168,  169,  139,  171,  164,  173,  174,  175,
 /*   840 */   176,  177,  178,   13,  180,   55,   55,   13,  184,  177,
 /*   850 */    21,  164,   23,   63,   63,   50,  192,  193,  194,  195,
 /*   860 */   196,  197,  198,  199,  177,  201,  202,  203,   24,  205,
 /*   870 */   206,  227,  208,  180,  119,  120,  181,  213,  214,  164,
 /*   880 */   313,   51,  128,  219,  220,   51,  222,  223,  224,  225,
 /*   890 */   226,  321,  177,  249,  230,  231,  232,  233,  234,  235,
 /*   900 */   236,  237,  238,   51,  317,  179,  164,   63,  321,   20,
 /*   910 */    58,  164,   23,  179,  164,  251,  179,  128,  254,  177,
 /*   920 */   128,  257,  122,  179,  177,  179,  262,  177,  264,  265,
 /*   930 */   266,  179,  268,   13,  270,  271,  272,  273,  274,  275,
 /*   940 */   276,  277,  278,  179,  303,  281,  282,  283,  284,  179,
 /*   950 */   179,  179,  179,  179,  290,  291,  292,  293,  294,  295,
 /*   960 */   171,  297,  298,  299,  300,  179,  146,  303,  321,  305,
 /*   970 */   306,   52,  179,  179,  128,  179,  179,  179,  314,  315,
 /*   980 */   316,  317,  318,  319,  320,  321,  322,  125,  126,  127,
 /*   990 */   128,  129,  180,  179,  132,  133,  134,  135,  179,  137,
 /*  1000 */   146,  169,  179,  166,    9,  143,  144,  145,   20,  321,
 /*  1010 */   148,  321,  136,  128,  179,  128,   22,  146,  128,  157,
 /*  1020 */   158,  159,  179,  161,  179,   21,  179,  321,  166,   21,
 /*  1030 */   168,  169,   22,  171,   22,  173,  174,  175,  176,  177,
 /*  1040 */   179,   24,  180,   22,   31,   13,  184,   22,   22,   60,
 /*  1050 */    22,   22,   22,   13,  192,  193,  194,  195,  196,  197,
 /*  1060 */   198,  199,   38,  201,  202,  203,   22,  205,  206,   24,
 /*  1070 */   208,   22,  179,  179,  179,  213,  214,  179,  179,   20,
 /*  1080 */   180,  219,  220,  179,  222,  223,  224,  225,  226,   54,
 /*  1090 */   148,  179,  230,  231,  232,  233,  234,  235,  236,  237,
 /*  1100 */   238,  179,  181,  179,  108,  179,  179,   22,  180,  179,
 /*  1110 */   200,  179,  179,  251,  179,  181,  254,  169,  179,  257,
 /*  1120 */   179,  153,  179,  200,  262,  180,  264,  265,  266,  177,
 /*  1130 */   268,   20,  270,  271,  272,  273,  274,  275,  276,  277,
 /*  1140 */   278,  177,    2,  281,  282,  283,  284,   64,  128,  179,
 /*  1150 */   221,  179,  290,  291,  292,  293,  294,  295,  179,  297,
 /*  1160 */   298,  299,  300,  179,  179,  303,  179,  305,  306,   31,
 /*  1170 */   204,  179,  228,  204,  128,  139,  314,  315,  316,  317,
 /*  1180 */   318,  319,  320,  321,  322,  125,  126,  127,  128,  129,
 /*  1190 */   179,  154,  128,  133,  134,  135,  181,  137,  179,  136,
 /*  1200 */   128,  179,  179,  143,  144,  145,  179,  139,  148,   50,
 /*  1210 */   179,  303,  179,  179,  139,  177,  166,  157,  158,  159,
 /*  1220 */   179,  161,  179,  181,  146,  169,  166,  179,  168,  169,
 /*  1230 */   179,  171,  179,  173,  174,  175,  176,  177,  178,  181,
 /*  1240 */   180,  179,  128,  303,  184,  179,  179,  200,  179,  179,
 /*  1250 */   179,  121,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  1260 */   179,  201,  202,  203,  180,  205,  206,  179,  208,  179,
 /*  1270 */   179,  179,  179,  213,  214,  179,  179,  179,  179,  219,
 /*  1280 */   220,  303,  222,  223,  224,  225,  226,  179,  179,  179,
 /*  1290 */   230,  231,  232,  233,  234,  235,  236,  237,  238,  179,
 /*  1300 */   179,  179,  179,  179,  303,  179,  179,  228,  179,  181,
 /*  1310 */   168,  251,  180,  179,  254,   53,  179,  257,  185,  180,
 /*  1320 */   179,  196,  262,  179,  264,  265,  266,  181,  268,  179,
 /*  1330 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  179,
 /*  1340 */   179,  281,  282,  283,  284,  179,  114,   63,  323,  323,
 /*  1350 */   290,  291,  292,  293,  294,  295,  323,  297,  298,  299,
 /*  1360 */   300,  323,  227,  303,  323,  305,  306,  323,  323,  323,
 /*  1370 */   323,  323,  323,  323,  314,  315,  316,  317,  318,  319,
 /*  1380 */   320,  321,  322,  124,  125,  126,  127,  128,  129,  323,
 /*  1390 */   323,  323,  133,  134,  135,  323,  137,  323,  323,  323,
 /*  1400 */   323,  323,  143,  144,  145,  323,  323,  148,  128,  323,
 /*  1410 */   323,  323,  323,  323,  323,  323,  157,  158,  159,  323,
 /*  1420 */   161,  323,  323,  323,  323,  166,  323,  168,  169,  323,
 /*  1430 */   171,  323,  173,  174,  175,  176,  177,  323,  323,  180,
 /*  1440 */   160,  323,  162,  184,  323,  165,  166,  167,  168,  169,
 /*  1450 */   170,  192,  193,  194,  195,  196,  197,  198,  199,  323,
 /*  1460 */   201,  202,  203,  323,  205,  206,  323,  208,  323,  323,
 /*  1470 */   323,  323,  213,  214,  323,  323,  323,  323,  219,  220,
 /*  1480 */   323,  222,  223,  224,  225,  226,  323,  323,  323,  230,
 /*  1490 */   231,  232,  233,  234,  235,  236,  237,  238,  323,  323,
 /*  1500 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  1510 */   251,  323,  323,  254,  323,  323,  257,  323,  323,  323,
 /*  1520 */   323,  262,  323,  264,  265,  266,  323,  268,  323,  270,
 /*  1530 */   271,  272,  273,  274,  275,  276,  277,  278,  323,  323,
 /*  1540 */   281,  282,  283,  284,  323,  323,  323,  323,  323,  290,
 /*  1550 */   291,  292,  293,  294,  295,  323,  297,  298,  299,  300,
 /*  1560 */   323,  323,  303,  323,  305,  306,  323,  323,  288,  289,
 /*  1570 */   323,  323,  323,  314,  315,  316,  317,  318,  319,  320,
 /*  1580 */   321,  322,  125,  126,  127,  128,  129,  323,  323,  323,
 /*  1590 */   133,  134,  135,  323,  137,  323,  323,  323,  323,  323,
 /*  1600 */   143,  144,  145,  323,  323,  148,  323,  323,  323,  323,
 /*  1610 */   323,  323,  323,  323,  157,  158,  159,  323,  161,  323,
 /*  1620 */   323,  323,  323,  166,  323,  168,  169,  323,  171,  323,
 /*  1630 */   173,  174,  175,  176,  177,  323,  323,  180,  323,  323,
 /*  1640 */   323,  184,  323,  323,  323,  323,  323,  323,  323,  192,
 /*  1650 */   193,  194,  195,  196,  197,  198,  199,  323,  201,  202,
 /*  1660 */   203,  323,  205,  206,  323,  208,  323,  323,  323,  323,
 /*  1670 */   213,  214,  323,  323,  323,  323,  219,  220,  323,  222,
 /*  1680 */   223,  224,  225,  226,  323,  323,  323,  230,  231,  232,
 /*  1690 */   233,  234,  235,  236,  237,  238,  323,  323,  323,  323,
 /*  1700 */   323,  323,  323,  323,  323,  323,  323,  323,  251,  323,
 /*  1710 */   323,  254,  323,  323,  257,  323,  323,  323,  323,  262,
 /*  1720 */   323,  264,  265,  266,  323,  268,  323,  270,  271,  272,
 /*  1730 */   273,  274,  275,  276,  277,  278,  323,  323,  281,  282,
 /*  1740 */   283,  284,  323,  323,  323,  323,  323,  290,  291,  292,
 /*  1750 */   293,  294,  295,  323,  297,  298,  299,  300,  323,  323,
 /*  1760 */   303,  323,  305,  306,  323,  323,  323,  323,  323,  323,
 /*  1770 */   323,  314,  315,  316,  317,  318,  319,  320,  321,  322,
 /*  1780 */   126,  127,  128,  129,  323,  323,  323,  133,  134,  135,
 /*  1790 */   323,  137,  323,  323,  323,  323,  323,  143,  144,  145,
 /*  1800 */   323,  323,  148,  323,  323,  323,  323,  323,  323,  323,
 /*  1810 */   323,  157,  158,  159,  323,  161,  323,  323,  323,  323,
 /*  1820 */   166,  323,  168,  169,  323,  171,  323,  173,  174,  175,
 /*  1830 */   176,  177,  178,  323,  180,  323,  323,  323,  184,  323,
 /*  1840 */   323,  323,  323,  323,  323,  323,  192,  193,  194,  195,
 /*  1850 */   196,  197,  198,  199,  323,  201,  202,  203,  323,  205,
 /*  1860 */   206,  323,  208,  323,  323,  323,  323,  213,  214,  323,
 /*  1870 */   323,  323,  323,  219,  220,  323,  222,  223,  224,  225,
 /*  1880 */   226,  323,  323,  323,  230,  231,  232,  233,  234,  235,
 /*  1890 */   236,  237,  238,  323,  323,  323,  323,  323,  323,  323,
 /*  1900 */   323,  323,  323,  323,  323,  251,  323,  323,  254,  323,
 /*  1910 */   323,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /*  1920 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /*  1930 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /*  1940 */   323,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /*  1950 */   323,  297,  298,  299,  300,  323,  323,  303,  323,  305,
 /*  1960 */   306,  323,  323,  323,  323,  323,  323,  323,  314,  315,
 /*  1970 */   316,  317,  318,  319,  320,  321,  322,  126,  127,  128,
 /*  1980 */   129,  323,  323,  323,  133,  134,  135,  323,  137,  323,
 /*  1990 */   323,  323,  323,  323,  143,  144,  145,  323,  323,  148,
 /*  2000 */   323,  323,  323,  323,  323,  323,  323,  323,  157,  158,
 /*  2010 */   159,  323,  161,  323,  323,  323,  323,  166,  323,  168,
 /*  2020 */   169,  323,  171,  323,  173,  174,  175,  176,  177,  178,
 /*  2030 */   323,  180,  323,  323,  323,  184,  323,  323,  323,  323,
 /*  2040 */   323,  323,  323,  192,  193,  194,  195,  196,  197,  198,
 /*  2050 */   199,  323,  201,  202,  203,  323,  205,  206,  323,  208,
 /*  2060 */   323,  323,  323,  323,  213,  214,  323,  323,  323,  323,
 /*  2070 */   219,  220,  323,  222,  223,  224,  225,  226,  323,  323,
 /*  2080 */   323,  230,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  2090 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  2100 */   323,  323,  251,  323,  323,  254,  323,  323,  257,  323,
 /*  2110 */   323,  323,  323,  262,  323,  264,  265,  266,  323,  268,
 /*  2120 */   323,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /*  2130 */   323,  323,  281,  282,  283,  284,  323,  323,  323,  323,
 /*  2140 */   323,  290,  291,  292,  293,  294,  295,  323,  297,  298,
 /*  2150 */   299,  300,  323,  323,  303,  323,  305,  306,  323,  323,
 /*  2160 */   323,  323,  323,  323,  323,  314,  315,  316,  317,  318,
 /*  2170 */   319,  320,  321,  322,  126,  127,  128,  129,  323,  323,
 /*  2180 */   323,  133,  134,  135,  323,  137,  323,  323,  323,  323,
 /*  2190 */   323,  143,  144,  145,  323,  323,  148,  323,  323,  323,
 /*  2200 */   323,  323,  323,  323,  323,  157,  158,  159,  323,  161,
 /*  2210 */   323,  323,  323,  323,  166,  323,  168,  169,  323,  171,
 /*  2220 */   323,  173,  174,  175,  176,  177,  178,  323,  180,  323,
 /*  2230 */   323,  323,  184,  323,  323,  323,  323,  323,  323,  323,
 /*  2240 */   192,  193,  194,  195,  196,  197,  198,  199,  323,  201,
 /*  2250 */   202,  203,  323,  205,  206,  323,  208,  323,  323,  323,
 /*  2260 */   323,  213,  214,  323,  323,  323,  323,  219,  220,  323,
 /*  2270 */   222,  223,  224,  225,  226,  323,  323,  323,  230,  231,
 /*  2280 */   232,  233,  234,  235,  236,  237,  238,  323,  323,  323,
 /*  2290 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  251,
 /*  2300 */   323,  323,  254,  323,  323,  257,  323,  323,  323,  323,
 /*  2310 */   262,  323,  264,  265,  266,  323,  268,  323,  270,  271,
 /*  2320 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /*  2330 */   282,  283,  284,  323,  323,  323,  323,  323,  290,  291,
 /*  2340 */   292,  293,  294,  295,  323,  297,  298,  299,  300,  323,
 /*  2350 */   323,  303,  323,  305,  306,  323,  323,  323,  323,  323,
 /*  2360 */   323,  323,  314,  315,  316,  317,  318,  319,  320,  321,
 /*  2370 */   322,  126,  127,  128,  129,  323,  323,  323,  133,  134,
 /*  2380 */   135,  323,  137,  323,  323,  323,  323,  323,  143,  144,
 /*  2390 */   145,  323,  323,  148,  323,  323,  323,  323,  323,  323,
 /*  2400 */   323,  323,  157,  158,  159,  323,  161,  323,  323,  323,
 /*  2410 */   323,  166,  323,  168,  169,  323,  171,  323,  173,  174,
 /*  2420 */   175,  176,  177,  178,  323,  180,  323,  323,  323,  184,
 /*  2430 */   323,  323,  323,  323,  323,  323,  323,  192,  193,  194,
 /*  2440 */   195,  196,  197,  198,  199,  323,  201,  202,  203,  323,
 /*  2450 */   205,  206,  323,  208,  323,  323,  323,  323,  213,  214,
 /*  2460 */   323,  323,  323,  323,  219,  220,  323,  222,  223,  224,
 /*  2470 */   225,  226,  323,  323,  323,  230,  231,  232,  233,  234,
 /*  2480 */   235,  236,  237,  238,  323,  323,  323,  323,  323,  323,
 /*  2490 */   323,  323,  323,  323,  323,  323,  251,  323,  323,  254,
 /*  2500 */   323,  323,  257,  323,  323,  323,  323,  262,  323,  264,
 /*  2510 */   265,  266,  323,  268,  323,  270,  271,  272,  273,  274,
 /*  2520 */   275,  276,  277,  278,  323,  323,  281,  282,  283,  284,
 /*  2530 */   323,  323,  323,  323,  323,  290,  291,  292,  293,  294,
 /*  2540 */   295,  323,  297,  298,  299,  300,  323,  323,  303,  323,
 /*  2550 */   305,  306,  323,  323,  323,  323,  323,  323,  323,  314,
 /*  2560 */   315,  316,  317,  318,  319,  320,  321,  322,  125,  126,
 /*  2570 */   127,  128,  129,  323,  323,  323,  133,  134,  135,  323,
 /*  2580 */   137,  323,  323,  323,  323,  323,  143,  144,  145,  323,
 /*  2590 */   323,  148,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  2600 */   157,  158,  159,  323,  161,  323,  323,  323,  323,  166,
 /*  2610 */   323,  168,  169,  323,  171,  323,  173,  174,  175,  176,
 /*  2620 */   177,  323,  323,  180,  323,  323,  323,  184,  323,  323,
 /*  2630 */   323,  323,  323,  323,  323,  192,  193,  194,  195,  196,
 /*  2640 */   197,  198,  199,  323,  201,  202,  203,  323,  205,  206,
 /*  2650 */   323,  208,  323,  323,  323,  323,  213,  214,  323,  323,
 /*  2660 */   323,  323,  219,  220,  323,  222,  223,  224,  225,  226,
 /*  2670 */   323,  323,  323,  230,  231,  232,  233,  234,  235,  236,
 /*  2680 */   237,  238,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  2690 */   323,  323,  323,  323,  251,  323,  323,  254,  323,  323,
 /*  2700 */   257,  323,  323,  323,  323,  262,  323,  264,  265,  266,
 /*  2710 */   323,  268,  323,  270,  271,  272,  273,  274,  275,  276,
 /*  2720 */   277,  278,  323,  323,  281,  282,  283,  284,  323,  323,
 /*  2730 */   323,  323,  323,  290,  291,  292,  293,  294,  295,  323,
 /*  2740 */   297,  298,  299,  300,  323,  323,  303,  323,  305,  306,
 /*  2750 */   323,  323,  323,  323,  323,  323,  323,  314,  315,  316,
 /*  2760 */   317,  318,  319,  320,  321,  322,  125,  126,  127,  128,
 /*  2770 */   129,  323,  323,  323,  133,  134,  135,  323,  137,  323,
 /*  2780 */   323,  323,  323,  323,  143,  144,  145,  323,  323,  148,
 /*  2790 */   323,  323,  323,  323,  323,  323,  323,  323,  157,  158,
 /*  2800 */   159,  323,  161,  323,  323,  323,  323,  166,  323,  168,
 /*  2810 */   169,  323,  171,  323,  173,  174,  175,  176,  177,  323,
 /*  2820 */   323,  180,  323,  323,  323,  184,  323,  323,  323,  323,
 /*  2830 */   323,  323,  323,  192,  193,  194,  195,  196,  197,  198,
 /*  2840 */   199,  323,  201,  202,  203,  323,  205,  206,  323,  208,
 /*  2850 */   323,  323,  323,  323,  213,  214,  323,  323,  323,  323,
 /*  2860 */   219,  220,  323,  222,  223,  224,  225,  226,  323,  323,
 /*  2870 */   323,  230,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  2880 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  2890 */   323,  323,  251,  323,  323,  254,  323,  323,  257,  323,
 /*  2900 */   323,  323,  323,  262,  323,  264,  265,  266,  323,  268,
 /*  2910 */   323,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /*  2920 */   323,  323,  281,  282,  283,  284,  323,  323,  323,  323,
 /*  2930 */   323,  290,  291,  292,  293,  294,  295,  323,  297,  298,
 /*  2940 */   299,  300,  323,  323,  303,  323,  305,  306,  323,  323,
 /*  2950 */   323,  323,  323,  323,  323,  314,  315,  316,  317,  318,
 /*  2960 */   319,  320,  321,  322,  125,  126,  127,  128,  129,  323,
 /*  2970 */   323,  323,  133,  134,  135,  323,  137,  323,  323,  323,
 /*  2980 */   323,  323,  143,  144,  145,  323,  323,  148,  323,  323,
 /*  2990 */   323,  323,  323,  323,  323,  323,  157,  158,  159,  323,
 /*  3000 */   161,  323,  323,  323,  323,  166,  323,  168,  169,  323,
 /*  3010 */   171,  323,  173,  174,  175,  176,  177,  323,  323,  180,
 /*  3020 */   323,  323,  323,  184,  323,  323,  323,  323,  323,  323,
 /*  3030 */   323,  192,  193,  194,  195,  196,  197,  198,  199,  323,
 /*  3040 */   201,  202,  203,  323,  205,  206,  323,  208,  323,  323,
 /*  3050 */   323,  323,  213,  214,  323,  323,  323,  323,  219,  220,
 /*  3060 */   323,  222,  223,  224,  225,  226,  323,  323,  323,  230,
 /*  3070 */   231,  232,  233,  234,  235,  236,  237,  238,  323,  323,
 /*  3080 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  3090 */   251,  323,  323,  254,  323,  323,  257,  323,  323,  323,
 /*  3100 */   323,  262,  323,  264,  265,  266,  323,  268,  323,  270,
 /*  3110 */   271,  272,  273,  274,  275,  276,  277,  278,  323,  323,
 /*  3120 */   281,  282,  283,  284,  323,  323,  323,  323,  323,  290,
 /*  3130 */   291,  292,  293,  294,  295,  323,  297,  298,  299,  300,
 /*  3140 */   323,  323,  303,  323,  305,  306,  323,  323,  323,  323,
 /*  3150 */   323,  323,  323,  314,  315,  316,  317,  318,  319,  320,
 /*  3160 */   321,  322,  125,  126,  127,  128,  129,  323,  323,  323,
 /*  3170 */   133,  134,  135,  323,  137,  323,  323,  323,  323,  323,
 /*  3180 */   143,  144,  145,  323,  323,  148,  323,  323,  323,  323,
 /*  3190 */   323,  323,  323,  323,  157,  158,  159,  323,  161,  323,
 /*  3200 */   323,  323,  323,  166,  323,  168,  169,  323,  171,  323,
 /*  3210 */   173,  174,  175,  176,  177,  323,  323,  180,  323,  323,
 /*  3220 */   323,  184,  323,  323,  323,  323,  323,  323,  323,  192,
 /*  3230 */   193,  194,  195,  196,  197,  198,  199,  323,  201,  202,
 /*  3240 */   203,  323,  205,  206,  323,  208,  323,  323,  323,  323,
 /*  3250 */   213,  214,  323,  323,  323,  323,  219,  220,  323,  222,
 /*  3260 */   223,  224,  225,  226,  323,  323,  323,  230,  231,  232,
 /*  3270 */   233,  234,  235,  236,  237,  238,  323,  323,  323,  323,
 /*  3280 */   323,  323,  323,  323,  323,  323,  323,  323,  251,  323,
 /*  3290 */   323,  254,  323,  323,  257,  323,  323,  323,  323,  262,
 /*  3300 */   323,  264,  265,  266,  323,  268,  323,  270,  271,  272,
 /*  3310 */   273,  274,  275,  276,  277,  278,  323,  323,  281,  282,
 /*  3320 */   283,  284,  323,  323,  323,  323,  323,  290,  291,  292,
 /*  3330 */   293,  294,  295,  323,  297,  298,  299,  300,  323,  323,
 /*  3340 */   303,  323,  305,  306,  323,  323,  323,  323,  323,  323,
 /*  3350 */   323,  314,  315,  316,  317,  318,  319,  320,  321,  322,
 /*  3360 */   125,  126,  127,  128,  129,  323,  323,  323,  133,  134,
 /*  3370 */   135,  323,  137,  323,  323,  323,  323,  323,  143,  144,
 /*  3380 */   145,  323,  323,  148,  323,  323,  323,  323,  323,  323,
 /*  3390 */   323,  323,  157,  158,  159,  323,  161,  323,  323,  323,
 /*  3400 */   323,  166,  323,  168,  169,  323,  171,  323,  173,  174,
 /*  3410 */   175,  176,  177,  323,  323,  180,  323,  323,  323,  184,
 /*  3420 */   323,  323,  323,  323,  323,  323,  323,  192,  193,  194,
 /*  3430 */   195,  196,  197,  198,  199,  323,  201,  202,  203,  323,
 /*  3440 */   205,  206,  323,  208,  323,  323,  323,  323,  213,  214,
 /*  3450 */   323,  323,  323,  323,  219,  220,  323,  222,  223,  224,
 /*  3460 */   225,  226,  323,  323,  323,  230,  231,  232,  233,  234,
 /*  3470 */   235,  236,  237,  238,  323,  323,  323,  323,  323,  323,
 /*  3480 */   323,  323,  323,  323,  323,  323,  251,  323,  323,  254,
 /*  3490 */   323,  323,  257,  323,  323,  323,  323,  262,  323,  264,
 /*  3500 */   265,  266,  323,  268,  323,  270,  271,  272,  273,  274,
 /*  3510 */   275,  276,  277,  278,  323,  323,  281,  282,  283,  284,
 /*  3520 */   323,  323,  323,  323,  323,  290,  291,  292,  293,  294,
 /*  3530 */   295,  323,  297,  298,  299,  300,  323,  323,  303,  323,
 /*  3540 */   305,  306,  323,  323,  323,  323,  323,  323,  323,  314,
 /*  3550 */   315,  316,  317,  318,  319,  320,  321,  322,  126,  127,
 /*  3560 */   128,  129,  323,  323,  323,  133,  134,  135,  323,  137,
 /*  3570 */   323,  323,  323,  323,  323,  143,  144,  145,  323,  323,
 /*  3580 */   148,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /*  3590 */   158,  159,  323,  161,  323,  323,  323,  323,  166,  323,
 /*  3600 */   168,  169,  323,  171,  323,  173,  174,  175,  176,  177,
 /*  3610 */   323,  323,  180,  323,  323,  323,  184,  323,  323,  323,
 /*  3620 */   323,  323,  323,  323,  192,  193,  194,  195,  196,  197,
 /*  3630 */   198,  199,  323,  201,  202,  203,  323,  205,  206,  323,
 /*  3640 */   208,  323,  323,  323,  323,  213,  214,  323,  323,  323,
 /*  3650 */   323,  219,  220,  323,  222,  223,  224,  225,  226,  323,
 /*  3660 */   323,  323,  230,  231,  232,  233,  234,  235,  236,  237,
 /*  3670 */   238,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  3680 */   323,  323,  323,  251,  323,  323,  254,  323,  323,  257,
 /*  3690 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  323,
 /*  3700 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /*  3710 */   278,  323,  323,  281,  282,  283,  284,  323,  323,  323,
 /*  3720 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /*  3730 */   298,  299,  300,  323,  323,  303,  323,  305,  306,  323,
 /*  3740 */   323,  323,  323,  323,  323,  323,  314,  315,  316,  317,
 /*  3750 */   318,  319,  320,  321,  322,  127,  128,  129,  323,  323,
 /*  3760 */   323,  133,  134,  135,  323,  137,  323,  323,  323,  323,
 /*  3770 */   323,  143,  144,  145,  323,  128,  148,  323,  323,  323,
 /*  3780 */   323,  323,  323,  323,  323,  157,  323,  159,  323,  161,
 /*  3790 */   323,  323,  323,  323,  166,  323,  168,  169,  323,  171,
 /*  3800 */   323,  173,  323,  175,  323,  177,  323,  160,  180,  162,
 /*  3810 */   323,  323,  165,  166,  167,  168,  169,  170,  323,  323,
 /*  3820 */   323,  323,  323,  195,  196,  197,  198,  199,  323,  201,
 /*  3830 */   202,  203,  323,  205,  206,  323,  208,  323,  323,  323,
 /*  3840 */   323,  213,  214,  323,  323,  323,  323,  219,  220,  323,
 /*  3850 */   222,  223,  224,  225,  226,  323,  323,  323,  230,  231,
 /*  3860 */   232,  233,  234,  235,  236,  237,  238,  323,  323,  323,
 /*  3870 */   323,  323,  323,  323,  323,  323,  229,  323,  323,  251,
 /*  3880 */   323,  323,  254,  323,  323,  257,  323,  323,  323,  323,
 /*  3890 */   262,  323,  264,  265,  266,  323,  268,  323,  270,  271,
 /*  3900 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /*  3910 */   282,  283,  284,  323,  323,  323,  323,  323,  290,  291,
 /*  3920 */   292,  293,  294,  295,  323,  297,  298,  299,  300,  323,
 /*  3930 */   323,  303,  285,  305,  306,  288,  289,  323,  323,  323,
 /*  3940 */   323,  323,  314,  315,  316,  317,  318,  319,  320,  321,
 /*  3950 */   322,  127,  128,  129,  323,  323,  323,  133,  134,  135,
 /*  3960 */   323,  137,  323,  323,  323,  323,  323,  143,  144,  145,
 /*  3970 */   323,  323,  148,  323,  323,  323,  323,  323,  323,  323,
 /*  3980 */   323,  157,  323,  159,  323,  161,  323,  323,  323,  323,
 /*  3990 */   166,  323,  168,  169,  323,  171,  323,  173,  323,  175,
 /*  4000 */   323,  177,  323,  323,  180,  239,  240,  241,  242,  243,
 /*  4010 */   244,  245,  246,  247,  248,  249,  250,  323,  252,  195,
 /*  4020 */   196,  197,  198,  199,  323,  201,  202,  203,  323,  205,
 /*  4030 */   206,  323,  208,  323,  323,  323,  323,  213,  214,  323,
 /*  4040 */   323,  323,  323,  219,  220,  323,  222,  223,  224,  225,
 /*  4050 */   226,  323,  323,  323,  230,  231,  232,  233,  234,  235,
 /*  4060 */   236,  237,  238,  323,  323,  323,  323,  323,  323,  323,
 /*  4070 */   323,  323,  323,  323,  323,  251,  323,  323,  254,  323,
 /*  4080 */   323,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /*  4090 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /*  4100 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /*  4110 */   323,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /*  4120 */   323,  297,  298,  299,  300,  323,  323,  303,  323,  305,
 /*  4130 */   306,  323,  323,  323,  323,  323,  323,  323,  314,  315,
 /*  4140 */   316,  317,  318,  319,  320,  321,  322,  127,  128,  129,
 /*  4150 */   323,  323,  323,  133,  134,  135,  323,  137,  323,  323,
 /*  4160 */   323,  323,  323,  143,  144,  145,  323,  128,  148,  323,
 /*  4170 */   323,  323,  128,  323,  323,  323,  323,  157,  323,  159,
 /*  4180 */   323,  161,  323,  323,  323,  323,  166,  323,  168,  169,
 /*  4190 */   323,  171,  323,  173,  323,  175,  323,  177,  323,  323,
 /*  4200 */   180,  162,  323,  323,  323,  166,  162,  168,  169,  323,
 /*  4210 */   166,  323,  168,  169,  323,  195,  196,  197,  198,  199,
 /*  4220 */   323,  201,  202,  203,  323,  205,  206,  323,  208,  323,
 /*  4230 */   323,  323,  323,  213,  214,  323,  323,  323,  323,  219,
 /*  4240 */   220,  323,  222,  223,  224,  225,  226,  323,  323,  323,
 /*  4250 */   230,  231,  232,  233,  234,  235,  236,  237,  238,  323,
 /*  4260 */   323,  323,  323,  323,  323,  323,  323,  323,  229,  323,
 /*  4270 */   323,  251,  323,  323,  254,  323,  323,  257,  323,  323,
 /*  4280 */   323,  323,  262,  323,  264,  265,  266,  323,  268,  323,
 /*  4290 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /*  4300 */   323,  281,  282,  283,  284,  323,  323,  323,  323,  323,
 /*  4310 */   290,  291,  292,  293,  294,  295,  323,  297,  298,  299,
 /*  4320 */   300,  323,  323,  303,  285,  305,  306,  288,  289,  285,
 /*  4330 */   323,  323,  288,  289,  314,  315,  316,  317,  318,  319,
 /*  4340 */   320,  321,  322,  127,  128,  129,  323,  323,  323,  133,
 /*  4350 */   134,  135,  323,  137,  323,  323,  323,  323,  323,  143,
 /*  4360 */   144,  145,  323,  323,  148,  323,  323,  323,  323,  323,
 /*  4370 */   323,  323,  323,  157,  323,  159,  323,  161,  323,  323,
 /*  4380 */   323,  323,  166,  323,  168,  169,  323,  171,  323,  173,
 /*  4390 */   323,  175,  323,  177,  323,  323,  180,  323,  323,  323,
 /*  4400 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  4410 */   323,  195,  196,  197,  198,  199,  323,  201,  202,  203,
 /*  4420 */   323,  205,  206,  323,  208,  323,  323,  323,  323,  213,
 /*  4430 */   214,  323,  323,  323,  323,  219,  220,  323,  222,  223,
 /*  4440 */   224,  225,  226,  323,  323,  323,  230,  231,  232,  233,
 /*  4450 */   234,  235,  236,  237,  238,  323,  323,  323,  323,  323,
 /*  4460 */   323,  323,  323,  323,  323,  323,  323,  251,  323,  323,
 /*  4470 */   254,  323,  323,  257,  323,  323,  323,  323,  262,  323,
 /*  4480 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /*  4490 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /*  4500 */   284,  323,  323,  323,  323,  323,  290,  291,  292,  293,
 /*  4510 */   294,  295,  323,  297,  298,  299,  300,  323,  323,  303,
 /*  4520 */   323,  305,  306,  323,  323,  323,  323,  323,  323,  323,
 /*  4530 */   314,  315,  316,  317,  318,  319,  320,  321,  322,  127,
 /*  4540 */   128,  129,  323,  323,  323,  133,  134,  135,  323,  137,
 /*  4550 */   323,  323,  323,  323,  323,  143,  144,  145,  323,  323,
 /*  4560 */   148,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /*  4570 */   323,  159,  323,  161,  323,  323,  323,  323,  166,  323,
 /*  4580 */   168,  169,  323,  171,  323,  173,  323,  175,  323,  177,
 /*  4590 */   323,  323,  180,  323,  323,  323,  323,  323,  323,  323,
 /*  4600 */   323,  323,  323,  323,  323,  323,  323,  195,  196,  197,
 /*  4610 */   198,  199,  323,  201,  202,  203,  323,  205,  206,  323,
 /*  4620 */   208,  323,  323,  323,  323,  213,  214,  323,  323,  323,
 /*  4630 */   323,  219,  220,  323,  222,  223,  224,  225,  226,  323,
 /*  4640 */   323,  323,  230,  231,  232,  233,  234,  235,  236,  237,
 /*  4650 */   238,  323,  323,  323,  323,  323,  323,  323,  138,  323,
 /*  4660 */   140,  141,  323,  251,  144,  323,  254,  147,  323,  257,
 /*  4670 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  323,
 /*  4680 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /*  4690 */   278,  323,  323,  281,  282,  283,  284,  323,  323,  323,
 /*  4700 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /*  4710 */   298,  299,  300,  323,  323,  303,  323,  305,  306,  323,
 /*  4720 */   323,  128,  323,  323,  323,  323,  314,  315,  316,  317,
 /*  4730 */   318,  319,  320,  321,  322,  323,  143,  144,  323,  323,
 /*  4740 */   323,  323,  323,  323,  323,  323,  323,   13,  323,  323,
 /*  4750 */   157,  323,  159,  323,  161,  323,  323,   23,  323,  166,
 /*  4760 */   323,  168,  169,  323,  171,  323,  173,  323,  175,  323,
 /*  4770 */   323,  323,  323,  180,   40,   41,   42,   43,   44,   45,
 /*  4780 */    46,   47,   48,   49,  323,  323,  323,   53,   54,   55,
 /*  4790 */   197,   57,  199,   59,   60,   61,   62,  323,  323,  323,
 /*  4800 */   323,  323,  323,  323,  211,  212,  323,  323,  323,  323,
 /*  4810 */   323,  323,  323,  323,  323,  323,  323,  323,  225,  226,
 /*  4820 */   323,  323,  323,  230,  231,  232,  233,  234,  235,  236,
 /*  4830 */   237,  238,  323,  323,  314,  315,  316,  317,  318,  319,
 /*  4840 */   320,  321,  322,  323,  251,  323,  323,  254,  323,  323,
 /*  4850 */   257,  323,  323,  323,  323,  262,  323,  264,  265,  266,
 /*  4860 */   323,  268,  323,  270,  271,  272,  273,  274,  275,  276,
 /*  4870 */   277,  278,  323,  323,  281,  282,  283,  284,  323,  323,
 /*  4880 */   323,  323,  323,  290,  291,  292,  293,  294,  295,  323,
 /*  4890 */   297,  298,  299,  300,  323,  323,  303,  323,  305,  306,
 /*  4900 */   323,  323,  128,  323,  323,  323,  323,  314,  315,  316,
 /*  4910 */   317,  318,  319,  320,  321,  322,  323,  143,  144,  323,
 /*  4920 */   323,  323,  323,  323,    9,  323,  323,  323,   13,  323,
 /*  4930 */   323,  157,  323,  159,    5,  161,  323,    8,   23,  323,
 /*  4940 */   166,  323,  168,  169,  323,  171,  323,  173,  323,  175,
 /*  4950 */   323,  323,  323,   24,  180,   40,   41,   42,   43,   44,
 /*  4960 */    45,   46,   47,   48,  323,  323,  323,   52,   53,   54,
 /*  4970 */    55,  197,   57,  199,   59,   60,   61,   62,  323,  323,
 /*  4980 */    65,   66,   67,   68,  323,  323,   71,   72,   73,   74,
 /*  4990 */    75,   76,  323,  323,  323,  323,  323,  323,  323,  225,
 /*  5000 */   226,  323,  323,  323,  230,  231,  232,  233,  234,  235,
 /*  5010 */   236,  237,  238,   84,   85,   86,   87,   88,   89,   90,
 /*  5020 */    91,   92,   93,  323,  323,  251,  323,  323,  254,  323,
 /*  5030 */   323,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /*  5040 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /*  5050 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /*  5060 */   323,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /*  5070 */   323,  297,  298,  299,  300,  323,  323,  303,  323,  305,
 /*  5080 */   306,  323,  323,  128,  323,  323,  323,  323,  314,  315,
 /*  5090 */   316,  317,  318,  319,  320,  321,  322,  323,  143,  144,
 /*  5100 */   323,  323,  323,  323,  323,    9,  323,  323,  323,   13,
 /*  5110 */   323,  323,  157,  323,  159,  323,  161,  323,  323,   23,
 /*  5120 */   323,  166,  323,  168,  169,  323,  171,  323,  173,  323,
 /*  5130 */   175,  323,  323,  323,  323,  180,  323,  323,  323,  323,
 /*  5140 */   323,  323,  323,  323,  323,  140,  141,  323,   52,  144,
 /*  5150 */    54,   55,  197,   57,  199,   59,   60,   61,   62,   63,
 /*  5160 */   323,   65,   66,   67,   68,  323,  323,   71,   72,   73,
 /*  5170 */    74,   75,   76,  323,  323,  323,  323,  323,  323,  323,
 /*  5180 */   225,  226,  323,  323,  323,  230,  231,  232,  233,  234,
 /*  5190 */   235,  236,  237,  238,  323,  323,  323,  323,  323,  323,
 /*  5200 */   323,  323,  323,  323,  323,  323,  251,  323,  323,  254,
 /*  5210 */   323,  323,  257,  323,  323,  323,  323,  262,  323,  264,
 /*  5220 */   265,  266,  323,  268,  323,  270,  271,  272,  273,  274,
 /*  5230 */   275,  276,  277,  278,  323,  323,  281,  282,  283,  284,
 /*  5240 */   323,  323,  323,  323,  323,  290,  291,  292,  293,  294,
 /*  5250 */   295,  323,  297,  298,  299,  300,  323,  323,  303,  323,
 /*  5260 */   305,  306,  323,  323,  128,  323,  323,  323,  323,  314,
 /*  5270 */   315,  316,  317,  318,  319,  320,  321,  322,  323,  143,
 /*  5280 */   144,  323,  323,  323,  323,  323,    9,  323,  323,  323,
 /*  5290 */    13,  323,  323,  157,  323,  159,  323,  161,  323,  323,
 /*  5300 */    23,  323,  166,  323,  168,  169,  323,  171,  323,  173,
 /*  5310 */   323,  175,  323,  323,  323,  323,  180,  323,  323,  314,
 /*  5320 */   315,  316,  317,  318,  319,  320,  321,  322,  323,   52,
 /*  5330 */   323,   54,   55,  197,   57,  199,   59,   60,   61,   62,
 /*  5340 */   323,  323,   65,   66,   67,   68,  323,  323,   71,   72,
 /*  5350 */    73,   74,   75,   76,  323,  323,  323,  323,  323,  323,
 /*  5360 */   323,  225,  226,  323,  323,  323,  230,  231,  232,  233,
 /*  5370 */   234,  235,  236,  237,  238,  323,  323,  323,  323,  323,
 /*  5380 */   323,  323,  323,  323,  323,  323,  323,  251,  323,  323,
 /*  5390 */   254,  323,  323,  257,  323,  323,  323,  323,  262,  323,
 /*  5400 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /*  5410 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /*  5420 */   284,  323,  323,  323,  323,  323,  290,  291,  292,  293,
 /*  5430 */   294,  295,  323,  297,  298,  299,  300,  323,  323,  303,
 /*  5440 */   323,  305,  306,  323,  323,  128,  323,  323,  323,  323,
 /*  5450 */   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
 /*  5460 */   143,  144,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  5470 */   323,   13,  323,  323,  157,  323,  159,  323,  161,  323,
 /*  5480 */   323,   23,  323,  166,  323,  168,  169,  323,  171,  323,
 /*  5490 */   173,  323,  175,  323,  323,  323,  323,  180,   40,   41,
 /*  5500 */    42,   43,   44,   45,   46,   47,   48,   25,   26,   27,
 /*  5510 */    28,   53,   54,   55,  197,   57,  199,   59,   60,   61,
 /*  5520 */    62,  323,   40,   41,   42,   43,   44,   45,   46,   47,
 /*  5530 */    48,   49,  144,  323,  323,  323,  323,  323,  323,  323,
 /*  5540 */   323,  323,  225,  226,  323,  323,  323,  230,  231,  232,
 /*  5550 */   233,  234,  235,  236,  237,  238,  323,  169,  323,  171,
 /*  5560 */   323,  323,  323,  175,  323,  323,  323,  323,  251,  323,
 /*  5570 */   323,  254,  323,  323,  257,  323,  323,  323,  323,  262,
 /*  5580 */   323,  264,  265,  266,  323,  268,  323,  270,  271,  272,
 /*  5590 */   273,  274,  275,  276,  277,  278,  323,  323,  281,  282,
 /*  5600 */   283,  284,  323,  323,  323,  323,  323,  290,  291,  292,
 /*  5610 */   293,  294,  295,  323,  297,  298,  299,  300,  323,  323,
 /*  5620 */   303,  323,  305,  306,  323,  323,  128,  323,  323,  323,
 /*  5630 */   323,  314,  315,  316,  317,  318,  319,  320,  321,  322,
 /*  5640 */   323,  143,  144,  323,  323,  323,  323,  323,  323,  323,
 /*  5650 */   323,  323,  323,  323,  323,  157,  323,  159,  323,  161,
 /*  5660 */   323,  323,  323,  323,  166,  323,  168,  169,  323,  171,
 /*  5670 */   323,  173,  323,  175,  323,  323,  323,  323,  180,  323,
 /*  5680 */   323,  323,  323,  323,  323,  323,  298,  299,  300,  323,
 /*  5690 */   323,  303,  323,  305,  306,  197,  323,  199,  323,  323,
 /*  5700 */   323,  323,  314,  315,  316,  317,  318,  319,  320,  321,
 /*  5710 */   322,  323,  323,  144,  323,  323,  323,  323,  323,  323,
 /*  5720 */   323,  323,  323,  225,  226,  323,  323,  323,  230,  231,
 /*  5730 */   232,  233,  234,  235,  236,  237,  238,  323,  323,  323,
 /*  5740 */   171,  323,  323,  323,  175,  323,  323,  323,  323,  251,
 /*  5750 */   323,  323,  254,  323,  323,  257,  323,  323,  323,  323,
 /*  5760 */   262,  323,  264,  265,  266,  323,  268,  323,  270,  271,
 /*  5770 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /*  5780 */   282,  283,  284,  323,  323,  323,  323,  323,  290,  291,
 /*  5790 */   292,  293,  294,  295,  323,  297,  298,  299,  300,  323,
 /*  5800 */   323,  303,  323,  305,  306,  323,  323,  128,  323,  323,
 /*  5810 */   323,  323,  314,  315,  316,  317,  318,  319,  320,  321,
 /*  5820 */   322,  323,  143,  144,  323,  323,  323,  323,  323,  323,
 /*  5830 */   323,  323,  323,  323,  323,  323,  157,  323,  159,  323,
 /*  5840 */   161,  323,  323,  323,  323,  166,  323,  168,  169,  323,
 /*  5850 */   171,  323,  173,  323,  175,  323,  323,  323,  323,  180,
 /*  5860 */   323,  323,  323,  323,  323,  323,  323,  298,  299,  300,
 /*  5870 */   323,  323,  303,  323,  305,  306,  197,  323,  199,  323,
 /*  5880 */   323,  323,  323,  314,  315,  316,  317,  318,  319,  320,
 /*  5890 */   321,  322,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  5900 */   323,  323,  323,  323,  225,  226,  323,  323,  323,  230,
 /*  5910 */   231,  232,  233,  234,  235,  236,  237,  238,  323,  323,
 /*  5920 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  5930 */   251,  323,  323,  254,  323,  323,  257,  323,  323,  323,
 /*  5940 */   323,  262,  323,  264,  265,  266,  323,  268,  323,  270,
 /*  5950 */   271,  272,  273,  274,  275,  276,  277,  278,  323,  323,
 /*  5960 */   281,  282,  283,  284,  323,  323,  323,  323,  323,  290,
 /*  5970 */   291,  292,  293,  294,  295,  323,  297,  298,  299,  300,
 /*  5980 */   323,  323,  303,  323,  305,  306,  323,  323,  128,  323,
 /*  5990 */   323,  323,  323,  314,  315,  316,  317,  318,  319,  320,
 /*  6000 */   321,  322,  323,  143,  144,  323,  323,  323,  323,  323,
 /*  6010 */   323,    9,  323,  323,  323,   13,  323,  157,  323,  159,
 /*  6020 */   323,  161,  323,  323,  323,   23,  166,  323,  168,  169,
 /*  6030 */   323,  171,  323,  173,  323,  175,  323,  323,  323,  323,
 /*  6040 */   180,  323,   40,   41,   42,   43,   44,   45,   46,   47,
 /*  6050 */    48,  323,  323,  323,   52,   53,   54,  197,   56,  199,
 /*  6060 */   323,   25,   26,   27,   28,  323,  323,  323,  323,  323,
 /*  6070 */   323,  323,  323,  323,  323,  323,   40,   41,   42,   43,
 /*  6080 */    44,   45,   46,   47,   48,  225,  226,  323,  323,  323,
 /*  6090 */   230,  231,  232,  233,  234,  235,  236,  237,  238,  323,
 /*  6100 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  6110 */   323,  251,  323,  323,  254,  323,  323,  257,  323,  323,
 /*  6120 */   323,  323,  262,  323,  264,  265,  266,  323,  268,  323,
 /*  6130 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /*  6140 */   323,  281,  282,  283,  284,  323,  323,  323,  323,  323,
 /*  6150 */   290,  291,  292,  293,  294,  295,  323,  297,  298,  299,
 /*  6160 */   300,  323,  323,  303,  323,  305,  306,  323,  323,  128,
 /*  6170 */   323,  323,  323,  323,  314,  315,  316,  317,  318,  319,
 /*  6180 */   320,  321,  322,  323,  143,  144,  323,  323,  323,  323,
 /*  6190 */   323,    9,  323,  323,  323,   13,  323,  323,  157,  323,
 /*  6200 */   159,  323,  161,  323,  323,   23,  323,  166,  323,  168,
 /*  6210 */   169,  323,  171,  323,  173,  323,  175,  323,  323,   13,
 /*  6220 */   323,  180,   40,   41,   42,   43,   44,   45,   46,   47,
 /*  6230 */    48,  323,  323,  323,   52,   53,   54,  323,  197,  323,
 /*  6240 */   199,  323,  323,  323,  323,  323,   40,   41,   42,   43,
 /*  6250 */    44,   45,   46,   47,   48,  323,  323,  323,   52,  323,
 /*  6260 */    54,  323,  323,  323,  323,  323,  225,  226,  323,  323,
 /*  6270 */   323,  230,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  6280 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  6290 */   323,  323,  251,  323,  323,  254,  323,  323,  257,  323,
 /*  6300 */   323,  323,  323,  262,  323,  264,  265,  266,  323,  268,
 /*  6310 */   323,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /*  6320 */   323,  323,  281,  282,  283,  284,  323,  323,  323,  323,
 /*  6330 */   323,  290,  291,  292,  293,  294,  295,  323,  297,  298,
 /*  6340 */   299,  300,  323,  323,  303,  323,  305,  306,  323,  323,
 /*  6350 */   323,  323,  323,  323,  323,  314,  315,  316,  317,  318,
 /*  6360 */   319,  320,  321,  322,  323,    9,  323,  323,  323,   13,
 /*  6370 */   323,  323,  323,  323,  323,   19,   20,   21,   22,   23,
 /*  6380 */   323,  323,   26,   27,   28,   29,   30,  323,   32,   33,
 /*  6390 */    34,  323,  323,  323,  323,   39,   40,   41,   42,   43,
 /*  6400 */    44,   45,   46,   47,   48,  323,  323,  323,   52,   53,
 /*  6410 */    54,   55,  323,   57,  323,   59,   60,   61,   62,  323,
 /*  6420 */   323,   65,   66,   67,   68,  323,  323,   71,   72,   73,
 /*  6430 */    74,   75,   76,  323,  323,  323,  323,  323,  323,  323,
 /*  6440 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  6450 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  6460 */   323,  323,  106,  323,  323,  109,  110,  111,  112,  113,
 /*  6470 */   114,  115,  116,  117,  118,    9,  323,  323,  323,   13,
 /*  6480 */   323,  323,  323,  323,  323,   19,   20,   21,   22,   23,
 /*  6490 */   323,  323,   26,   27,   28,   29,   30,  323,   32,   33,
 /*  6500 */    34,  323,  323,  323,  323,   39,   40,   41,   42,   43,
 /*  6510 */    44,   45,   46,   47,   48,  323,  323,  323,   52,   53,
 /*  6520 */    54,   55,  323,   57,  323,   59,   60,   61,   62,  323,
 /*  6530 */   323,   65,   66,   67,   68,  323,  323,   71,   72,   73,
 /*  6540 */    74,   75,   76,  323,  323,  323,  323,  323,  323,  323,
 /*  6550 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  6560 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  6570 */   323,  323,  106,  323,  323,  109,  110,  111,  112,  113,
 /*  6580 */   114,  115,  116,  117,  118,    9,  323,  323,  323,   13,
 /*  6590 */   323,  323,  323,  323,  323,   19,   20,  323,   22,   23,
 /*  6600 */   323,  323,   26,   27,   28,   29,   30,  323,  323,  323,
 /*  6610 */   323,  323,  323,  323,  323,   39,   40,   41,   42,   43,
 /*  6620 */    44,   45,   46,   47,   48,  323,  323,  323,   52,   53,
 /*  6630 */    54,   55,  323,   57,  323,   59,   60,   61,   62,  323,
 /*  6640 */   323,   65,   66,   67,   68,  323,  323,   71,   72,   73,
 /*  6650 */    74,   75,   76,  323,  323,  323,  323,  323,  323,  323,
 /*  6660 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  6670 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  6680 */   323,  323,  106,  323,  323,  109,  110,  111,  112,  113,
 /*  6690 */   114,  115,  116,  117,  118,  119,  120,  121,  128,  323,
 /*  6700 */   323,  323,  323,  323,  323,  323,    9,  323,  323,  323,
 /*  6710 */    13,  323,  142,  143,  144,  323,  323,   20,   21,  323,
 /*  6720 */    23,  323,  323,  323,  323,  323,  323,  157,  323,  323,
 /*  6730 */   323,  161,  323,  323,  323,  323,  166,  323,  168,  169,
 /*  6740 */   323,  171,  323,  173,  323,  175,  323,  323,  323,   52,
 /*  6750 */   180,   54,   55,  323,   57,  323,   59,   60,   61,   62,
 /*  6760 */   323,  323,   65,   66,   67,   68,  323,  197,   71,   72,
 /*  6770 */    73,   74,   75,   76,  323,  323,  323,  323,  323,  323,
 /*  6780 */   323,  323,   13,  323,  323,  323,  323,  323,  323,  323,
 /*  6790 */   323,  323,  323,  323,  323,   26,   27,  323,  323,   30,
 /*  6800 */   230,  323,  323,  323,  323,  323,  323,  323,  238,   40,
 /*  6810 */    41,   42,   43,   44,   45,   46,   47,   48,  323,  323,
 /*  6820 */   323,  251,   53,   54,  254,  323,  323,  257,  323,  323,
 /*  6830 */   323,  323,  262,  323,  264,  265,  266,  323,  268,  323,
 /*  6840 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /*  6850 */   323,  281,  282,  283,  284,  323,  323,  323,  323,  323,
 /*  6860 */   290,  291,  292,  293,  294,  295,  323,  297,  298,  299,
 /*  6870 */   300,  323,  323,  303,  323,  305,  306,  307,  308,  309,
 /*  6880 */   310,  323,  323,  323,  314,  315,  316,  317,  318,  319,
 /*  6890 */   320,  321,  322,  323,    9,  323,  323,  323,   13,  323,
 /*  6900 */   323,  323,  323,  323,   19,   20,   21,   22,   23,  323,
 /*  6910 */   323,   26,   27,   28,   29,   30,  323,  323,  323,  323,
 /*  6920 */   323,  323,  323,  323,   39,   40,   41,   42,   43,   44,
 /*  6930 */    45,   46,   47,   48,  323,  323,  323,   52,   53,   54,
 /*  6940 */    55,  323,   57,  323,   59,   60,   61,   62,  323,  323,
 /*  6950 */    65,   66,   67,   68,  323,  323,   71,   72,   73,   74,
 /*  6960 */    75,   76,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  6970 */   323,  323,  323,  323,  323,  323,  323,  323,  323,   94,
 /*  6980 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  323,
 /*  6990 */   323,  106,  323,  323,  109,  110,  111,  112,  113,  114,
 /*  7000 */   115,  116,  117,  118,    9,  323,  323,  323,   13,  323,
 /*  7010 */   323,  323,  323,  323,   19,   20,  323,   22,   23,  323,
 /*  7020 */   323,   26,   27,   28,   29,   30,  323,  323,  323,  323,
 /*  7030 */   323,  323,  323,  323,   39,   40,   41,   42,   43,   44,
 /*  7040 */    45,   46,   47,   48,  323,  323,  323,   52,   53,   54,
 /*  7050 */    55,  323,   57,  323,   59,   60,   61,   62,  323,  323,
 /*  7060 */    65,   66,   67,   68,  323,  323,   71,   72,   73,   74,
 /*  7070 */    75,   76,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  7080 */   323,  323,  323,  323,  323,  323,  323,  323,  323,   94,
 /*  7090 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  323,
 /*  7100 */   323,  106,  323,  323,  109,  110,  111,  112,  113,  114,
 /*  7110 */   115,  116,  117,  118,    9,  323,  323,  323,   13,  323,
 /*  7120 */   323,  323,  323,  323,   19,   20,  323,   22,   23,  323,
 /*  7130 */   323,   26,   27,  323,   29,   30,  323,  323,  323,  323,
 /*  7140 */   323,  323,  323,  323,   39,   40,   41,   42,   43,   44,
 /*  7150 */    45,   46,   47,   48,  323,  323,  323,   52,   53,   54,
 /*  7160 */    55,  323,   57,  323,   59,   60,   61,   62,  323,  323,
 /*  7170 */    65,   66,   67,   68,  323,  323,   71,   72,   73,   74,
 /*  7180 */    75,   76,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  7190 */   323,  323,  323,  323,  323,  323,  323,  323,  323,   94,
 /*  7200 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  323,
 /*  7210 */   323,  106,  323,  323,  109,  110,  111,  112,  113,  114,
 /*  7220 */   115,  128,  323,  323,    9,  323,  323,  323,   13,  323,
 /*  7230 */   323,  323,  323,  323,  323,  142,  143,  144,   23,  323,
 /*  7240 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  7250 */   157,  323,  323,  323,  161,  323,  323,  323,  323,  166,
 /*  7260 */   323,  168,  169,  323,  171,  323,  173,   52,  175,   54,
 /*  7270 */    55,   56,   57,  180,   59,   60,   61,   62,  323,  323,
 /*  7280 */    65,   66,   67,   68,  323,  323,   71,   72,   73,   74,
 /*  7290 */    75,   76,  323,  323,  128,  323,  323,  323,  323,  323,
 /*  7300 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  143,
 /*  7310 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  7320 */   323,  323,  323,  157,  323,  323,  323,  323,  323,  323,
 /*  7330 */   323,  323,  166,  323,  323,  169,  323,  171,  323,  173,
 /*  7340 */   323,  175,  323,  323,  323,  323,  180,  323,  323,  323,
 /*  7350 */   323,  323,  323,  323,  323,  262,  323,  264,  265,  266,
 /*  7360 */   323,  268,  323,  270,  271,  272,  273,  274,  275,  276,
 /*  7370 */   277,  278,  323,  323,  281,  282,  283,  284,  323,  323,
 /*  7380 */   323,  323,  323,  290,  291,  292,  293,  294,  295,  323,
 /*  7390 */   297,  298,  299,  300,  323,  323,  303,  323,  305,  306,
 /*  7400 */   307,  308,  309,  310,  238,  323,  323,  314,  315,  316,
 /*  7410 */   317,  318,  319,  320,  321,  322,  323,  251,  323,  323,
 /*  7420 */   254,  323,  323,  257,  323,  323,  323,  323,  262,  323,
 /*  7430 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /*  7440 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /*  7450 */   284,  323,  323,  323,   13,  323,  290,  291,  292,  293,
 /*  7460 */   294,  295,  323,  297,   23,  323,  323,  323,  323,  303,
 /*  7470 */   323,  305,  306,  323,  323,  323,  323,  323,  323,  323,
 /*  7480 */   323,  323,  323,  323,  128,  323,  323,  323,  323,  323,
 /*  7490 */   323,  323,  323,  323,  323,   54,   55,  323,   57,  143,
 /*  7500 */    59,   60,   61,   62,  323,  323,   65,   66,   67,   68,
 /*  7510 */   323,  323,  128,  157,  323,  323,  323,  323,  323,  323,
 /*  7520 */   323,  323,  166,  323,  323,  169,  323,  171,  323,  173,
 /*  7530 */   323,  175,  323,  177,  178,  323,  180,  323,  323,  323,
 /*  7540 */   323,  157,  323,  323,  323,  323,  323,  323,  323,  128,
 /*  7550 */   323,  323,  323,  197,  323,  171,  323,  323,  323,  175,
 /*  7560 */   323,  323,  323,  142,  180,  144,  323,  323,  147,  323,
 /*  7570 */   323,  323,  323,  323,  323,  323,  323,  323,  157,  323,
 /*  7580 */   323,  323,  161,  323,  323,  323,  323,  323,  323,  168,
 /*  7590 */   323,  323,  171,  323,  238,  323,  175,  323,  323,  323,
 /*  7600 */   323,  180,  323,  323,  323,  323,  323,  251,  323,  323,
 /*  7610 */   254,  323,  323,  257,  323,  323,  323,  323,  262,  323,
 /*  7620 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /*  7630 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /*  7640 */   284,  323,  286,  287,  323,  323,  290,  291,  292,  293,
 /*  7650 */   294,  295,  323,  297,  128,  323,  323,  323,  323,  303,
 /*  7660 */   323,  305,  306,  323,  323,  323,  323,  323,  323,  143,
 /*  7670 */   323,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /*  7680 */   323,  297,  323,  157,  323,  323,  323,  303,  323,  305,
 /*  7690 */   306,  323,  166,  323,  323,  169,  323,  171,  323,  173,
 /*  7700 */   323,  175,  323,  323,  323,  323,  180,  181,  323,  323,
 /*  7710 */   323,  290,  291,  292,  293,  294,  295,  323,  297,  298,
 /*  7720 */   299,  300,  323,  197,  303,  323,  305,  306,  307,  308,
 /*  7730 */   309,  310,  311,  323,  313,  314,  315,  316,  317,  318,
 /*  7740 */   319,  320,  321,  322,  323,  323,  323,  323,  323,  323,
 /*  7750 */   323,  323,  323,  323,  323,  323,  230,  323,  323,  323,
 /*  7760 */   323,  323,  323,  323,  238,  323,  323,  323,  323,  323,
 /*  7770 */   323,  323,  323,  323,  323,  323,  323,  251,  323,  323,
 /*  7780 */   254,  323,  323,  257,  323,  323,  323,  323,  262,  323,
 /*  7790 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /*  7800 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /*  7810 */   284,  323,  128,  323,  323,  323,  290,  291,  292,  293,
 /*  7820 */   294,  295,  323,  297,  323,  323,  323,  143,  323,  303,
 /*  7830 */   323,  305,  306,  323,  323,  323,  323,  323,  323,  323,
 /*  7840 */   128,  157,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  7850 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /*  7860 */   323,  177,  323,  323,  180,  323,  323,  323,  323,  157,
 /*  7870 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  7880 */   323,  197,  323,  171,  323,  128,  323,  175,  323,  323,
 /*  7890 */   323,  323,  180,  323,  323,  323,  323,  323,  323,  142,
 /*  7900 */   323,  144,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  7910 */   323,  323,  323,  323,  323,  323,  323,  323,  161,  162,
 /*  7920 */   323,  323,  238,  166,  323,  168,  169,  323,  171,  323,
 /*  7930 */   323,  323,  175,  323,  323,  251,  323,  323,  254,  323,
 /*  7940 */   183,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /*  7950 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /*  7960 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /*  7970 */   286,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /*  7980 */   323,  297,  128,  323,  323,  323,  323,  303,  323,  305,
 /*  7990 */   306,  323,  323,  323,  323,  323,  323,  143,  323,  323,
 /*  8000 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /*  8010 */   323,  157,  323,  323,  323,  303,  323,  305,  306,  323,
 /*  8020 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /*  8030 */   323,  177,  323,  323,  180,  323,  323,  323,  323,  323,
 /*  8040 */   323,  323,  323,  323,  323,  288,  289,  323,  323,  323,
 /*  8050 */   323,  197,  323,  323,  323,  298,  299,  300,  323,  323,
 /*  8060 */   303,  323,  305,  306,  307,  308,  309,  310,  142,  323,
 /*  8070 */   144,  314,  315,  316,  317,  318,  319,  320,  321,  322,
 /*  8080 */   323,  323,  323,  323,  323,  323,  323,  161,  323,  323,
 /*  8090 */   323,  323,  238,  323,  168,  323,  323,  171,  323,  323,
 /*  8100 */   323,  175,  323,  323,  323,  251,  323,  323,  254,  323,
 /*  8110 */   323,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /*  8120 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /*  8130 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /*  8140 */   286,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /*  8150 */   323,  297,  128,  323,  323,  323,  323,  303,  323,  305,
 /*  8160 */   306,  323,  323,  323,  323,  323,  323,  143,  323,  323,
 /*  8170 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  8180 */   323,  157,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  8190 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /*  8200 */   323,  323,  323,  323,  180,  323,  323,  323,  323,  323,
 /*  8210 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  8220 */   323,  197,  323,  323,  298,  299,  300,  323,  323,  303,
 /*  8230 */   323,  305,  306,  307,  308,  309,  310,  323,  323,  323,
 /*  8240 */   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
 /*  8250 */   323,  227,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  8260 */   323,  323,  238,  323,  323,  323,  323,  323,  323,  323,
 /*  8270 */   323,  323,  323,  323,  323,  251,  323,  323,  254,  323,
 /*  8280 */   323,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /*  8290 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /*  8300 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /*  8310 */   128,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /*  8320 */   323,  297,  323,  323,  323,  143,  323,  303,  323,  305,
 /*  8330 */   306,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /*  8340 */   323,  323,  323,  323,  323,  323,  323,  323,  166,  323,
 /*  8350 */   323,  169,  323,  171,  323,  173,  323,  175,  323,  323,
 /*  8360 */   323,  323,  180,  323,  323,  323,  323,  323,  323,  323,
 /*  8370 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  197,
 /*  8380 */   128,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  8390 */   323,  323,  323,  323,  323,  143,  323,  323,  323,  323,
 /*  8400 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /*  8410 */   323,  323,  230,  323,  323,  323,  323,  323,  166,  323,
 /*  8420 */   238,  169,  323,  171,  323,  173,  323,  175,  323,  323,
 /*  8430 */   323,  323,  180,  251,  323,  323,  254,  323,  323,  257,
 /*  8440 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  197,
 /*  8450 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /*  8460 */   278,  323,  323,  281,  282,  283,  284,  323,  323,  323,
 /*  8470 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /*  8480 */   323,  323,  323,  323,  323,  303,  323,  305,  306,  323,
 /*  8490 */   238,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  8500 */   323,  323,  323,  251,  323,  323,  254,  323,  323,  257,
 /*  8510 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  323,
 /*  8520 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /*  8530 */   278,  323,  323,  281,  282,  283,  284,  323,  128,  323,
 /*  8540 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /*  8550 */   323,  323,  323,  143,  323,  303,  323,  305,  306,  323,
 /*  8560 */   323,  323,  323,  323,  323,  323,  323,  157,  323,  323,
 /*  8570 */   323,  323,  323,  323,  323,  323,  166,  323,  323,  169,
 /*  8580 */   323,  171,  323,  173,  323,  175,  323,  323,  128,  323,
 /*  8590 */   180,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  8600 */   323,  323,  323,  143,  323,  323,  323,  197,  323,  323,
 /*  8610 */   323,  323,  323,  323,  323,  323,  323,  157,  323,  323,
 /*  8620 */   323,  323,  323,  323,  323,  323,  166,  323,  323,  169,
 /*  8630 */   323,  171,  323,  173,  323,  175,  323,  323,  323,  323,
 /*  8640 */   180,  323,  323,  323,  323,  323,  323,  323,  238,  323,
 /*  8650 */   323,  323,  323,  323,  323,  323,  323,  197,  323,  323,
 /*  8660 */   323,  251,  323,  323,  254,  323,  323,  257,  323,  323,
 /*  8670 */   323,  323,  262,  323,  264,  265,  266,  323,  268,  323,
 /*  8680 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /*  8690 */   323,  281,  282,  283,  284,  323,  323,  323,  238,  323,
 /*  8700 */   290,  291,  292,  293,  294,  295,  323,  297,  323,  323,
 /*  8710 */   323,  251,  323,  303,  254,  305,  306,  257,  323,  323,
 /*  8720 */   323,  323,  262,  323,  264,  265,  266,  323,  268,  323,
 /*  8730 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /*  8740 */   323,  281,  282,  283,  284,  323,  128,  323,  323,  323,
 /*  8750 */   290,  291,  292,  293,  294,  295,  323,  297,  323,  323,
 /*  8760 */   323,  143,  323,  303,  323,  305,  306,  323,  323,  323,
 /*  8770 */   323,  323,  323,  323,  323,  157,  323,  323,  323,  323,
 /*  8780 */   323,  323,  323,  323,  166,  323,  323,  169,  323,  171,
 /*  8790 */   323,  173,  323,  175,  323,  323,  128,  323,  180,  323,
 /*  8800 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  8810 */   323,  143,  323,  323,  323,  197,  323,  323,  323,  323,
 /*  8820 */   323,  323,  323,  323,  323,  157,  323,  323,  323,  323,
 /*  8830 */   323,  323,  323,  323,  166,  323,  323,  169,  323,  171,
 /*  8840 */   323,  173,  323,  175,  323,  323,  323,  323,  180,  323,
 /*  8850 */   323,  323,  323,  323,  323,  323,  238,  323,  323,  323,
 /*  8860 */   323,  323,  323,  323,  323,  197,  323,  323,  323,  251,
 /*  8870 */   323,  323,  254,  323,  323,  257,  323,  323,  323,  323,
 /*  8880 */   262,  323,  264,  265,  266,  323,  268,  323,  270,  271,
 /*  8890 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /*  8900 */   282,  283,  284,  323,  323,  323,  238,  323,  290,  291,
 /*  8910 */   292,  293,  294,  295,  323,  297,  323,  323,  323,  251,
 /*  8920 */   323,  303,  254,  305,  306,  257,  323,  323,  323,  323,
 /*  8930 */   262,  323,  264,  265,  266,  323,  268,  323,  270,  271,
 /*  8940 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /*  8950 */   282,  283,  284,  323,  128,  323,  323,  323,  290,  291,
 /*  8960 */   292,  293,  294,  295,  323,  297,  323,  323,  323,  143,
 /*  8970 */   323,  303,  323,  305,  306,  323,  323,  323,  323,  323,
 /*  8980 */   323,  323,  323,  157,  323,  323,  323,  323,  323,  323,
 /*  8990 */   323,  323,  166,  323,  323,  169,  323,  171,  323,  173,
 /*  9000 */   323,  175,  323,  323,  128,  323,  180,  323,  323,  323,
 /*  9010 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  143,
 /*  9020 */   323,  323,  323,  197,  323,  323,  323,  323,  323,  323,
 /*  9030 */   323,  323,  323,  157,  323,  323,  323,  323,  323,  323,
 /*  9040 */   323,  323,  166,  323,  323,  169,  323,  171,  323,  173,
 /*  9050 */   323,  175,  323,  323,  323,  323,  180,  323,  323,  323,
 /*  9060 */   323,  323,  323,  323,  238,  323,  323,  323,  323,  323,
 /*  9070 */   323,  323,  323,  197,  323,  323,  323,  251,  323,  323,
 /*  9080 */   254,  323,  323,  257,  323,  323,  323,  323,  262,  323,
 /*  9090 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /*  9100 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /*  9110 */   284,  323,  323,  323,  238,  323,  290,  291,  292,  293,
 /*  9120 */   294,  295,  323,  297,  323,  323,  323,  251,  323,  303,
 /*  9130 */   254,  305,  306,  257,  323,  323,  323,  323,  262,  323,
 /*  9140 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /*  9150 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /*  9160 */   284,  323,  128,  323,  323,  323,  290,  291,  292,  293,
 /*  9170 */   294,  295,  323,  297,  323,  323,  323,  143,  323,  303,
 /*  9180 */   323,  305,  306,  323,  323,  323,  323,  323,  323,  323,
 /*  9190 */   323,  157,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  9200 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /*  9210 */   323,  323,  128,  323,  180,  323,  323,  323,  323,  323,
 /*  9220 */   323,  323,  323,  323,  323,  323,  323,  143,  323,  323,
 /*  9230 */   323,  197,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  9240 */   323,  157,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  9250 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /*  9260 */   323,  323,  323,  323,  180,  323,  323,  323,  323,  323,
 /*  9270 */   323,  323,  238,  323,  323,  323,  323,  323,  323,  323,
 /*  9280 */   323,  197,  323,  323,  323,  251,  323,  323,  254,  323,
 /*  9290 */   323,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /*  9300 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /*  9310 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /*  9320 */   323,  323,  238,  323,  290,  291,  292,  293,  294,  295,
 /*  9330 */   323,  297,  323,  323,  323,  251,  323,  303,  254,  305,
 /*  9340 */   306,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /*  9350 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /*  9360 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /*  9370 */   128,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /*  9380 */   323,  297,  323,  323,  323,  143,  323,  303,  323,  305,
 /*  9390 */   306,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /*  9400 */   323,  323,  323,  323,  323,  323,  323,  323,  166,  323,
 /*  9410 */   323,  169,  323,  171,  323,  173,  323,  175,  323,  323,
 /*  9420 */   128,  323,  180,  323,  323,  323,  323,  323,  323,  323,
 /*  9430 */   323,  323,  323,  323,  323,  143,  323,  323,  323,  197,
 /*  9440 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /*  9450 */   323,  323,  323,  323,  323,  323,  323,  323,  166,  323,
 /*  9460 */   323,  169,  323,  171,  323,  173,  323,  175,  323,  323,
 /*  9470 */   323,  323,  180,  323,  323,  323,  323,  323,  323,  323,
 /*  9480 */   238,  323,  323,  323,  323,  323,  323,  323,  323,  197,
 /*  9490 */   323,  323,  323,  251,  323,  323,  254,  323,  323,  257,
 /*  9500 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  323,
 /*  9510 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /*  9520 */   278,  323,  323,  281,  282,  283,  284,  323,  323,  323,
 /*  9530 */   238,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /*  9540 */   323,  323,  323,  251,  323,  303,  254,  305,  306,  257,
 /*  9550 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  323,
 /*  9560 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /*  9570 */   278,  323,  323,  281,  282,  283,  284,  323,  128,  323,
 /*  9580 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /*  9590 */   323,  323,  323,  143,  323,  303,  323,  305,  306,  323,
 /*  9600 */   323,  323,  323,  323,  323,  323,  323,  157,  323,  323,
 /*  9610 */   323,  323,  323,  323,  323,  323,  166,  323,  323,  169,
 /*  9620 */   323,  171,  323,  173,  323,  175,  323,  323,  128,  323,
 /*  9630 */   180,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  9640 */   323,  323,  323,  143,  323,  323,  323,  197,  323,  323,
 /*  9650 */   323,  323,  323,  323,  323,  323,  323,  157,  323,  323,
 /*  9660 */   323,  323,  323,  323,  323,  323,  166,  323,  323,  169,
 /*  9670 */   323,  171,  323,  173,  323,  175,  323,  323,  323,  323,
 /*  9680 */   180,  323,  323,  323,  323,  323,  323,  323,  238,  323,
 /*  9690 */   323,  323,  323,  323,  323,  323,  323,  197,  323,  323,
 /*  9700 */   323,  251,  323,  323,  254,  323,  323,  257,  323,  323,
 /*  9710 */   323,  323,  262,  323,  264,  265,  266,  323,  268,  323,
 /*  9720 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /*  9730 */   323,  281,  282,  283,  284,  323,  323,  323,  238,  323,
 /*  9740 */   290,  291,  292,  293,  294,  295,  323,  297,  323,  323,
 /*  9750 */   323,  251,  323,  303,  254,  305,  306,  257,  323,  323,
 /*  9760 */   323,  323,  262,  323,  264,  265,  266,  323,  268,  323,
 /*  9770 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /*  9780 */   323,  281,  282,  283,  284,  323,  128,  323,  323,  323,
 /*  9790 */   290,  291,  292,  293,  294,  295,  323,  297,  323,  323,
 /*  9800 */   323,  143,  323,  303,  323,  305,  306,  323,  323,  323,
 /*  9810 */   323,  323,  323,  323,  323,  157,  323,  323,  323,  323,
 /*  9820 */   323,  323,  323,  323,  166,  323,  323,  169,  323,  171,
 /*  9830 */   323,  173,  323,  175,  323,  323,  128,  323,  180,  323,
 /*  9840 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /*  9850 */   323,  143,  323,  323,  323,  197,  323,  323,  323,  323,
 /*  9860 */   323,  323,  323,  323,  323,  157,  323,  323,  323,  323,
 /*  9870 */   323,  323,  323,  323,  166,  323,  323,  169,  323,  171,
 /*  9880 */   323,  173,  323,  175,  323,  323,  323,  323,  180,  323,
 /*  9890 */   323,  323,  323,  323,  323,  323,  238,  323,  323,  323,
 /*  9900 */   323,  323,  323,  323,  323,  197,  323,  323,  323,  251,
 /*  9910 */   323,  323,  254,  323,  323,  257,  323,  323,  323,  323,
 /*  9920 */   262,  323,  264,  265,  266,  323,  268,  323,  270,  271,
 /*  9930 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /*  9940 */   282,  283,  284,  323,  323,  323,  238,  323,  290,  291,
 /*  9950 */   292,  293,  294,  295,  323,  297,  323,  323,  323,  251,
 /*  9960 */   323,  303,  254,  305,  306,  257,  323,  323,  323,  323,
 /*  9970 */   262,  323,  264,  265,  266,  323,  268,  323,  270,  271,
 /*  9980 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /*  9990 */   282,  283,  284,  323,  128,  323,  323,  323,  290,  291,
 /* 10000 */   292,  293,  294,  295,  323,  297,  323,  323,  323,  143,
 /* 10010 */   323,  303,  323,  305,  306,  323,  323,  323,  323,  323,
 /* 10020 */   323,  323,  323,  157,  323,  323,  323,  323,  323,  323,
 /* 10030 */   323,  323,  166,  323,  323,  169,  323,  171,  323,  173,
 /* 10040 */   323,  175,  323,  323,  128,  323,  180,  323,  323,  323,
 /* 10050 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  143,
 /* 10060 */   323,  323,  323,  197,  323,  323,  323,  323,  323,  323,
 /* 10070 */   323,  323,  323,  157,  323,  323,  323,  323,  323,  323,
 /* 10080 */   323,  323,  166,  323,  323,  169,  323,  171,  323,  173,
 /* 10090 */   323,  175,  323,  323,  323,  323,  180,  323,  323,  323,
 /* 10100 */   323,  323,  323,  323,  238,  323,  323,  323,  323,  323,
 /* 10110 */   323,  323,  323,  323,  323,  323,  323,  251,  323,  323,
 /* 10120 */   254,  323,  323,  257,  323,  323,  323,  323,  262,  323,
 /* 10130 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /* 10140 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /* 10150 */   284,  323,  323,  323,  323,  323,  290,  291,  292,  293,
 /* 10160 */   294,  295,  323,  297,  323,  323,  323,  251,  323,  303,
 /* 10170 */   254,  305,  306,  257,  323,  323,  323,  323,  262,  323,
 /* 10180 */   264,  265,  266,  323,  268,  323,  270,  271,  272,  273,
 /* 10190 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /* 10200 */   284,  323,  128,  323,  323,  323,  290,  291,  292,  293,
 /* 10210 */   294,  295,    9,  297,  323,  323,   13,  143,  323,  303,
 /* 10220 */   323,  305,  306,   20,  323,  323,   23,  323,  323,  323,
 /* 10230 */   323,  157,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10240 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /* 10250 */   323,  323,  128,  323,  180,   52,  323,   54,   55,  323,
 /* 10260 */    57,  323,   59,   60,   61,   62,  323,  143,   65,   66,
 /* 10270 */    67,   68,  323,  323,   71,   72,   73,   74,   75,   76,
 /* 10280 */   323,  157,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10290 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /* 10300 */   323,  323,  323,  323,  180,  323,  323,  323,  323,  323,
 /* 10310 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10320 */   323,  323,  323,  323,  323,  251,  323,  323,  254,  323,
 /* 10330 */   323,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /* 10340 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /* 10350 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /* 10360 */   323,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /* 10370 */   323,  297,  323,  323,  323,  323,  323,  303,  254,  305,
 /* 10380 */   306,  257,  323,  323,  323,  323,  262,  323,  264,  265,
 /* 10390 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /* 10400 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /* 10410 */   128,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /* 10420 */   323,  297,  323,  323,  323,  143,  323,  303,  323,  305,
 /* 10430 */   306,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /* 10440 */     9,  323,  323,  323,   13,  323,  323,  323,  166,  323,
 /* 10450 */   323,  169,  323,  171,   23,  173,  323,  175,  323,  323,
 /* 10460 */   323,  323,  180,  323,  323,  323,  323,  323,  323,  323,
 /* 10470 */   323,   40,   41,   42,   43,   44,   45,   46,   47,   48,
 /* 10480 */   323,  323,  323,   52,   53,   54,   55,  323,   57,  323,
 /* 10490 */    59,   60,   61,   62,  323,  323,   65,   66,   67,   68,
 /* 10500 */   323,  323,   71,   72,   73,   74,   75,   76,  323,  323,
 /* 10510 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10520 */   323,  323,  323,  323,  323,   94,   95,   96,   97,   98,
 /* 10530 */    99,  100,  323,  323,  323,  323,  254,  323,  107,  257,
 /* 10540 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  323,
 /* 10550 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /* 10560 */   278,  323,  323,  281,  282,  283,  284,    9,  323,  323,
 /* 10570 */   323,   13,  290,  291,  292,  293,  294,  295,  323,  297,
 /* 10580 */    22,   23,  323,  323,  323,  303,  323,  305,  306,  323,
 /* 10590 */   323,  323,  323,  323,  323,  323,  323,  323,   40,   41,
 /* 10600 */    42,   43,   44,   45,   46,   47,   48,  323,  323,  323,
 /* 10610 */    52,   53,   54,   55,  323,   57,  323,   59,   60,   61,
 /* 10620 */    62,  323,  323,   65,   66,   67,   68,  323,  323,   71,
 /* 10630 */    72,   73,   74,   75,   76,  323,  323,  323,  323,  323,
 /* 10640 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10650 */   323,  323,   94,   95,   96,   97,   98,   99,  100,  323,
 /* 10660 */   323,  323,  323,  323,  323,  128,  323,  323,  323,  323,
 /* 10670 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10680 */   143,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10690 */   323,  323,  323,  323,  157,  323,  323,  323,  323,  323,
 /* 10700 */   323,  323,  323,  166,  323,  323,  169,  323,  171,  323,
 /* 10710 */   173,  323,  175,  323,  323,  323,  323,  180,  323,  323,
 /* 10720 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10730 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10740 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10750 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10760 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  144,
 /* 10770 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10780 */   323,  323,  323,  323,  323,  323,  161,  323,  323,  323,
 /* 10790 */   323,  254,  323,  168,  257,  323,  171,  323,  323,  262,
 /* 10800 */   175,  264,  265,  266,  323,  268,  323,  270,  271,  272,
 /* 10810 */   273,  274,  275,  276,  277,  278,  323,  323,  281,  282,
 /* 10820 */   283,  284,    9,  323,  323,  323,   13,  290,  291,  292,
 /* 10830 */   293,  294,  295,  323,  297,  323,   23,  323,  323,  323,
 /* 10840 */   303,  323,  305,  306,  323,  323,  323,  323,  323,  323,
 /* 10850 */   323,  323,  323,   40,   41,   42,   43,   44,   45,   46,
 /* 10860 */    47,   48,  323,  323,  323,   52,   53,   54,   55,  323,
 /* 10870 */    57,  323,   59,   60,   61,   62,  323,  323,   65,   66,
 /* 10880 */    67,   68,  323,  323,   71,   72,   73,   74,   75,   76,
 /* 10890 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 10900 */   323,  323,  323,  323,  323,  323,  323,   94,   95,   96,
 /* 10910 */    97,   98,   99,  100,  323,  323,  323,  323,  323,  323,
 /* 10920 */   128,  323,  323,  298,  299,  300,  323,  323,  303,  323,
 /* 10930 */   305,  306,  323,  323,  323,  143,  323,  323,  323,  314,
 /* 10940 */   315,  316,  317,  318,  319,  320,  321,  322,  323,  157,
 /* 10950 */   323,  323,  323,  323,  323,  323,  323,  323,  166,  323,
 /* 10960 */   323,  169,  323,  171,  323,  173,  323,  175,  323,  323,
 /* 10970 */   323,  128,  180,  323,  323,  323,  323,  323,  323,  323,
 /* 10980 */   323,  323,  323,  323,  323,  323,  143,  323,  323,  323,
 /* 10990 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11000 */   157,  323,  323,  323,  323,  323,  323,  323,  323,  166,
 /* 11010 */   323,  323,  169,  323,  171,  323,  173,  323,  175,  323,
 /* 11020 */   323,  323,  323,  180,  323,  323,  323,  323,  323,  323,
 /* 11030 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11040 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  257,
 /* 11050 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  323,
 /* 11060 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /* 11070 */   278,  323,  323,  281,  282,  283,  284,  323,  323,  323,
 /* 11080 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /* 11090 */   323,  323,  323,  323,  323,  303,  323,  305,  306,  323,
 /* 11100 */   257,  323,  323,  323,  323,  262,  323,  264,  265,  266,
 /* 11110 */   323,  268,  323,  270,  271,  272,  273,  274,  275,  276,
 /* 11120 */   277,  278,  323,  323,  281,  282,  283,  284,  323,  128,
 /* 11130 */   323,  323,  323,  290,  291,  292,  293,  294,  295,  323,
 /* 11140 */   297,  323,  323,  323,  143,  323,  303,  323,  305,  306,
 /* 11150 */   323,  323,  323,  323,  323,  323,  323,  323,  157,  323,
 /* 11160 */   323,  323,  323,  323,  323,  323,  323,  166,  323,  323,
 /* 11170 */   169,  323,  171,  323,  173,  323,  175,  323,  128,  323,
 /* 11180 */   323,  180,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11190 */   323,  323,  323,  143,  323,  323,  323,  323,  323,  323,
 /* 11200 */   323,  323,  323,  323,  323,  323,  323,  157,  323,  323,
 /* 11210 */   323,  323,  323,  323,  323,  323,  166,  323,  323,  169,
 /* 11220 */   323,  171,  323,  173,  323,  175,  323,  323,  323,  323,
 /* 11230 */   180,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11240 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11250 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11260 */   323,  323,  323,  262,  323,  264,  265,  266,  323,  268,
 /* 11270 */   323,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /* 11280 */   323,  323,  281,  282,  283,  284,  323,  323,  323,  323,
 /* 11290 */   323,  290,  291,  292,  293,  294,  295,  323,  297,  323,
 /* 11300 */   323,  323,  323,  323,  303,  323,  305,  306,  323,  323,
 /* 11310 */   323,  323,  262,  323,  264,  265,  266,  323,  268,  323,
 /* 11320 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /* 11330 */   323,  281,  282,  283,  284,  323,  128,  323,  323,  323,
 /* 11340 */   290,  291,  292,  293,  294,  295,  323,  297,  323,  323,
 /* 11350 */   323,  143,  323,  303,  323,  305,  306,  323,  323,  323,
 /* 11360 */   323,  323,  323,  323,  323,  157,  323,  323,  323,  323,
 /* 11370 */   323,  323,  323,  323,  166,  323,  323,  169,  323,  171,
 /* 11380 */   323,  173,  323,  175,  323,  323,  323,  323,  180,  323,
 /* 11390 */   323,  323,  128,  323,  323,  323,  323,  323,  323,  323,
 /* 11400 */   323,  323,  323,  323,  323,  323,  323,  143,  323,  323,
 /* 11410 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11420 */   323,  157,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11430 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /* 11440 */   323,  323,  323,  323,  180,  323,  323,  323,  323,  323,
 /* 11450 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11460 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11470 */   262,  323,  264,  265,  266,  323,  268,  323,  270,  271,
 /* 11480 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /* 11490 */   282,  283,  284,  323,  323,  323,  323,  323,  290,  291,
 /* 11500 */   292,  293,  294,  295,  323,  297,  323,  323,  323,  323,
 /* 11510 */   323,  303,  323,  305,  306,  323,  323,  323,  323,  323,
 /* 11520 */   323,  323,  323,  323,  323,  323,  262,  323,  264,  265,
 /* 11530 */   266,  323,  268,  323,  270,  271,  272,  273,  274,  275,
 /* 11540 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /* 11550 */   128,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /* 11560 */   323,  297,  323,  323,  323,  323,  323,  303,  323,  305,
 /* 11570 */   306,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /* 11580 */   323,  323,  323,  323,  323,  323,  323,  323,  166,  323,
 /* 11590 */   323,  169,  323,  171,  323,  173,  323,  175,  323,  128,
 /* 11600 */   323,  323,  180,  323,  323,  323,  323,  323,  323,  323,
 /* 11610 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11620 */   323,  323,  323,  323,  323,  323,  323,  323,  157,  323,
 /* 11630 */   323,  323,  323,  323,  323,  323,  323,  166,  323,  323,
 /* 11640 */   169,  323,  171,  323,  173,  323,  175,  323,  323,  323,
 /* 11650 */   323,  180,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11660 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11670 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11680 */   323,  323,  323,  323,  262,  323,  264,  265,  266,  323,
 /* 11690 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /* 11700 */   278,  323,  323,  281,  282,  283,  284,  323,  323,  323,
 /* 11710 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /* 11720 */   323,  323,  323,  323,  323,  303,  323,  305,  306,  323,
 /* 11730 */   323,  323,  323,  262,  323,  264,  265,  266,  323,  268,
 /* 11740 */   323,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /* 11750 */   323,  323,  281,  282,  283,  284,  323,  128,  323,  323,
 /* 11760 */   323,  290,  291,  292,  293,  294,  295,  323,  297,  323,
 /* 11770 */   323,  323,  323,  323,  303,  323,  305,  306,  323,  323,
 /* 11780 */   323,  323,  323,  323,  323,  323,  157,  323,  323,  323,
 /* 11790 */   323,  323,  323,  323,  323,  166,  323,  323,  169,  323,
 /* 11800 */   171,  323,  173,  323,  175,  323,  323,  323,  323,  180,
 /* 11810 */   323,  323,  323,  128,  323,  323,  323,  323,  323,  323,
 /* 11820 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 11830 */   323,  323,  323,  128,  323,  323,  323,  323,  323,  323,
 /* 11840 */   323,  323,  157,  323,  323,  323,  323,  142,  323,  144,
 /* 11850 */   323,  166,  323,  323,  169,  323,  171,  323,  173,  323,
 /* 11860 */   175,  323,  157,  323,  323,  180,  161,  323,  323,  323,
 /* 11870 */   323,  323,  323,  168,  323,  323,  171,  323,  323,  323,
 /* 11880 */   175,  323,  323,  323,  323,  180,  323,  323,  323,  323,
 /* 11890 */   323,  323,  323,  264,  265,  266,  323,  268,  323,  270,
 /* 11900 */   271,  272,  273,  274,  275,  276,  277,  278,  323,  323,
 /* 11910 */   281,  282,  283,  284,  323,  323,  323,  323,  323,  290,
 /* 11920 */   291,  292,  293,  294,  295,  323,  297,  323,  323,  323,
 /* 11930 */   323,  323,  303,  323,  305,  306,  323,  323,  323,  323,
 /* 11940 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  264,
 /* 11950 */   265,  266,  323,  268,  323,  270,  271,  272,  273,  274,
 /* 11960 */   275,  276,  277,  278,  323,  323,  281,  282,  283,  284,
 /* 11970 */   323,  323,  323,  323,  323,  290,  291,  292,  293,  294,
 /* 11980 */   295,  323,  297,  323,  323,  323,  323,  323,  303,  323,
 /* 11990 */   305,  306,  323,  323,  323,  290,  291,  292,  293,  294,
 /* 12000 */   295,  323,  297,  298,  299,  300,  323,  323,  303,  323,
 /* 12010 */   305,  306,  307,  308,  309,  310,  323,  323,  323,  314,
 /* 12020 */   315,  316,  317,  318,  319,  320,  321,  322,  128,  323,
 /* 12030 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12040 */   323,  323,  142,  323,  144,  323,  323,  323,  323,  323,
 /* 12050 */   323,  323,  323,  323,  323,  323,  323,  157,  323,  323,
 /* 12060 */   323,  161,  323,  323,  323,  323,  323,  323,  168,  323,
 /* 12070 */   323,  171,  323,  323,  323,  175,  323,  323,  323,  323,
 /* 12080 */   180,  323,  323,  323,  323,  323,  323,  128,  323,  323,
 /* 12090 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12100 */   323,  323,  323,  323,  323,  323,  323,  128,  323,  323,
 /* 12110 */   323,  323,  323,  323,  323,  323,  157,  323,  323,  323,
 /* 12120 */   323,  142,  323,  144,  323,  166,  323,  323,  169,  323,
 /* 12130 */   171,  323,  173,  323,  175,  323,  323,  323,  323,  180,
 /* 12140 */   161,  162,  323,  323,  323,  166,  323,  168,  169,  323,
 /* 12150 */   171,  323,  323,  323,  175,  323,  323,  323,  323,  323,
 /* 12160 */   181,  182,  183,  323,  323,  323,  323,  323,  323,  323,
 /* 12170 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12180 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12190 */   290,  291,  292,  293,  294,  295,  323,  297,  298,  299,
 /* 12200 */   300,  323,  323,  303,  323,  305,  306,  307,  308,  309,
 /* 12210 */   310,  323,  323,  323,  314,  315,  316,  317,  318,  319,
 /* 12220 */   320,  321,  322,  264,  323,  266,  323,  268,  323,  270,
 /* 12230 */   271,  272,  273,  274,  275,  276,  277,  278,  323,  323,
 /* 12240 */   281,  282,  283,  284,  323,  323,  323,  323,  323,  290,
 /* 12250 */   291,  292,  293,  294,  295,  323,  297,  323,  323,  323,
 /* 12260 */   323,  323,  303,  323,  305,  306,  323,  288,  289,  323,
 /* 12270 */   323,  323,  323,  323,  128,  323,  323,  298,  299,  300,
 /* 12280 */   323,  323,  303,  323,  305,  306,  307,  308,  309,  310,
 /* 12290 */   323,  323,  323,  314,  315,  316,  317,  318,  319,  320,
 /* 12300 */   321,  322,  323,  157,  323,  323,  323,  323,  323,  323,
 /* 12310 */   323,  323,  166,  323,  323,  169,  323,  171,  323,  173,
 /* 12320 */   128,  175,  323,  323,  323,  323,  180,  323,  323,  323,
 /* 12330 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12340 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /* 12350 */   323,  323,  323,  323,  323,  323,  323,  323,  166,  323,
 /* 12360 */   323,  169,  323,  171,  323,  173,  323,  175,  323,  323,
 /* 12370 */   323,  323,  180,  323,  323,  323,  323,  323,  323,  323,
 /* 12380 */   142,  323,  144,  323,  323,  323,  323,  323,  323,  323,
 /* 12390 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  161,
 /* 12400 */   323,  323,  323,  323,  323,  323,  168,  323,  323,  171,
 /* 12410 */   264,  323,  266,  175,  268,  323,  270,  271,  272,  273,
 /* 12420 */   274,  275,  276,  277,  278,  323,  323,  281,  282,  283,
 /* 12430 */   284,  323,  323,  323,  323,  323,  290,  291,  292,  293,
 /* 12440 */   294,  295,  323,  297,  323,  323,  323,  323,  323,  303,
 /* 12450 */   323,  305,  306,  323,  323,  323,  264,  323,  266,  323,
 /* 12460 */   268,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /* 12470 */   278,  323,  323,  281,  282,  283,  284,  323,  128,  323,
 /* 12480 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /* 12490 */   323,  323,  323,  323,  323,  303,  323,  305,  306,  323,
 /* 12500 */   323,  323,  323,  323,  323,  323,  323,  157,  323,  323,
 /* 12510 */   323,  323,  323,  323,  323,  323,  166,  323,  323,  169,
 /* 12520 */   323,  171,  323,  173,  323,  175,  323,  323,  323,  323,
 /* 12530 */   180,  323,  323,  323,  323,  323,  298,  299,  300,  128,
 /* 12540 */   323,  303,  323,  305,  306,  307,  308,  309,  310,  323,
 /* 12550 */   323,  323,  314,  315,  316,  317,  318,  319,  320,  321,
 /* 12560 */   322,  323,  323,  323,  323,  323,  323,  323,  157,  323,
 /* 12570 */   323,  323,  323,  323,  323,  323,  323,  166,  323,  323,
 /* 12580 */   169,  323,  171,  323,  173,  323,  175,  323,  323,  323,
 /* 12590 */   323,  180,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12600 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12610 */   323,  323,  323,  323,  264,  323,  266,  323,  323,  323,
 /* 12620 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  323,
 /* 12630 */   323,  281,  282,  283,  284,  323,  323,  323,  323,  323,
 /* 12640 */   290,  291,  292,  293,  294,  295,  323,  297,  323,  323,
 /* 12650 */   323,  323,  323,  303,  323,  305,  306,  323,  323,  323,
 /* 12660 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12670 */   323,  323,  323,  323,  323,  264,  323,  266,  323,  323,
 /* 12680 */   323,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /* 12690 */   323,  323,  281,  282,  283,  284,  323,  128,  323,  323,
 /* 12700 */   323,  290,  291,  292,  293,  294,  295,  323,  297,  323,
 /* 12710 */   323,  323,  323,  323,  303,  323,  305,  306,  323,  323,
 /* 12720 */   323,  323,  323,  323,  323,  323,  157,  323,  323,  323,
 /* 12730 */   323,  323,  323,  323,  323,  166,  323,  323,  169,  323,
 /* 12740 */   171,  323,  173,  128,  175,  323,  323,  323,  323,  180,
 /* 12750 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12760 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12770 */   323,  323,  157,  323,  323,  323,  323,  323,  323,  323,
 /* 12780 */   323,  166,  323,  323,  169,  323,  171,  323,  173,  323,
 /* 12790 */   175,  323,  323,  323,  323,  180,  323,  323,  323,  323,
 /* 12800 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12810 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12820 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12830 */   323,  323,  323,  264,  323,  266,  323,  323,  323,  270,
 /* 12840 */   271,  272,  273,  274,  275,  276,  277,  278,  323,  323,
 /* 12850 */   281,  282,  283,  284,  323,  323,  323,  323,  323,  290,
 /* 12860 */   291,  292,  293,  294,  295,  323,  297,  323,  323,  323,
 /* 12870 */   323,  323,  303,  323,  305,  306,  323,  323,  323,  264,
 /* 12880 */   323,  266,  323,  323,  323,  270,  271,  272,  273,  274,
 /* 12890 */   275,  276,  277,  278,  323,  323,  281,  282,  283,  284,
 /* 12900 */   323,  128,  323,  323,  323,  290,  291,  292,  293,  294,
 /* 12910 */   295,  323,  297,  323,  323,  323,  323,  323,  303,  323,
 /* 12920 */   305,  306,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12930 */   157,  323,  323,  323,  323,  323,  323,  323,  323,  166,
 /* 12940 */   323,  323,  169,  323,  171,  323,  173,  323,  175,  323,
 /* 12950 */   323,  323,  323,  180,  323,  323,  323,  323,  323,  323,
 /* 12960 */   323,  323,  128,  323,  323,  323,  323,  323,  323,  323,
 /* 12970 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12980 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 12990 */   323,  157,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 13000 */   166,  323,  323,  169,  323,  171,  323,  173,  323,  175,
 /* 13010 */   323,  323,  323,  323,  180,  323,  323,  323,  323,  323,
 /* 13020 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 13030 */   323,  323,  323,  323,  323,  323,  323,  264,  323,  266,
 /* 13040 */   323,  323,  323,  270,  271,  272,  273,  274,  275,  276,
 /* 13050 */   277,  278,  323,  323,  281,  282,  283,  284,  323,  323,
 /* 13060 */   323,  323,  323,  290,  291,  292,  293,  294,  295,  323,
 /* 13070 */   297,  323,  323,  323,  323,  323,  303,  323,  305,  306,
 /* 13080 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 13090 */   323,  323,  323,  323,  323,  323,  323,  323,  264,  323,
 /* 13100 */   266,  323,  323,  323,  270,  271,  272,  273,  274,  275,
 /* 13110 */   276,  277,  278,  323,  323,  281,  282,  283,  284,  323,
 /* 13120 */   128,  323,  323,  323,  290,  291,  292,  293,  294,  295,
 /* 13130 */   323,  297,  323,  323,  323,  323,  323,  303,  323,  305,
 /* 13140 */   306,  323,  323,  323,  323,  323,  323,  323,  323,  157,
 /* 13150 */   323,  323,  323,  323,  323,  323,  323,  323,  166,  323,
 /* 13160 */   323,  169,  323,  171,  323,  173,  128,  175,  323,  323,
 /* 13170 */   323,  323,  180,  323,  323,  323,  323,  323,  323,  323,
 /* 13180 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 13190 */   323,  142,  323,  144,  323,  157,  323,  323,  323,  323,
 /* 13200 */   323,  323,  323,  323,  166,  323,  323,  169,  323,  171,
 /* 13210 */   161,  173,  323,  175,  323,  323,  323,  168,  180,  142,
 /* 13220 */   171,  144,  323,  323,  175,  323,  323,  323,  323,  323,
 /* 13230 */   323,  323,  323,  323,  323,  323,  323,  323,  161,  323,
 /* 13240 */   323,  323,  323,  323,  323,  168,  323,  323,  171,  323,
 /* 13250 */   323,  323,  175,  323,  323,  323,  264,  323,  266,  323,
 /* 13260 */   323,  323,  270,  271,  272,  273,  274,  275,  276,  277,
 /* 13270 */   278,  323,  323,  281,  282,  283,  284,  323,  323,  323,
 /* 13280 */   323,  323,  290,  291,  292,  293,  294,  295,  323,  297,
 /* 13290 */   323,  323,  323,  323,  323,  303,  323,  305,  306,  323,
 /* 13300 */   323,  323,  264,  323,  266,  323,  323,  323,  270,  271,
 /* 13310 */   272,  273,  274,  275,  276,  277,  278,  323,  323,  281,
 /* 13320 */   282,  283,  284,  323,  323,  323,  323,  323,  290,  291,
 /* 13330 */   292,  293,  294,  295,  323,  297,  323,  323,  323,  323,
 /* 13340 */   323,  303,  323,  305,  306,  323,  323,  298,  299,  300,
 /* 13350 */   323,  323,  303,  323,  305,  306,  307,  308,  309,  310,
 /* 13360 */   323,  323,  323,  314,  315,  316,  317,  318,  319,  320,
 /* 13370 */   321,  322,  323,  323,  128,  298,  299,  300,  323,  323,
 /* 13380 */   303,  323,  305,  306,  307,  308,  309,  310,  323,  323,
 /* 13390 */   323,  314,  315,  316,  317,  318,  319,  320,  321,  322,
 /* 13400 */   323,  144,  323,  157,  323,  148,  323,  323,  323,  323,
 /* 13410 */   323,  323,  323,  323,  323,  323,  323,  171,  161,  323,
 /* 13420 */   323,  175,  323,  323,  323,  168,  180,  323,  171,  323,
 /* 13430 */   323,  174,  175,  176,  323,  323,  323,  323,  128,  323,
 /* 13440 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 13450 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 13460 */   323,  323,  323,  323,  323,  144,  323,  157,  323,  323,
 /* 13470 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 13480 */   323,  171,  161,  323,  323,  175,  323,  323,  323,  168,
 /* 13490 */   180,  323,  171,  323,  323,  323,  175,  323,  323,  323,
 /* 13500 */   323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
 /* 13510 */   323,  323,  323,  323,  323,  323,  270,  271,  323,  323,
 /* 13520 */   323,  275,  323,  323,  278,  323,  323,  281,  282,  283,
 /* 13530 */   284,  323,  323,  323,  323,  323,  290,  291,  292,  293,
 /* 13540 */   294,  295,  323,  297,  323,  323,  323,  323,  323,  303,
 /* 13550 */   323,  305,  306,  323,  323,  298,  299,  300,  323,  323,
 /* 13560 */   303,  323,  305,  306,  323,  323,  323,  323,  323,  323,
 /* 13570 */   323,  314,  315,  316,  317,  318,  319,  320,  321,  322,
 /* 13580 */   270,  271,  323,  323,  323,  275,  323,  323,  278,  323,
 /* 13590 */   323,  281,  282,  283,  284,  323,  323,  323,  323,  323,
 /* 13600 */   290,  291,  292,  293,  294,  295,  323,  297,  323,  323,
 /* 13610 */   323,  323,  323,  303,  323,  305,  306,  323,  323,  298,
 /* 13620 */   299,  300,  323,  323,  303,  323,  305,  306,  323,  323,
 /* 13630 */   323,  323,  323,  323,  323,  314,  315,  316,  317,  318,
 /* 13640 */   319,  320,  321,  322,
);
    const YY_SHIFT_USE_DFLT = -44;
    const YY_SHIFT_MAX = 521;
    static public $yy_shift_ofst = array(
 /*     0 */  6995, 6576, 6356, 6466, 6885, 6885, 6885, 6995, 6885, 6885,
 /*    10 */  6885, 6885, 6995, 6995, 6995, 6995, 6995, 6995, 6995, 6995,
 /*    20 */  6995, 6995, 6995, 6995, 7105, 7105, 7105, 7105, 7105, 10431,
 /*    30 */  10558, 10813, 10813, 10813, 10813, 10813, 10813, 10813, 4915, 4915,
 /*    40 */  6697, 10203, 10203, 7215, 5096, 5277, 5277, 5277, 5277, 5277,
 /*    50 */  5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
 /*    60 */  5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
 /*    70 */  4734, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5458,
 /*    80 */  5458, 5277, 5277, 5277, 6002, 5277, 5277, 5277, 5277, 5277,
 /*    90 */  5277, 5277, 5277, 6182,   73,   73,   73,   73, 6769, 7441,
 /*   100 */  7441,   73,   73, 6206,  270,  594,  594, 5482, 4929,  201,
 /*   110 */  6036,  201,  629,  629,  -43,  -43,  -43,  474,   23,  474,
 /*   120 */   474,  745,  670,  765,  790,  605,  -26,  -29,  -26,  -29,
 /*   130 */   -26,  716,  397,  699,  699,  699,  605,  226,  852,  755,
 /*   140 */   226,  791,  354,  224,  331,  699,  134,  134,  731,  331,
 /*   150 */   224,  367,  354,  331,  224,  134,  134,  829,  563,  830,
 /*   160 */   834,  996,  399, 1035,  663,   24,   24,  241,  805,   20,
 /*   170 */   787,  226,   24,  546,   24,   20,  226,  346,  241,  346,
 /*   180 */   844,  889,  787,   24,   24,   10,  101,  241,   10,  101,
 /*   190 */   563,   10,  241,  342,  546,  241,   20,  226,   20,  346,
 /*   200 */    24,  546,  226,  226,  241,   24,   24, 1035,  730,  663,
 /*   210 */   663,  663,  663,  996, 1059,  490,  493,  704,  402,  645,
 /*   220 */   782,  625,  788,   56,  712,   56,  663,   56, 1138,   56,
 /*   230 */    56,   56, 1138,   56,   56, 1111, 1111, 1140,  730, 1083,
 /*   240 */    56,   56,   56, 1159,   56,   56,   56,   56,   56,   56,
 /*   250 */    56,   56,  712,   56,   56,  663,   56,   56,   56,   56,
 /*   260 */    56,   56,  919,   56,   56, 1085,   56,   56,  663,   56,
 /*   270 */  1085,  712,   56,   56,   56,   56, 1083,   56, 1262,   56,
 /*   280 */   663, 1130,   56,   56,  919,  712,  712, 1085,  663, 1232,
 /*   290 */  1284,   56,   56,   56,   56,   56,   56,  712,   56,   56,
 /*   300 */  1111, 1159,  712,   56,   56,   56,  663,   56,   56,   56,
 /*   310 */    56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
 /*   320 */    56,   56,  730,  920,   56,   56,  920,   56,  995,   56,
 /*   330 */    56,   56,  920,  399,  920,   56,  663,  730,   56,   56,
 /*   340 */    56,  399,   56,   56,   56,   56,  613,   56,   56,  399,
 /*   350 */   919,  730,  399,   56,   56,  613,   56,   56,  730,  613,
 /*   360 */   995,   56,  613,  730,   56,  988,  613,  613,   56,  399,
 /*   370 */    56,  663,  766,  712,  730,   56,   56,   56,   56,   56,
 /*   380 */    56,   56,   56,   56,   56,  920,   56,   56,   56,  730,
 /*   390 */    56,   56,   56,   56,  795,  800,  800,  800,  800,  994,
 /*   400 */   800,  800,  989, 1026,  800,  800,  800,  800,  800,  800,
 /*   410 */   800,  800,  800,  800,  800,  800,  800, 1032,  800, 1021,
 /*   420 */   800,  800, 1025,  800,  800,  800,  800,  800,  800,  800,
 /*   430 */   800,  800,  800,  800,  800,  800,  800, 1024,  800,  800,
 /*   440 */   800,  800, 1049,  800,  800, 1045,  800,  800, 1029, 1030,
 /*   450 */   800,  800, 1028,  800, 1040,  800, 1044,  800,  800,  800,
 /*   460 */   800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
 /*   470 */   800,  800,  800,  800,  800,  800, 1010,  800,  800,  800,
 /*   480 */   800,  800,  800,  800,  800, 1004, 1008,  800,  800,  800,
 /*   490 */   800,  800,  800,  800,  800,  800, 1013,  800,  800,  800,
 /*   500 */   800,  800,  800,  800, 1017,  800,  800,  800,  800,  800,
 /*   510 */   800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
 /*   520 */   800, 1012,
);
    const YY_REDUCE_USE_DFLT = -312;
    const YY_REDUCE_MAX = 393;
    static public $yy_reduce_ofst = array(
 /*     0 */  1259, -126,   71,  268, 1060,  466,  664,  862, 1654, 2048,
 /*    10 */  1851, 2245, 3235, 2641, 2839, 2443, 1457, 3037, 3432, 3432,
 /*    20 */  3432, 3432, 3432, 3432, 4020, 3628, 3824, 4216, 4412, 4593,
 /*    30 */  5136, 4955, 4774, 5498, 6041, 5860, 5679, 5317, 6570, 7093,
 /*    40 */  7356, 7684, 7854, 7526, 8024, 8182, 8252, 8460, 8618, 9866,
 /*    50 */  8668, 8410, 9708, 9450, 9500, 9658, 8826, 9292, 9242, 8876,
 /*    60 */  9034, 9084, 7166, 10074, 9916, 10537, 10124, 10282, 10792, 10843,
 /*    70 */  7421, 11050, 11264, 11208, 11001, 11422, 11471, 11629, 11685, 11705,
 /*    80 */  11900, 11959, 12146, 12192, 11979, 12615, 13038, 12569, 12773, 12411,
 /*    90 */  12350, 12834, 12992, 7757, 13049, 13077, 12238, 7926, 13257, 13310,
 /*   100 */  13246, 13321, 10625, 5388, 5569, 7712, 7384, 4520, 3766, 3647,
 /*   110 */  5005, 1280, 4039, 4044,  -95,  -95,  -95,   89, -142,  286,
 /*   120 */   340,   55,  304,  375,  456,  -55,   29,  259,   29, -188,
 /*   130 */    29,  183,  211,  289,  191,  158,  114,  252,  -94,  -99,
 /*   140 */   318,  258,  544,  -44, -132,  113,  659,  586, -311, -132,
 /*   150 */   -44,  129,   44, -132,  -44,  131,  547,  442,  567,  372,
 /*   160 */   303,  468,  -51,  233,   80,  715,  687, -120,  568, -217,
 /*   170 */  -264,  648,  672,  695,  750, -217,  789,  -67, -120,  -67,
 /*   180 */   644,  305,  587,  742,  747,  352,  593, -120,  352,  384,
 /*   190 */   572,  352, -120,  119,  159, -120, -217,  312, -217,  -67,
 /*   200 */  -143,  440,  642,  386, -120,  638,   98,   32,  477,  392,
 /*   210 */   351,  306,  178,  585,  500,  942,  968, 1064, 1063, 1036,
 /*   220 */  1046, 1037, 1072, 1041, 1015,  970,  945,  979,  966,  987,
 /*   230 */   985,  984,  969,  992,  972,  964,  952,  929, 1020,  944,
 /*   240 */  1034, 1033, 1043, 1068, 1031, 1019, 1011, 1022, 1027, 1023,
 /*   250 */   912,  904,  921,  924,  922,  900,  895,  894,  899,  898,
 /*   260 */   926,  939,  948,  943,  941,  923,  935,  930,  928,  927,
 /*   270 */   910,  934,  933,  932, 1048, 1166, 1079, 1137, 1142, 1134,
 /*   280 */  1132, 1133, 1129, 1127, 1056, 1128, 1146, 1047, 1139, 1125,
 /*   290 */  1135, 1144, 1141, 1150, 1161, 1160, 1126, 1042, 1090, 1088,
 /*   300 */  1038, 1075, 1058, 1093, 1091, 1092, 1084, 1066, 1062, 1051,
 /*   310 */  1053, 1067, 1081, 1071, 1069, 1070, 1096, 1122, 1121, 1110,
 /*   320 */  1120, 1123, 1114, 1001, 1124, 1109,  908, 1098, 1050, 1097,
 /*   330 */  1099, 1108,  978, 1078,  940,  861,  812,  846,  798,  814,
 /*   340 */   819,  854,  797,  793,  786,  774,  647,  796,  794,  820,
 /*   350 */   832,  890,  871,  773,  843,  706,  847,  845,  887,  688,
 /*   360 */   837,  823,  690,  885,  835,  876,  570,  175,  369,  423,
 /*   370 */   491,  693,  483,  554,  754,   47,  249,   57,  155,  108,
 /*   380 */    92,  772,  893,  764,  752,  641,  771,  770,  746,  792,
 /*   390 */   726,  734,  737,  744,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 1 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, ),
        /* 2 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 3 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 4 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 5 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 6 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 7 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 8 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 9 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 10 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 11 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 12 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 13 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 14 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 15 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 16 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 17 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 18 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 19 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 20 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 21 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 22 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 23 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, ),
        /* 24 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, ),
        /* 25 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, ),
        /* 26 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, ),
        /* 27 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, ),
        /* 28 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, ),
        /* 29 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 107, ),
        /* 30 */ array(9, 13, 22, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, ),
        /* 31 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, ),
        /* 32 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, ),
        /* 33 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, ),
        /* 34 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, ),
        /* 35 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, ),
        /* 36 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, ),
        /* 37 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, ),
        /* 38 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 39 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 40 */ array(9, 13, 20, 21, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 41 */ array(9, 13, 20, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 42 */ array(9, 13, 20, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 43 */ array(9, 13, 23, 52, 54, 55, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 44 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 45 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 46 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 47 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 48 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 49 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 50 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 51 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 52 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 53 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 54 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 55 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 56 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 57 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 58 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 59 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 60 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 61 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 62 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 63 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 64 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 65 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 66 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 67 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 68 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 69 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 70 */ array(13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 57, 59, 60, 61, 62, ),
        /* 71 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 72 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 73 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 74 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 75 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 76 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 77 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 78 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 79 */ array(13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 57, 59, 60, 61, 62, ),
        /* 80 */ array(13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 57, 59, 60, 61, 62, ),
        /* 81 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 82 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 83 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 84 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 56, ),
        /* 85 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 86 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 87 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 88 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 89 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 90 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 91 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 92 */ array(9, 13, 23, 52, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, ),
        /* 93 */ array(9, 13, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, ),
        /* 94 */ array(13, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, ),
        /* 95 */ array(13, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, ),
        /* 96 */ array(13, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, ),
        /* 97 */ array(13, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, ),
        /* 98 */ array(13, 26, 27, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, ),
        /* 99 */ array(13, 23, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, ),
        /* 100 */ array(13, 23, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, ),
        /* 101 */ array(13, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, ),
        /* 102 */ array(13, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, ),
        /* 103 */ array(13, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, ),
        /* 104 */ array(13, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, ),
        /* 105 */ array(13, 23, 54, 55, 57, 59, 60, 61, 62, ),
        /* 106 */ array(13, 23, 54, 55, 57, 59, 60, 61, 62, ),
        /* 107 */ array(25, 26, 27, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, ),
        /* 108 */ array(5, 8, 24, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, ),
        /* 109 */ array(9, 23, 37, 52, 53, ),
        /* 110 */ array(25, 26, 27, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, ),
        /* 111 */ array(9, 23, 37, 52, 53, ),
        /* 112 */ array(9, 23, 52, 53, ),
        /* 113 */ array(9, 23, 52, 53, ),
        /* 114 */ array(55, 63, 69, 70, 71, 72, ),
        /* 115 */ array(55, 63, 69, 70, 71, 72, ),
        /* 116 */ array(55, 63, 69, 70, 71, 72, ),
        /* 117 */ array(23, 37, 52, 53, ),
        /* 118 */ array(13, 51, 55, 58, ),
        /* 119 */ array(23, 37, 52, 53, ),
        /* 120 */ array(23, 37, 52, 53, ),
        /* 121 */ array(51, 55, 58, ),
        /* 122 */ array(23, 38, 54, 75, ),
        /* 123 */ array(13, 51, 55, ),
        /* 124 */ array(24, 55, 63, ),
        /* 125 */ array(21, 104, 105, ),
        /* 126 */ array(49, 51, 81, 82, ),
        /* 127 */ array(42, 43, 44, 45, ),
        /* 128 */ array(49, 51, 81, 82, ),
        /* 129 */ array(42, 43, 44, 45, ),
        /* 130 */ array(49, 51, 81, 82, ),
        /* 131 */ array(13, 51, 58, ),
        /* 132 */ array(38, 54, 75, ),
        /* 133 */ array(23, 52, 53, ),
        /* 134 */ array(23, 52, 53, ),
        /* 135 */ array(23, 52, 53, ),
        /* 136 */ array(21, 104, 105, ),
        /* 137 */ array(23, 54, ),
        /* 138 */ array(51, 58, ),
        /* 139 */ array(119, 120, ),
        /* 140 */ array(23, 54, ),
        /* 141 */ array(55, 63, ),
        /* 142 */ array(52, 53, 56, ),
        /* 143 */ array(7, 9, 10, ),
        /* 144 */ array(52, 77, 78, ),
        /* 145 */ array(23, 52, 53, ),
        /* 146 */ array(49, 52, 53, ),
        /* 147 */ array(49, 52, 53, ),
        /* 148 */ array(42, 44, 46, ),
        /* 149 */ array(52, 77, 78, ),
        /* 150 */ array(7, 9, 10, ),
        /* 151 */ array(5, 8, 64, ),
        /* 152 */ array(52, 53, 56, ),
        /* 153 */ array(52, 77, 78, ),
        /* 154 */ array(7, 9, 10, ),
        /* 155 */ array(49, 52, 53, ),
        /* 156 */ array(49, 52, 53, ),
        /* 157 */ array(21, 23, ),
        /* 158 */ array(49, 50, ),
        /* 159 */ array(13, 51, ),
        /* 160 */ array(13, 51, ),
        /* 161 */ array(108, ),
        /* 162 */ array(51, ),
        /* 163 */ array(54, ),
        /* 164 */ array(55, ),
        /* 165 */ array(20, 22, ),
        /* 166 */ array(20, 22, ),
        /* 167 */ array(79, 80, ),
        /* 168 */ array(21, 50, ),
        /* 169 */ array(4, 83, ),
        /* 170 */ array(42, 44, ),
        /* 171 */ array(23, 54, ),
        /* 172 */ array(20, 22, ),
        /* 173 */ array(50, 56, ),
        /* 174 */ array(20, 22, ),
        /* 175 */ array(4, 83, ),
        /* 176 */ array(23, 54, ),
        /* 177 */ array(52, 53, ),
        /* 178 */ array(79, 80, ),
        /* 179 */ array(52, 53, ),
        /* 180 */ array(24, 63, ),
        /* 181 */ array(20, 23, ),
        /* 182 */ array(42, 44, ),
        /* 183 */ array(20, 22, ),
        /* 184 */ array(20, 22, ),
        /* 185 */ array(73, 74, ),
        /* 186 */ array(23, 52, ),
        /* 187 */ array(79, 80, ),
        /* 188 */ array(73, 74, ),
        /* 189 */ array(23, 52, ),
        /* 190 */ array(49, 50, ),
        /* 191 */ array(73, 74, ),
        /* 192 */ array(79, 80, ),
        /* 193 */ array(31, 58, ),
        /* 194 */ array(50, 56, ),
        /* 195 */ array(79, 80, ),
        /* 196 */ array(4, 83, ),
        /* 197 */ array(23, 54, ),
        /* 198 */ array(4, 83, ),
        /* 199 */ array(52, 53, ),
        /* 200 */ array(20, 22, ),
        /* 201 */ array(50, 56, ),
        /* 202 */ array(23, 54, ),
        /* 203 */ array(23, 54, ),
        /* 204 */ array(79, 80, ),
        /* 205 */ array(20, 22, ),
        /* 206 */ array(20, 22, ),
        /* 207 */ array(54, ),
        /* 208 */ array(23, ),
        /* 209 */ array(55, ),
        /* 210 */ array(55, ),
        /* 211 */ array(55, ),
        /* 212 */ array(55, ),
        /* 213 */ array(108, ),
        /* 214 */ array(20, ),
        /* 215 */ array(26, 27, 30, ),
        /* 216 */ array(31, 35, 36, ),
        /* 217 */ array(22, 23, ),
        /* 218 */ array(20, 22, ),
        /* 219 */ array(21, 50, ),
        /* 220 */ array(22, 23, ),
        /* 221 */ array(20, 22, ),
        /* 222 */ array(22, 23, ),
        /* 223 */ array(122, ),
        /* 224 */ array(56, ),
        /* 225 */ array(122, ),
        /* 226 */ array(55, ),
        /* 227 */ array(122, ),
        /* 228 */ array(31, ),
        /* 229 */ array(122, ),
        /* 230 */ array(122, ),
        /* 231 */ array(122, ),
        /* 232 */ array(31, ),
        /* 233 */ array(122, ),
        /* 234 */ array(122, ),
        /* 235 */ array(20, ),
        /* 236 */ array(20, ),
        /* 237 */ array(2, ),
        /* 238 */ array(23, ),
        /* 239 */ array(64, ),
        /* 240 */ array(122, ),
        /* 241 */ array(122, ),
        /* 242 */ array(122, ),
        /* 243 */ array(50, ),
        /* 244 */ array(122, ),
        /* 245 */ array(122, ),
        /* 246 */ array(122, ),
        /* 247 */ array(122, ),
        /* 248 */ array(122, ),
        /* 249 */ array(122, ),
        /* 250 */ array(122, ),
        /* 251 */ array(122, ),
        /* 252 */ array(56, ),
        /* 253 */ array(122, ),
        /* 254 */ array(122, ),
        /* 255 */ array(55, ),
        /* 256 */ array(122, ),
        /* 257 */ array(122, ),
        /* 258 */ array(122, ),
        /* 259 */ array(122, ),
        /* 260 */ array(122, ),
        /* 261 */ array(122, ),
        /* 262 */ array(52, ),
        /* 263 */ array(122, ),
        /* 264 */ array(122, ),
        /* 265 */ array(22, ),
        /* 266 */ array(122, ),
        /* 267 */ array(122, ),
        /* 268 */ array(55, ),
        /* 269 */ array(122, ),
        /* 270 */ array(22, ),
        /* 271 */ array(56, ),
        /* 272 */ array(122, ),
        /* 273 */ array(122, ),
        /* 274 */ array(122, ),
        /* 275 */ array(122, ),
        /* 276 */ array(64, ),
        /* 277 */ array(122, ),
        /* 278 */ array(53, ),
        /* 279 */ array(122, ),
        /* 280 */ array(55, ),
        /* 281 */ array(121, ),
        /* 282 */ array(122, ),
        /* 283 */ array(122, ),
        /* 284 */ array(52, ),
        /* 285 */ array(56, ),
        /* 286 */ array(56, ),
        /* 287 */ array(22, ),
        /* 288 */ array(55, ),
        /* 289 */ array(114, ),
        /* 290 */ array(63, ),
        /* 291 */ array(122, ),
        /* 292 */ array(122, ),
        /* 293 */ array(122, ),
        /* 294 */ array(122, ),
        /* 295 */ array(122, ),
        /* 296 */ array(122, ),
        /* 297 */ array(56, ),
        /* 298 */ array(122, ),
        /* 299 */ array(122, ),
        /* 300 */ array(20, ),
        /* 301 */ array(50, ),
        /* 302 */ array(56, ),
        /* 303 */ array(122, ),
        /* 304 */ array(122, ),
        /* 305 */ array(122, ),
        /* 306 */ array(55, ),
        /* 307 */ array(122, ),
        /* 308 */ array(122, ),
        /* 309 */ array(122, ),
        /* 310 */ array(122, ),
        /* 311 */ array(122, ),
        /* 312 */ array(122, ),
        /* 313 */ array(122, ),
        /* 314 */ array(122, ),
        /* 315 */ array(122, ),
        /* 316 */ array(122, ),
        /* 317 */ array(122, ),
        /* 318 */ array(122, ),
        /* 319 */ array(122, ),
        /* 320 */ array(122, ),
        /* 321 */ array(122, ),
        /* 322 */ array(23, ),
        /* 323 */ array(13, ),
        /* 324 */ array(122, ),
        /* 325 */ array(122, ),
        /* 326 */ array(13, ),
        /* 327 */ array(122, ),
        /* 328 */ array(9, ),
        /* 329 */ array(122, ),
        /* 330 */ array(122, ),
        /* 331 */ array(122, ),
        /* 332 */ array(13, ),
        /* 333 */ array(51, ),
        /* 334 */ array(13, ),
        /* 335 */ array(122, ),
        /* 336 */ array(55, ),
        /* 337 */ array(23, ),
        /* 338 */ array(122, ),
        /* 339 */ array(122, ),
        /* 340 */ array(122, ),
        /* 341 */ array(51, ),
        /* 342 */ array(122, ),
        /* 343 */ array(122, ),
        /* 344 */ array(122, ),
        /* 345 */ array(122, ),
        /* 346 */ array(44, ),
        /* 347 */ array(122, ),
        /* 348 */ array(122, ),
        /* 349 */ array(51, ),
        /* 350 */ array(52, ),
        /* 351 */ array(23, ),
        /* 352 */ array(51, ),
        /* 353 */ array(122, ),
        /* 354 */ array(122, ),
        /* 355 */ array(44, ),
        /* 356 */ array(122, ),
        /* 357 */ array(122, ),
        /* 358 */ array(23, ),
        /* 359 */ array(44, ),
        /* 360 */ array(9, ),
        /* 361 */ array(122, ),
        /* 362 */ array(44, ),
        /* 363 */ array(23, ),
        /* 364 */ array(122, ),
        /* 365 */ array(20, ),
        /* 366 */ array(44, ),
        /* 367 */ array(44, ),
        /* 368 */ array(122, ),
        /* 369 */ array(51, ),
        /* 370 */ array(122, ),
        /* 371 */ array(55, ),
        /* 372 */ array(58, ),
        /* 373 */ array(56, ),
        /* 374 */ array(23, ),
        /* 375 */ array(122, ),
        /* 376 */ array(122, ),
        /* 377 */ array(122, ),
        /* 378 */ array(122, ),
        /* 379 */ array(122, ),
        /* 380 */ array(122, ),
        /* 381 */ array(122, ),
        /* 382 */ array(122, ),
        /* 383 */ array(122, ),
        /* 384 */ array(122, ),
        /* 385 */ array(13, ),
        /* 386 */ array(122, ),
        /* 387 */ array(122, ),
        /* 388 */ array(122, ),
        /* 389 */ array(23, ),
        /* 390 */ array(122, ),
        /* 391 */ array(122, ),
        /* 392 */ array(122, ),
        /* 393 */ array(122, ),
        /* 394 */ array(22, 23, ),
        /* 395 */ array(122, ),
        /* 396 */ array(122, ),
        /* 397 */ array(122, ),
        /* 398 */ array(122, ),
        /* 399 */ array(22, ),
        /* 400 */ array(122, ),
        /* 401 */ array(122, ),
        /* 402 */ array(60, ),
        /* 403 */ array(22, ),
        /* 404 */ array(122, ),
        /* 405 */ array(122, ),
        /* 406 */ array(122, ),
        /* 407 */ array(122, ),
        /* 408 */ array(122, ),
        /* 409 */ array(122, ),
        /* 410 */ array(122, ),
        /* 411 */ array(122, ),
        /* 412 */ array(122, ),
        /* 413 */ array(122, ),
        /* 414 */ array(122, ),
        /* 415 */ array(122, ),
        /* 416 */ array(122, ),
        /* 417 */ array(13, ),
        /* 418 */ array(122, ),
        /* 419 */ array(22, ),
        /* 420 */ array(122, ),
        /* 421 */ array(122, ),
        /* 422 */ array(22, ),
        /* 423 */ array(122, ),
        /* 424 */ array(122, ),
        /* 425 */ array(122, ),
        /* 426 */ array(122, ),
        /* 427 */ array(122, ),
        /* 428 */ array(122, ),
        /* 429 */ array(122, ),
        /* 430 */ array(122, ),
        /* 431 */ array(122, ),
        /* 432 */ array(122, ),
        /* 433 */ array(122, ),
        /* 434 */ array(122, ),
        /* 435 */ array(122, ),
        /* 436 */ array(122, ),
        /* 437 */ array(38, ),
        /* 438 */ array(122, ),
        /* 439 */ array(122, ),
        /* 440 */ array(122, ),
        /* 441 */ array(122, ),
        /* 442 */ array(22, ),
        /* 443 */ array(122, ),
        /* 444 */ array(122, ),
        /* 445 */ array(24, ),
        /* 446 */ array(122, ),
        /* 447 */ array(122, ),
        /* 448 */ array(22, ),
        /* 449 */ array(22, ),
        /* 450 */ array(122, ),
        /* 451 */ array(122, ),
        /* 452 */ array(22, ),
        /* 453 */ array(122, ),
        /* 454 */ array(13, ),
        /* 455 */ array(122, ),
        /* 456 */ array(22, ),
        /* 457 */ array(122, ),
        /* 458 */ array(122, ),
        /* 459 */ array(122, ),
        /* 460 */ array(122, ),
        /* 461 */ array(122, ),
        /* 462 */ array(122, ),
        /* 463 */ array(122, ),
        /* 464 */ array(122, ),
        /* 465 */ array(122, ),
        /* 466 */ array(122, ),
        /* 467 */ array(122, ),
        /* 468 */ array(122, ),
        /* 469 */ array(122, ),
        /* 470 */ array(122, ),
        /* 471 */ array(122, ),
        /* 472 */ array(122, ),
        /* 473 */ array(122, ),
        /* 474 */ array(122, ),
        /* 475 */ array(122, ),
        /* 476 */ array(22, ),
        /* 477 */ array(122, ),
        /* 478 */ array(122, ),
        /* 479 */ array(122, ),
        /* 480 */ array(122, ),
        /* 481 */ array(122, ),
        /* 482 */ array(122, ),
        /* 483 */ array(122, ),
        /* 484 */ array(122, ),
        /* 485 */ array(21, ),
        /* 486 */ array(21, ),
        /* 487 */ array(122, ),
        /* 488 */ array(122, ),
        /* 489 */ array(122, ),
        /* 490 */ array(122, ),
        /* 491 */ array(122, ),
        /* 492 */ array(122, ),
        /* 493 */ array(122, ),
        /* 494 */ array(122, ),
        /* 495 */ array(122, ),
        /* 496 */ array(31, ),
        /* 497 */ array(122, ),
        /* 498 */ array(122, ),
        /* 499 */ array(122, ),
        /* 500 */ array(122, ),
        /* 501 */ array(122, ),
        /* 502 */ array(122, ),
        /* 503 */ array(122, ),
        /* 504 */ array(24, ),
        /* 505 */ array(122, ),
        /* 506 */ array(122, ),
        /* 507 */ array(122, ),
        /* 508 */ array(122, ),
        /* 509 */ array(122, ),
        /* 510 */ array(122, ),
        /* 511 */ array(122, ),
        /* 512 */ array(122, ),
        /* 513 */ array(122, ),
        /* 514 */ array(122, ),
        /* 515 */ array(122, ),
        /* 516 */ array(122, ),
        /* 517 */ array(122, ),
        /* 518 */ array(122, ),
        /* 519 */ array(122, ),
        /* 520 */ array(122, ),
        /* 521 */ array(22, ),
        /* 522 */ array(),
        /* 523 */ array(),
        /* 524 */ array(),
        /* 525 */ array(),
        /* 526 */ array(),
        /* 527 */ array(),
        /* 528 */ array(),
        /* 529 */ array(),
        /* 530 */ array(),
        /* 531 */ array(),
        /* 532 */ array(),
        /* 533 */ array(),
        /* 534 */ array(),
        /* 535 */ array(),
        /* 536 */ array(),
        /* 537 */ array(),
        /* 538 */ array(),
        /* 539 */ array(),
        /* 540 */ array(),
        /* 541 */ array(),
        /* 542 */ array(),
        /* 543 */ array(),
        /* 544 */ array(),
        /* 545 */ array(),
        /* 546 */ array(),
        /* 547 */ array(),
        /* 548 */ array(),
        /* 549 */ array(),
        /* 550 */ array(),
        /* 551 */ array(),
        /* 552 */ array(),
        /* 553 */ array(),
        /* 554 */ array(),
        /* 555 */ array(),
        /* 556 */ array(),
        /* 557 */ array(),
        /* 558 */ array(),
        /* 559 */ array(),
        /* 560 */ array(),
        /* 561 */ array(),
        /* 562 */ array(),
        /* 563 */ array(),
        /* 564 */ array(),
        /* 565 */ array(),
        /* 566 */ array(),
        /* 567 */ array(),
        /* 568 */ array(),
        /* 569 */ array(),
        /* 570 */ array(),
        /* 571 */ array(),
        /* 572 */ array(),
        /* 573 */ array(),
        /* 574 */ array(),
        /* 575 */ array(),
        /* 576 */ array(),
        /* 577 */ array(),
        /* 578 */ array(),
        /* 579 */ array(),
        /* 580 */ array(),
        /* 581 */ array(),
        /* 582 */ array(),
        /* 583 */ array(),
        /* 584 */ array(),
        /* 585 */ array(),
        /* 586 */ array(),
        /* 587 */ array(),
        /* 588 */ array(),
        /* 589 */ array(),
        /* 590 */ array(),
        /* 591 */ array(),
        /* 592 */ array(),
        /* 593 */ array(),
        /* 594 */ array(),
        /* 595 */ array(),
        /* 596 */ array(),
        /* 597 */ array(),
        /* 598 */ array(),
        /* 599 */ array(),
        /* 600 */ array(),
        /* 601 */ array(),
        /* 602 */ array(),
        /* 603 */ array(),
        /* 604 */ array(),
        /* 605 */ array(),
        /* 606 */ array(),
        /* 607 */ array(),
        /* 608 */ array(),
        /* 609 */ array(),
        /* 610 */ array(),
        /* 611 */ array(),
        /* 612 */ array(),
        /* 613 */ array(),
        /* 614 */ array(),
        /* 615 */ array(),
        /* 616 */ array(),
        /* 617 */ array(),
        /* 618 */ array(),
        /* 619 */ array(),
        /* 620 */ array(),
        /* 621 */ array(),
        /* 622 */ array(),
        /* 623 */ array(),
        /* 624 */ array(),
        /* 625 */ array(),
        /* 626 */ array(),
        /* 627 */ array(),
        /* 628 */ array(),
        /* 629 */ array(),
        /* 630 */ array(),
        /* 631 */ array(),
        /* 632 */ array(),
        /* 633 */ array(),
        /* 634 */ array(),
        /* 635 */ array(),
        /* 636 */ array(),
        /* 637 */ array(),
        /* 638 */ array(),
        /* 639 */ array(),
        /* 640 */ array(),
        /* 641 */ array(),
        /* 642 */ array(),
        /* 643 */ array(),
        /* 644 */ array(),
        /* 645 */ array(),
        /* 646 */ array(),
        /* 647 */ array(),
        /* 648 */ array(),
        /* 649 */ array(),
        /* 650 */ array(),
        /* 651 */ array(),
        /* 652 */ array(),
        /* 653 */ array(),
        /* 654 */ array(),
        /* 655 */ array(),
        /* 656 */ array(),
        /* 657 */ array(),
        /* 658 */ array(),
        /* 659 */ array(),
        /* 660 */ array(),
        /* 661 */ array(),
        /* 662 */ array(),
        /* 663 */ array(),
        /* 664 */ array(),
        /* 665 */ array(),
        /* 666 */ array(),
        /* 667 */ array(),
        /* 668 */ array(),
        /* 669 */ array(),
        /* 670 */ array(),
        /* 671 */ array(),
        /* 672 */ array(),
        /* 673 */ array(),
        /* 674 */ array(),
        /* 675 */ array(),
        /* 676 */ array(),
        /* 677 */ array(),
        /* 678 */ array(),
        /* 679 */ array(),
        /* 680 */ array(),
        /* 681 */ array(),
        /* 682 */ array(),
        /* 683 */ array(),
        /* 684 */ array(),
        /* 685 */ array(),
        /* 686 */ array(),
        /* 687 */ array(),
        /* 688 */ array(),
        /* 689 */ array(),
        /* 690 */ array(),
        /* 691 */ array(),
        /* 692 */ array(),
        /* 693 */ array(),
        /* 694 */ array(),
        /* 695 */ array(),
        /* 696 */ array(),
        /* 697 */ array(),
        /* 698 */ array(),
        /* 699 */ array(),
        /* 700 */ array(),
        /* 701 */ array(),
        /* 702 */ array(),
        /* 703 */ array(),
        /* 704 */ array(),
        /* 705 */ array(),
        /* 706 */ array(),
        /* 707 */ array(),
        /* 708 */ array(),
        /* 709 */ array(),
        /* 710 */ array(),
        /* 711 */ array(),
        /* 712 */ array(),
        /* 713 */ array(),
        /* 714 */ array(),
        /* 715 */ array(),
        /* 716 */ array(),
        /* 717 */ array(),
        /* 718 */ array(),
        /* 719 */ array(),
        /* 720 */ array(),
        /* 721 */ array(),
        /* 722 */ array(),
        /* 723 */ array(),
        /* 724 */ array(),
        /* 725 */ array(),
        /* 726 */ array(),
        /* 727 */ array(),
        /* 728 */ array(),
        /* 729 */ array(),
        /* 730 */ array(),
        /* 731 */ array(),
        /* 732 */ array(),
        /* 733 */ array(),
        /* 734 */ array(),
        /* 735 */ array(),
        /* 736 */ array(),
        /* 737 */ array(),
        /* 738 */ array(),
        /* 739 */ array(),
        /* 740 */ array(),
        /* 741 */ array(),
        /* 742 */ array(),
        /* 743 */ array(),
        /* 744 */ array(),
        /* 745 */ array(),
        /* 746 */ array(),
        /* 747 */ array(),
        /* 748 */ array(),
        /* 749 */ array(),
        /* 750 */ array(),
        /* 751 */ array(),
        /* 752 */ array(),
        /* 753 */ array(),
        /* 754 */ array(),
        /* 755 */ array(),
        /* 756 */ array(),
        /* 757 */ array(),
        /* 758 */ array(),
        /* 759 */ array(),
        /* 760 */ array(),
        /* 761 */ array(),
        /* 762 */ array(),
        /* 763 */ array(),
        /* 764 */ array(),
        /* 765 */ array(),
);
    static public $yy_default = array(
 /*     0 */  1291, 1291, 1291, 1291, 1291, 1291, 1291,  772, 1291, 1291,
 /*    10 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,  905,  904,
 /*    20 */   866,  774,  766,  865, 1291, 1291, 1291, 1291, 1291, 1291,
 /*    30 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
 /*    40 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
 /*    50 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
 /*    60 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
 /*    70 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
 /*    80 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
 /*    90 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
 /*   100 */  1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,  943, 1291,
 /*   110 */  1291, 1291, 1291, 1291,  978,  981,  977, 1291, 1048, 1291,
 /*   120 */  1291, 1047, 1291, 1048,  999, 1291,  951, 1291,  952, 1291,
 /*   130 */   953, 1048, 1291, 1291, 1291, 1291, 1291, 1291, 1047,  861,
 /*   140 */  1291, 1291, 1291,  946,  963,  857, 1291, 1291, 1089,  962,
 /*   150 */   945, 1291, 1291,  964,  944, 1291, 1291, 1291, 1291, 1048,
 /*   160 */  1038, 1291, 1041, 1291, 1291, 1291, 1291,  958, 1291,  948,
 /*   170 */  1091, 1291, 1291, 1291, 1291,  949, 1291, 1059,  957, 1061,
 /*   180 */   999, 1291, 1090, 1291, 1291,  961, 1291,  955,  960, 1291,
 /*   190 */  1291,  959,  956, 1019, 1291,  954,  947, 1291,  950,  787,
 /*   200 */  1291, 1291, 1291, 1291,  788, 1291, 1291, 1291, 1291, 1291,
 /*   210 */  1291, 1291, 1291,  888, 1291, 1291, 1291, 1291, 1291, 1291,
 /*   220 */  1291, 1291, 1291, 1199, 1291, 1201, 1291, 1279, 1291, 1205,
 /*   230 */  1247, 1281, 1291, 1203,  897, 1291, 1291,  907, 1291, 1291,
 /*   240 */  1193, 1245, 1151,  920, 1191, 1255, 1267, 1265, 1263, 1261,
 /*   250 */  1243, 1241, 1291, 1275, 1277, 1291, 1195, 1155, 1153,  915,
 /*   260 */   913,  911, 1291, 1197, 1185, 1291, 1283, 1285, 1291, 1273,
 /*   270 */  1291, 1291, 1221, 1219, 1223, 1225, 1291, 1269,  849, 1287,
 /*   280 */  1291, 1291,  847, 1271, 1291, 1291, 1291, 1291, 1291, 1291,
 /*   290 */   855, 1217, 1259, 1237, 1235, 1239, 1183, 1291, 1233, 1231,
 /*   300 */  1291,  921, 1291, 1227, 1229, 1251, 1291, 1209, 1257, 1211,
 /*   310 */  1213, 1215, 1207,  876,  884, 1253,  882,  880,  878, 1249,
 /*   320 */  1157, 1175,  781, 1291, 1177, 1111, 1291, 1109, 1054, 1117,
 /*   330 */  1187, 1189, 1291, 1291, 1291, 1127, 1291,  769, 1149, 1135,
 /*   340 */  1131, 1291, 1115, 1129, 1097, 1121, 1093, 1119, 1101, 1291,
 /*   350 */  1291, 1291, 1291, 1107, 1099, 1087, 1105, 1103, 1291, 1086,
 /*   360 */  1052, 1095, 1094, 1291, 1123, 1291, 1088, 1092, 1167, 1291,
 /*   370 */  1165, 1291, 1019, 1291, 1291, 1181, 1163, 1137, 1145, 1147,
 /*   380 */  1171, 1161, 1141, 1125, 1173, 1291, 1113, 1133, 1169, 1291,
 /*   390 */  1143, 1179, 1139, 1159, 1291, 1256, 1124, 1246,  916, 1291,
 /*   400 */  1242, 1244, 1018, 1291,  877, 1274, 1270, 1226, 1224, 1100,
 /*   410 */  1114, 1222, 1104, 1272, 1264, 1120, 1262, 1037, 1266, 1291,
 /*   420 */  1268,  879, 1291, 1138,  848, 1132,  898, 1108, 1176, 1126,
 /*   430 */  1178, 1288, 1170, 1150, 1128, 1168, 1130, 1291, 1116, 1254,
 /*   440 */   885, 1172, 1291,  881, 1122,  818,  912, 1144, 1291, 1291,
 /*   450 */  1174, 1188, 1291, 1190, 1049,  883, 1291, 1118,  914, 1220,
 /*   460 */  1206, 1158, 1112, 1204, 1136, 1198, 1200, 1202, 1218, 1110,
 /*   470 */  1228, 1096, 1230, 1258, 1098, 1284, 1291, 1260, 1196, 1134,
 /*   480 */  1194, 1166, 1164, 1180, 1192, 1291, 1291, 1182, 1152, 1162,
 /*   490 */  1156, 1142, 1140, 1154, 1146, 1160, 1291, 1148, 1232, 1286,
 /*   500 */  1278, 1208, 1238, 1212,  786, 1280, 1240, 1248, 1102, 1282,
 /*   510 */  1184, 1106, 1214, 1210, 1252, 1186, 1276, 1250, 1234, 1216,
 /*   520 */  1236, 1291,  886,  805,  965,  843,  804,  887,  802,  768,
 /*   530 */   782,  891,  783,  801,  813,  775,  917,  803,  875,  968,
 /*   540 */   990,  773, 1057,  811,  810, 1058,  807,  767,  808,  812,
 /*   550 */   809,  784,  770,  806,  992,  906,  779,  922,  896,  966,
 /*   560 */   895,  892,  901,  903,  777,  778,  908,  970,  909,  973,
 /*   570 */   972,  910,  780,  974,  932,  976,  975,  983,  982,  900,
 /*   580 */   989, 1290,  988,  890,  894, 1289,  902,  889,  971,  991,
 /*   590 */   836,  771,  969,  864,  862,  893,  846,  967,  980,  776,
 /*   600 */   899,  979,  840,  831, 1073,  935, 1076,  934,  936,  937,
 /*   610 */   940,  939,  938,  933, 1079, 1077,  984,  931, 1074, 1085,
 /*   620 */   987,  986, 1082, 1084,  941,  795,  793,  792,  785,  794,
 /*   630 */   799,  798,  796,  791,  790, 1078, 1081,  942, 1075, 1072,
 /*   640 */   789,  985, 1071,  930,  929, 1006, 1003, 1002, 1031, 1007,
 /*   650 */  1004, 1029, 1030, 1005, 1001, 1000, 1066, 1064, 1062, 1065,
 /*   660 */  1046,  998,  919,  918, 1028, 1027,  997, 1011, 1014,  924,
 /*   670 */   925,  928,  927,  926, 1013, 1012, 1009, 1023, 1024, 1042,
 /*   680 */   996, 1010,  995, 1008,  800, 1083,  845,  844,  841, 1040,
 /*   690 */  1039,  858, 1020,  859, 1021,  842,  839,  835,  994, 1033,
 /*   700 */  1060,  923, 1022,  838,  837,  860,  863, 1063, 1015, 1016,
 /*   710 */   874, 1036, 1032, 1034, 1035, 1017,  873,  869,  868,  867,
 /*   720 */   870,  871, 1025, 1026,  872,  834,  833, 1053,  816, 1055,
 /*   730 */   819,  815, 1051,  820,  817,  814, 1056,  828, 1080,  827,
 /*   740 */  1070, 1069, 1067, 1068,  797,  823,  825,  853,  856, 1045,
 /*   750 */   829, 1044,  832, 1043,  830, 1047,  854,  824,  822,  821,
 /*   760 */   826, 1050,  852,  851,  850,  993,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 324;
    const YYSTACKDEPTH = 100;
    const block_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 766;
    const YYNRULE = 525;
    const YYERRORSYMBOL = 123;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'NOTEQUAL',    
  'EQUAL',         'LOGICALAND',    'BINARYAND',     'BINARYOR',    
  'LOGICALOR',     'AMPERSAND',     'BINARYXOR',     'UINDIRECTION',
  'UADRESS',       'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',       
  'UBRACKET',      'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',
  'LEFTFIGUREBRACKET',  'RIGHTFIGUREBRACKET',  'SEMICOLON',     'IDENTIFIER',  
  'ASSIGN',        'TYPENAMEKWD',   'CLASSKWD',      'STRUCTKWD',   
  'ENUMKWD',       'TEMPLATEKWD',   'UNIONKWD',      'COLON',       
  'PUBLICKWD',     'PROTECTEDKWD',  'PRIVATEKWD',    'SIGNALSKWD',  
  'SLOTSKWD',      'OPERATOROVERLOADDECLARATION',  'OUTER_CONSTRUCTOR_NAME',  'FORKWD',      
  'UNSIGNED',      'SIGNED',        'LONG',          'SHORT',       
  'INT',           'CHAR',          'DOUBLE',        'FLOAT',       
  'VOID',          'GREATER',       'COMMA',         'LESSER',      
  'MULTIPLY',      'CONSTKWD',      'TYPENAME',      'LEFTROUNDBRACKET',
  'RIGHTROUNDBRACKET',  'SIZEOF',        'PREPROCESSOR_CONCAT',  'PREPROCESSOR_STRINGIFY',
  'STRING',        'CHARACTER',     'NUMERIC',       'LEFTSQUAREBRACKET',
  'RIGHTSQUAREBRACKET',  'REINTERPRET_CAST',  'DYNAMIC_CAST',  'STATIC_CAST', 
  'CONST_CAST',    'RIGHTARROW',    'DOT',           'DECREMENT',   
  'INCREMENT',     'PLUS',          'MINUS',         'BINARYNOT',   
  'LOGICALNOT',    'DIVISION',      'MODULOSIGN',    'RIGHTSHIFT',  
  'LEFTSHIFT',     'GREATER_OR_EQUAL',  'LESSER_OR_EQUAL',  'NOT_EQUAL',   
  'MINUS_ASSIGN',  'PLUS_ASSIGN',   'MULTIPLY_ASSIGN',  'DIVISION_ASSIGN',
  'MODULO_ASSIGN',  'LEFTSHIFT_ASSIGN',  'RIGHTSHIFT_ASSIGN',  'BINARYAND_ASSIGN',
  'BINARYOR_ASSIGN',  'BINARYXOR_ASSIGN',  'FRIENDKWD',     'VOLATILEKWD', 
  'REGISTERKWD',   'EXTERNKWD',     'STATICKWD',     'DELETE',      
  'NEWKWD',        'BREAKKWD',      'TYPEDEF',       'IFKWD',       
  'DEFAULTKWD',    'CASEKWD',       'SWITCHKWD',     'ELLIPSIS',    
  'CATCHKWD',      'TRYKWD',        'GOTOKWD',       'CONTINUEKWD', 
  'RETURNKWD',     'DOKWD',         'WHILEKWD',      'PREPROCESSOR_INCLUDE',
  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_IF',  'PREPROCESSOR_IFDEF',  'PREPROCESSOR_ELSE',
  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ENDIF',  'COMMENT',       'error',       
  'program',       'stmt_list',     'stmt_or_defined_macro',  'namespace_definition_start',
  'identifier',    'stmt',          'namespace_body',  'start_of_empty_namespace',
  'namespace_statements',  'class_or_union_or_struct',  'identified_type_meta_specifier_with_template_def',  'type_meta_specifier_with_template_def',
  'structure_body',  'nonidentified_type_meta_specifier_with_template_def',  'template_spec_list',  'comma',       
  'template_spec',  'template_typename',  'type_or_type_ref_or_with_ptr',  'expr_prec_7', 
  'builtintype',   'template_def',  'lesser',        'greater',     
  'type_meta_specifier',  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',  'visibility_spec_full',
  'visibility_spec',  'signal_slots',  'enum_body',     'enum_value_list',
  'enum_value',    'expr_atom',     'enum_definition_start',  'type_or_type_with_qualifier',
  'function_definition_without_type',  'type',          'lvalue',        'formal_args_list_with_or_without_const',
  'function_body',  'operator_overload_declaration_type_modificators',  'ampersand',     'operator_overload_declaration_ptr',
  'constkwd',      'multiply',      'operator_overload_declaration_without_type',  'typename',    
  'formal_args_list',  'binarynot',     'outer_constructor_name',  'namespace_resolve',
  'outer_destructor_name',  'leftfigurebracket',  'rightfigurebracket',  'comment_list',
  'leftroundbracket',  'rightroundbracket',  'arg_list',      'arg',         
  'preprocessor_cond',  'preprocessor_endif',  'preprocessor_else_clauses',  'preprocessor_elif_list',
  'preprocessor_else',  'preprocessor_elif',  'preprocessor_elif_terminal',  'preprocessor_else_terminal',
  'preprocessor_ifdef',  'preprocessor_if',  'preprocessor_define',  'preprocessor_include',
  'whilekwd',      'expr_prec_10',  'dokwd',         'expr_prec_11',
  'semicolon',     'returnkwd',     'continuekwd',   'gotokwd',     
  'colon',         'try_catch',     'try',           'catch_list',  
  'trykwd',        'catch',         'catchkwd',      'expr_prec_11_or_ellipsis',
  'ellipsis',      'switch_stmt',   'switchkwd',     'switch_case_list',
  'case',          'casekwd',       'defaultkwd',    'if_then_else',
  'if_then',       'elsekwd',       'ifkwd',         'typedef',     
  'breakkwd',      'newkwd',        'delete',        'leftsquarebracket',
  'rightsquarebracket',  'lvalue_or_assignment_list',  'expr_list',     'type_with_qualifier',
  'varqualifier',  'statickwd',     'externkwd',     'registerkwd', 
  'volatilekwd',   'friendkwd',     'expr_prec_9',   'binaryxor_assign',
  'binaryor_assign',  'binaryand_assign',  'rightshift_assign',  'leftshift_assign',
  'modulo_assign',  'division_assign',  'multiply_assign',  'plus_assign', 
  'minus_assign',  'assign',        'logicaland',    'expr_binary_ops',
  'logicalor',     'binaryxor',     'expr_or_equal',  'binaryor',    
  'not_equal',     'expr_prec_8',   'equal',         'lesser_or_equal',
  'greater_or_equal',  'leftshift',     'expr_prec_6',   'rightshift',  
  'minus',         'expr_prec_5',   'plus',          'modulosign',  
  'expr_prec_4',   'division',      'try_value_access',  'try_pointer_access',
  'expr_prec_3',   'typecast',      'logicalnot',    'expr_prec_2', 
  'decrement',     'increment',     'cpp_style_cast',  'dot',         
  'rightarrow',    'const_cast',    'static_cast',   'dynamic_cast',
  'reinterpret_cast',  'lvalue_or_assignment',  'initialization_list',  'initialization_list_argument_list',
  'possibly_identifier_preceded_ref',  'possibly_idenitifer_preceded_ptrs',  'numeric',       'assignable',  
  'character',     'string',        'scoped_identifier',  'preprocessor_stringify',
  'preprocessor_concat',  'sizeof',        'non_const_type',  'scoped_type', 
  'typename_or_instantiated_template_type',  'template_instantiation_arguments',  'instantiated_template_type_on_in_namespace_resolve',  'namespace_resolve_terminal',
  'typename_in_namespace_resolve',  'instantiated_template_type_on_start_of_namespace_resolve',  'typename_on_start_of_namespace_resolve',  'type_ref_one',
  'type_ref_two',  'type_ref',      'type_or_type_ref',  'template_instantiation_argument_list',
  'template_instantiation_arguments_begin',  'template_instantiation_arguments_end',  'void',          'float',       
  'double',        'long',          'char',          'signed',      
  'unsigned',      'int',           'short',       
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "namespace_definition_start ::= NAMESPACEKWD",
 /*   4 */ "namespace_definition_start ::= NAMESPACEKWD identifier",
 /*   5 */ "stmt ::= namespace_definition_start namespace_body",
 /*   6 */ "start_of_empty_namespace ::= LEFTFIGUREBRACKET",
 /*   7 */ "namespace_body ::= start_of_empty_namespace RIGHTFIGUREBRACKET",
 /*   8 */ "namespace_statements ::= stmt_list",
 /*   9 */ "namespace_body ::= LEFTFIGUREBRACKET namespace_statements RIGHTFIGUREBRACKET",
 /*  10 */ "stmt ::= class_or_union_or_struct",
 /*  11 */ "identified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def identifier",
 /*  12 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON",
 /*  13 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  14 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def SEMICOLON",
 /*  15 */ "nonidentified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def",
 /*  16 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  17 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  18 */ "template_spec_list ::= template_spec_list comma template_spec",
 /*  19 */ "template_spec_list ::= template_spec",
 /*  20 */ "template_spec ::= template_typename identifier",
 /*  21 */ "template_spec ::= template_typename identifier ASSIGN type_or_type_ref_or_with_ptr",
 /*  22 */ "template_spec ::= template_typename identifier ASSIGN expr_prec_7",
 /*  23 */ "template_typename ::= TYPENAMEKWD",
 /*  24 */ "template_typename ::= CLASSKWD",
 /*  25 */ "template_typename ::= STRUCTKWD",
 /*  26 */ "template_typename ::= ENUMKWD",
 /*  27 */ "template_typename ::= builtintype",
 /*  28 */ "template_def ::= TEMPLATEKWD lesser greater",
 /*  29 */ "template_def ::= TEMPLATEKWD lesser template_spec_list greater",
 /*  30 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  31 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  32 */ "type_meta_specifier ::= CLASSKWD",
 /*  33 */ "type_meta_specifier ::= STRUCTKWD",
 /*  34 */ "type_meta_specifier ::= UNIONKWD",
 /*  35 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  36 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  37 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  38 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  39 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  40 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  41 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  42 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  43 */ "visibility_spec ::= PUBLICKWD",
 /*  44 */ "visibility_spec ::= PROTECTEDKWD",
 /*  45 */ "visibility_spec ::= PRIVATEKWD",
 /*  46 */ "signal_slots ::= SIGNALSKWD",
 /*  47 */ "signal_slots ::= SLOTSKWD",
 /*  48 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  49 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  50 */ "enum_value_list ::= enum_value_list comma enum_value",
 /*  51 */ "enum_value_list ::= enum_value",
 /*  52 */ "enum_value ::= identifier",
 /*  53 */ "enum_value ::= identifier ASSIGN expr_atom",
 /*  54 */ "enum_definition_start ::= ENUMKWD identifier",
 /*  55 */ "stmt_or_defined_macro ::= enum_definition_start SEMICOLON",
 /*  56 */ "stmt_or_defined_macro ::= enum_definition_start enum_body SEMICOLON",
 /*  57 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  58 */ "stmt_or_defined_macro ::= enum_definition_start enum_body identifier SEMICOLON",
 /*  59 */ "stmt_or_defined_macro ::= ENUMKWD enum_body identifier SEMICOLON",
 /*  60 */ "stmt_or_defined_macro ::= type_or_type_with_qualifier function_definition_without_type",
 /*  61 */ "stmt_or_defined_macro ::= template_def type function_definition_without_type",
 /*  62 */ "function_definition_without_type ::= lvalue formal_args_list_with_or_without_const function_body",
 /*  63 */ "function_definition_without_type ::= operator_overload_declaration_type_modificators",
 /*  64 */ "operator_overload_declaration_type_modificators ::= ampersand operator_overload_declaration_ptr",
 /*  65 */ "operator_overload_declaration_type_modificators ::= operator_overload_declaration_ptr",
 /*  66 */ "operator_overload_declaration_ptr ::= constkwd multiply operator_overload_declaration_ptr",
 /*  67 */ "operator_overload_declaration_ptr ::= multiply operator_overload_declaration_ptr",
 /*  68 */ "operator_overload_declaration_ptr ::= operator_overload_declaration_without_type",
 /*  69 */ "operator_overload_declaration_without_type ::= OPERATOROVERLOADDECLARATION formal_args_list_with_or_without_const function_body",
 /*  70 */ "stmt_or_defined_macro ::= template_def typename formal_args_list function_body",
 /*  71 */ "stmt_or_defined_macro ::= typename formal_args_list function_body",
 /*  72 */ "stmt_or_defined_macro ::= binarynot typename formal_args_list function_body",
 /*  73 */ "outer_constructor_name ::= namespace_resolve OUTER_CONSTRUCTOR_NAME",
 /*  74 */ "stmt_or_defined_macro ::= template_def outer_constructor_name formal_args_list function_body",
 /*  75 */ "stmt_or_defined_macro ::= outer_constructor_name formal_args_list function_body",
 /*  76 */ "outer_destructor_name ::= namespace_resolve binarynot OUTER_CONSTRUCTOR_NAME",
 /*  77 */ "stmt_or_defined_macro ::= template_def outer_destructor_name formal_args_list function_body",
 /*  78 */ "stmt_or_defined_macro ::= outer_destructor_name formal_args_list function_body",
 /*  79 */ "function_body ::= leftfigurebracket stmt_list rightfigurebracket",
 /*  80 */ "function_body ::= leftfigurebracket rightfigurebracket",
 /*  81 */ "function_body ::= SEMICOLON",
 /*  82 */ "function_body ::= SEMICOLON comment_list",
 /*  83 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  84 */ "formal_args_list_with_or_without_const ::= formal_args_list constkwd",
 /*  85 */ "formal_args_list ::= leftroundbracket rightroundbracket",
 /*  86 */ "formal_args_list ::= leftroundbracket arg_list rightroundbracket",
 /*  87 */ "arg_list ::= arg",
 /*  88 */ "arg_list ::= arg_list comma arg",
 /*  89 */ "arg ::= lvalue",
 /*  90 */ "arg ::= type_or_type_ref_or_with_ptr identifier",
 /*  91 */ "arg ::= type_or_type_ref_or_with_ptr",
 /*  92 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_endif",
 /*  93 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses preprocessor_endif",
 /*  94 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  95 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  96 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  97 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  98 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  99 */ "preprocessor_elif ::= preprocessor_elif_terminal stmt_list",
 /* 100 */ "preprocessor_else ::= preprocessor_else_terminal stmt_list",
 /* 101 */ "preprocessor_cond ::= preprocessor_ifdef identifier",
 /* 102 */ "preprocessor_cond ::= preprocessor_ifdef typename",
 /* 103 */ "preprocessor_cond ::= preprocessor_if",
 /* 104 */ "stmt_or_defined_macro ::= preprocessor_define",
 /* 105 */ "stmt_or_defined_macro ::= stmt",
 /* 106 */ "stmt ::= preprocessor_include",
 /* 107 */ "stmt ::= whilekwd leftroundbracket expr_prec_10 rightroundbracket stmt",
 /* 108 */ "stmt ::= dokwd stmt whilekwd leftroundbracket expr_prec_11 rightroundbracket semicolon",
 /* 109 */ "stmt ::= FORKWD leftroundbracket expr_prec_11 semicolon expr_prec_11 semicolon expr_prec_11 rightroundbracket stmt",
 /* 110 */ "stmt ::= returnkwd expr_prec_11 SEMICOLON",
 /* 111 */ "stmt ::= returnkwd expr_prec_11 SEMICOLON comment_list",
 /* 112 */ "stmt ::= returnkwd SEMICOLON",
 /* 113 */ "stmt ::= returnkwd SEMICOLON comment_list",
 /* 114 */ "stmt ::= continuekwd SEMICOLON",
 /* 115 */ "stmt ::= continuekwd SEMICOLON comment_list",
 /* 116 */ "stmt ::= gotokwd identifier SEMICOLON",
 /* 117 */ "stmt ::= gotokwd identifier SEMICOLON comment_list",
 /* 118 */ "stmt ::= gotokwd typename SEMICOLON",
 /* 119 */ "stmt ::= gotokwd typename SEMICOLON comment_list",
 /* 120 */ "stmt ::= identifier colon",
 /* 121 */ "stmt ::= try_catch",
 /* 122 */ "try_catch ::= try catch_list",
 /* 123 */ "try ::= trykwd leftfigurebracket rightfigurebracket",
 /* 124 */ "try ::= trykwd leftfigurebracket stmt_list rightfigurebracket",
 /* 125 */ "catch_list ::= catch_list catch",
 /* 126 */ "catch_list ::= catch",
 /* 127 */ "catch ::= catchkwd leftroundbracket expr_prec_11_or_ellipsis rightroundbracket leftfigurebracket rightfigurebracket",
 /* 128 */ "catch ::= catchkwd leftroundbracket expr_prec_11_or_ellipsis rightroundbracket leftfigurebracket stmt_list rightfigurebracket",
 /* 129 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 130 */ "expr_prec_11_or_ellipsis ::= ellipsis",
 /* 131 */ "stmt ::= SEMICOLON",
 /* 132 */ "stmt ::= SEMICOLON comment_list",
 /* 133 */ "stmt ::= switch_stmt",
 /* 134 */ "switch_stmt ::= switchkwd leftroundbracket expr_prec_11 rightroundbracket leftfigurebracket rightfigurebracket",
 /* 135 */ "switch_stmt ::= switchkwd leftroundbracket expr_prec_11 rightroundbracket leftfigurebracket switch_case_list rightfigurebracket",
 /* 136 */ "switch_case_list ::= case",
 /* 137 */ "switch_case_list ::= switch_case_list case",
 /* 138 */ "case ::= casekwd expr_atom colon stmt_list",
 /* 139 */ "case ::= defaultkwd colon stmt_list",
 /* 140 */ "stmt ::= if_then_else",
 /* 141 */ "if_then_else ::= if_then",
 /* 142 */ "if_then_else ::= if_then elsekwd stmt",
 /* 143 */ "if_then ::= ifkwd leftroundbracket expr_prec_11 rightroundbracket stmt",
 /* 144 */ "stmt ::= leftfigurebracket stmt_list rightfigurebracket",
 /* 145 */ "stmt ::= typedef type identifier SEMICOLON",
 /* 146 */ "stmt ::= typedef type identifier SEMICOLON comment_list",
 /* 147 */ "stmt ::= breakkwd SEMICOLON",
 /* 148 */ "stmt ::= breakkwd SEMICOLON comment_list",
 /* 149 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 150 */ "stmt ::= expr_prec_11 SEMICOLON comment_list",
 /* 151 */ "expr_prec_11 ::= newkwd expr_prec_10",
 /* 152 */ "expr_prec_11 ::= delete leftsquarebracket rightsquarebracket expr_prec_10",
 /* 153 */ "expr_prec_11 ::= delete expr_prec_10",
 /* 154 */ "expr_prec_11 ::= type_or_type_with_qualifier lvalue_or_assignment_list",
 /* 155 */ "expr_prec_11 ::= expr_list",
 /* 156 */ "expr_list ::= expr_list comma expr_prec_10",
 /* 157 */ "expr_list ::= expr_prec_10",
 /* 158 */ "type_or_type_with_qualifier ::= type_with_qualifier",
 /* 159 */ "type_or_type_with_qualifier ::= type",
 /* 160 */ "type_with_qualifier ::= varqualifier type",
 /* 161 */ "varqualifier ::= statickwd",
 /* 162 */ "varqualifier ::= externkwd",
 /* 163 */ "varqualifier ::= registerkwd",
 /* 164 */ "varqualifier ::= volatilekwd",
 /* 165 */ "varqualifier ::= friendkwd",
 /* 166 */ "expr_prec_10 ::= expr_prec_9 binaryxor_assign expr_prec_10",
 /* 167 */ "expr_prec_10 ::= expr_prec_9 binaryor_assign expr_prec_10",
 /* 168 */ "expr_prec_10 ::= expr_prec_9 binaryand_assign expr_prec_10",
 /* 169 */ "expr_prec_10 ::= expr_prec_9 rightshift_assign expr_prec_10",
 /* 170 */ "expr_prec_10 ::= expr_prec_9 leftshift_assign expr_prec_10",
 /* 171 */ "expr_prec_10 ::= expr_prec_9 modulo_assign expr_prec_10",
 /* 172 */ "expr_prec_10 ::= expr_prec_9 division_assign expr_prec_10",
 /* 173 */ "expr_prec_10 ::= expr_prec_9 multiply_assign expr_prec_10",
 /* 174 */ "expr_prec_10 ::= expr_prec_9 plus_assign expr_prec_10",
 /* 175 */ "expr_prec_10 ::= expr_prec_9 minus_assign expr_prec_10",
 /* 176 */ "expr_prec_10 ::= expr_prec_9 assign expr_prec_10",
 /* 177 */ "expr_prec_10 ::= expr_prec_9",
 /* 178 */ "expr_prec_9 ::= expr_prec_9 logicaland expr_binary_ops",
 /* 179 */ "expr_prec_9 ::= expr_prec_9 logicalor expr_binary_ops",
 /* 180 */ "expr_prec_9 ::= expr_binary_ops",
 /* 181 */ "expr_binary_ops ::= expr_binary_ops binaryxor expr_or_equal",
 /* 182 */ "expr_binary_ops ::= expr_binary_ops binaryor expr_or_equal",
 /* 183 */ "expr_binary_ops ::= expr_binary_ops ampersand expr_or_equal",
 /* 184 */ "expr_binary_ops ::= expr_or_equal",
 /* 185 */ "expr_or_equal ::= expr_or_equal not_equal expr_prec_8",
 /* 186 */ "expr_or_equal ::= expr_or_equal equal expr_prec_8",
 /* 187 */ "expr_or_equal ::= expr_prec_8",
 /* 188 */ "expr_prec_8 ::= expr_prec_8 lesser_or_equal expr_prec_7",
 /* 189 */ "expr_prec_8 ::= expr_prec_8 greater_or_equal expr_prec_7",
 /* 190 */ "expr_prec_8 ::= expr_prec_8 greater expr_prec_7",
 /* 191 */ "expr_prec_8 ::= expr_prec_8 lesser expr_prec_7",
 /* 192 */ "expr_prec_8 ::= expr_prec_7",
 /* 193 */ "expr_prec_7 ::= expr_prec_7 leftshift expr_prec_6",
 /* 194 */ "expr_prec_7 ::= expr_prec_7 rightshift expr_prec_6",
 /* 195 */ "expr_prec_7 ::= expr_prec_6",
 /* 196 */ "expr_prec_6 ::= expr_prec_6 minus expr_prec_5",
 /* 197 */ "expr_prec_6 ::= expr_prec_6 plus expr_prec_5",
 /* 198 */ "expr_prec_6 ::= expr_prec_5",
 /* 199 */ "expr_prec_5 ::= expr_prec_5 modulosign expr_prec_4",
 /* 200 */ "expr_prec_5 ::= expr_prec_5 division expr_prec_4",
 /* 201 */ "expr_prec_5 ::= expr_prec_5 multiply expr_prec_4",
 /* 202 */ "expr_prec_5 ::= expr_prec_4",
 /* 203 */ "expr_prec_4 ::= try_value_access multiply identifier",
 /* 204 */ "expr_prec_4 ::= try_pointer_access multiply identifier",
 /* 205 */ "expr_prec_4 ::= expr_prec_3",
 /* 206 */ "expr_prec_3 ::= ampersand expr_prec_3",
 /* 207 */ "expr_prec_3 ::= multiply expr_prec_3",
 /* 208 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 209 */ "expr_prec_3 ::= logicalnot expr_prec_3",
 /* 210 */ "expr_prec_3 ::= binarynot expr_prec_3",
 /* 211 */ "expr_prec_3 ::= minus expr_prec_2",
 /* 212 */ "expr_prec_3 ::= plus expr_prec_2",
 /* 213 */ "expr_prec_3 ::= decrement expr_prec_3",
 /* 214 */ "expr_prec_3 ::= increment expr_prec_3",
 /* 215 */ "expr_prec_3 ::= expr_prec_2",
 /* 216 */ "expr_prec_2 ::= try_value_access identifier",
 /* 217 */ "expr_prec_2 ::= try_pointer_access identifier",
 /* 218 */ "expr_prec_2 ::= cpp_style_cast leftroundbracket expr_prec_11 rightroundbracket",
 /* 219 */ "expr_prec_2 ::= expr_prec_2 leftsquarebracket expr_prec_10 rightsquarebracket",
 /* 220 */ "expr_prec_2 ::= expr_prec_2 leftroundbracket expr_list rightroundbracket",
 /* 221 */ "expr_prec_2 ::= expr_prec_2 leftroundbracket rightroundbracket",
 /* 222 */ "expr_prec_2 ::= expr_prec_2 increment",
 /* 223 */ "expr_prec_2 ::= expr_prec_2 decrement",
 /* 224 */ "expr_prec_2 ::= expr_atom",
 /* 225 */ "try_value_access ::= expr_prec_2 dot",
 /* 226 */ "try_pointer_access ::= expr_prec_2 rightarrow",
 /* 227 */ "cpp_style_cast ::= const_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 228 */ "cpp_style_cast ::= static_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 229 */ "cpp_style_cast ::= dynamic_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 230 */ "cpp_style_cast ::= reinterpret_cast lesser type_or_type_ref_or_with_ptr greater",
 /* 231 */ "lvalue_or_assignment_list ::= lvalue_or_assignment",
 /* 232 */ "lvalue_or_assignment_list ::= lvalue_or_assignment_list comma lvalue_or_assignment",
 /* 233 */ "lvalue_or_assignment ::= lvalue",
 /* 234 */ "lvalue_or_assignment ::= lvalue assign expr_prec_10",
 /* 235 */ "lvalue_or_assignment ::= lvalue assign initialization_list",
 /* 236 */ "initialization_list ::= leftfigurebracket rightfigurebracket",
 /* 237 */ "initialization_list ::= leftfigurebracket initialization_list_argument_list rightfigurebracket",
 /* 238 */ "initialization_list_argument_list ::= expr_prec_10",
 /* 239 */ "initialization_list_argument_list ::= initialization_list",
 /* 240 */ "initialization_list_argument_list ::= initialization_list_argument_list comma expr_prec_10",
 /* 241 */ "initialization_list_argument_list ::= initialization_list_argument_list comma initialization_list",
 /* 242 */ "lvalue ::= possibly_identifier_preceded_ref",
 /* 243 */ "lvalue ::= lvalue leftsquarebracket expr_prec_9 rightsquarebracket",
 /* 244 */ "possibly_identifier_preceded_ref ::= ampersand possibly_idenitifer_preceded_ptrs",
 /* 245 */ "possibly_identifier_preceded_ref ::= possibly_idenitifer_preceded_ptrs",
 /* 246 */ "possibly_idenitifer_preceded_ptrs ::= identifier",
 /* 247 */ "possibly_idenitifer_preceded_ptrs ::= multiply possibly_idenitifer_preceded_ptrs",
 /* 248 */ "possibly_idenitifer_preceded_ptrs ::= constkwd multiply possibly_idenitifer_preceded_ptrs",
 /* 249 */ "expr_atom ::= numeric",
 /* 250 */ "expr_atom ::= assignable",
 /* 251 */ "expr_atom ::= character",
 /* 252 */ "expr_atom ::= string",
 /* 253 */ "assignable ::= identifier",
 /* 254 */ "assignable ::= scoped_identifier",
 /* 255 */ "scoped_identifier ::= namespace_resolve identifier",
 /* 256 */ "expr_atom ::= leftroundbracket expr_list rightroundbracket",
 /* 257 */ "expr_atom ::= preprocessor_stringify identifier",
 /* 258 */ "expr_atom ::= preprocessor_stringify typename",
 /* 259 */ "expr_atom ::= identifier preprocessor_concat identifier",
 /* 260 */ "expr_atom ::= identifier preprocessor_concat typename",
 /* 261 */ "expr_atom ::= typename preprocessor_concat identifier",
 /* 262 */ "expr_atom ::= typename preprocessor_concat typename",
 /* 263 */ "expr_atom ::= sizeof leftroundbracket type_or_type_ref_or_with_ptr rightroundbracket",
 /* 264 */ "expr_atom ::= sizeof leftroundbracket expr_atom rightroundbracket",
 /* 265 */ "typecast ::= leftroundbracket type_or_type_ref_or_with_ptr rightroundbracket",
 /* 266 */ "type ::= constkwd non_const_type",
 /* 267 */ "type ::= non_const_type",
 /* 268 */ "non_const_type ::= builtintype",
 /* 269 */ "non_const_type ::= scoped_type",
 /* 270 */ "non_const_type ::= typename_or_instantiated_template_type",
 /* 271 */ "scoped_type ::= namespace_resolve typename template_instantiation_arguments",
 /* 272 */ "scoped_type ::= namespace_resolve typename",
 /* 273 */ "namespace_resolve ::= namespace_resolve instantiated_template_type_on_in_namespace_resolve namespace_resolve_terminal",
 /* 274 */ "namespace_resolve ::= namespace_resolve typename_in_namespace_resolve namespace_resolve_terminal",
 /* 275 */ "typename_in_namespace_resolve ::= typename",
 /* 276 */ "instantiated_template_type_on_in_namespace_resolve ::= typename template_instantiation_arguments",
 /* 277 */ "namespace_resolve ::= instantiated_template_type_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 278 */ "namespace_resolve ::= typename_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 279 */ "namespace_resolve ::= namespace_resolve_terminal typename_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 280 */ "instantiated_template_type_on_start_of_namespace_resolve ::= typename template_instantiation_arguments",
 /* 281 */ "typename_on_start_of_namespace_resolve ::= typename",
 /* 282 */ "typename_or_instantiated_template_type ::= typename",
 /* 283 */ "typename_or_instantiated_template_type ::= typename template_instantiation_arguments",
 /* 284 */ "type_ref_one ::= type ampersand",
 /* 285 */ "type_ref_two ::= type_ref_one ampersand",
 /* 286 */ "type_ref ::= type_ref_one",
 /* 287 */ "type_ref ::= type_ref_two",
 /* 288 */ "type_or_type_ref ::= type",
 /* 289 */ "type_or_type_ref ::= type_ref",
 /* 290 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref",
 /* 291 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr multiply",
 /* 292 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr constkwd multiply",
 /* 293 */ "template_instantiation_argument_list ::= type_or_type_ref_or_with_ptr",
 /* 294 */ "template_instantiation_argument_list ::= expr_atom",
 /* 295 */ "template_instantiation_argument_list ::= template_instantiation_argument_list comma type_or_type_ref_or_with_ptr",
 /* 296 */ "template_instantiation_argument_list ::= template_instantiation_argument_list comma expr_atom",
 /* 297 */ "template_instantiation_arguments_begin ::= lesser",
 /* 298 */ "template_instantiation_arguments_end ::= greater",
 /* 299 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_arguments_end",
 /* 300 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_argument_list template_instantiation_arguments_end",
 /* 301 */ "builtintype ::= void",
 /* 302 */ "builtintype ::= float",
 /* 303 */ "builtintype ::= double",
 /* 304 */ "builtintype ::= long double",
 /* 305 */ "builtintype ::= char",
 /* 306 */ "builtintype ::= signed char",
 /* 307 */ "builtintype ::= unsigned char",
 /* 308 */ "builtintype ::= int",
 /* 309 */ "builtintype ::= signed int",
 /* 310 */ "builtintype ::= unsigned int",
 /* 311 */ "builtintype ::= short int",
 /* 312 */ "builtintype ::= signed short int",
 /* 313 */ "builtintype ::= unsigned short int",
 /* 314 */ "builtintype ::= long int",
 /* 315 */ "builtintype ::= signed long int",
 /* 316 */ "builtintype ::= unsigned long int",
 /* 317 */ "builtintype ::= long long int",
 /* 318 */ "builtintype ::= signed long long int",
 /* 319 */ "builtintype ::= unsigned long long int",
 /* 320 */ "builtintype ::= short",
 /* 321 */ "builtintype ::= signed short",
 /* 322 */ "builtintype ::= unsigned short",
 /* 323 */ "builtintype ::= long",
 /* 324 */ "builtintype ::= signed long",
 /* 325 */ "builtintype ::= unsigned long",
 /* 326 */ "builtintype ::= long long",
 /* 327 */ "builtintype ::= signed long long",
 /* 328 */ "builtintype ::= unsigned long long",
 /* 329 */ "unsigned ::= UNSIGNED",
 /* 330 */ "unsigned ::= UNSIGNED comment_list",
 /* 331 */ "signed ::= SIGNED",
 /* 332 */ "signed ::= SIGNED comment_list",
 /* 333 */ "long ::= LONG",
 /* 334 */ "long ::= LONG comment_list",
 /* 335 */ "short ::= SHORT",
 /* 336 */ "short ::= SHORT comment_list",
 /* 337 */ "int ::= INT",
 /* 338 */ "int ::= INT comment_list",
 /* 339 */ "char ::= CHAR",
 /* 340 */ "char ::= CHAR comment_list",
 /* 341 */ "double ::= DOUBLE",
 /* 342 */ "double ::= DOUBLE comment_list",
 /* 343 */ "float ::= FLOAT",
 /* 344 */ "float ::= FLOAT comment_list",
 /* 345 */ "void ::= VOID",
 /* 346 */ "void ::= VOID comment_list",
 /* 347 */ "greater ::= GREATER",
 /* 348 */ "greater ::= GREATER comment_list",
 /* 349 */ "comma ::= COMMA",
 /* 350 */ "comma ::= COMMA comment_list",
 /* 351 */ "lesser ::= LESSER",
 /* 352 */ "lesser ::= LESSER comment_list",
 /* 353 */ "multiply ::= MULTIPLY",
 /* 354 */ "multiply ::= MULTIPLY comment_list",
 /* 355 */ "ampersand ::= AMPERSAND",
 /* 356 */ "ampersand ::= AMPERSAND comment_list",
 /* 357 */ "constkwd ::= CONSTKWD",
 /* 358 */ "constkwd ::= CONSTKWD comment_list",
 /* 359 */ "typename ::= TYPENAME",
 /* 360 */ "typename ::= TYPENAME comment_list",
 /* 361 */ "namespace_resolve_terminal ::= NAMESPACE_RESOLVE",
 /* 362 */ "namespace_resolve_terminal ::= NAMESPACE_RESOLVE comment_list",
 /* 363 */ "leftroundbracket ::= LEFTROUNDBRACKET",
 /* 364 */ "leftroundbracket ::= LEFTROUNDBRACKET comment_list",
 /* 365 */ "rightroundbracket ::= RIGHTROUNDBRACKET",
 /* 366 */ "rightroundbracket ::= RIGHTROUNDBRACKET comment_list",
 /* 367 */ "sizeof ::= SIZEOF",
 /* 368 */ "sizeof ::= SIZEOF comment_list",
 /* 369 */ "identifier ::= IDENTIFIER",
 /* 370 */ "identifier ::= IDENTIFIER comment_list",
 /* 371 */ "preprocessor_concat ::= PREPROCESSOR_CONCAT",
 /* 372 */ "preprocessor_concat ::= PREPROCESSOR_CONCAT comment_list",
 /* 373 */ "preprocessor_stringify ::= PREPROCESSOR_STRINGIFY",
 /* 374 */ "preprocessor_stringify ::= PREPROCESSOR_STRINGIFY comment_list",
 /* 375 */ "string ::= STRING",
 /* 376 */ "string ::= STRING comment_list",
 /* 377 */ "string ::= string STRING",
 /* 378 */ "string ::= string STRING comment_list",
 /* 379 */ "character ::= CHARACTER",
 /* 380 */ "character ::= CHARACTER comment_list",
 /* 381 */ "numeric ::= NUMERIC",
 /* 382 */ "numeric ::= NUMERIC comment_list",
 /* 383 */ "leftsquarebracket ::= LEFTSQUAREBRACKET",
 /* 384 */ "leftsquarebracket ::= LEFTSQUAREBRACKET comment_list",
 /* 385 */ "rightsquarebracket ::= RIGHTSQUAREBRACKET",
 /* 386 */ "rightsquarebracket ::= RIGHTSQUAREBRACKET comment_list",
 /* 387 */ "leftfigurebracket ::= LEFTFIGUREBRACKET",
 /* 388 */ "leftfigurebracket ::= LEFTFIGUREBRACKET comment_list",
 /* 389 */ "rightfigurebracket ::= RIGHTFIGUREBRACKET",
 /* 390 */ "rightfigurebracket ::= RIGHTFIGUREBRACKET comment_list",
 /* 391 */ "assign ::= ASSIGN",
 /* 392 */ "assign ::= ASSIGN comment_list",
 /* 393 */ "reinterpret_cast ::= REINTERPRET_CAST",
 /* 394 */ "reinterpret_cast ::= REINTERPRET_CAST comment_list",
 /* 395 */ "dynamic_cast ::= DYNAMIC_CAST",
 /* 396 */ "dynamic_cast ::= DYNAMIC_CAST comment_list",
 /* 397 */ "static_cast ::= STATIC_CAST",
 /* 398 */ "static_cast ::= STATIC_CAST comment_list",
 /* 399 */ "const_cast ::= CONST_CAST",
 /* 400 */ "const_cast ::= CONST_CAST comment_list",
 /* 401 */ "rightarrow ::= RIGHTARROW",
 /* 402 */ "rightarrow ::= RIGHTARROW comment_list",
 /* 403 */ "dot ::= DOT",
 /* 404 */ "dot ::= DOT comment_list",
 /* 405 */ "decrement ::= DECREMENT",
 /* 406 */ "decrement ::= DECREMENT comment_list",
 /* 407 */ "increment ::= INCREMENT",
 /* 408 */ "increment ::= INCREMENT comment_list",
 /* 409 */ "plus ::= PLUS",
 /* 410 */ "plus ::= PLUS comment_list",
 /* 411 */ "minus ::= MINUS",
 /* 412 */ "minus ::= MINUS comment_list",
 /* 413 */ "binarynot ::= BINARYNOT",
 /* 414 */ "binarynot ::= BINARYNOT comment_list",
 /* 415 */ "logicalnot ::= LOGICALNOT",
 /* 416 */ "logicalnot ::= LOGICALNOT comment_list",
 /* 417 */ "division ::= DIVISION",
 /* 418 */ "division ::= DIVISION comment_list",
 /* 419 */ "modulosign ::= MODULOSIGN",
 /* 420 */ "modulosign ::= MODULOSIGN comment_list",
 /* 421 */ "rightshift ::= RIGHTSHIFT",
 /* 422 */ "rightshift ::= RIGHTSHIFT comment_list",
 /* 423 */ "leftshift ::= LEFTSHIFT",
 /* 424 */ "leftshift ::= LEFTSHIFT comment_list",
 /* 425 */ "greater_or_equal ::= GREATER_OR_EQUAL",
 /* 426 */ "greater_or_equal ::= GREATER_OR_EQUAL comment_list",
 /* 427 */ "lesser_or_equal ::= LESSER_OR_EQUAL",
 /* 428 */ "lesser_or_equal ::= LESSER_OR_EQUAL comment_list",
 /* 429 */ "equal ::= EQUAL",
 /* 430 */ "equal ::= EQUAL comment_list",
 /* 431 */ "not_equal ::= NOT_EQUAL",
 /* 432 */ "not_equal ::= NOT_EQUAL comment_list",
 /* 433 */ "binaryor ::= BINARYOR",
 /* 434 */ "binaryor ::= BINARYOR comment_list",
 /* 435 */ "binaryxor ::= BINARYXOR",
 /* 436 */ "binaryxor ::= BINARYXOR comment_list",
 /* 437 */ "logicalor ::= LOGICALOR",
 /* 438 */ "logicalor ::= LOGICALOR comment_list",
 /* 439 */ "logicaland ::= LOGICALAND",
 /* 440 */ "logicaland ::= LOGICALAND comment_list",
 /* 441 */ "minus_assign ::= MINUS_ASSIGN",
 /* 442 */ "minus_assign ::= MINUS_ASSIGN comment_list",
 /* 443 */ "plus_assign ::= PLUS_ASSIGN",
 /* 444 */ "plus_assign ::= PLUS_ASSIGN comment_list",
 /* 445 */ "multiply_assign ::= MULTIPLY_ASSIGN",
 /* 446 */ "multiply_assign ::= MULTIPLY_ASSIGN comment_list",
 /* 447 */ "division_assign ::= DIVISION_ASSIGN",
 /* 448 */ "division_assign ::= DIVISION_ASSIGN comment_list",
 /* 449 */ "modulo_assign ::= MODULO_ASSIGN",
 /* 450 */ "modulo_assign ::= MODULO_ASSIGN comment_list",
 /* 451 */ "leftshift_assign ::= LEFTSHIFT_ASSIGN",
 /* 452 */ "leftshift_assign ::= LEFTSHIFT_ASSIGN comment_list",
 /* 453 */ "rightshift_assign ::= RIGHTSHIFT_ASSIGN",
 /* 454 */ "rightshift_assign ::= RIGHTSHIFT_ASSIGN comment_list",
 /* 455 */ "binaryand_assign ::= BINARYAND_ASSIGN",
 /* 456 */ "binaryand_assign ::= BINARYAND_ASSIGN comment_list",
 /* 457 */ "binaryor_assign ::= BINARYOR_ASSIGN",
 /* 458 */ "binaryor_assign ::= BINARYOR_ASSIGN comment_list",
 /* 459 */ "binaryxor_assign ::= BINARYXOR_ASSIGN",
 /* 460 */ "binaryxor_assign ::= BINARYXOR_ASSIGN comment_list",
 /* 461 */ "friendkwd ::= FRIENDKWD",
 /* 462 */ "friendkwd ::= FRIENDKWD comment_list",
 /* 463 */ "volatilekwd ::= VOLATILEKWD",
 /* 464 */ "volatilekwd ::= VOLATILEKWD comment_list",
 /* 465 */ "registerkwd ::= REGISTERKWD",
 /* 466 */ "registerkwd ::= REGISTERKWD comment_list",
 /* 467 */ "externkwd ::= EXTERNKWD",
 /* 468 */ "externkwd ::= EXTERNKWD comment_list",
 /* 469 */ "statickwd ::= STATICKWD",
 /* 470 */ "statickwd ::= STATICKWD comment_list",
 /* 471 */ "delete ::= DELETE",
 /* 472 */ "delete ::= DELETE comment_list",
 /* 473 */ "newkwd ::= NEWKWD",
 /* 474 */ "newkwd ::= NEWKWD comment_list",
 /* 475 */ "breakkwd ::= BREAKKWD",
 /* 476 */ "breakkwd ::= BREAKKWD comment_list",
 /* 477 */ "typedef ::= TYPEDEF",
 /* 478 */ "typedef ::= TYPEDEF comment_list",
 /* 479 */ "ifkwd ::= IFKWD",
 /* 480 */ "ifkwd ::= IFKWD comment_list",
 /* 481 */ "elsekwd ::= ELSEKWD",
 /* 482 */ "elsekwd ::= ELSEKWD comment_list",
 /* 483 */ "defaultkwd ::= DEFAULTKWD",
 /* 484 */ "defaultkwd ::= DEFAULTKWD comment_list",
 /* 485 */ "casekwd ::= CASEKWD",
 /* 486 */ "casekwd ::= CASEKWD comment_list",
 /* 487 */ "colon ::= COLON",
 /* 488 */ "colon ::= COLON comment_list",
 /* 489 */ "switchkwd ::= SWITCHKWD",
 /* 490 */ "switchkwd ::= SWITCHKWD comment_list",
 /* 491 */ "ellipsis ::= ELLIPSIS",
 /* 492 */ "ellipsis ::= ELLIPSIS comment_list",
 /* 493 */ "catchkwd ::= CATCHKWD",
 /* 494 */ "catchkwd ::= CATCHKWD comment_list",
 /* 495 */ "trykwd ::= TRYKWD",
 /* 496 */ "trykwd ::= TRYKWD comment_list",
 /* 497 */ "gotokwd ::= GOTOKWD",
 /* 498 */ "gotokwd ::= GOTOKWD comment_list",
 /* 499 */ "continuekwd ::= CONTINUEKWD",
 /* 500 */ "continuekwd ::= CONTINUEKWD comment_list",
 /* 501 */ "returnkwd ::= RETURNKWD",
 /* 502 */ "returnkwd ::= RETURNKWD comment_list",
 /* 503 */ "semicolon ::= SEMICOLON",
 /* 504 */ "semicolon ::= SEMICOLON comment_list",
 /* 505 */ "dokwd ::= DOKWD",
 /* 506 */ "dokwd ::= DOKWD comment_list",
 /* 507 */ "whilekwd ::= WHILEKWD",
 /* 508 */ "whilekwd ::= WHILEKWD comment_list",
 /* 509 */ "preprocessor_include ::= PREPROCESSOR_INCLUDE",
 /* 510 */ "preprocessor_include ::= PREPROCESSOR_INCLUDE comment_list",
 /* 511 */ "preprocessor_define ::= PREPROCESSOR_DEFINE",
 /* 512 */ "preprocessor_define ::= PREPROCESSOR_DEFINE comment_list",
 /* 513 */ "preprocessor_if ::= PREPROCESSOR_IF",
 /* 514 */ "preprocessor_if ::= PREPROCESSOR_IF comment_list",
 /* 515 */ "preprocessor_ifdef ::= PREPROCESSOR_IFDEF",
 /* 516 */ "preprocessor_ifdef ::= PREPROCESSOR_IFDEF comment_list",
 /* 517 */ "preprocessor_else_terminal ::= PREPROCESSOR_ELSE",
 /* 518 */ "preprocessor_else_terminal ::= PREPROCESSOR_ELSE comment_list",
 /* 519 */ "preprocessor_elif_terminal ::= PREPROCESSOR_ELIF",
 /* 520 */ "preprocessor_elif_terminal ::= PREPROCESSOR_ELIF comment_list",
 /* 521 */ "preprocessor_endif ::= PREPROCESSOR_ENDIF",
 /* 522 */ "preprocessor_endif ::= PREPROCESSOR_ENDIF comment_list",
 /* 523 */ "comment_list ::= comment_list COMMENT",
 /* 524 */ "comment_list ::= COMMENT",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param block_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new block_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 4 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 4 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 2 ),
  array( 'lhs' => 140, 'rhs' => 4 ),
  array( 'lhs' => 140, 'rhs' => 4 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 4 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 151, 'rhs' => 3 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 2 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 3 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 3 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 186, 'rhs' => 2 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 5 ),
  array( 'lhs' => 129, 'rhs' => 7 ),
  array( 'lhs' => 129, 'rhs' => 9 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 4 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 4 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 4 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 205, 'rhs' => 2 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 4 ),
  array( 'lhs' => 207, 'rhs' => 2 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 6 ),
  array( 'lhs' => 209, 'rhs' => 7 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 6 ),
  array( 'lhs' => 213, 'rhs' => 7 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 2 ),
  array( 'lhs' => 216, 'rhs' => 4 ),
  array( 'lhs' => 216, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 3 ),
  array( 'lhs' => 220, 'rhs' => 5 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 4 ),
  array( 'lhs' => 129, 'rhs' => 5 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 199, 'rhs' => 2 ),
  array( 'lhs' => 199, 'rhs' => 4 ),
  array( 'lhs' => 199, 'rhs' => 2 ),
  array( 'lhs' => 199, 'rhs' => 2 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 230, 'rhs' => 3 ),
  array( 'lhs' => 230, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 231, 'rhs' => 2 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 238, 'rhs' => 1 ),
  array( 'lhs' => 251, 'rhs' => 3 ),
  array( 'lhs' => 251, 'rhs' => 3 ),
  array( 'lhs' => 251, 'rhs' => 3 ),
  array( 'lhs' => 251, 'rhs' => 1 ),
  array( 'lhs' => 254, 'rhs' => 3 ),
  array( 'lhs' => 254, 'rhs' => 3 ),
  array( 'lhs' => 254, 'rhs' => 1 ),
  array( 'lhs' => 257, 'rhs' => 3 ),
  array( 'lhs' => 257, 'rhs' => 3 ),
  array( 'lhs' => 257, 'rhs' => 3 ),
  array( 'lhs' => 257, 'rhs' => 3 ),
  array( 'lhs' => 257, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 3 ),
  array( 'lhs' => 143, 'rhs' => 3 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 262, 'rhs' => 3 ),
  array( 'lhs' => 262, 'rhs' => 3 ),
  array( 'lhs' => 262, 'rhs' => 1 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 3 ),
  array( 'lhs' => 265, 'rhs' => 1 ),
  array( 'lhs' => 268, 'rhs' => 3 ),
  array( 'lhs' => 268, 'rhs' => 3 ),
  array( 'lhs' => 268, 'rhs' => 1 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 2 ),
  array( 'lhs' => 272, 'rhs' => 1 ),
  array( 'lhs' => 275, 'rhs' => 2 ),
  array( 'lhs' => 275, 'rhs' => 2 ),
  array( 'lhs' => 275, 'rhs' => 4 ),
  array( 'lhs' => 275, 'rhs' => 4 ),
  array( 'lhs' => 275, 'rhs' => 4 ),
  array( 'lhs' => 275, 'rhs' => 3 ),
  array( 'lhs' => 275, 'rhs' => 2 ),
  array( 'lhs' => 275, 'rhs' => 2 ),
  array( 'lhs' => 275, 'rhs' => 1 ),
  array( 'lhs' => 270, 'rhs' => 2 ),
  array( 'lhs' => 271, 'rhs' => 2 ),
  array( 'lhs' => 278, 'rhs' => 4 ),
  array( 'lhs' => 278, 'rhs' => 4 ),
  array( 'lhs' => 278, 'rhs' => 4 ),
  array( 'lhs' => 278, 'rhs' => 4 ),
  array( 'lhs' => 229, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 3 ),
  array( 'lhs' => 285, 'rhs' => 1 ),
  array( 'lhs' => 285, 'rhs' => 3 ),
  array( 'lhs' => 285, 'rhs' => 3 ),
  array( 'lhs' => 286, 'rhs' => 2 ),
  array( 'lhs' => 286, 'rhs' => 3 ),
  array( 'lhs' => 287, 'rhs' => 1 ),
  array( 'lhs' => 287, 'rhs' => 1 ),
  array( 'lhs' => 287, 'rhs' => 3 ),
  array( 'lhs' => 287, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 162, 'rhs' => 4 ),
  array( 'lhs' => 288, 'rhs' => 2 ),
  array( 'lhs' => 288, 'rhs' => 1 ),
  array( 'lhs' => 289, 'rhs' => 1 ),
  array( 'lhs' => 289, 'rhs' => 2 ),
  array( 'lhs' => 289, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 291, 'rhs' => 1 ),
  array( 'lhs' => 291, 'rhs' => 1 ),
  array( 'lhs' => 294, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 4 ),
  array( 'lhs' => 157, 'rhs' => 4 ),
  array( 'lhs' => 273, 'rhs' => 3 ),
  array( 'lhs' => 161, 'rhs' => 2 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 298, 'rhs' => 1 ),
  array( 'lhs' => 298, 'rhs' => 1 ),
  array( 'lhs' => 298, 'rhs' => 1 ),
  array( 'lhs' => 299, 'rhs' => 3 ),
  array( 'lhs' => 299, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 304, 'rhs' => 1 ),
  array( 'lhs' => 302, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 305, 'rhs' => 2 ),
  array( 'lhs' => 306, 'rhs' => 1 ),
  array( 'lhs' => 300, 'rhs' => 1 ),
  array( 'lhs' => 300, 'rhs' => 2 ),
  array( 'lhs' => 307, 'rhs' => 2 ),
  array( 'lhs' => 308, 'rhs' => 2 ),
  array( 'lhs' => 309, 'rhs' => 1 ),
  array( 'lhs' => 309, 'rhs' => 1 ),
  array( 'lhs' => 310, 'rhs' => 1 ),
  array( 'lhs' => 310, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 311, 'rhs' => 1 ),
  array( 'lhs' => 311, 'rhs' => 1 ),
  array( 'lhs' => 311, 'rhs' => 3 ),
  array( 'lhs' => 311, 'rhs' => 3 ),
  array( 'lhs' => 312, 'rhs' => 1 ),
  array( 'lhs' => 313, 'rhs' => 1 ),
  array( 'lhs' => 301, 'rhs' => 2 ),
  array( 'lhs' => 301, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 4 ),
  array( 'lhs' => 144, 'rhs' => 4 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 320, 'rhs' => 1 ),
  array( 'lhs' => 320, 'rhs' => 2 ),
  array( 'lhs' => 319, 'rhs' => 1 ),
  array( 'lhs' => 319, 'rhs' => 2 ),
  array( 'lhs' => 317, 'rhs' => 1 ),
  array( 'lhs' => 317, 'rhs' => 2 ),
  array( 'lhs' => 322, 'rhs' => 1 ),
  array( 'lhs' => 322, 'rhs' => 2 ),
  array( 'lhs' => 321, 'rhs' => 1 ),
  array( 'lhs' => 321, 'rhs' => 2 ),
  array( 'lhs' => 318, 'rhs' => 1 ),
  array( 'lhs' => 318, 'rhs' => 2 ),
  array( 'lhs' => 316, 'rhs' => 1 ),
  array( 'lhs' => 316, 'rhs' => 2 ),
  array( 'lhs' => 315, 'rhs' => 1 ),
  array( 'lhs' => 315, 'rhs' => 2 ),
  array( 'lhs' => 314, 'rhs' => 1 ),
  array( 'lhs' => 314, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 2 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 303, 'rhs' => 1 ),
  array( 'lhs' => 303, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 297, 'rhs' => 1 ),
  array( 'lhs' => 297, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 296, 'rhs' => 1 ),
  array( 'lhs' => 296, 'rhs' => 2 ),
  array( 'lhs' => 295, 'rhs' => 1 ),
  array( 'lhs' => 295, 'rhs' => 2 ),
  array( 'lhs' => 293, 'rhs' => 1 ),
  array( 'lhs' => 293, 'rhs' => 2 ),
  array( 'lhs' => 293, 'rhs' => 2 ),
  array( 'lhs' => 293, 'rhs' => 3 ),
  array( 'lhs' => 292, 'rhs' => 1 ),
  array( 'lhs' => 292, 'rhs' => 2 ),
  array( 'lhs' => 290, 'rhs' => 1 ),
  array( 'lhs' => 290, 'rhs' => 2 ),
  array( 'lhs' => 227, 'rhs' => 1 ),
  array( 'lhs' => 227, 'rhs' => 2 ),
  array( 'lhs' => 228, 'rhs' => 1 ),
  array( 'lhs' => 228, 'rhs' => 2 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 249, 'rhs' => 1 ),
  array( 'lhs' => 249, 'rhs' => 2 ),
  array( 'lhs' => 284, 'rhs' => 1 ),
  array( 'lhs' => 284, 'rhs' => 2 ),
  array( 'lhs' => 283, 'rhs' => 1 ),
  array( 'lhs' => 283, 'rhs' => 2 ),
  array( 'lhs' => 282, 'rhs' => 1 ),
  array( 'lhs' => 282, 'rhs' => 2 ),
  array( 'lhs' => 281, 'rhs' => 1 ),
  array( 'lhs' => 281, 'rhs' => 2 ),
  array( 'lhs' => 280, 'rhs' => 1 ),
  array( 'lhs' => 280, 'rhs' => 2 ),
  array( 'lhs' => 279, 'rhs' => 1 ),
  array( 'lhs' => 279, 'rhs' => 2 ),
  array( 'lhs' => 276, 'rhs' => 1 ),
  array( 'lhs' => 276, 'rhs' => 2 ),
  array( 'lhs' => 277, 'rhs' => 1 ),
  array( 'lhs' => 277, 'rhs' => 2 ),
  array( 'lhs' => 266, 'rhs' => 1 ),
  array( 'lhs' => 266, 'rhs' => 2 ),
  array( 'lhs' => 264, 'rhs' => 1 ),
  array( 'lhs' => 264, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 274, 'rhs' => 1 ),
  array( 'lhs' => 274, 'rhs' => 2 ),
  array( 'lhs' => 269, 'rhs' => 1 ),
  array( 'lhs' => 269, 'rhs' => 2 ),
  array( 'lhs' => 267, 'rhs' => 1 ),
  array( 'lhs' => 267, 'rhs' => 2 ),
  array( 'lhs' => 263, 'rhs' => 1 ),
  array( 'lhs' => 263, 'rhs' => 2 ),
  array( 'lhs' => 261, 'rhs' => 1 ),
  array( 'lhs' => 261, 'rhs' => 2 ),
  array( 'lhs' => 260, 'rhs' => 1 ),
  array( 'lhs' => 260, 'rhs' => 2 ),
  array( 'lhs' => 259, 'rhs' => 1 ),
  array( 'lhs' => 259, 'rhs' => 2 ),
  array( 'lhs' => 258, 'rhs' => 1 ),
  array( 'lhs' => 258, 'rhs' => 2 ),
  array( 'lhs' => 256, 'rhs' => 1 ),
  array( 'lhs' => 256, 'rhs' => 2 ),
  array( 'lhs' => 255, 'rhs' => 1 ),
  array( 'lhs' => 255, 'rhs' => 2 ),
  array( 'lhs' => 253, 'rhs' => 1 ),
  array( 'lhs' => 253, 'rhs' => 2 ),
  array( 'lhs' => 252, 'rhs' => 1 ),
  array( 'lhs' => 252, 'rhs' => 2 ),
  array( 'lhs' => 250, 'rhs' => 1 ),
  array( 'lhs' => 250, 'rhs' => 2 ),
  array( 'lhs' => 248, 'rhs' => 1 ),
  array( 'lhs' => 248, 'rhs' => 2 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 2 ),
  array( 'lhs' => 246, 'rhs' => 1 ),
  array( 'lhs' => 246, 'rhs' => 2 ),
  array( 'lhs' => 245, 'rhs' => 1 ),
  array( 'lhs' => 245, 'rhs' => 2 ),
  array( 'lhs' => 244, 'rhs' => 1 ),
  array( 'lhs' => 244, 'rhs' => 2 ),
  array( 'lhs' => 243, 'rhs' => 1 ),
  array( 'lhs' => 243, 'rhs' => 2 ),
  array( 'lhs' => 242, 'rhs' => 1 ),
  array( 'lhs' => 242, 'rhs' => 2 ),
  array( 'lhs' => 241, 'rhs' => 1 ),
  array( 'lhs' => 241, 'rhs' => 2 ),
  array( 'lhs' => 240, 'rhs' => 1 ),
  array( 'lhs' => 240, 'rhs' => 2 ),
  array( 'lhs' => 239, 'rhs' => 1 ),
  array( 'lhs' => 239, 'rhs' => 2 ),
  array( 'lhs' => 237, 'rhs' => 1 ),
  array( 'lhs' => 237, 'rhs' => 2 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 236, 'rhs' => 2 ),
  array( 'lhs' => 235, 'rhs' => 1 ),
  array( 'lhs' => 235, 'rhs' => 2 ),
  array( 'lhs' => 234, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 2 ),
  array( 'lhs' => 233, 'rhs' => 1 ),
  array( 'lhs' => 233, 'rhs' => 2 ),
  array( 'lhs' => 226, 'rhs' => 1 ),
  array( 'lhs' => 226, 'rhs' => 2 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 2 ),
  array( 'lhs' => 224, 'rhs' => 1 ),
  array( 'lhs' => 224, 'rhs' => 2 ),
  array( 'lhs' => 223, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 2 ),
  array( 'lhs' => 222, 'rhs' => 1 ),
  array( 'lhs' => 222, 'rhs' => 2 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 221, 'rhs' => 2 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 218, 'rhs' => 2 ),
  array( 'lhs' => 217, 'rhs' => 1 ),
  array( 'lhs' => 217, 'rhs' => 2 ),
  array( 'lhs' => 204, 'rhs' => 1 ),
  array( 'lhs' => 204, 'rhs' => 2 ),
  array( 'lhs' => 214, 'rhs' => 1 ),
  array( 'lhs' => 214, 'rhs' => 2 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 2 ),
  array( 'lhs' => 210, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 2 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 1 ),
  array( 'lhs' => 195, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 2 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 192, 'rhs' => 2 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 179, 'rhs' => 2 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        8 => 6,
        7 => 7,
        9 => 9,
        10 => 10,
        19 => 10,
        23 => 10,
        24 => 10,
        25 => 10,
        26 => 10,
        27 => 10,
        31 => 10,
        32 => 10,
        33 => 10,
        34 => 10,
        37 => 10,
        40 => 10,
        43 => 10,
        44 => 10,
        45 => 10,
        46 => 10,
        51 => 10,
        63 => 10,
        65 => 10,
        68 => 10,
        89 => 10,
        91 => 10,
        155 => 10,
        158 => 10,
        159 => 10,
        231 => 10,
        233 => 10,
        238 => 10,
        239 => 10,
        242 => 10,
        245 => 10,
        246 => 10,
        254 => 10,
        268 => 10,
        269 => 10,
        270 => 10,
        282 => 10,
        286 => 10,
        287 => 10,
        288 => 10,
        289 => 10,
        290 => 10,
        293 => 10,
        294 => 10,
        329 => 10,
        331 => 10,
        333 => 10,
        335 => 10,
        337 => 10,
        339 => 10,
        341 => 10,
        343 => 10,
        345 => 10,
        347 => 10,
        349 => 10,
        351 => 10,
        353 => 10,
        355 => 10,
        357 => 10,
        359 => 10,
        361 => 10,
        363 => 10,
        365 => 10,
        367 => 10,
        369 => 10,
        371 => 10,
        373 => 10,
        375 => 10,
        379 => 10,
        381 => 10,
        383 => 10,
        385 => 10,
        387 => 10,
        389 => 10,
        391 => 10,
        393 => 10,
        395 => 10,
        397 => 10,
        399 => 10,
        401 => 10,
        403 => 10,
        405 => 10,
        407 => 10,
        409 => 10,
        411 => 10,
        413 => 10,
        415 => 10,
        417 => 10,
        419 => 10,
        421 => 10,
        423 => 10,
        425 => 10,
        427 => 10,
        429 => 10,
        431 => 10,
        433 => 10,
        435 => 10,
        475 => 10,
        477 => 10,
        479 => 10,
        481 => 10,
        483 => 10,
        485 => 10,
        487 => 10,
        489 => 10,
        491 => 10,
        493 => 10,
        495 => 10,
        497 => 10,
        499 => 10,
        501 => 10,
        503 => 10,
        505 => 10,
        507 => 10,
        509 => 10,
        511 => 10,
        513 => 10,
        515 => 10,
        517 => 10,
        519 => 10,
        521 => 10,
        524 => 10,
        11 => 11,
        12 => 12,
        16 => 12,
        13 => 13,
        17 => 13,
        14 => 14,
        15 => 15,
        18 => 18,
        20 => 20,
        21 => 21,
        22 => 21,
        28 => 28,
        29 => 29,
        30 => 30,
        35 => 35,
        36 => 36,
        38 => 38,
        39 => 39,
        180 => 39,
        184 => 39,
        437 => 39,
        439 => 39,
        441 => 39,
        443 => 39,
        445 => 39,
        447 => 39,
        449 => 39,
        451 => 39,
        453 => 39,
        455 => 39,
        457 => 39,
        459 => 39,
        461 => 39,
        463 => 39,
        465 => 39,
        467 => 39,
        469 => 39,
        471 => 39,
        473 => 39,
        41 => 41,
        42 => 42,
        47 => 47,
        267 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        58 => 58,
        59 => 59,
        60 => 60,
        61 => 61,
        62 => 62,
        69 => 62,
        64 => 64,
        66 => 66,
        67 => 67,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        90 => 90,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 101,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        118 => 116,
        117 => 117,
        119 => 117,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        132 => 132,
        133 => 133,
        140 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        156 => 156,
        157 => 157,
        177 => 157,
        187 => 157,
        192 => 157,
        195 => 157,
        198 => 157,
        202 => 157,
        205 => 157,
        215 => 157,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        175 => 175,
        176 => 176,
        178 => 178,
        179 => 179,
        181 => 181,
        182 => 182,
        183 => 183,
        185 => 185,
        186 => 186,
        188 => 188,
        189 => 189,
        190 => 190,
        191 => 191,
        193 => 193,
        194 => 194,
        196 => 196,
        197 => 197,
        199 => 199,
        200 => 200,
        201 => 201,
        203 => 203,
        204 => 203,
        206 => 206,
        207 => 207,
        208 => 208,
        209 => 209,
        210 => 210,
        211 => 211,
        212 => 212,
        213 => 213,
        214 => 214,
        216 => 216,
        217 => 216,
        218 => 218,
        219 => 219,
        220 => 220,
        221 => 221,
        222 => 222,
        223 => 223,
        224 => 224,
        225 => 225,
        226 => 226,
        227 => 227,
        228 => 228,
        229 => 229,
        230 => 230,
        232 => 232,
        234 => 234,
        235 => 234,
        236 => 236,
        237 => 237,
        240 => 240,
        241 => 240,
        243 => 243,
        244 => 244,
        247 => 247,
        248 => 248,
        249 => 249,
        251 => 249,
        252 => 249,
        253 => 249,
        250 => 250,
        255 => 255,
        256 => 256,
        257 => 257,
        258 => 257,
        259 => 259,
        260 => 259,
        261 => 259,
        262 => 259,
        263 => 263,
        264 => 264,
        265 => 265,
        266 => 266,
        271 => 271,
        272 => 272,
        273 => 273,
        274 => 274,
        275 => 275,
        276 => 276,
        277 => 277,
        278 => 277,
        279 => 279,
        280 => 280,
        281 => 281,
        283 => 283,
        284 => 284,
        285 => 285,
        291 => 291,
        292 => 292,
        295 => 295,
        296 => 296,
        297 => 297,
        298 => 298,
        299 => 299,
        300 => 300,
        301 => 301,
        302 => 302,
        303 => 303,
        304 => 304,
        305 => 305,
        306 => 306,
        307 => 307,
        308 => 308,
        309 => 309,
        310 => 310,
        311 => 311,
        312 => 312,
        313 => 313,
        314 => 314,
        315 => 315,
        316 => 316,
        317 => 317,
        318 => 318,
        319 => 319,
        320 => 320,
        321 => 321,
        322 => 322,
        323 => 323,
        324 => 324,
        325 => 325,
        326 => 326,
        327 => 327,
        328 => 328,
        330 => 330,
        332 => 332,
        334 => 334,
        336 => 336,
        338 => 338,
        340 => 340,
        342 => 342,
        344 => 344,
        346 => 346,
        348 => 348,
        350 => 350,
        352 => 352,
        354 => 354,
        356 => 356,
        358 => 358,
        360 => 360,
        362 => 362,
        364 => 364,
        366 => 366,
        368 => 368,
        370 => 370,
        372 => 372,
        374 => 374,
        376 => 376,
        377 => 376,
        378 => 378,
        380 => 380,
        382 => 382,
        384 => 384,
        386 => 386,
        388 => 388,
        390 => 390,
        392 => 392,
        394 => 394,
        396 => 396,
        398 => 398,
        400 => 400,
        402 => 402,
        404 => 404,
        406 => 406,
        408 => 406,
        410 => 410,
        412 => 412,
        414 => 414,
        416 => 416,
        418 => 418,
        420 => 420,
        422 => 422,
        424 => 424,
        426 => 426,
        428 => 428,
        430 => 430,
        432 => 432,
        434 => 434,
        436 => 434,
        438 => 438,
        440 => 440,
        442 => 442,
        444 => 444,
        446 => 446,
        448 => 448,
        450 => 450,
        452 => 452,
        454 => 454,
        456 => 456,
        458 => 458,
        460 => 460,
        462 => 462,
        464 => 464,
        466 => 464,
        468 => 464,
        470 => 470,
        472 => 472,
        474 => 472,
        476 => 476,
        478 => 478,
        480 => 480,
        482 => 482,
        484 => 484,
        486 => 486,
        488 => 488,
        490 => 490,
        492 => 492,
        494 => 494,
        496 => 496,
        498 => 498,
        500 => 500,
        502 => 502,
        504 => 504,
        506 => 506,
        508 => 508,
        510 => 510,
        512 => 512,
        514 => 514,
        516 => 516,
        518 => 518,
        520 => 520,
        522 => 522,
        523 => 523,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 88 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 6177 "langs_src/parser_cpp_language.php"
#line 104 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6183 "langs_src/parser_cpp_language.php"
#line 109 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6189 "langs_src/parser_cpp_language.php"
#line 114 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->mapper->push_anonymous_type();
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6195 "langs_src/parser_cpp_language.php"
#line 119 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6203 "langs_src/parser_cpp_language.php"
#line 126 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('namespace', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6209 "langs_src/parser_cpp_language.php"
#line 131 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6215 "langs_src/parser_cpp_language.php"
#line 136 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6221 "langs_src/parser_cpp_language.php"
#line 146 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6227 "langs_src/parser_cpp_language.php"
#line 153 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6232 "langs_src/parser_cpp_language.php"
#line 157 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_constructable($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value(), $this->mapper->extract_template_parameters($this->yystack[$this->yyidx + -1]->minor));
	$this->_retvalue = $this->create_node('identified_type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6240 "langs_src/parser_cpp_language.php"
#line 164 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6246 "langs_src/parser_cpp_language.php"
#line 169 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6252 "langs_src/parser_cpp_language.php"
#line 174 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6258 "langs_src/parser_cpp_language.php"
#line 179 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->mapper->push_anonymous_type($this->mapper->extract_template_parameters($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6264 "langs_src/parser_cpp_language.php"
#line 198 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6270 "langs_src/parser_cpp_language.php"
#line 207 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6277 "langs_src/parser_cpp_language.php"
#line 213 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6284 "langs_src/parser_cpp_language.php"
#line 246 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6290 "langs_src/parser_cpp_language.php"
#line 251 "langs_src/parser_cpp_language.y"
    function yy_r29(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6296 "langs_src/parser_cpp_language.php"
#line 257 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6302 "langs_src/parser_cpp_language.php"
#line 278 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6309 "langs_src/parser_cpp_language.php"
#line 284 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6316 "langs_src/parser_cpp_language.php"
#line 294 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6322 "langs_src/parser_cpp_language.php"
#line 301 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6327 "langs_src/parser_cpp_language.php"
#line 309 "langs_src/parser_cpp_language.y"
    function yy_r41(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6333 "langs_src/parser_cpp_language.php"
#line 314 "langs_src/parser_cpp_language.y"
    function yy_r42(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6339 "langs_src/parser_cpp_language.php"
#line 335 "langs_src/parser_cpp_language.y"
    function yy_r47(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6344 "langs_src/parser_cpp_language.php"
#line 342 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6350 "langs_src/parser_cpp_language.php"
#line 347 "langs_src/parser_cpp_language.y"
    function yy_r49(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6356 "langs_src/parser_cpp_language.php"
#line 352 "langs_src/parser_cpp_language.y"
    function yy_r50(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6362 "langs_src/parser_cpp_language.php"
#line 361 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6368 "langs_src/parser_cpp_language.php"
#line 366 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6374 "langs_src/parser_cpp_language.php"
#line 372 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('enum_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6381 "langs_src/parser_cpp_language.php"
#line 378 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6387 "langs_src/parser_cpp_language.php"
#line 383 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6393 "langs_src/parser_cpp_language.php"
#line 388 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6399 "langs_src/parser_cpp_language.php"
#line 393 "langs_src/parser_cpp_language.y"
    function yy_r58(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6405 "langs_src/parser_cpp_language.php"
#line 398 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6411 "langs_src/parser_cpp_language.php"
#line 405 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6417 "langs_src/parser_cpp_language.php"
#line 410 "langs_src/parser_cpp_language.y"
    function yy_r61(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6423 "langs_src/parser_cpp_language.php"
#line 415 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('function_definition_without_type', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6429 "langs_src/parser_cpp_language.php"
#line 424 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6435 "langs_src/parser_cpp_language.php"
#line 433 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6441 "langs_src/parser_cpp_language.php"
#line 438 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6447 "langs_src/parser_cpp_language.php"
#line 455 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6453 "langs_src/parser_cpp_language.php"
#line 461 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6459 "langs_src/parser_cpp_language.php"
#line 467 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('destructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6465 "langs_src/parser_cpp_language.php"
#line 475 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('outer_constructor_name', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6472 "langs_src/parser_cpp_language.php"
#line 481 "langs_src/parser_cpp_language.y"
    function yy_r74(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, E));
    }
#line 6479 "langs_src/parser_cpp_language.php"
#line 488 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6486 "langs_src/parser_cpp_language.php"
#line 494 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->mapper->clear_lookup_namespace();
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('outer_destructor_name', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6493 "langs_src/parser_cpp_language.php"
#line 501 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6499 "langs_src/parser_cpp_language.php"
#line 507 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6505 "langs_src/parser_cpp_language.php"
#line 512 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6511 "langs_src/parser_cpp_language.php"
#line 517 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6517 "langs_src/parser_cpp_language.php"
#line 522 "langs_src/parser_cpp_language.y"
    function yy_r81(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6523 "langs_src/parser_cpp_language.php"
#line 527 "langs_src/parser_cpp_language.y"
    function yy_r82(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6529 "langs_src/parser_cpp_language.php"
#line 535 "langs_src/parser_cpp_language.y"
    function yy_r83(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6535 "langs_src/parser_cpp_language.php"
#line 540 "langs_src/parser_cpp_language.y"
    function yy_r84(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6541 "langs_src/parser_cpp_language.php"
#line 545 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6547 "langs_src/parser_cpp_language.php"
#line 550 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6553 "langs_src/parser_cpp_language.php"
#line 555 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6559 "langs_src/parser_cpp_language.php"
#line 560 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6565 "langs_src/parser_cpp_language.php"
#line 569 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6571 "langs_src/parser_cpp_language.php"
#line 581 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6577 "langs_src/parser_cpp_language.php"
#line 586 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6583 "langs_src/parser_cpp_language.php"
#line 591 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6589 "langs_src/parser_cpp_language.php"
#line 596 "langs_src/parser_cpp_language.y"
    function yy_r95(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6595 "langs_src/parser_cpp_language.php"
#line 601 "langs_src/parser_cpp_language.y"
    function yy_r96(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6601 "langs_src/parser_cpp_language.php"
#line 606 "langs_src/parser_cpp_language.y"
    function yy_r97(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6607 "langs_src/parser_cpp_language.php"
#line 611 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6613 "langs_src/parser_cpp_language.php"
#line 616 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6619 "langs_src/parser_cpp_language.php"
#line 621 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6625 "langs_src/parser_cpp_language.php"
#line 626 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 6631 "langs_src/parser_cpp_language.php"
#line 636 "langs_src/parser_cpp_language.y"
    function yy_r103(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 6637 "langs_src/parser_cpp_language.php"
#line 641 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 6643 "langs_src/parser_cpp_language.php"
#line 646 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6649 "langs_src/parser_cpp_language.php"
#line 651 "langs_src/parser_cpp_language.y"
    function yy_r106(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6655 "langs_src/parser_cpp_language.php"
#line 663 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6661 "langs_src/parser_cpp_language.php"
#line 675 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6667 "langs_src/parser_cpp_language.php"
#line 688 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6673 "langs_src/parser_cpp_language.php"
#line 696 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6679 "langs_src/parser_cpp_language.php"
#line 701 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6685 "langs_src/parser_cpp_language.php"
#line 707 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6691 "langs_src/parser_cpp_language.php"
#line 712 "langs_src/parser_cpp_language.y"
    function yy_r113(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6697 "langs_src/parser_cpp_language.php"
#line 720 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6703 "langs_src/parser_cpp_language.php"
#line 725 "langs_src/parser_cpp_language.y"
    function yy_r115(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6709 "langs_src/parser_cpp_language.php"
#line 732 "langs_src/parser_cpp_language.y"
    function yy_r116(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6715 "langs_src/parser_cpp_language.php"
#line 737 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6721 "langs_src/parser_cpp_language.php"
#line 752 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6727 "langs_src/parser_cpp_language.php"
#line 759 "langs_src/parser_cpp_language.y"
    function yy_r121(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6733 "langs_src/parser_cpp_language.php"
#line 764 "langs_src/parser_cpp_language.y"
    function yy_r122(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6739 "langs_src/parser_cpp_language.php"
#line 769 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6745 "langs_src/parser_cpp_language.php"
#line 774 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6751 "langs_src/parser_cpp_language.php"
#line 779 "langs_src/parser_cpp_language.y"
    function yy_r125(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6757 "langs_src/parser_cpp_language.php"
#line 784 "langs_src/parser_cpp_language.y"
    function yy_r126(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6763 "langs_src/parser_cpp_language.php"
#line 789 "langs_src/parser_cpp_language.y"
    function yy_r127(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6769 "langs_src/parser_cpp_language.php"
#line 794 "langs_src/parser_cpp_language.y"
    function yy_r128(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6775 "langs_src/parser_cpp_language.php"
#line 799 "langs_src/parser_cpp_language.y"
    function yy_r129(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6781 "langs_src/parser_cpp_language.php"
#line 804 "langs_src/parser_cpp_language.y"
    function yy_r130(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6787 "langs_src/parser_cpp_language.php"
#line 811 "langs_src/parser_cpp_language.y"
    function yy_r131(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6793 "langs_src/parser_cpp_language.php"
#line 816 "langs_src/parser_cpp_language.y"
    function yy_r132(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6799 "langs_src/parser_cpp_language.php"
#line 823 "langs_src/parser_cpp_language.y"
    function yy_r133(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6805 "langs_src/parser_cpp_language.php"
#line 828 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6811 "langs_src/parser_cpp_language.php"
#line 833 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6817 "langs_src/parser_cpp_language.php"
#line 838 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6823 "langs_src/parser_cpp_language.php"
#line 843 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6829 "langs_src/parser_cpp_language.php"
#line 848 "langs_src/parser_cpp_language.y"
    function yy_r138(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6835 "langs_src/parser_cpp_language.php"
#line 853 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6841 "langs_src/parser_cpp_language.php"
#line 865 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 6847 "langs_src/parser_cpp_language.php"
#line 870 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6853 "langs_src/parser_cpp_language.php"
#line 875 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6859 "langs_src/parser_cpp_language.php"
#line 882 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6865 "langs_src/parser_cpp_language.php"
#line 887 "langs_src/parser_cpp_language.y"
    function yy_r145(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 6872 "langs_src/parser_cpp_language.php"
#line 893 "langs_src/parser_cpp_language.y"
    function yy_r146(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
    }
#line 6879 "langs_src/parser_cpp_language.php"
#line 900 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6885 "langs_src/parser_cpp_language.php"
#line 905 "langs_src/parser_cpp_language.y"
    function yy_r148(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6891 "langs_src/parser_cpp_language.php"
#line 910 "langs_src/parser_cpp_language.y"
    function yy_r149(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6897 "langs_src/parser_cpp_language.php"
#line 915 "langs_src/parser_cpp_language.y"
    function yy_r150(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6903 "langs_src/parser_cpp_language.php"
#line 922 "langs_src/parser_cpp_language.y"
    function yy_r151(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('new_kwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6909 "langs_src/parser_cpp_language.php"
#line 927 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_array', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6915 "langs_src/parser_cpp_language.php"
#line 932 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_pointer', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6921 "langs_src/parser_cpp_language.php"
#line 938 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменных", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6927 "langs_src/parser_cpp_language.php"
#line 949 "langs_src/parser_cpp_language.y"
    function yy_r156(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6933 "langs_src/parser_cpp_language.php"
#line 954 "langs_src/parser_cpp_language.y"
    function yy_r157(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6939 "langs_src/parser_cpp_language.php"
#line 969 "langs_src/parser_cpp_language.y"
    function yy_r160(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 6946 "langs_src/parser_cpp_language.php"
#line 975 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6952 "langs_src/parser_cpp_language.php"
#line 980 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6958 "langs_src/parser_cpp_language.php"
#line 985 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6964 "langs_src/parser_cpp_language.php"
#line 990 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6970 "langs_src/parser_cpp_language.php"
#line 995 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6976 "langs_src/parser_cpp_language.php"
#line 1002 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryxor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6982 "langs_src/parser_cpp_language.php"
#line 1007 "langs_src/parser_cpp_language.y"
    function yy_r167(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6988 "langs_src/parser_cpp_language.php"
#line 1012 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryand_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6994 "langs_src/parser_cpp_language.php"
#line 1017 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7000 "langs_src/parser_cpp_language.php"
#line 1022 "langs_src/parser_cpp_language.y"
    function yy_r170(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7006 "langs_src/parser_cpp_language.php"
#line 1027 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulo_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7012 "langs_src/parser_cpp_language.php"
#line 1032 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7018 "langs_src/parser_cpp_language.php"
#line 1037 "langs_src/parser_cpp_language.y"
    function yy_r173(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7024 "langs_src/parser_cpp_language.php"
#line 1042 "langs_src/parser_cpp_language.y"
    function yy_r174(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7030 "langs_src/parser_cpp_language.php"
#line 1047 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7036 "langs_src/parser_cpp_language.php"
#line 1052 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7042 "langs_src/parser_cpp_language.php"
#line 1064 "langs_src/parser_cpp_language.y"
    function yy_r178(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7048 "langs_src/parser_cpp_language.php"
#line 1069 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7054 "langs_src/parser_cpp_language.php"
#line 1078 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_xor', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7060 "langs_src/parser_cpp_language.php"
#line 1083 "langs_src/parser_cpp_language.y"
    function yy_r182(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7066 "langs_src/parser_cpp_language.php"
#line 1088 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	// Well, that's what you get when you mix binary and and adress taking
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7073 "langs_src/parser_cpp_language.php"
#line 1098 "langs_src/parser_cpp_language.y"
    function yy_r185(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_notequal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7079 "langs_src/parser_cpp_language.php"
#line 1103 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7085 "langs_src/parser_cpp_language.php"
#line 1115 "langs_src/parser_cpp_language.y"
    function yy_r188(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7091 "langs_src/parser_cpp_language.php"
#line 1120 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7097 "langs_src/parser_cpp_language.php"
#line 1125 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7103 "langs_src/parser_cpp_language.php"
#line 1130 "langs_src/parser_cpp_language.y"
    function yy_r191(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7109 "langs_src/parser_cpp_language.php"
#line 1142 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7115 "langs_src/parser_cpp_language.php"
#line 1147 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7121 "langs_src/parser_cpp_language.php"
#line 1159 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7127 "langs_src/parser_cpp_language.php"
#line 1164 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7133 "langs_src/parser_cpp_language.php"
#line 1176 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulosign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7139 "langs_src/parser_cpp_language.php"
#line 1181 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7145 "langs_src/parser_cpp_language.php"
#line 1186 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7151 "langs_src/parser_cpp_language.php"
#line 1198 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_get_property', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7157 "langs_src/parser_cpp_language.php"
#line 1215 "langs_src/parser_cpp_language.y"
    function yy_r206(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_take_adress', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7163 "langs_src/parser_cpp_language.php"
#line 1220 "langs_src/parser_cpp_language.y"
    function yy_r207(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_dereference', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7169 "langs_src/parser_cpp_language.php"
#line 1225 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_typecast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7175 "langs_src/parser_cpp_language.php"
#line 1230 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7181 "langs_src/parser_cpp_language.php"
#line 1235 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7187 "langs_src/parser_cpp_language.php"
#line 1240 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7193 "langs_src/parser_cpp_language.php"
#line 1245 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7199 "langs_src/parser_cpp_language.php"
#line 1250 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7205 "langs_src/parser_cpp_language.php"
#line 1255 "langs_src/parser_cpp_language.y"
    function yy_r214(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7211 "langs_src/parser_cpp_language.php"
#line 1267 "langs_src/parser_cpp_language.y"
    function yy_r216(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_property_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7217 "langs_src/parser_cpp_language.php"
#line 1277 "langs_src/parser_cpp_language.y"
    function yy_r218(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7223 "langs_src/parser_cpp_language.php"
#line 1282 "langs_src/parser_cpp_language.y"
    function yy_r219(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7229 "langs_src/parser_cpp_language.php"
#line 1287 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7235 "langs_src/parser_cpp_language.php"
#line 1292 "langs_src/parser_cpp_language.y"
    function yy_r221(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7241 "langs_src/parser_cpp_language.php"
#line 1297 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_postfix_increment', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7247 "langs_src/parser_cpp_language.php"
#line 1302 "langs_src/parser_cpp_language.y"
    function yy_r223(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_postfix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7253 "langs_src/parser_cpp_language.php"
#line 1307 "langs_src/parser_cpp_language.y"
    function yy_r224(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7259 "langs_src/parser_cpp_language.php"
#line 1314 "langs_src/parser_cpp_language.y"
    function yy_r225(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7265 "langs_src/parser_cpp_language.php"
#line 1319 "langs_src/parser_cpp_language.y"
    function yy_r226(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 7271 "langs_src/parser_cpp_language.php"
#line 1326 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_const_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7277 "langs_src/parser_cpp_language.php"
#line 1331 "langs_src/parser_cpp_language.y"
    function yy_r228(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_static_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7283 "langs_src/parser_cpp_language.php"
#line 1336 "langs_src/parser_cpp_language.y"
    function yy_r229(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_dynamic_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7289 "langs_src/parser_cpp_language.php"
#line 1341 "langs_src/parser_cpp_language.y"
    function yy_r230(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_reinterpret_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7295 "langs_src/parser_cpp_language.php"
#line 1352 "langs_src/parser_cpp_language.y"
    function yy_r232(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue_or_assignment_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7301 "langs_src/parser_cpp_language.php"
#line 1361 "langs_src/parser_cpp_language.y"
    function yy_r234(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7307 "langs_src/parser_cpp_language.php"
#line 1371 "langs_src/parser_cpp_language.y"
    function yy_r236(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7313 "langs_src/parser_cpp_language.php"
#line 1376 "langs_src/parser_cpp_language.y"
    function yy_r237(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7319 "langs_src/parser_cpp_language.php"
#line 1390 "langs_src/parser_cpp_language.y"
    function yy_r240(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('initialization_list_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, C));
    }
#line 7325 "langs_src/parser_cpp_language.php"
#line 1404 "langs_src/parser_cpp_language.y"
    function yy_r243(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7331 "langs_src/parser_cpp_language.php"
#line 1409 "langs_src/parser_cpp_language.y"
    function yy_r244(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7337 "langs_src/parser_cpp_language.php"
#line 1422 "langs_src/parser_cpp_language.y"
    function yy_r247(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7343 "langs_src/parser_cpp_language.php"
#line 1427 "langs_src/parser_cpp_language.y"
    function yy_r248(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7349 "langs_src/parser_cpp_language.php"
#line 1435 "langs_src/parser_cpp_language.y"
    function yy_r249(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7355 "langs_src/parser_cpp_language.php"
#line 1440 "langs_src/parser_cpp_language.y"
    function yy_r250(){
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7360 "langs_src/parser_cpp_language.php"
#line 1463 "langs_src/parser_cpp_language.y"
    function yy_r255(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('scoped_identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7366 "langs_src/parser_cpp_language.php"
#line 1469 "langs_src/parser_cpp_language.y"
    function yy_r256(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_brackets', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7372 "langs_src/parser_cpp_language.php"
#line 1474 "langs_src/parser_cpp_language.y"
    function yy_r257(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_stringify', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7378 "langs_src/parser_cpp_language.php"
#line 1484 "langs_src/parser_cpp_language.y"
    function yy_r259(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_concat', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7384 "langs_src/parser_cpp_language.php"
#line 1506 "langs_src/parser_cpp_language.y"
    function yy_r263(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7390 "langs_src/parser_cpp_language.php"
#line 1511 "langs_src/parser_cpp_language.y"
    function yy_r264(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7396 "langs_src/parser_cpp_language.php"
#line 1518 "langs_src/parser_cpp_language.y"
    function yy_r265(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('c_style_typecast_operator', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 7403 "langs_src/parser_cpp_language.php"
#line 1526 "langs_src/parser_cpp_language.y"
    function yy_r266(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7409 "langs_src/parser_cpp_language.php"
#line 1547 "langs_src/parser_cpp_language.y"
    function yy_r271(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7416 "langs_src/parser_cpp_language.php"
#line 1553 "langs_src/parser_cpp_language.y"
    function yy_r272(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -1]->minor,  $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7423 "langs_src/parser_cpp_language.php"
#line 1559 "langs_src/parser_cpp_language.y"
    function yy_r273(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7429 "langs_src/parser_cpp_language.php"
#line 1564 "langs_src/parser_cpp_language.y"
    function yy_r274(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7435 "langs_src/parser_cpp_language.php"
#line 1569 "langs_src/parser_cpp_language.y"
    function yy_r275(){
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7441 "langs_src/parser_cpp_language.php"
#line 1574 "langs_src/parser_cpp_language.y"
    function yy_r276(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7448 "langs_src/parser_cpp_language.php"
#line 1580 "langs_src/parser_cpp_language.y"
    function yy_r277(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7454 "langs_src/parser_cpp_language.php"
#line 1591 "langs_src/parser_cpp_language.y"
    function yy_r279(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7460 "langs_src/parser_cpp_language.php"
#line 1596 "langs_src/parser_cpp_language.y"
    function yy_r280(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7468 "langs_src/parser_cpp_language.php"
#line 1603 "langs_src/parser_cpp_language.y"
    function yy_r281(){
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7475 "langs_src/parser_cpp_language.php"
#line 1615 "langs_src/parser_cpp_language.y"
    function yy_r283(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7481 "langs_src/parser_cpp_language.php"
#line 1623 "langs_src/parser_cpp_language.y"
    function yy_r284(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак  ссылки"));
	$this->_retvalue = $this->create_node('type_ref', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7487 "langs_src/parser_cpp_language.php"
#line 1628 "langs_src/parser_cpp_language.y"
    function yy_r285(){
	$this->yystack[$this->yyidx + -1]->minor->add_child($this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 7493 "langs_src/parser_cpp_language.php"
#line 1653 "langs_src/parser_cpp_language.y"
    function yy_r291(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7499 "langs_src/parser_cpp_language.php"
#line 1658 "langs_src/parser_cpp_language.y"
    function yy_r292(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7505 "langs_src/parser_cpp_language.php"
#line 1673 "langs_src/parser_cpp_language.y"
    function yy_r295(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_instantiation_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7511 "langs_src/parser_cpp_language.php"
#line 1678 "langs_src/parser_cpp_language.y"
    function yy_r296(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7517 "langs_src/parser_cpp_language.php"
#line 1683 "langs_src/parser_cpp_language.y"
    function yy_r297(){
	$this->mapper->start_new_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7523 "langs_src/parser_cpp_language.php"
#line 1688 "langs_src/parser_cpp_language.y"
    function yy_r298(){
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 7529 "langs_src/parser_cpp_language.php"
#line 1693 "langs_src/parser_cpp_language.y"
    function yy_r299(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7535 "langs_src/parser_cpp_language.php"
#line 1698 "langs_src/parser_cpp_language.y"
    function yy_r300(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "%ur(именительный)", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7541 "langs_src/parser_cpp_language.php"
#line 1705 "langs_src/parser_cpp_language.y"
    function yy_r301(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя пустого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7547 "langs_src/parser_cpp_language.php"
#line 1713 "langs_src/parser_cpp_language.y"
    function yy_r302(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой одинарной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7553 "langs_src/parser_cpp_language.php"
#line 1718 "langs_src/parser_cpp_language.y"
    function yy_r303(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7559 "langs_src/parser_cpp_language.php"
#line 1723 "langs_src/parser_cpp_language.y"
    function yy_r304(){
    $this->currentrule = new block_formal_langs_description_rule("имя длинного типа c плавающей запятой двойной точности", array("признак длинного числа", "имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7565 "langs_src/parser_cpp_language.php"
#line 1731 "langs_src/parser_cpp_language.y"
    function yy_r305(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя символьного типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7571 "langs_src/parser_cpp_language.php"
#line 1736 "langs_src/parser_cpp_language.y"
    function yy_r306(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый символьный тип", array("признак знаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7577 "langs_src/parser_cpp_language.php"
#line 1741 "langs_src/parser_cpp_language.y"
    function yy_r307(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый символьный тип", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7583 "langs_src/parser_cpp_language.php"
#line 1749 "langs_src/parser_cpp_language.y"
    function yy_r308(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7589 "langs_src/parser_cpp_language.php"
#line 1754 "langs_src/parser_cpp_language.y"
    function yy_r309(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый целый тип", array("признак знаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7595 "langs_src/parser_cpp_language.php"
#line 1759 "langs_src/parser_cpp_language.y"
    function yy_r310(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый целый тип", array("признак беззнаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7601 "langs_src/parser_cpp_language.php"
#line 1764 "langs_src/parser_cpp_language.y"
    function yy_r311(){
    $this->currentrule = new block_formal_langs_description_rule("короткий целый тип", array("признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7607 "langs_src/parser_cpp_language.php"
#line 1769 "langs_src/parser_cpp_language.y"
    function yy_r312(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7613 "langs_src/parser_cpp_language.php"
#line 1774 "langs_src/parser_cpp_language.y"
    function yy_r313(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7619 "langs_src/parser_cpp_language.php"
#line 1779 "langs_src/parser_cpp_language.y"
    function yy_r314(){
    $this->currentrule = new block_formal_langs_description_rule("длинный целый тип", array("признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7625 "langs_src/parser_cpp_language.php"
#line 1784 "langs_src/parser_cpp_language.y"
    function yy_r315(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целый тип", array("признак знаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7631 "langs_src/parser_cpp_language.php"
#line 1789 "langs_src/parser_cpp_language.y"
    function yy_r316(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целый тип", array("признак беззнаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7637 "langs_src/parser_cpp_language.php"
#line 1794 "langs_src/parser_cpp_language.y"
    function yy_r317(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7643 "langs_src/parser_cpp_language.php"
#line 1800 "langs_src/parser_cpp_language.y"
    function yy_r318(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7649 "langs_src/parser_cpp_language.php"
#line 1805 "langs_src/parser_cpp_language.y"
    function yy_r319(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7655 "langs_src/parser_cpp_language.php"
#line 1813 "langs_src/parser_cpp_language.y"
    function yy_r320(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7661 "langs_src/parser_cpp_language.php"
#line 1818 "langs_src/parser_cpp_language.y"
    function yy_r321(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7667 "langs_src/parser_cpp_language.php"
#line 1823 "langs_src/parser_cpp_language.y"
    function yy_r322(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7673 "langs_src/parser_cpp_language.php"
#line 1830 "langs_src/parser_cpp_language.y"
    function yy_r323(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7679 "langs_src/parser_cpp_language.php"
#line 1835 "langs_src/parser_cpp_language.y"
    function yy_r324(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целвый тип", array("признак знаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7685 "langs_src/parser_cpp_language.php"
#line 1840 "langs_src/parser_cpp_language.y"
    function yy_r325(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целвый тип", array("признак беззнаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7691 "langs_src/parser_cpp_language.php"
#line 1847 "langs_src/parser_cpp_language.y"
    function yy_r326(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7697 "langs_src/parser_cpp_language.php"
#line 1852 "langs_src/parser_cpp_language.y"
    function yy_r327(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7703 "langs_src/parser_cpp_language.php"
#line 1857 "langs_src/parser_cpp_language.y"
    function yy_r328(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 7709 "langs_src/parser_cpp_language.php"
#line 1870 "langs_src/parser_cpp_language.y"
    function yy_r330(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('unsigned', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7715 "langs_src/parser_cpp_language.php"
#line 1879 "langs_src/parser_cpp_language.y"
    function yy_r332(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('signed', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7721 "langs_src/parser_cpp_language.php"
#line 1888 "langs_src/parser_cpp_language.y"
    function yy_r334(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('long', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7727 "langs_src/parser_cpp_language.php"
#line 1897 "langs_src/parser_cpp_language.y"
    function yy_r336(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('short', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7733 "langs_src/parser_cpp_language.php"
#line 1906 "langs_src/parser_cpp_language.y"
    function yy_r338(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('int', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7739 "langs_src/parser_cpp_language.php"
#line 1915 "langs_src/parser_cpp_language.y"
    function yy_r340(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('char', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7745 "langs_src/parser_cpp_language.php"
#line 1924 "langs_src/parser_cpp_language.y"
    function yy_r342(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('double', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7751 "langs_src/parser_cpp_language.php"
#line 1933 "langs_src/parser_cpp_language.y"
    function yy_r344(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('float', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7757 "langs_src/parser_cpp_language.php"
#line 1942 "langs_src/parser_cpp_language.y"
    function yy_r346(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('void', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7763 "langs_src/parser_cpp_language.php"
#line 1951 "langs_src/parser_cpp_language.y"
    function yy_r348(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('greater', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7769 "langs_src/parser_cpp_language.php"
#line 1960 "langs_src/parser_cpp_language.y"
    function yy_r350(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('comma', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7775 "langs_src/parser_cpp_language.php"
#line 1969 "langs_src/parser_cpp_language.y"
    function yy_r352(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('lesser', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7781 "langs_src/parser_cpp_language.php"
#line 1978 "langs_src/parser_cpp_language.y"
    function yy_r354(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('multiply', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7787 "langs_src/parser_cpp_language.php"
#line 1987 "langs_src/parser_cpp_language.y"
    function yy_r356(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ampersand', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7793 "langs_src/parser_cpp_language.php"
#line 1996 "langs_src/parser_cpp_language.y"
    function yy_r358(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('constkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7799 "langs_src/parser_cpp_language.php"
#line 2005 "langs_src/parser_cpp_language.y"
    function yy_r360(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typename', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7805 "langs_src/parser_cpp_language.php"
#line 2014 "langs_src/parser_cpp_language.y"
    function yy_r362(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('namespace_resolve_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7811 "langs_src/parser_cpp_language.php"
#line 2023 "langs_src/parser_cpp_language.y"
    function yy_r364(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftroundbracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7817 "langs_src/parser_cpp_language.php"
#line 2032 "langs_src/parser_cpp_language.y"
    function yy_r366(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightroundbracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7823 "langs_src/parser_cpp_language.php"
#line 2041 "langs_src/parser_cpp_language.y"
    function yy_r368(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7829 "langs_src/parser_cpp_language.php"
#line 2050 "langs_src/parser_cpp_language.y"
    function yy_r370(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7835 "langs_src/parser_cpp_language.php"
#line 2059 "langs_src/parser_cpp_language.y"
    function yy_r372(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_concat_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7841 "langs_src/parser_cpp_language.php"
#line 2068 "langs_src/parser_cpp_language.y"
    function yy_r374(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_stringify_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7847 "langs_src/parser_cpp_language.php"
#line 2078 "langs_src/parser_cpp_language.y"
    function yy_r376(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('string', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7853 "langs_src/parser_cpp_language.php"
#line 2088 "langs_src/parser_cpp_language.y"
    function yy_r378(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue = $this->create_node('string', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7859 "langs_src/parser_cpp_language.php"
#line 2097 "langs_src/parser_cpp_language.y"
    function yy_r380(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('character', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7865 "langs_src/parser_cpp_language.php"
#line 2106 "langs_src/parser_cpp_language.y"
    function yy_r382(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('numeric', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7871 "langs_src/parser_cpp_language.php"
#line 2115 "langs_src/parser_cpp_language.y"
    function yy_r384(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftsquarebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7877 "langs_src/parser_cpp_language.php"
#line 2124 "langs_src/parser_cpp_language.y"
    function yy_r386(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightsquarebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7883 "langs_src/parser_cpp_language.php"
#line 2133 "langs_src/parser_cpp_language.y"
    function yy_r388(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftfigurebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7889 "langs_src/parser_cpp_language.php"
#line 2142 "langs_src/parser_cpp_language.y"
    function yy_r390(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightfigurebracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7895 "langs_src/parser_cpp_language.php"
#line 2151 "langs_src/parser_cpp_language.y"
    function yy_r392(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7901 "langs_src/parser_cpp_language.php"
#line 2160 "langs_src/parser_cpp_language.y"
    function yy_r394(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('reinterpret_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7907 "langs_src/parser_cpp_language.php"
#line 2169 "langs_src/parser_cpp_language.y"
    function yy_r396(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dynamic_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7913 "langs_src/parser_cpp_language.php"
#line 2178 "langs_src/parser_cpp_language.y"
    function yy_r398(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('static_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7919 "langs_src/parser_cpp_language.php"
#line 2187 "langs_src/parser_cpp_language.y"
    function yy_r400(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('const_cast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7925 "langs_src/parser_cpp_language.php"
#line 2196 "langs_src/parser_cpp_language.y"
    function yy_r402(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightarrow', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7931 "langs_src/parser_cpp_language.php"
#line 2205 "langs_src/parser_cpp_language.y"
    function yy_r404(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7937 "langs_src/parser_cpp_language.php"
#line 2214 "langs_src/parser_cpp_language.y"
    function yy_r406(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7943 "langs_src/parser_cpp_language.php"
#line 2232 "langs_src/parser_cpp_language.y"
    function yy_r410(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7949 "langs_src/parser_cpp_language.php"
#line 2241 "langs_src/parser_cpp_language.y"
    function yy_r412(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7955 "langs_src/parser_cpp_language.php"
#line 2250 "langs_src/parser_cpp_language.y"
    function yy_r414(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binarynot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7961 "langs_src/parser_cpp_language.php"
#line 2259 "langs_src/parser_cpp_language.y"
    function yy_r416(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicalnot', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7967 "langs_src/parser_cpp_language.php"
#line 2268 "langs_src/parser_cpp_language.y"
    function yy_r418(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('division', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7973 "langs_src/parser_cpp_language.php"
#line 2277 "langs_src/parser_cpp_language.y"
    function yy_r420(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('modulosign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7979 "langs_src/parser_cpp_language.php"
#line 2286 "langs_src/parser_cpp_language.y"
    function yy_r422(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightshift', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7985 "langs_src/parser_cpp_language.php"
#line 2295 "langs_src/parser_cpp_language.y"
    function yy_r424(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftshift', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7991 "langs_src/parser_cpp_language.php"
#line 2304 "langs_src/parser_cpp_language.y"
    function yy_r426(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('greater_or_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 7997 "langs_src/parser_cpp_language.php"
#line 2313 "langs_src/parser_cpp_language.y"
    function yy_r428(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('lesser_or_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8003 "langs_src/parser_cpp_language.php"
#line 2322 "langs_src/parser_cpp_language.y"
    function yy_r430(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8009 "langs_src/parser_cpp_language.php"
#line 2331 "langs_src/parser_cpp_language.y"
    function yy_r432(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('not_equal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8015 "langs_src/parser_cpp_language.php"
#line 2340 "langs_src/parser_cpp_language.y"
    function yy_r434(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryor', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8021 "langs_src/parser_cpp_language.php"
#line 2358 "langs_src/parser_cpp_language.y"
    function yy_r438(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicalor', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8027 "langs_src/parser_cpp_language.php"
#line 2367 "langs_src/parser_cpp_language.y"
    function yy_r440(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('logicaland', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8033 "langs_src/parser_cpp_language.php"
#line 2376 "langs_src/parser_cpp_language.y"
    function yy_r442(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('minus_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8039 "langs_src/parser_cpp_language.php"
#line 2385 "langs_src/parser_cpp_language.y"
    function yy_r444(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('plus_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8045 "langs_src/parser_cpp_language.php"
#line 2394 "langs_src/parser_cpp_language.y"
    function yy_r446(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('multiply_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8051 "langs_src/parser_cpp_language.php"
#line 2403 "langs_src/parser_cpp_language.y"
    function yy_r448(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('division_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8057 "langs_src/parser_cpp_language.php"
#line 2412 "langs_src/parser_cpp_language.y"
    function yy_r450(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('modulo_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8063 "langs_src/parser_cpp_language.php"
#line 2421 "langs_src/parser_cpp_language.y"
    function yy_r452(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftshift_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8069 "langs_src/parser_cpp_language.php"
#line 2430 "langs_src/parser_cpp_language.y"
    function yy_r454(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightshift_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8075 "langs_src/parser_cpp_language.php"
#line 2439 "langs_src/parser_cpp_language.y"
    function yy_r456(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryand_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8081 "langs_src/parser_cpp_language.php"
#line 2448 "langs_src/parser_cpp_language.y"
    function yy_r458(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryor_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8087 "langs_src/parser_cpp_language.php"
#line 2457 "langs_src/parser_cpp_language.y"
    function yy_r460(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('binaryxor_assign', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8093 "langs_src/parser_cpp_language.php"
#line 2466 "langs_src/parser_cpp_language.y"
    function yy_r462(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('friendkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8099 "langs_src/parser_cpp_language.php"
#line 2475 "langs_src/parser_cpp_language.y"
    function yy_r464(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('volatilekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8105 "langs_src/parser_cpp_language.php"
#line 2502 "langs_src/parser_cpp_language.y"
    function yy_r470(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('statickwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8111 "langs_src/parser_cpp_language.php"
#line 2511 "langs_src/parser_cpp_language.y"
    function yy_r472(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('delete', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8117 "langs_src/parser_cpp_language.php"
#line 2529 "langs_src/parser_cpp_language.y"
    function yy_r476(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('breakkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8123 "langs_src/parser_cpp_language.php"
#line 2538 "langs_src/parser_cpp_language.y"
    function yy_r478(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typedef', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8129 "langs_src/parser_cpp_language.php"
#line 2547 "langs_src/parser_cpp_language.y"
    function yy_r480(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ifkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8135 "langs_src/parser_cpp_language.php"
#line 2556 "langs_src/parser_cpp_language.y"
    function yy_r482(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('elsekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8141 "langs_src/parser_cpp_language.php"
#line 2565 "langs_src/parser_cpp_language.y"
    function yy_r484(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('defaultkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8147 "langs_src/parser_cpp_language.php"
#line 2574 "langs_src/parser_cpp_language.y"
    function yy_r486(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('casekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8153 "langs_src/parser_cpp_language.php"
#line 2583 "langs_src/parser_cpp_language.y"
    function yy_r488(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('colon', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8159 "langs_src/parser_cpp_language.php"
#line 2592 "langs_src/parser_cpp_language.y"
    function yy_r490(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('switchkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8165 "langs_src/parser_cpp_language.php"
#line 2601 "langs_src/parser_cpp_language.y"
    function yy_r492(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ellipsis', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8171 "langs_src/parser_cpp_language.php"
#line 2610 "langs_src/parser_cpp_language.y"
    function yy_r494(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('catchkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8177 "langs_src/parser_cpp_language.php"
#line 2619 "langs_src/parser_cpp_language.y"
    function yy_r496(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('trykwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8183 "langs_src/parser_cpp_language.php"
#line 2628 "langs_src/parser_cpp_language.y"
    function yy_r498(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('gotokwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8189 "langs_src/parser_cpp_language.php"
#line 2637 "langs_src/parser_cpp_language.y"
    function yy_r500(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('continuekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8195 "langs_src/parser_cpp_language.php"
#line 2646 "langs_src/parser_cpp_language.y"
    function yy_r502(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('returnkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8201 "langs_src/parser_cpp_language.php"
#line 2655 "langs_src/parser_cpp_language.y"
    function yy_r504(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('semicolon', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8207 "langs_src/parser_cpp_language.php"
#line 2664 "langs_src/parser_cpp_language.y"
    function yy_r506(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('dokwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8213 "langs_src/parser_cpp_language.php"
#line 2673 "langs_src/parser_cpp_language.y"
    function yy_r508(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('whilekwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8219 "langs_src/parser_cpp_language.php"
#line 2682 "langs_src/parser_cpp_language.y"
    function yy_r510(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_include', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8225 "langs_src/parser_cpp_language.php"
#line 2691 "langs_src/parser_cpp_language.y"
    function yy_r512(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_define', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8231 "langs_src/parser_cpp_language.php"
#line 2700 "langs_src/parser_cpp_language.y"
    function yy_r514(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_if', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8237 "langs_src/parser_cpp_language.php"
#line 2709 "langs_src/parser_cpp_language.y"
    function yy_r516(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_ifdef', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8243 "langs_src/parser_cpp_language.php"
#line 2718 "langs_src/parser_cpp_language.y"
    function yy_r518(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_else_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8249 "langs_src/parser_cpp_language.php"
#line 2727 "langs_src/parser_cpp_language.y"
    function yy_r520(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_elif_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8255 "langs_src/parser_cpp_language.php"
#line 2736 "langs_src/parser_cpp_language.y"
    function yy_r522(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_endif', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8261 "langs_src/parser_cpp_language.php"
#line 2743 "langs_src/parser_cpp_language.y"
    function yy_r523(){
	$this->currentrule = new block_formal_langs_description_rule("список комментариев", array("%s", "%s"));
	$this->_retvalue = $this->create_node('comment_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 8267 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //block_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 40 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 8412 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
