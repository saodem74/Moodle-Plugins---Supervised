<?php
/* Driver template for the PHP_block_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class block_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof block_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof block_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof block_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof block_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class block_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 3 "langs_src/parser_cpp_language.y"

require_once($CFG->dirroot.'/blocks/formal_langs/descriptions/descriptionrule.php');
#line 102 "langs_src/parser_cpp_language.php"

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 107 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 6 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 145 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const NOTEQUAL                       =  3;
    const EQUAL                          =  4;
    const LOGICALAND                     =  5;
    const BINARYAND                      =  6;
    const BINARYOR                       =  7;
    const LOGICALOR                      =  8;
    const AMPERSAND                      =  9;
    const BINARYXOR                      = 10;
    const UINDIRECTION                   = 11;
    const UADRESS                        = 12;
    const NAMESPACE_RESOLVE              = 13;
    const UMINUS                         = 14;
    const UPLUS                          = 15;
    const UBRACKET                       = 16;
    const TYPEUNARY                      = 17;
    const MACROPARAMETERPRIORITY         = 18;
    const NAMESPACEKWD                   = 19;
    const IDENTIFIER                     = 20;
    const LEFTFIGUREBRACKET              = 21;
    const RIGHTFIGUREBRACKET             = 22;
    const SEMICOLON                      = 23;
    const COMMA                          = 24;
    const ASSIGN                         = 25;
    const TYPENAMEKWD                    = 26;
    const CLASSKWD                       = 27;
    const STRUCTKWD                      = 28;
    const ENUMKWD                        = 29;
    const TEMPLATEKWD                    = 30;
    const LESSER                         = 31;
    const GREATER                        = 32;
    const UNIONKWD                       = 33;
    const COLON                          = 34;
    const PUBLICKWD                      = 35;
    const PROTECTEDKWD                   = 36;
    const PRIVATEKWD                     = 37;
    const SIGNALSKWD                     = 38;
    const SLOTSKWD                       = 39;
    const CONSTKWD                       = 40;
    const MULTIPLY                       = 41;
    const OPERATOROVERLOADDECLARATION    = 42;
    const TYPENAME                       = 43;
    const BINARYNOT                      = 44;
    const OUTER_CONSTRUCTOR_NAME         = 45;
    const LEFTROUNDBRACKET               = 46;
    const RIGHTROUNDBRACKET              = 47;
    const PREPROCESSOR_ENDIF             = 48;
    const PREPROCESSOR_ELIF              = 49;
    const PREPROCESSOR_ELSE              = 50;
    const PREPROCESSOR_IFDEF             = 51;
    const CUSTOMTYPENAME                 = 52;
    const PREPROCESSOR_IF                = 53;
    const PREPROCESSOR_DEFINE            = 54;
    const PREPROCESSOR_INCLUDE           = 55;
    const WHILEKWD                       = 56;
    const DOKWD                          = 57;
    const FORKWD                         = 58;
    const RETURNKWD                      = 59;
    const CONTINUEKWD                    = 60;
    const GOTOKWD                        = 61;
    const TRYKWD                         = 62;
    const CATCHKWD                       = 63;
    const ELLIPSIS                       = 64;
    const SWITCHKWD                      = 65;
    const CASEKWD                        = 66;
    const DEFAULTKWD                     = 67;
    const IFKWD                          = 68;
    const TYPEDEF                        = 69;
    const BREAKKWD                       = 70;
    const NEWKWD                         = 71;
    const DELETE                         = 72;
    const LEFTSQUAREBRACKET              = 73;
    const RIGHTSQUAREBRACKET             = 74;
    const STATICKWD                      = 75;
    const EXTERNKWD                      = 76;
    const REGISTERKWD                    = 77;
    const VOLATILEKWD                    = 78;
    const FRIENDKWD                      = 79;
    const BINARYXOR_ASSIGN               = 80;
    const BINARYOR_ASSIGN                = 81;
    const BINARYAND_ASSIGN               = 82;
    const RIGHTSHIFT_ASSIGN              = 83;
    const LEFTSHIFT_ASSIGN               = 84;
    const MODULO_ASSIGN                  = 85;
    const DIVISION_ASSIGN                = 86;
    const MULTIPLY_ASSIGN                = 87;
    const PLUS_ASSIGN                    = 88;
    const MINUS_ASSIGN                   = 89;
    const NOT_EQUAL                      = 90;
    const LESSER_OR_EQUAL                = 91;
    const GREATER_OR_EQUAL               = 92;
    const LEFTSHIFT                      = 93;
    const RIGHTSHIFT                     = 94;
    const MINUS                          = 95;
    const PLUS                           = 96;
    const MODULOSIGN                     = 97;
    const DIVISION                       = 98;
    const LOGICALNOT                     = 99;
    const DECREMENT                      = 100;
    const INCREMENT                      = 101;
    const DOT                            = 102;
    const RIGHTARROW                     = 103;
    const CONST_CAST                     = 104;
    const STATIC_CAST                    = 105;
    const DYNAMIC_CAST                   = 106;
    const REINTERPRET_CAST               = 107;
    const NUMERIC                        = 108;
    const CHARACTER                      = 109;
    const STRING                         = 110;
    const PREPROCESSOR_STRINGIFY         = 111;
    const PREPROCESSOR_CONCAT            = 112;
    const SIZEOF                         = 113;
    const VOID                           = 114;
    const FLOAT                          = 115;
    const DOUBLE                         = 116;
    const LONG                           = 117;
    const CHAR                           = 118;
    const SIGNED                         = 119;
    const UNSIGNED                       = 120;
    const INT                            = 121;
    const SHORT                          = 122;
    const YY_NO_ACTION = 881;
    const YY_ACCEPT_ACTION = 880;
    const YY_ERROR_ACTION = 879;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 6977;
static public $yy_action = array(
 /*     0 */    97,  209,  426,  294,  162,  425,  306,  407,  198,  554,
 /*    10 */   273,  216,   12,  315,  343,  404,  283,  432,  481,  480,
 /*    20 */   143,  269,  243,  528,  479,   83,  338,  332,  331,  239,
 /*    30 */   141,  105,   92,  233,  113,   96,  513,   30,  131,  228,
 /*    40 */   312,    6,  218,  321,  344,  345,  359,  230,   24,  242,
 /*    50 */    31,  225,  206,  288,  517,   41,  248,  551,  558,  259,
 /*    60 */   102,  256,   47,   45,  283,  432,  542,  541,  540,  539,
 /*    70 */   543,  493,  271,  130,  428,  448,  501,  334,  324,  189,
 /*    80 */   410,   84,   85,  409,  296,  357,  100,   99,  354,   69,
 /*    90 */    94,   91,   90,   74,   75,  280,  251,  301,  287,  427,
 /*   100 */   398,  397,  188,   62,  291,  406,  421,  420,  182,  423,
 /*   110 */   170,  171,  412,  295,   97,  208,  473,  270,  162,  459,
 /*   120 */   475,   72,  551,  558,  273,  216,   12,  316,  343,  107,
 /*   130 */   266,   41,  481,  480,  143,  269,  152,  508,  479,  161,
 /*   140 */   338,  332,  331,  132,  499,  105,   92,  361,  113,   96,
 /*   150 */   831,   30,   69,   76,   73,  191,  218,   36,  344,  345,
 /*   160 */   359,  230,   24,  242,   31,  225,  206,  288,  428,   66,
 /*   170 */   248,   67,   65,  259,  102,  256,   47,   45,   71,   62,
 /*   180 */   542,  541,  540,  539,  543,    1,  536,  447,  456,  458,
 /*   190 */   457,  107,  266,  320,  257,  258,   68,  336,  340,   33,
 /*   200 */   100,   99,  481,  480,   94,   91,   90,  544,  479,  280,
 /*   210 */   251,  301,  287,  427,  398,  397,  188,  831,  291,  406,
 /*   220 */   421,  420,  182,  423,  170,  171,  412,  295,   97,  302,
 /*   230 */   459,  307,  162,   79,   80,  428,  283,  432,  273,  216,
 /*   240 */    12,  268,  343,  533,  439,  548,  481,  480,  143,  269,
 /*   250 */    69,  524,  479,   43,  132,  491,   42,  330,  324,  105,
 /*   260 */    92,  303,  113,   96,   70,   30,   69,  378,   11,    9,
 /*   270 */   218,  433,  344,  345,  359,  230,   24,  242,   31,  225,
 /*   280 */   206,  288,   63,   48,  248,   64,  831,  259,  102,  256,
 /*   290 */    47,   45,  284,   62,  542,  541,  540,  539,  543,  386,
 /*   300 */   458,  457,  144,  555,  428,  257,  258,  235,  413,  224,
 /*   310 */   461,  468,  460,  454,  100,   99,  283,  432,   94,   91,
 /*   320 */    90,  198,   54,  280,  251,  301,  287,  427,  398,  397,
 /*   330 */   188,   50,  291,  406,  421,  420,  182,  423,  170,  171,
 /*   340 */   412,  295,   97,   27,  459,  395,  162,  131,  228,  312,
 /*   350 */   255,  552,  273,  216,   12,  348,  343,  153,  371,  250,
 /*   360 */   481,  480,  143,  269,  831,  297,  479,  557,  132,  417,
 /*   370 */   551,  558,  455,  105,   92,  145,  113,   96,  374,   30,
 /*   380 */   283,  432,  428,  530,  218,  191,  344,  345,  359,  230,
 /*   390 */    24,  242,   31,  225,  206,  288,   54,   69,  248,  322,
 /*   400 */   324,  259,  102,  256,   47,   45,  529,  263,  542,  541,
 /*   410 */   540,  539,  543,  386,  458,  457,   78,   68,  428,  257,
 /*   420 */   258,  325,  438,  270,  527,  263,  475,  108,  100,   99,
 /*   430 */    81,   82,   94,   91,   90,   68,  472,  280,  251,  301,
 /*   440 */   287,  427,  398,  397,  188,  383,  291,  406,  421,  420,
 /*   450 */   182,  423,  170,  171,  412,  295,   97,  351,  503,  531,
 /*   460 */   162,  554,  512,  191,  559,  324,  273,  216,   12,  372,
 /*   470 */   343,  437,  285,  396,  481,  480,  143,  269,  283,  432,
 /*   480 */   479,  290,  115,  136,  244,  129,  414,  105,   92,  347,
 /*   490 */   113,   96,  282,   30,  283,  432,  400,  404,  218,  191,
 /*   500 */   344,  345,  359,  230,   24,  242,   31,  225,  206,  288,
 /*   510 */   550,  471,  248,  441,  274,  259,  102,  256,   47,   45,
 /*   520 */   133,   68,  542,  541,  540,  539,  543,  139,  399,  401,
 /*   530 */   419,  300,  157,  367,  263,  418,  257,  258,  375,  376,
 /*   540 */   147,  387,  100,   99,   68,  235,   94,   91,   90,  283,
 /*   550 */   432,  280,  251,  301,  287,  427,  398,  397,  188,  825,
 /*   560 */   291,  406,  421,  420,  182,  423,  170,  171,  412,  295,
 /*   570 */    97,  253,  249,  404,  162,  536,   62,  428,  138,  377,
 /*   580 */   273,  216,   12,  380,  343,   68,  506,  267,  481,  480,
 /*   590 */   143,  269,  112,  124,  479,  505,  131,   68,  496,  129,
 /*   600 */   474,  105,   92,  236,  113,   96,  504,   30,  200,  511,
 /*   610 */    89,   54,  218,   35,  344,  345,  359,  230,   24,  242,
 /*   620 */    31,  225,  206,  288,   11,    9,  248,  514,  124,  259,
 /*   630 */   102,  256,   47,   45,  547,  329,  542,  541,  540,  539,
 /*   640 */   543,  498,  399,  401,  232,   38,  510,  276,  362,    5,
 /*   650 */   257,  258,  292,    8,   77,  116,  100,   99,  429,   37,
 /*   660 */    94,   91,   90,   88,  433,  280,  251,  301,  287,  427,
 /*   670 */   398,  397,  188,  434,  291,  406,  421,  420,  182,  423,
 /*   680 */   170,  171,  412,  295,   97,    7,  431,  532,  162,  339,
 /*   690 */    86,  341,  424,  305,  273,  216,   12,  353,  343,  121,
 /*   700 */    49,  422,  481,  480,  143,  269,  415,  411,  479,  408,
 /*   710 */   416,   29,  437,  335,  349,  105,   92,  111,  113,   96,
 /*   720 */   385,   30,  384,  392,  403,  402,  218,   32,  344,  345,
 /*   730 */   359,  230,   24,  242,   31,  225,  206,  288,  252,   87,
 /*   740 */   248,  224,   34,  259,  102,  256,   47,   45,  350,   28,
 /*   750 */   542,  541,  540,  539,  543,  393,  444,  445,  442,  328,
 /*   760 */    39,  327,  110,  446,  388,  830,   26,   10,  826,   25,
 /*   770 */   100,   99,   69,  555,   94,   91,   90,  204,  478,  280,
 /*   780 */   251,  301,  287,  427,  398,  397,  188,  201,  291,  406,
 /*   790 */   421,  420,  182,  423,  170,  171,  412,  295,   97,  314,
 /*   800 */   383,  313,  162,  365,  507,  277,  526,  319,  273,  216,
 /*   810 */    12,  382,  343,  232,  373,  333,  481,  480,  143,  269,
 /*   820 */   494,  309,  479,  337,  389,  205,  148,  264,    1,  105,
 /*   830 */    92,  298,  113,   96,  151,   30,  149,  368,  154,  207,
 /*   840 */   218,    4,  344,  345,  359,  230,   24,  242,   31,  225,
 /*   850 */   206,  288,  428,  356,  248,  131,  550,  259,  102,  256,
 /*   860 */    47,   45,  547,  547,  542,  541,  540,  539,  543,  547,
 /*   870 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*   880 */   547,  547,  547,  547,  100,   99,  547,  547,   94,   91,
 /*   890 */    90,  547,  547,  280,  251,  301,  287,  427,  398,  397,
 /*   900 */   188,  547,  291,  406,  421,  420,  182,  423,  170,  171,
 /*   910 */   412,  295,   97,  547,  547,  547,  162,  547,  547,  547,
 /*   920 */   547,  547,  273,  216,   12,  381,  343,  547,  547,  547,
 /*   930 */   481,  480,  143,  269,  547,  547,  479,  547,  547,  547,
 /*   940 */   547,  547,  547,  105,   92,  547,  113,   96,  547,   30,
 /*   950 */   547,  547,  547,  547,  218,  547,  344,  345,  359,  230,
 /*   960 */    24,  242,   31,  225,  206,  288,  547,  547,  248,  547,
 /*   970 */   547,  259,  102,  256,   47,   45,  547,  547,  542,  541,
 /*   980 */   540,  539,  543,  547,  547,  547,  547,  547,  547,  547,
 /*   990 */   547,  547,  547,  547,  547,  547,  547,  547,  100,   99,
 /*  1000 */   547,  547,   94,   91,   90,  547,  547,  280,  251,  301,
 /*  1010 */   287,  427,  398,  397,  188,  547,  291,  406,  421,  420,
 /*  1020 */   182,  423,  170,  171,  412,  295,   97,  547,  547,  547,
 /*  1030 */   162,  547,  547,  547,  547,  547,  273,  216,   12,  379,
 /*  1040 */   343,  547,  547,  547,  481,  480,  143,  269,  547,  547,
 /*  1050 */   479,  547,  547,  547,  547,  547,  547,  105,   92,  547,
 /*  1060 */   113,   96,  547,   30,  547,  547,  547,  547,  218,  547,
 /*  1070 */   344,  345,  359,  230,   24,  242,   31,  225,  206,  288,
 /*  1080 */   547,  547,  248,  547,  547,  259,  102,  256,   47,   45,
 /*  1090 */   547,  547,  542,  541,  540,  539,  543,  547,  547,  547,
 /*  1100 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  1110 */   547,  547,  100,   99,  547,  547,   94,   91,   90,  547,
 /*  1120 */   547,  280,  251,  301,  287,  427,  398,  397,  188,  547,
 /*  1130 */   291,  406,  421,  420,  182,  423,  170,  171,  412,  295,
 /*  1140 */    97,  547,  547,  547,  162,  547,  547,  547,  547,  547,
 /*  1150 */   273,  216,   12,  547,  343,  547,  547,  547,  481,  480,
 /*  1160 */   143,  269,  547,  547,  479,  547,  547,  547,  547,  547,
 /*  1170 */   547,  105,   92,  547,  113,   96,  547,   30,  547,  547,
 /*  1180 */   547,  547,  218,  547,  344,  345,  359,  230,   24,  242,
 /*  1190 */    31,  225,  206,  288,  547,  547,  248,  547,  547,  259,
 /*  1200 */   102,  256,   47,   45,  547,  547,  542,  541,  540,  539,
 /*  1210 */   543,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  1220 */   547,  547,  547,  547,  547,  547,  100,   99,  547,  547,
 /*  1230 */    94,   91,   90,  547,  547,  280,  251,  301,  287,  427,
 /*  1240 */   398,  397,  188,  547,  291,  406,  421,  420,  182,  423,
 /*  1250 */   170,  171,  412,  295,   97,  547,  547,  179,  162,  459,
 /*  1260 */   547,  547,  547,  547,  273,  216,   12,  547,  343,  547,
 /*  1270 */   293,  547,  481,  480,  262,  269,  547,  547,  479,  547,
 /*  1280 */   547,  547,  547,  128,  547,  105,   92,  547,  120,   95,
 /*  1290 */   547,   30,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  1300 */   359,  230,   24,  242,   31,  225,  206,  288,  547,  547,
 /*  1310 */   248,  547,  547,  259,  102,  256,   47,   45,  547,  547,
 /*  1320 */   542,  541,  540,  539,  543,  547,  399,  401,  386,  458,
 /*  1330 */   457,  547,  547,  547,  257,  258,  260,  391,  390,  405,
 /*  1340 */   100,   99,  547,  547,   94,   91,   90,  547,  547,  280,
 /*  1350 */   251,  301,  287,  427,  398,  397,  188,  547,  291,  406,
 /*  1360 */   421,  420,  182,  423,  170,  171,  412,  295,  317,  134,
 /*  1370 */   352,  114,  547,  547,  440,  150,  272,  547,  160,  547,
 /*  1380 */   547,  547,  554,  211,  459,   98,  509,    3,  323,  318,
 /*  1390 */   142,  547,  547,  547,  137,  451,  146,  101,  547,  549,
 /*  1400 */   547,  547,  290,  115,  136,  554,  547,  156,  119,  159,
 /*  1410 */   547,  547,   13,  547,  547,  547,  547,  394,  286,  308,
 /*  1420 */   135,  547,  547,  547,  346,  239,  141,  364,  261,  547,
 /*  1430 */   246,  556,  103,  164,  173,  219,  169,  222,  177,  452,
 /*  1440 */   194,  197,  436,   93,  165,  279,  547,  547,  547,  547,
 /*  1450 */   547,  399,  401,  386,  458,  457,  547,  547,  547,  257,
 /*  1460 */   258,  547,  547,  547,  547,  547,  547,  443,  134,  352,
 /*  1470 */   547,  547,  547,  440,  150,  272,  547,  160,  547,  547,
 /*  1480 */   547,  547,  211,  459,   98,  509,  547,  547,  547,  547,
 /*  1490 */   547,  547,  547,  547,  451,  146,  101,  547,  549,  547,
 /*  1500 */   547,  547,  547,  547,  547,  547,  156,  119,  159,  547,
 /*  1510 */   547,   13,  227,  125,  370,  369,  394,  286,  308,  135,
 /*  1520 */   547,  547,  547,  346,  547,  547,  364,  261,  547,  246,
 /*  1530 */   556,  103,  164,  173,  219,  169,  222,  177,  452,  194,
 /*  1540 */   197,  436,   93,  165,  279,  547,  547,  547,  547,  547,
 /*  1550 */   399,  401,  386,  458,  457,  317,  134,  352,  257,  258,
 /*  1560 */   547,  440,  150,  272,  547,  160,  547,  547,  547,  547,
 /*  1570 */   211,  459,   98,  509,  547,  311,  318,  142,  547,  547,
 /*  1580 */   547,  547,  451,  146,  101,  547,  549,  547,  547,  547,
 /*  1590 */   547,  547,  547,  547,  156,  119,  159,  547,  547,   13,
 /*  1600 */   547,  547,  547,  547,  394,  286,  308,  135,  547,  547,
 /*  1610 */   547,  346,  547,  547,  364,  261,  547,  246,  556,  103,
 /*  1620 */   164,  173,  219,  169,  222,  177,  452,  194,  197,  436,
 /*  1630 */    93,  165,  279,  547,  547,  547,  547,  547,  399,  401,
 /*  1640 */   386,  458,  457,  547,  547,  547,  257,  258,  880,   20,
 /*  1650 */   363,  134,  352,  547,  547,  547,  440,  150,  272,  547,
 /*  1660 */   160,  547,  547,  547,  547,  211,  459,   98,  509,  547,
 /*  1670 */   547,  547,  547,  547,  547,  547,  547,  451,  146,  101,
 /*  1680 */   547,  549,  547,  547,  547,  547,  547,  547,  547,  156,
 /*  1690 */   119,  159,  547,  547,   13,  547,  547,  547,  547,  394,
 /*  1700 */   286,  308,  135,  547,  547,  547,  346,  547,  547,  364,
 /*  1710 */   261,  547,  246,  556,  103,  164,  173,  219,  169,  222,
 /*  1720 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  1730 */   547,  547,  547,  399,  401,  386,  458,  457,  547,  547,
 /*  1740 */   547,  257,  258,   22,  363,  134,  352,  547,  547,  275,
 /*  1750 */   440,  150,  272,  547,  160,  547,  547,  547,  547,  211,
 /*  1760 */   459,   98,  509,  547,  547,  547,  547,  547,  547,  547,
 /*  1770 */   547,  451,  146,  101,  547,  549,  547,  547,  547,  547,
 /*  1780 */   547,  547,  547,  156,  119,  159,  547,  547,   13,  547,
 /*  1790 */   547,  547,  547,  394,  286,  308,  135,  547,  547,  547,
 /*  1800 */   346,  547,  547,  364,  261,  547,  246,  556,  103,  164,
 /*  1810 */   173,  219,  169,  222,  177,  452,  194,  197,  436,   93,
 /*  1820 */   165,  279,  547,  547,  547,  547,  547,  399,  401,  386,
 /*  1830 */   458,  457,  547,  547,  547,  257,  258,  547,   16,  363,
 /*  1840 */   134,  352,  547,  547,  547,  440,  150,  272,  547,  160,
 /*  1850 */   547,  547,  547,  547,  211,  459,   98,  509,  547,  547,
 /*  1860 */   547,  547,  547,  547,  547,  547,  451,  146,  101,  547,
 /*  1870 */   549,  547,  547,  547,  547,  547,  547,  547,  156,  119,
 /*  1880 */   159,  547,  547,   13,  547,  547,  547,  547,  394,  286,
 /*  1890 */   308,  135,  547,  547,  547,  346,  547,  547,  364,  261,
 /*  1900 */   547,  246,  556,  103,  164,  173,  219,  169,  222,  177,
 /*  1910 */   452,  194,  197,  436,   93,  165,  279,  547,  547,  547,
 /*  1920 */   547,  547,  399,  401,  386,  458,  457,  547,  547,  547,
 /*  1930 */   257,  258,   14,  363,  134,  352,  547,  547,  547,  440,
 /*  1940 */   150,  272,  547,  160,  547,  547,  547,  547,  211,  459,
 /*  1950 */    98,  509,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  1960 */   451,  146,  101,  547,  549,  547,  547,  547,  547,  547,
 /*  1970 */   547,  547,  156,  119,  159,  547,  547,   13,  547,  547,
 /*  1980 */   547,  547,  394,  286,  308,  135,  547,  547,  547,  346,
 /*  1990 */   547,  547,  364,  261,  547,  246,  556,  103,  164,  173,
 /*  2000 */   219,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  2010 */   279,  547,  547,  547,  547,  547,  399,  401,  386,  458,
 /*  2020 */   457,  547,  547,  547,  257,  258,  547,   19,  363,  134,
 /*  2030 */   352,  547,  547,  547,  440,  150,  272,  547,  160,  547,
 /*  2040 */   547,  547,  547,  211,  459,   98,  509,  547,  547,  547,
 /*  2050 */   547,  547,  547,  547,  547,  451,  146,  101,  547,  549,
 /*  2060 */   547,  547,  547,  547,  547,  547,  547,  156,  119,  159,
 /*  2070 */   547,  547,   13,  547,  547,  547,  547,  394,  286,  308,
 /*  2080 */   135,  547,  547,  547,  346,  547,  547,  364,  261,  547,
 /*  2090 */   246,  556,  103,  164,  173,  219,  169,  222,  177,  452,
 /*  2100 */   194,  197,  436,   93,  165,  279,  547,  547,  547,  547,
 /*  2110 */   547,  399,  401,  386,  458,  457,  547,  547,  547,  257,
 /*  2120 */   258,   21,  363,  134,  352,  547,  547,  547,  440,  150,
 /*  2130 */   272,  547,  160,  547,  547,  547,  547,  211,  459,   98,
 /*  2140 */   509,  547,  547,  547,  547,  547,  547,  547,  547,  451,
 /*  2150 */   146,  101,  547,  549,  547,  547,  547,  547,  547,  547,
 /*  2160 */   547,  156,  119,  159,  547,  547,   13,  547,  547,  547,
 /*  2170 */   547,  394,  286,  308,  135,  547,  547,  547,  346,  547,
 /*  2180 */   547,  364,  261,  547,  246,  556,  103,  164,  173,  219,
 /*  2190 */   169,  222,  177,  452,  194,  197,  436,   93,  165,  279,
 /*  2200 */   547,  547,  547,  547,  547,  399,  401,  386,  458,  457,
 /*  2210 */   547,  547,  547,  257,  258,  547,   15,  363,  134,  352,
 /*  2220 */   547,  547,  547,  440,  150,  272,  547,  160,  547,  547,
 /*  2230 */   547,  547,  211,  459,   98,  509,  547,  547,  547,  547,
 /*  2240 */   547,  547,  547,  547,  451,  146,  101,  547,  549,  547,
 /*  2250 */   547,  547,  547,  547,  547,  547,  156,  119,  159,  547,
 /*  2260 */   547,   13,  547,  547,  547,  547,  394,  286,  308,  135,
 /*  2270 */   547,  547,  547,  346,  547,  547,  364,  261,  547,  246,
 /*  2280 */   556,  103,  164,  173,  219,  169,  222,  177,  452,  194,
 /*  2290 */   197,  436,   93,  165,  279,  547,  547,  547,  547,  547,
 /*  2300 */   399,  401,  386,  458,  457,  547,  547,  547,  257,  258,
 /*  2310 */     2,  363,  134,  352,  547,  547,  547,  440,  150,  272,
 /*  2320 */   547,  160,  547,  547,  547,  547,  211,  459,   98,  509,
 /*  2330 */   547,  547,  547,  547,  547,  547,  547,  547,  451,  146,
 /*  2340 */   101,  547,  549,  547,  547,  547,  547,  547,  547,  547,
 /*  2350 */   156,  119,  159,  547,  547,   13,  547,  547,  547,  547,
 /*  2360 */   394,  286,  308,  135,  547,  547,  547,  346,  547,  547,
 /*  2370 */   364,  261,  547,  246,  556,  103,  164,  173,  219,  169,
 /*  2380 */   222,  177,  452,  194,  197,  436,   93,  165,  279,  547,
 /*  2390 */   547,  547,  547,  547,  399,  401,  386,  458,  457,  547,
 /*  2400 */   547,  547,  257,  258,  547,   18,  363,  134,  352,  547,
 /*  2410 */   547,  547,  440,  150,  272,  547,  160,  547,  547,  547,
 /*  2420 */   547,  211,  459,   98,  509,  547,  547,  547,  547,  547,
 /*  2430 */   547,  547,  547,  451,  146,  101,  547,  549,  547,  547,
 /*  2440 */   547,  547,  547,  547,  547,  156,  119,  159,  547,  547,
 /*  2450 */    13,  547,  547,  547,  547,  394,  286,  308,  135,  547,
 /*  2460 */   547,  547,  346,  547,  547,  364,  261,  547,  246,  556,
 /*  2470 */   103,  164,  173,  219,  169,  222,  177,  452,  194,  197,
 /*  2480 */   436,   93,  165,  279,  547,  547,  547,  547,  547,  399,
 /*  2490 */   401,  386,  458,  457,  547,  547,  547,  257,  258,   23,
 /*  2500 */   363,  134,  352,  547,  547,  547,  440,  150,  272,  547,
 /*  2510 */   160,  547,  547,  547,  547,  211,  459,   98,  509,  547,
 /*  2520 */   547,  547,  547,  547,  547,  547,  547,  451,  146,  101,
 /*  2530 */   547,  549,  547,  547,  547,  547,  547,  547,  547,  156,
 /*  2540 */   119,  159,  547,  547,   13,  547,  547,  547,  547,  394,
 /*  2550 */   286,  308,  135,  547,  547,  547,  346,  547,  547,  364,
 /*  2560 */   261,  547,  246,  556,  103,  164,  173,  219,  169,  222,
 /*  2570 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  2580 */   547,  547,  547,  399,  401,  386,  458,  457,  547,  547,
 /*  2590 */   547,  257,  258,  547,   17,  363,  134,  352,  547,  547,
 /*  2600 */   547,  440,  150,  272,  547,  160,  547,  547,  162,  547,
 /*  2610 */   211,  459,   98,  509,  547,  254,  547,  547,  547,  547,
 /*  2620 */   547,  547,  451,  146,  101,  547,  549,  547,  547,  547,
 /*  2630 */   547,  547,  547,  547,  156,  119,  159,  547,  127,   13,
 /*  2640 */   547,   44,  547,  547,  394,  286,  308,  135,  547,  547,
 /*  2650 */   547,  346,  547,  547,  364,  261,  547,  246,  556,  103,
 /*  2660 */   164,  173,  219,  169,  222,  177,  452,  194,  197,  436,
 /*  2670 */    93,  165,  279,  547,  547,  547,  547,  547,  399,  401,
 /*  2680 */   386,  458,  457,  443,  134,  352,  257,  258,  547,  440,
 /*  2690 */   150,  272,  547,  160,  547,  547,  547,  547,  211,  459,
 /*  2700 */    98,  509,  547,  427,  398,  397,  188,  547,  291,  547,
 /*  2710 */   451,  146,  101,  547,  549,  547,  547,  547,  547,  547,
 /*  2720 */   547,  547,  156,  119,  159,  547,  547,   13,  547,  547,
 /*  2730 */   547,  547,  394,  286,  308,  135,  547,  547,  547,  346,
 /*  2740 */   547,  547,  364,  261,  547,  246,  556,  103,  164,  173,
 /*  2750 */   219,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  2760 */   279,  547,  547,  547,  547,  547,  399,  401,  386,  458,
 /*  2770 */   457,  547,  134,  355,  257,  258,  547,  440,  150,  272,
 /*  2780 */   547,  160,  547,  547,  547,  547,  211,  459,  140,  509,
 /*  2790 */   547,  547,  547,  547,  547,  547,  547,  547,  451,  547,
 /*  2800 */   109,  547,  549,  547,  547,  547,  547,  547,  547,  547,
 /*  2810 */   547,  128,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  2820 */   394,  286,  308,  135,  547,  547,  547,  346,  547,  547,
 /*  2830 */   364,  261,  547,  246,  556,  103,  164,  173,  219,  169,
 /*  2840 */   222,  177,  452,  194,  197,  436,   93,  165,  279,  547,
 /*  2850 */   547,  547,  547,  547,  399,  401,  386,  458,  457,  547,
 /*  2860 */   134,  238,  257,  258,  547,  440,  150,  272,  547,  160,
 /*  2870 */   547,  547,  547,  547,  211,  459,  140,  509,  547,  547,
 /*  2880 */   547,  547,  547,  547,  547,  547,  451,  547,  109,  547,
 /*  2890 */   549,  547,  547,  547,  547,  547,  547,  547,  547,  128,
 /*  2900 */   547,  547,  547,  547,  547,  547,  547,  547,  394,  286,
 /*  2910 */   308,  135,  547,  547,  547,  346,  547,  547,  364,  261,
 /*  2920 */   547,  246,  556,  103,  164,  173,  219,  169,  222,  177,
 /*  2930 */   452,  194,  197,  436,   93,  165,  279,  547,  547,  547,
 /*  2940 */   547,  547,  399,  401,  386,  458,  457,  547,  134,  358,
 /*  2950 */   257,  258,  547,  440,  150,  272,  547,  160,  547,  547,
 /*  2960 */   547,  547,  211,  459,  140,  509,  547,  547,  547,  547,
 /*  2970 */   547,  547,  547,  547,  451,  547,  109,  547,  549,  547,
 /*  2980 */   547,  547,  547,  547,  547,  547,  547,  128,  547,  547,
 /*  2990 */   547,  547,  547,  547,  547,  547,  394,  286,  308,  135,
 /*  3000 */   547,  547,  547,  346,  547,  547,  364,  261,  547,  246,
 /*  3010 */   556,  103,  164,  173,  219,  169,  222,  177,  452,  194,
 /*  3020 */   197,  436,   93,  165,  279,  547,  547,  547,  547,  547,
 /*  3030 */   399,  401,  386,  458,  457,  547,  134,  310,  257,  258,
 /*  3040 */   547,  440,  150,  272,  547,  160,  547,  547,  547,  547,
 /*  3050 */   211,  459,  140,  509,  547,  547,  547,  547,  547,  547,
 /*  3060 */   547,  547,  451,  547,  109,  547,  549,  547,  547,  547,
 /*  3070 */   547,  547,  547,  547,  547,  128,  547,  547,  547,  547,
 /*  3080 */   547,  547,  547,  547,  394,  286,  308,  135,  547,  547,
 /*  3090 */   547,  346,  547,  547,  364,  261,  547,  246,  556,  103,
 /*  3100 */   164,  173,  219,  169,  222,  177,  452,  194,  197,  436,
 /*  3110 */    93,  165,  279,  547,  547,  547,  547,  547,  399,  401,
 /*  3120 */   386,  458,  457,  547,  134,  360,  257,  258,  547,  440,
 /*  3130 */   150,  272,  547,  160,  547,  547,  547,  547,  211,  459,
 /*  3140 */   140,  509,  547,  547,  547,  490,  483,  482,  476,  547,
 /*  3150 */   451,  477,  109,  547,  549,  547,  547,  547,  547,  547,
 /*  3160 */   547,  547,  547,  128,  547,  547,  490,  483,  482,  476,
 /*  3170 */   547,  547,  394,  286,  308,  135,  547,  547,  547,  346,
 /*  3180 */   547,  547,  364,  261,  547,  246,  556,  103,  164,  173,
 /*  3190 */   219,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  3200 */   279,  547,  547,  547,  547,  547,  399,  401,  386,  458,
 /*  3210 */   457,  547,  547,  547,  257,  258,   97,  547,  547,  547,
 /*  3220 */   162,  547,  547,  547,  547,  547,  547,  254,  547,  547,
 /*  3230 */   326,  547,  547,  406,  421,  420,  182,  423,  170,  171,
 /*  3240 */   412,  295,  547,  547,  547,  547,  547,  105,   92,  547,
 /*  3250 */   120,   95,  547,   30,  406,  421,  420,  182,  423,  170,
 /*  3260 */   171,  412,  295,  547,  547,  547,  547,  547,  162,  547,
 /*  3270 */   547,  186,  547,  459,  547,  547,  547,  547,   47,   45,
 /*  3280 */   547,  547,  542,  541,  540,  539,  543,  547,  262,  234,
 /*  3290 */   547,  547,  547,  547,  547,  105,  547,  132,  126,  203,
 /*  3300 */   502,  547,  100,   99,  547,  547,   94,   91,   90,  547,
 /*  3310 */   547,  280,  251,  301,  287,  427,  398,  397,  188,  547,
 /*  3320 */   291,  406,  421,  420,  182,  423,  170,  171,  412,  295,
 /*  3330 */    97,  547,  547,  547,  162,  547,  547,  547,  551,  558,
 /*  3340 */   547,  254,  386,  458,  457,  547,  547,  547,  257,  258,
 /*  3350 */   260,  391,  390,  405,  547,  547,  547,  547,  547,  547,
 /*  3360 */   547,  105,   92,  547,  120,   95,  547,   30,  547,  406,
 /*  3370 */   421,  420,  182,  423,  170,  171,  412,  295,  547,  547,
 /*  3380 */   547,  547,  547,  547,  547,  342,  547,  547,  215,  547,
 /*  3390 */   459,  547,   47,   45,  547,  547,  542,  541,  540,  539,
 /*  3400 */   543,  535,  547,  547,  547,  262,  547,  547,  547,  547,
 /*  3410 */   547,  547,  547,  547,  128,  547,  100,   99,  547,  162,
 /*  3420 */    94,   91,   90,  547,  547,  280,  251,  301,  287,  427,
 /*  3430 */   398,  397,  188,  547,  291,  406,  421,  420,  182,  423,
 /*  3440 */   170,  171,  412,  295,   97,  547,  547,  139,  162,  126,
 /*  3450 */   547,  547,  547,  547,  547,  254,  547,  399,  401,  386,
 /*  3460 */   458,  457,  547,  547,  547,  257,  258,  260,  391,  390,
 /*  3470 */   405,  155,  547,  520,  547,  105,   92,  547,  120,   95,
 /*  3480 */   547,   30,  547,  547,  547,   63,  547,  547,   64,  547,
 /*  3490 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  3500 */   547,  547,  547,  547,  547,   46,   47,   45,  547,  547,
 /*  3510 */   542,  541,  540,  539,  543,  547,  547,  547,  547,  547,
 /*  3520 */   406,  421,  420,  182,  423,  170,  171,  412,  295,  547,
 /*  3530 */   100,   99,  547,  547,   94,   91,   90,  547,  547,  280,
 /*  3540 */   251,  301,  287,  427,  398,  397,  188,  547,  291,  406,
 /*  3550 */   421,  420,  182,  423,  170,  171,  412,  295,  211,  459,
 /*  3560 */    52,   55,   51,   58,   57,   56,   60,   59,   61,   53,
 /*  3570 */   451,  547,  109,  186,  549,  459,  547,  547,  547,  547,
 /*  3580 */   547,  547,  547,  128,  547,  547,  547,  547,  547,  547,
 /*  3590 */   262,  234,  394,  366,  547,  547,  547,  547,  289,  132,
 /*  3600 */   547,  547,  500,  547,  547,  246,  556,  103,  164,  173,
 /*  3610 */   219,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  3620 */   279,  547,  547,  547,  547,  547,  399,  401,  386,  458,
 /*  3630 */   457,  547,  547,  547,  257,  258,  547,  547,  547,  547,
 /*  3640 */   551,  558,  547,  547,  386,  458,  457,  184,  211,  459,
 /*  3650 */   257,  258,  260,  391,  390,  405,  547,  547,  547,  547,
 /*  3660 */   451,  547,  547,  547,  262,  547,  547,  547,  459,  547,
 /*  3670 */   478,  547,  547,  128,  547,  547,  547,  547,  547,  547,
 /*  3680 */   547,  547,  394,  106,  547,  547,  547,  547,  547,  547,
 /*  3690 */   547,  158,  123,  163,  547,  212,  547,  547,  164,  173,
 /*  3700 */   219,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  3710 */   279,  547,  547,  547,  547,  547,  399,  401,  386,  458,
 /*  3720 */   457,  547,  547,  547,  257,  258,  260,  391,  390,  405,
 /*  3730 */   547,  547,  547,  547,  211,  459,  547,  386,  458,  457,
 /*  3740 */   547,  547,  547,  257,  258,  547,  451,  547,  109,  547,
 /*  3750 */   549,  547,  547,  547,  547,  547,  547,  547,  547,  128,
 /*  3760 */   547,  547,  547,  547,  547,  547,  547,  547,  394,  237,
 /*  3770 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  3780 */   547,  246,  556,  103,  164,  173,  219,  169,  222,  177,
 /*  3790 */   452,  194,  197,  436,   93,  165,  279,  547,  547,  547,
 /*  3800 */   547,  547,  399,  401,  386,  458,  457,  547,  547,  547,
 /*  3810 */   257,  258,  547,  547,  547,  211,  459,  547,  547,  547,
 /*  3820 */   547,   97,  547,  547,  547,  162,  547,  451,  547,  109,
 /*  3830 */   547,  549,  254,  547,  547,  547,  547,  547,  547,  547,
 /*  3840 */   128,  547,  547,  547,  547,  547,  547,  547,  547,  394,
 /*  3850 */   247,  547,  105,   92,  547,  120,   95,  547,   30,  547,
 /*  3860 */   547,  547,  246,  556,  103,  164,  173,  219,  169,  222,
 /*  3870 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  3880 */   547,  547,  547,  399,  401,  386,  458,  457,  547,  547,
 /*  3890 */   547,  257,  258,  547,  547,  547,  547,  547,  547,  547,
 /*  3900 */   547,  547,  547,  547,  547,  547,  547,  100,   99,  547,
 /*  3910 */   547,   94,   91,   90,  547,  547,  280,  251,  301,  287,
 /*  3920 */   427,  398,  397,  188,  547,  291,  406,  421,  420,  182,
 /*  3930 */   423,  170,  171,  412,  295,  211,  459,  547,  547,  547,
 /*  3940 */   547,  137,  547,  547,  547,  162,  547,  451,  547,  109,
 /*  3950 */   547,  549,  554,  547,  547,  547,  547,  547,  547,  547,
 /*  3960 */   128,  547,  547,  547,  547,  547,  547,  547,  547,  394,
 /*  3970 */   240,  547,  104,  141,  547,  126,  547,  547,  547,  495,
 /*  3980 */   547,  547,  246,  556,  103,  164,  173,  219,  169,  222,
 /*  3990 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  4000 */   547,  547,  547,  399,  401,  386,  458,  457,  211,  459,
 /*  4010 */   547,  257,  258,  547,  547,  547,  547,  547,  547,  547,
 /*  4020 */   451,  547,  109,  547,  549,  547,  547,  547,  547,  547,
 /*  4030 */   547,  547,  547,  128,  547,  547,  547,  547,  547,  547,
 /*  4040 */   547,  547,  394,  265,  547,  547,  406,  421,  420,  182,
 /*  4050 */   423,  170,  171,  412,  295,  246,  556,  103,  164,  173,
 /*  4060 */   219,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  4070 */   279,  547,  547,  547,  211,  459,  399,  401,  386,  458,
 /*  4080 */   457,  547,  547,  162,  257,  258,  451,  547,  109,  547,
 /*  4090 */   549,  547,  547,  547,  547,  547,  547,  481,  480,  128,
 /*  4100 */   547,  547,  547,  479,  547,  547,  547,  547,  394,  241,
 /*  4110 */   105,  547,  547,  117,  547,  547,  547,  547,  547,  547,
 /*  4120 */   547,  246,  556,  103,  164,  173,  219,  169,  222,  177,
 /*  4130 */   452,  194,  197,  436,   93,  165,  279,  547,  547,  547,
 /*  4140 */   547,  547,  399,  401,  386,  458,  457,  211,  459,  547,
 /*  4150 */   257,  258,  547,  547,  547,  547,  547,  547,  547,  451,
 /*  4160 */   547,  109,  547,  549,  547,  547,  547,  547,  547,  547,
 /*  4170 */   547,  547,  128,  547,  547,  547,  547,  547,  547,  547,
 /*  4180 */   547,  394,  304,  547,  406,  421,  420,  182,  423,  170,
 /*  4190 */   171,  412,  295,  547,  246,  556,  103,  164,  173,  219,
 /*  4200 */   169,  222,  177,  452,  194,  197,  436,   93,  165,  279,
 /*  4210 */   547,  547,  547,  547,  547,  399,  401,  386,  458,  457,
 /*  4220 */   211,  459,  547,  257,  258,  547,  547,   97,  547,  547,
 /*  4230 */   547,  162,  451,  547,  109,  547,  549,  547,  254,   40,
 /*  4240 */   525,  547,  547,  547,  547,  128,  547,  547,  547,  547,
 /*  4250 */   547,  547,  547,  547,  394,  226,  547,  547,  547,   92,
 /*  4260 */   547,  127,   95,  547,   30,  547,  547,  246,  556,  103,
 /*  4270 */   164,  173,  219,  169,  222,  177,  452,  194,  197,  436,
 /*  4280 */    93,  165,  279,  547,  547,  162,  211,  459,  399,  401,
 /*  4290 */   386,  458,  457,  547,  547,  547,  257,  258,  451,  547,
 /*  4300 */   109,  547,  549,  547,  547,  547,  547,  547,  547,  547,
 /*  4310 */   547,  128,  547,  100,   99,  126,  547,   94,   91,   90,
 /*  4320 */   394,  245,  280,  251,  301,  287,  427,  398,  397,  188,
 /*  4330 */   547,  291,  547,  246,  556,  103,  164,  173,  219,  169,
 /*  4340 */   222,  177,  452,  194,  197,  436,   93,  165,  279,  547,
 /*  4350 */   547,  547,  547,  547,  399,  401,  386,  458,  457,  202,
 /*  4360 */   196,  459,  257,  258,  547,  547,  547,  547,  547,  547,
 /*  4370 */   547,  547,  451,  547,  547,  547,  262,  547,  547,  547,
 /*  4380 */   547,  547,  547,  547,  547,  128,  406,  421,  420,  182,
 /*  4390 */   423,  170,  171,  412,  295,  547,  547,  547,  547,  547,
 /*  4400 */   547,  211,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  4410 */   547,  547,  547,  451,  222,  177,  452,  194,  197,  436,
 /*  4420 */    93,  165,  279,  547,  547,  547,  129,  547,  399,  401,
 /*  4430 */   386,  458,  457,  547,  547,  538,  257,  258,  260,  391,
 /*  4440 */   390,  405,  497,  547,  122,  547,  547,  501,  334,  324,
 /*  4450 */   547,  164,  173,  219,  169,  222,  177,  452,  194,  197,
 /*  4460 */   436,   93,  165,  279,  211,  553,  213,  547,  547,  399,
 /*  4470 */   401,  547,  547,  255,  547,  547,  451,  257,  258,  547,
 /*  4480 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  129,
 /*  4490 */   557,  547,  547,  551,  558,  547,  547,  547,  394,  547,
 /*  4500 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  4510 */   547,  212,  547,  547,  164,  173,  219,  169,  222,  177,
 /*  4520 */   452,  194,  197,  436,   93,  165,  279,  211,  547,  547,
 /*  4530 */   547,  547,  399,  401,   97,  547,  547,  547,  162,  451,
 /*  4540 */   257,  258,  547,  547,  547,  254,  547,  547,  547,  547,
 /*  4550 */   547,  547,  129,  547,  547,  547,  547,  547,  547,  547,
 /*  4560 */   547,  523,  547,  547,  547,  547,   92,  547,  127,   95,
 /*  4570 */   547,   30,  547,  547,  547,  547,  547,  164,  173,  219,
 /*  4580 */   169,  222,  177,  452,  194,  197,  436,   93,  165,  279,
 /*  4590 */   547,  537,  547,  547,  211,  399,  401,  547,  299,  547,
 /*  4600 */   547,  547,  547,  257,  258,   97,  451,  547,  547,  162,
 /*  4610 */   547,  547,  547,  547,  547,  547,  254,   40,  547,  129,
 /*  4620 */   100,   99,  547,  547,   94,   91,   90,  547,  521,  280,
 /*  4630 */   251,  301,  287,  427,  398,  397,  188,   92,  291,  127,
 /*  4640 */    95,  547,   30,  547,  164,  173,  219,  169,  222,  177,
 /*  4650 */   452,  194,  197,  436,   93,  165,  279,  547,  522,  214,
 /*  4660 */   162,  459,  399,  401,  547,  547,  547,  254,  547,  547,
 /*  4670 */   257,  258,  534,  547,  547,  547,  262,  547,  547,  527,
 /*  4680 */   547,  547,  547,  547,  547,  128,  547,  105,  547,  547,
 /*  4690 */   120,  100,   99,   44,  547,   94,   91,   90,  547,  547,
 /*  4700 */   280,  251,  301,  287,  427,  398,  397,  188,  547,  291,
 /*  4710 */    97,  547,  547,  547,  162,  547,  547,  547,  547,  547,
 /*  4720 */   547,  254,  547,  547,  547,  547,  547,  547,  399,  401,
 /*  4730 */   386,  458,  457,  547,  547,  547,  257,  258,  260,  391,
 /*  4740 */   390,  405,   92,  547,  127,   95,  547,   30,  546,  547,
 /*  4750 */   547,  547,  547,  547,  547,  427,  398,  397,  188,  547,
 /*  4760 */   291,  406,  421,  420,  182,  423,  170,  171,  412,  295,
 /*  4770 */   211,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  4780 */   547,  547,  451,  547,  547,  547,  547,  547,  547,  547,
 /*  4790 */   547,  547,  547,  547,  547,  129,  100,   99,  547,  547,
 /*  4800 */    94,   91,   90,  547,  394,  280,  251,  301,  287,  427,
 /*  4810 */   398,  397,  188,  547,  291,  547,  547,  220,  547,  547,
 /*  4820 */   164,  173,  219,  169,  222,  177,  452,  194,  197,  436,
 /*  4830 */    93,  165,  279,   97,  547,  547,  547,  162,  399,  401,
 /*  4840 */   547,  451,  547,  547,  254,  547,  257,  258,  547,  137,
 /*  4850 */   547,  547,  547,  162,  129,  547,  547,  547,  547,  547,
 /*  4860 */   554,  547,  547,  547,  547,   92,  547,  127,   95,  547,
 /*  4870 */    30,  547,  547,  547,  547,  547,  547,  547,   97,  547,
 /*  4880 */   104,  141,  162,  126,  547,  547,  281,  278,  547,  254,
 /*  4890 */   166,  279,  547,  547,  547,  547,  547,  399,  401,  547,
 /*  4900 */   547,  547,  547,  547,  547,  257,  258,  547,  547,  547,
 /*  4910 */    92,  547,  118,   95,  547,   30,  547,  547,  547,  100,
 /*  4920 */    99,  547,  547,   94,   91,   90,  547,  547,  280,  251,
 /*  4930 */   301,  287,  427,  398,  397,  188,  547,  291,  211,  547,
 /*  4940 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  4950 */   451,  547,  547,  547,  406,  421,  420,  182,  423,  170,
 /*  4960 */   171,  412,  295,  129,  100,   99,  547,  547,   94,   91,
 /*  4970 */    90,  547,  488,  280,  251,  301,  287,  427,  398,  397,
 /*  4980 */   188,  547,  291,  547,  547,  547,  547,  547,  164,  173,
 /*  4990 */   219,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  5000 */   279,  547,  547,  547,  547,  547,  399,  401,  547,  211,
 /*  5010 */   547,  547,  162,  547,  257,  258,  547,  547,  547,  254,
 /*  5020 */   547,  451,  547,  181,  547,  459,  547,  547,  547,  547,
 /*  5030 */   547,  547,  547,  547,  129,  547,  547,  547,  547,  105,
 /*  5040 */   262,  547,  120,  485,  547,   44,  547,  547,  547,  132,
 /*  5050 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  164,
 /*  5060 */   173,  219,  169,  222,  177,  452,  194,  197,  436,   93,
 /*  5070 */   165,  279,  211,  547,  547,  547,  547,  399,  401,  547,
 /*  5080 */   547,  547,  547,  547,  451,  257,  258,  547,  547,  547,
 /*  5090 */   547,  547,  547,  547,  386,  458,  457,  129,  547,  547,
 /*  5100 */   257,  258,  260,  391,  390,  405,  466,  427,  398,  397,
 /*  5110 */   188,  547,  291,  406,  421,  420,  182,  423,  170,  171,
 /*  5120 */   412,  295,  164,  173,  219,  169,  222,  177,  452,  194,
 /*  5130 */   197,  436,   93,  165,  279,  211,  547,  185,  547,  459,
 /*  5140 */   399,  401,  547,  547,  547,  162,  547,  451,  257,  258,
 /*  5150 */   547,  547,  254,  547,  262,  547,  547,  547,  547,  547,
 /*  5160 */   129,  547,  547,  132,  547,  547,  547,  547,  547,  516,
 /*  5170 */   547,  547,  547,  547,  547,  127,  547,  547,   44,  547,
 /*  5180 */   547,  547,  547,  547,  547,  164,  173,  219,  169,  222,
 /*  5190 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  5200 */   547,  211,  547,  399,  401,  547,  547,  547,  386,  458,
 /*  5210 */   457,  257,  258,  451,  257,  258,  260,  391,  390,  405,
 /*  5220 */   547,  547,  547,  547,  547,  547,  129,  547,  547,  547,
 /*  5230 */   547,  547,  547,  547,  547,  231,  280,  251,  301,  287,
 /*  5240 */   427,  398,  397,  188,  547,  291,  547,  547,  547,  547,
 /*  5250 */   547,  164,  173,  219,  169,  222,  177,  452,  194,  197,
 /*  5260 */   436,   93,  165,  279,  211,  547,  547,  547,  547,  399,
 /*  5270 */   401,  547,  547,  547,  547,  547,  451,  257,  258,  547,
 /*  5280 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  129,
 /*  5290 */   547,  547,  547,  547,  547,  547,  547,  547,  463,  451,
 /*  5300 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5310 */   547,  547,  129,  547,  164,  173,  219,  169,  222,  177,
 /*  5320 */   452,  194,  197,  436,   93,  165,  279,  211,  547,  547,
 /*  5330 */   547,  547,  399,  401,  547,  547,  547,  547,  547,  451,
 /*  5340 */   257,  258,  547,  430,  194,  197,  436,   93,  165,  279,
 /*  5350 */   547,  547,  129,  547,  547,  399,  401,  547,  547,  547,
 /*  5360 */   547,  489,  547,  257,  258,  547,  547,  547,  547,  547,
 /*  5370 */   547,  547,  547,  547,  547,  547,  547,  164,  173,  219,
 /*  5380 */   169,  222,  177,  452,  194,  197,  436,   93,  165,  279,
 /*  5390 */   547,  547,  547,  211,  547,  399,  401,  547,  547,  547,
 /*  5400 */   547,  547,  547,  257,  258,  451,  547,  547,  547,  547,
 /*  5410 */   547,  547,  547,  547,  547,  547,  547,  547,  129,  547,
 /*  5420 */   547,  547,  547,  547,  547,  547,  547,  518,  547,  547,
 /*  5430 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5440 */   547,  547,  547,  164,  173,  219,  169,  222,  177,  452,
 /*  5450 */   194,  197,  436,   93,  165,  279,  211,  180,  547,  459,
 /*  5460 */   547,  399,  401,  547,  547,  547,  547,  547,  451,  257,
 /*  5470 */   258,  547,  547,  547,  262,  547,  547,  547,  547,  547,
 /*  5480 */   547,  129,  547,  132,  547,  547,  547,  547,  547,  547,
 /*  5490 */   492,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5500 */   547,  547,  547,  547,  547,  547,  164,  173,  219,  169,
 /*  5510 */   222,  177,  452,  194,  197,  436,   93,  165,  279,  211,
 /*  5520 */   547,  547,  547,  547,  399,  401,  547,  547,  386,  458,
 /*  5530 */   457,  451,  257,  258,  257,  258,  260,  391,  390,  405,
 /*  5540 */   547,  547,  547,  547,  129,  547,  547,  547,  547,  547,
 /*  5550 */   547,  547,  547,  229,  547,  547,  547,  547,  547,  547,
 /*  5560 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  164,
 /*  5570 */   173,  219,  169,  222,  177,  452,  194,  197,  436,   93,
 /*  5580 */   165,  279,  547,  547,  547,  211,  547,  399,  401,  547,
 /*  5590 */   547,  547,  547,  547,  547,  257,  258,  451,  187,  547,
 /*  5600 */   459,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5610 */   129,  547,  547,  547,  547,  262,  547,  547,  547,  453,
 /*  5620 */   547,  547,  547,  547,  132,  547,  547,  547,  547,  547,
 /*  5630 */   547,  547,  547,  547,  547,  164,  173,  219,  169,  222,
 /*  5640 */   177,  452,  194,  197,  436,   93,  165,  279,  211,  547,
 /*  5650 */   547,  547,  547,  399,  401,  547,  547,  547,  547,  547,
 /*  5660 */   451,  257,  258,  547,  547,  547,  547,  547,  547,  386,
 /*  5670 */   458,  457,  547,  129,  547,  257,  258,  260,  391,  390,
 /*  5680 */   405,  547,  519,  451,  547,  547,  547,  547,  547,  547,
 /*  5690 */   547,  547,  547,  547,  547,  547,  129,  547,  164,  173,
 /*  5700 */   219,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  5710 */   279,  211,  547,  547,  547,  547,  399,  401,  547,  547,
 /*  5720 */   547,  547,  547,  451,  257,  258,  547,  467,  194,  197,
 /*  5730 */   436,   93,  165,  279,  547,  547,  129,  547,  547,  399,
 /*  5740 */   401,  547,  547,  547,  547,  487,  547,  257,  258,  547,
 /*  5750 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5760 */   547,  164,  173,  219,  169,  222,  177,  452,  194,  197,
 /*  5770 */   436,   93,  165,  279,  547,  547,  547,  211,  547,  399,
 /*  5780 */   401,  547,  547,  547,  547,  547,  547,  257,  258,  451,
 /*  5790 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5800 */   547,  547,  129,  547,  547,  547,  547,  547,  547,  547,
 /*  5810 */   547,  486,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5820 */   547,  547,  547,  547,  547,  547,  547,  164,  173,  219,
 /*  5830 */   169,  222,  177,  452,  194,  197,  436,   93,  165,  279,
 /*  5840 */   211,  547,  547,  547,  547,  399,  401,  547,  547,  547,
 /*  5850 */   547,  547,  451,  257,  258,  547,  547,  547,  547,  547,
 /*  5860 */   547,  547,  547,  547,  547,  129,  547,  547,  547,  547,
 /*  5870 */   547,  547,  547,  547,  515,  547,  547,  547,  547,  547,
 /*  5880 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5890 */   164,  173,  219,  169,  222,  177,  452,  194,  197,  436,
 /*  5900 */    93,  165,  279,  211,  547,  547,  547,  547,  399,  401,
 /*  5910 */   547,  547,  547,  547,  547,  451,  257,  258,  547,  547,
 /*  5920 */   547,  547,  547,  547,  547,  547,  547,  547,  129,  547,
 /*  5930 */   547,  547,  547,  547,  547,  547,  547,  484,  547,  547,
 /*  5940 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5950 */   547,  547,  547,  164,  173,  219,  169,  222,  177,  452,
 /*  5960 */   194,  197,  436,   93,  165,  279,  547,  547,  547,  211,
 /*  5970 */   547,  399,  401,  547,  547,  547,  547,  547,  547,  257,
 /*  5980 */   258,  451,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  5990 */   547,  547,  547,  547,  129,  547,  547,  547,  547,  547,
 /*  6000 */   547,  547,  547,  545,  547,  547,  547,  547,  547,  547,
 /*  6010 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  164,
 /*  6020 */   173,  219,  169,  222,  177,  452,  194,  197,  436,   93,
 /*  6030 */   165,  279,  211,  547,  547,  547,  547,  399,  401,  547,
 /*  6040 */   547,  547,  547,  547,  451,  257,  258,  547,  547,  547,
 /*  6050 */   547,  547,  547,  547,  547,  547,  547,  129,  547,  547,
 /*  6060 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6070 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6080 */   547,  547,  183,  173,  219,  169,  222,  177,  452,  194,
 /*  6090 */   197,  436,   93,  165,  279,  211,  547,  547,  547,  547,
 /*  6100 */   399,  401,  547,  547,  547,  547,  547,  451,  257,  258,
 /*  6110 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6120 */   129,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6130 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6140 */   547,  547,  547,  547,  547,  547,  175,  219,  169,  222,
 /*  6150 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  6160 */   547,  211,  547,  399,  401,  547,  547,  547,  547,  547,
 /*  6170 */   547,  257,  258,  451,  547,  547,  547,  547,  547,  547,
 /*  6180 */   547,  547,  547,  547,  547,  547,  129,  547,  547,  547,
 /*  6190 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  211,
 /*  6200 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6210 */   547,  451,  176,  219,  169,  222,  177,  452,  194,  197,
 /*  6220 */   436,   93,  165,  279,  129,  547,  547,  547,  547,  399,
 /*  6230 */   401,  547,  547,  547,  547,  547,  547,  257,  258,  547,
 /*  6240 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6250 */   547,  199,  169,  222,  177,  452,  194,  197,  436,   93,
 /*  6260 */   165,  279,  211,  547,  547,  547,  547,  399,  401,  547,
 /*  6270 */   547,  547,  547,  547,  451,  257,  258,  547,  547,  547,
 /*  6280 */   547,  547,  547,  547,  547,  547,  547,  129,  211,  547,
 /*  6290 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6300 */   451,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6310 */   547,  547,  547,  129,  190,  169,  222,  177,  452,  194,
 /*  6320 */   197,  436,   93,  165,  279,  547,  547,  547,  547,  547,
 /*  6330 */   399,  401,  547,  547,  547,  547,  547,  547,  257,  258,
 /*  6340 */   192,  169,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  6350 */   279,  547,  547,  547,  211,  547,  399,  401,  547,  547,
 /*  6360 */   547,  547,  547,  547,  257,  258,  451,  547,  547,  547,
 /*  6370 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  129,
 /*  6380 */   211,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6390 */   547,  547,  451,  547,  547,  547,  547,  547,  547,  547,
 /*  6400 */   547,  547,  547,  547,  547,  129,  547,  172,  222,  177,
 /*  6410 */   452,  194,  197,  436,   93,  165,  279,  547,  547,  547,
 /*  6420 */   547,  547,  399,  401,  547,  547,  547,  547,  547,  547,
 /*  6430 */   257,  258,  547,  168,  222,  177,  452,  194,  197,  436,
 /*  6440 */    93,  165,  279,  547,  547,  547,  547,  547,  399,  401,
 /*  6450 */   547,  547,  547,  547,  547,  221,  257,  258,  547,  547,
 /*  6460 */   547,  547,  547,  547,  547,  547,  547,  451,  547,  547,
 /*  6470 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6480 */   129,  210,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6490 */   547,  547,  547,  451,  547,  547,  547,  547,  547,  547,
 /*  6500 */   547,  547,  547,  547,  547,  547,  129,  547,  193,  222,
 /*  6510 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  6520 */   451,  547,  547,  399,  401,  547,  547,  547,  547,  547,
 /*  6530 */   547,  257,  258,  129,  223,  222,  177,  452,  194,  197,
 /*  6540 */   436,   93,  165,  279,  547,  547,  451,  547,  547,  399,
 /*  6550 */   401,  547,  547,  547,  547,  547,  547,  257,  258,  129,
 /*  6560 */   547,  547,  222,  177,  452,  194,  197,  436,   93,  165,
 /*  6570 */   279,  547,  547,  547,  547,  547,  399,  401,  547,  547,
 /*  6580 */   547,  547,  547,  547,  257,  258,  547,  451,  222,  177,
 /*  6590 */   452,  194,  197,  436,   93,  165,  279,  547,  547,  547,
 /*  6600 */   129,  547,  399,  401,  547,  547,  547,  547,  547,  451,
 /*  6610 */   257,  258,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6620 */   547,  547,  129,  547,  547,  547,  547,  547,  547,  195,
 /*  6630 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  6640 */   547,  547,  547,  399,  401,  547,  547,  451,  547,  547,
 /*  6650 */   547,  257,  258,  462,  194,  197,  436,   93,  165,  279,
 /*  6660 */   129,  547,  547,  547,  547,  399,  401,  547,  547,  547,
 /*  6670 */   451,  547,  547,  257,  258,  547,  547,  547,  547,  547,
 /*  6680 */   547,  547,  547,  129,  547,  547,  547,  547,  547,  217,
 /*  6690 */   177,  452,  194,  197,  436,   93,  165,  279,  547,  547,
 /*  6700 */   547,  547,  547,  399,  401,  547,  547,  547,  547,  547,
 /*  6710 */   547,  257,  258,  174,  452,  194,  197,  436,   93,  165,
 /*  6720 */   279,  547,  547,  451,  547,  547,  399,  401,  547,  547,
 /*  6730 */   547,  547,  547,  547,  257,  258,  129,  547,  547,  547,
 /*  6740 */   547,  547,  547,  547,  451,  547,  547,  547,  547,  547,
 /*  6750 */   547,  547,  547,  547,  547,  547,  547,  129,  547,  547,
 /*  6760 */   547,  547,  547,  547,  547,  451,  178,  452,  194,  197,
 /*  6770 */   436,   93,  165,  279,  547,  547,  547,  547,  129,  399,
 /*  6780 */   401,  547,  547,  547,  547,  547,  451,  257,  258,  281,
 /*  6790 */   278,  435,   93,  165,  279,  547,  547,  547,  547,  129,
 /*  6800 */   399,  401,  547,  547,  547,  547,  547,  451,  257,  258,
 /*  6810 */   281,  278,  464,   93,  165,  279,  547,  547,  547,  547,
 /*  6820 */   129,  399,  401,  547,  547,  547,  547,  547,  451,  257,
 /*  6830 */   258,  281,  278,  470,   93,  165,  279,  547,  547,  547,
 /*  6840 */   547,  129,  399,  401,  547,  547,  547,  547,  547,  451,
 /*  6850 */   257,  258,  281,  278,  469,   93,  165,  279,  547,  547,
 /*  6860 */   547,  547,  129,  399,  401,  547,  547,  547,  547,  547,
 /*  6870 */   451,  257,  258,  281,  278,  449,   93,  165,  279,  547,
 /*  6880 */   547,  547,  547,  129,  399,  401,  547,  547,  547,  547,
 /*  6890 */   547,  547,  257,  258,  281,  278,  450,   93,  165,  279,
 /*  6900 */   547,  547,  547,  547,  547,  399,  401,  547,  547,  547,
 /*  6910 */   547,  451,  547,  257,  258,  281,  278,  465,   93,  165,
 /*  6920 */   279,  547,  547,  547,  129,  547,  399,  401,  547,  547,
 /*  6930 */   547,  547,  547,  547,  257,  258,  547,  547,  547,  547,
 /*  6940 */   547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
 /*  6950 */   547,  547,  547,  547,  547,  547,  281,  278,  547,  547,
 /*  6960 */   167,  279,  547,  547,  547,  547,  547,  399,  401,  547,
 /*  6970 */   547,  547,  547,  547,  547,  257,  258,
    );
    static public $yy_lookahead = array(
 /*     0 */     9,  117,  118,  117,   13,  121,  122,  121,  158,   20,
 /*    10 */    19,   20,   21,   22,   23,   20,   40,   41,   27,   28,
 /*    20 */    29,   30,   47,   47,   33,   41,   35,   36,   37,   40,
 /*    30 */    41,   40,   41,   20,   43,   44,   23,   46,   43,   44,
 /*    40 */    45,   21,   51,   23,   53,   54,   55,   56,   57,   58,
 /*    50 */    59,   60,   61,   62,  204,   25,   65,  207,  208,   68,
 /*    60 */    69,   70,   71,   72,   40,   41,   75,   76,   77,   78,
 /*    70 */    79,  156,   20,  158,   31,   23,  161,  162,  163,  117,
 /*    80 */   118,   97,   98,  121,  122,   22,   95,   96,   23,   46,
 /*    90 */    99,  100,  101,   31,   32,  104,  105,  106,  107,  108,
 /*   100 */   109,  110,  111,   73,  113,  114,  115,  116,  117,  118,
 /*   110 */   119,  120,  121,  122,    9,  137,  138,  139,   13,  142,
 /*   120 */   142,   24,  207,  208,   19,   20,   21,   22,   23,   66,
 /*   130 */    67,   25,   27,   28,   29,   30,  164,   22,   33,   24,
 /*   140 */    35,   36,   37,  166,   47,   40,   41,   22,   43,   44,
 /*   150 */    13,   46,   46,   91,   92,  112,   51,   46,   53,   54,
 /*   160 */    55,   56,   57,   58,   59,   60,   61,   62,   31,    7,
 /*   170 */    65,    9,   10,   68,   69,   70,   71,   72,    4,   73,
 /*   180 */    75,   76,   77,   78,   79,   21,  214,   23,  211,  212,
 /*   190 */   213,   66,   67,   34,  217,  218,  224,   38,   39,   46,
 /*   200 */    95,   96,   27,   28,   99,  100,  101,   47,   33,  104,
 /*   210 */   105,  106,  107,  108,  109,  110,  111,   13,  113,  114,
 /*   220 */   115,  116,  117,  118,  119,  120,  121,  122,    9,   20,
 /*   230 */   142,   34,   13,   93,   94,   31,   40,   41,   19,   20,
 /*   240 */    21,   20,   23,   47,   23,  157,   27,   28,   29,   30,
 /*   250 */    46,   22,   33,   24,  166,   74,   46,  162,  163,   40,
 /*   260 */    41,   52,   43,   44,   90,   46,   46,   48,   49,   50,
 /*   270 */    51,   20,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   280 */    61,   62,    5,   73,   65,    8,   13,   68,   69,   70,
 /*   290 */    71,   72,   41,   73,   75,   76,   77,   78,   79,  211,
 /*   300 */   212,  213,  159,  208,   31,  217,  218,  164,   32,  112,
 /*   310 */   100,  101,  102,  103,   95,   96,   40,   41,   99,  100,
 /*   320 */   101,  158,   24,  104,  105,  106,  107,  108,  109,  110,
 /*   330 */   111,   46,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   340 */   121,  122,    9,   47,  142,   47,   13,   43,   44,   45,
 /*   350 */   187,   74,   19,   20,   21,   22,   23,  164,   45,  157,
 /*   360 */    27,   28,   29,   30,   13,  117,   33,  204,  166,  121,
 /*   370 */   207,  208,   32,   40,   41,  164,   43,   44,   48,   46,
 /*   380 */    40,   41,   31,   20,   51,  112,   53,   54,   55,   56,
 /*   390 */    57,   58,   59,   60,   61,   62,   24,   46,   65,  162,
 /*   400 */   163,   68,   69,   70,   71,   72,   43,  214,   75,   76,
 /*   410 */    77,   78,   79,  211,  212,  213,   24,  224,   31,  217,
 /*   420 */   218,   23,  138,  139,   32,  214,  142,   25,   95,   96,
 /*   430 */    95,   96,   99,  100,  101,  224,   20,  104,  105,  106,
 /*   440 */   107,  108,  109,  110,  111,  208,  113,  114,  115,  116,
 /*   450 */   117,  118,  119,  120,  121,  122,    9,   20,   20,   43,
 /*   460 */    13,   20,   23,  112,  162,  163,   19,   20,   21,   22,
 /*   470 */    23,   20,  153,   20,   27,   28,   29,   30,   40,   41,
 /*   480 */    33,   40,   41,   42,   56,  166,   32,   40,   41,   52,
 /*   490 */    43,   44,   41,   46,   40,   41,   43,   20,   51,  112,
 /*   500 */    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*   510 */   208,  214,   65,  129,  130,   68,   69,   70,   71,   72,
 /*   520 */    43,  224,   75,   76,   77,   78,   79,   41,  209,  210,
 /*   530 */   116,  117,  179,  180,  214,  121,  217,  218,  173,  174,
 /*   540 */   159,   32,   95,   96,  224,  164,   99,  100,  101,   40,
 /*   550 */    41,  104,  105,  106,  107,  108,  109,  110,  111,   13,
 /*   560 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*   570 */     9,  215,  216,   20,   13,  214,   73,   31,  183,  184,
 /*   580 */    19,   20,   21,   22,   23,  224,  153,  214,   27,   28,
 /*   590 */    29,   30,   24,   21,   33,   23,   43,  224,   40,  166,
 /*   600 */    32,   40,   41,   20,   43,   44,   23,   46,  151,  152,
 /*   610 */    31,   24,   51,   23,   53,   54,   55,   56,   57,   58,
 /*   620 */    59,   60,   61,   62,   49,   50,   65,   20,   21,   68,
 /*   630 */    69,   70,   71,   72,   47,   23,   75,   76,   77,   78,
 /*   640 */    79,   23,  209,  210,   20,   23,   22,   20,   23,   21,
 /*   650 */   217,  218,   47,   34,   46,   41,   95,   96,   20,   46,
 /*   660 */    99,  100,  101,   31,   20,  104,  105,  106,  107,  108,
 /*   670 */   109,  110,  111,   20,  113,  114,  115,  116,  117,  118,
 /*   680 */   119,  120,  121,  122,    9,   21,   41,   47,   13,   23,
 /*   690 */    31,   23,  121,   47,   19,   20,   21,   22,   23,   21,
 /*   700 */    74,  121,   27,   28,   29,   30,  121,  121,   33,  121,
 /*   710 */   121,   46,   20,   34,   23,   40,   41,   24,   43,   44,
 /*   720 */    13,   46,   13,    9,   13,   13,   51,   46,   53,   54,
 /*   730 */    55,   56,   57,   58,   59,   60,   61,   62,   20,   31,
 /*   740 */    65,  112,   46,   68,   69,   70,   71,   72,   23,    2,
 /*   750 */    75,   76,   77,   78,   79,    9,   20,   23,   20,   22,
 /*   760 */    25,   22,   31,   23,   13,   13,   47,   34,   13,   47,
 /*   770 */    95,   96,   46,  208,   99,  100,  101,  135,  144,  104,
 /*   780 */   105,  106,  107,  108,  109,  110,  111,  150,  113,  114,
 /*   790 */   115,  116,  117,  118,  119,  120,  121,  122,    9,  160,
 /*   800 */   208,  160,   13,  160,  152,  149,  225,  160,   19,   20,
 /*   810 */    21,   22,   23,   20,  160,  160,   27,   28,   29,   30,
 /*   820 */   160,  160,   33,  160,   43,  135,  164,  218,   21,   40,
 /*   830 */    41,   63,   43,   44,  164,   46,  164,  180,  164,  150,
 /*   840 */    51,   21,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   850 */    61,   62,   31,  184,   65,   43,  208,   68,   69,   70,
 /*   860 */    71,   72,  226,  226,   75,   76,   77,   78,   79,  226,
 /*   870 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*   880 */   226,  226,  226,  226,   95,   96,  226,  226,   99,  100,
 /*   890 */   101,  226,  226,  104,  105,  106,  107,  108,  109,  110,
 /*   900 */   111,  226,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   910 */   121,  122,    9,  226,  226,  226,   13,  226,  226,  226,
 /*   920 */   226,  226,   19,   20,   21,   22,   23,  226,  226,  226,
 /*   930 */    27,   28,   29,   30,  226,  226,   33,  226,  226,  226,
 /*   940 */   226,  226,  226,   40,   41,  226,   43,   44,  226,   46,
 /*   950 */   226,  226,  226,  226,   51,  226,   53,   54,   55,   56,
 /*   960 */    57,   58,   59,   60,   61,   62,  226,  226,   65,  226,
 /*   970 */   226,   68,   69,   70,   71,   72,  226,  226,   75,   76,
 /*   980 */    77,   78,   79,  226,  226,  226,  226,  226,  226,  226,
 /*   990 */   226,  226,  226,  226,  226,  226,  226,  226,   95,   96,
 /*  1000 */   226,  226,   99,  100,  101,  226,  226,  104,  105,  106,
 /*  1010 */   107,  108,  109,  110,  111,  226,  113,  114,  115,  116,
 /*  1020 */   117,  118,  119,  120,  121,  122,    9,  226,  226,  226,
 /*  1030 */    13,  226,  226,  226,  226,  226,   19,   20,   21,   22,
 /*  1040 */    23,  226,  226,  226,   27,   28,   29,   30,  226,  226,
 /*  1050 */    33,  226,  226,  226,  226,  226,  226,   40,   41,  226,
 /*  1060 */    43,   44,  226,   46,  226,  226,  226,  226,   51,  226,
 /*  1070 */    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*  1080 */   226,  226,   65,  226,  226,   68,   69,   70,   71,   72,
 /*  1090 */   226,  226,   75,   76,   77,   78,   79,  226,  226,  226,
 /*  1100 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  1110 */   226,  226,   95,   96,  226,  226,   99,  100,  101,  226,
 /*  1120 */   226,  104,  105,  106,  107,  108,  109,  110,  111,  226,
 /*  1130 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1140 */     9,  226,  226,  226,   13,  226,  226,  226,  226,  226,
 /*  1150 */    19,   20,   21,  226,   23,  226,  226,  226,   27,   28,
 /*  1160 */    29,   30,  226,  226,   33,  226,  226,  226,  226,  226,
 /*  1170 */   226,   40,   41,  226,   43,   44,  226,   46,  226,  226,
 /*  1180 */   226,  226,   51,  226,   53,   54,   55,   56,   57,   58,
 /*  1190 */    59,   60,   61,   62,  226,  226,   65,  226,  226,   68,
 /*  1200 */    69,   70,   71,   72,  226,  226,   75,   76,   77,   78,
 /*  1210 */    79,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  1220 */   226,  226,  226,  226,  226,  226,   95,   96,  226,  226,
 /*  1230 */    99,  100,  101,  226,  226,  104,  105,  106,  107,  108,
 /*  1240 */   109,  110,  111,  226,  113,  114,  115,  116,  117,  118,
 /*  1250 */   119,  120,  121,  122,    9,  226,  226,  140,   13,  142,
 /*  1260 */   226,  226,  226,  226,   19,   20,   21,  226,   23,  226,
 /*  1270 */   153,  226,   27,   28,  157,   30,  226,  226,   33,  226,
 /*  1280 */   226,  226,  226,  166,  226,   40,   41,  226,   43,   44,
 /*  1290 */   226,   46,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  1300 */    55,   56,   57,   58,   59,   60,   61,   62,  226,  226,
 /*  1310 */    65,  226,  226,   68,   69,   70,   71,   72,  226,  226,
 /*  1320 */    75,   76,   77,   78,   79,  226,  209,  210,  211,  212,
 /*  1330 */   213,  226,  226,  226,  217,  218,  219,  220,  221,  222,
 /*  1340 */    95,   96,  226,  226,   99,  100,  101,  226,  226,  104,
 /*  1350 */   105,  106,  107,  108,  109,  110,  111,  226,  113,  114,
 /*  1360 */   115,  116,  117,  118,  119,  120,  121,  122,  126,  127,
 /*  1370 */   128,    9,  226,  226,  132,  133,  134,  226,  136,  226,
 /*  1380 */   226,  226,   20,  141,  142,  143,  144,  145,  146,  147,
 /*  1390 */   148,  226,  226,  226,    9,  153,  154,  155,  226,  157,
 /*  1400 */   226,  226,   40,   41,   42,   20,  226,  165,  166,  167,
 /*  1410 */   226,  226,  170,  226,  226,  226,  226,  175,  176,  177,
 /*  1420 */   178,  226,  226,  226,  182,   40,   41,  185,  186,  226,
 /*  1430 */   188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
 /*  1440 */   198,  199,  200,  201,  202,  203,  226,  226,  226,  226,
 /*  1450 */   226,  209,  210,  211,  212,  213,  226,  226,  226,  217,
 /*  1460 */   218,  226,  226,  226,  226,  226,  226,  126,  127,  128,
 /*  1470 */   226,  226,  226,  132,  133,  134,  226,  136,  226,  226,
 /*  1480 */   226,  226,  141,  142,  143,  144,  226,  226,  226,  226,
 /*  1490 */   226,  226,  226,  226,  153,  154,  155,  226,  157,  226,
 /*  1500 */   226,  226,  226,  226,  226,  226,  165,  166,  167,  226,
 /*  1510 */   226,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  1520 */   226,  226,  226,  182,  226,  226,  185,  186,  226,  188,
 /*  1530 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  1540 */   199,  200,  201,  202,  203,  226,  226,  226,  226,  226,
 /*  1550 */   209,  210,  211,  212,  213,  126,  127,  128,  217,  218,
 /*  1560 */   226,  132,  133,  134,  226,  136,  226,  226,  226,  226,
 /*  1570 */   141,  142,  143,  144,  226,  146,  147,  148,  226,  226,
 /*  1580 */   226,  226,  153,  154,  155,  226,  157,  226,  226,  226,
 /*  1590 */   226,  226,  226,  226,  165,  166,  167,  226,  226,  170,
 /*  1600 */   226,  226,  226,  226,  175,  176,  177,  178,  226,  226,
 /*  1610 */   226,  182,  226,  226,  185,  186,  226,  188,  189,  190,
 /*  1620 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
 /*  1630 */   201,  202,  203,  226,  226,  226,  226,  226,  209,  210,
 /*  1640 */   211,  212,  213,  226,  226,  226,  217,  218,  124,  125,
 /*  1650 */   126,  127,  128,  226,  226,  226,  132,  133,  134,  226,
 /*  1660 */   136,  226,  226,  226,  226,  141,  142,  143,  144,  226,
 /*  1670 */   226,  226,  226,  226,  226,  226,  226,  153,  154,  155,
 /*  1680 */   226,  157,  226,  226,  226,  226,  226,  226,  226,  165,
 /*  1690 */   166,  167,  226,  226,  170,  226,  226,  226,  226,  175,
 /*  1700 */   176,  177,  178,  226,  226,  226,  182,  226,  226,  185,
 /*  1710 */   186,  226,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  1720 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  1730 */   226,  226,  226,  209,  210,  211,  212,  213,  226,  226,
 /*  1740 */   226,  217,  218,  125,  126,  127,  128,  226,  226,  131,
 /*  1750 */   132,  133,  134,  226,  136,  226,  226,  226,  226,  141,
 /*  1760 */   142,  143,  144,  226,  226,  226,  226,  226,  226,  226,
 /*  1770 */   226,  153,  154,  155,  226,  157,  226,  226,  226,  226,
 /*  1780 */   226,  226,  226,  165,  166,  167,  226,  226,  170,  226,
 /*  1790 */   226,  226,  226,  175,  176,  177,  178,  226,  226,  226,
 /*  1800 */   182,  226,  226,  185,  186,  226,  188,  189,  190,  191,
 /*  1810 */   192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
 /*  1820 */   202,  203,  226,  226,  226,  226,  226,  209,  210,  211,
 /*  1830 */   212,  213,  226,  226,  226,  217,  218,  226,  125,  126,
 /*  1840 */   127,  128,  226,  226,  226,  132,  133,  134,  226,  136,
 /*  1850 */   226,  226,  226,  226,  141,  142,  143,  144,  226,  226,
 /*  1860 */   226,  226,  226,  226,  226,  226,  153,  154,  155,  226,
 /*  1870 */   157,  226,  226,  226,  226,  226,  226,  226,  165,  166,
 /*  1880 */   167,  226,  226,  170,  226,  226,  226,  226,  175,  176,
 /*  1890 */   177,  178,  226,  226,  226,  182,  226,  226,  185,  186,
 /*  1900 */   226,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  1910 */   197,  198,  199,  200,  201,  202,  203,  226,  226,  226,
 /*  1920 */   226,  226,  209,  210,  211,  212,  213,  226,  226,  226,
 /*  1930 */   217,  218,  125,  126,  127,  128,  226,  226,  226,  132,
 /*  1940 */   133,  134,  226,  136,  226,  226,  226,  226,  141,  142,
 /*  1950 */   143,  144,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  1960 */   153,  154,  155,  226,  157,  226,  226,  226,  226,  226,
 /*  1970 */   226,  226,  165,  166,  167,  226,  226,  170,  226,  226,
 /*  1980 */   226,  226,  175,  176,  177,  178,  226,  226,  226,  182,
 /*  1990 */   226,  226,  185,  186,  226,  188,  189,  190,  191,  192,
 /*  2000 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  2010 */   203,  226,  226,  226,  226,  226,  209,  210,  211,  212,
 /*  2020 */   213,  226,  226,  226,  217,  218,  226,  125,  126,  127,
 /*  2030 */   128,  226,  226,  226,  132,  133,  134,  226,  136,  226,
 /*  2040 */   226,  226,  226,  141,  142,  143,  144,  226,  226,  226,
 /*  2050 */   226,  226,  226,  226,  226,  153,  154,  155,  226,  157,
 /*  2060 */   226,  226,  226,  226,  226,  226,  226,  165,  166,  167,
 /*  2070 */   226,  226,  170,  226,  226,  226,  226,  175,  176,  177,
 /*  2080 */   178,  226,  226,  226,  182,  226,  226,  185,  186,  226,
 /*  2090 */   188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
 /*  2100 */   198,  199,  200,  201,  202,  203,  226,  226,  226,  226,
 /*  2110 */   226,  209,  210,  211,  212,  213,  226,  226,  226,  217,
 /*  2120 */   218,  125,  126,  127,  128,  226,  226,  226,  132,  133,
 /*  2130 */   134,  226,  136,  226,  226,  226,  226,  141,  142,  143,
 /*  2140 */   144,  226,  226,  226,  226,  226,  226,  226,  226,  153,
 /*  2150 */   154,  155,  226,  157,  226,  226,  226,  226,  226,  226,
 /*  2160 */   226,  165,  166,  167,  226,  226,  170,  226,  226,  226,
 /*  2170 */   226,  175,  176,  177,  178,  226,  226,  226,  182,  226,
 /*  2180 */   226,  185,  186,  226,  188,  189,  190,  191,  192,  193,
 /*  2190 */   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
 /*  2200 */   226,  226,  226,  226,  226,  209,  210,  211,  212,  213,
 /*  2210 */   226,  226,  226,  217,  218,  226,  125,  126,  127,  128,
 /*  2220 */   226,  226,  226,  132,  133,  134,  226,  136,  226,  226,
 /*  2230 */   226,  226,  141,  142,  143,  144,  226,  226,  226,  226,
 /*  2240 */   226,  226,  226,  226,  153,  154,  155,  226,  157,  226,
 /*  2250 */   226,  226,  226,  226,  226,  226,  165,  166,  167,  226,
 /*  2260 */   226,  170,  226,  226,  226,  226,  175,  176,  177,  178,
 /*  2270 */   226,  226,  226,  182,  226,  226,  185,  186,  226,  188,
 /*  2280 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  2290 */   199,  200,  201,  202,  203,  226,  226,  226,  226,  226,
 /*  2300 */   209,  210,  211,  212,  213,  226,  226,  226,  217,  218,
 /*  2310 */   125,  126,  127,  128,  226,  226,  226,  132,  133,  134,
 /*  2320 */   226,  136,  226,  226,  226,  226,  141,  142,  143,  144,
 /*  2330 */   226,  226,  226,  226,  226,  226,  226,  226,  153,  154,
 /*  2340 */   155,  226,  157,  226,  226,  226,  226,  226,  226,  226,
 /*  2350 */   165,  166,  167,  226,  226,  170,  226,  226,  226,  226,
 /*  2360 */   175,  176,  177,  178,  226,  226,  226,  182,  226,  226,
 /*  2370 */   185,  186,  226,  188,  189,  190,  191,  192,  193,  194,
 /*  2380 */   195,  196,  197,  198,  199,  200,  201,  202,  203,  226,
 /*  2390 */   226,  226,  226,  226,  209,  210,  211,  212,  213,  226,
 /*  2400 */   226,  226,  217,  218,  226,  125,  126,  127,  128,  226,
 /*  2410 */   226,  226,  132,  133,  134,  226,  136,  226,  226,  226,
 /*  2420 */   226,  141,  142,  143,  144,  226,  226,  226,  226,  226,
 /*  2430 */   226,  226,  226,  153,  154,  155,  226,  157,  226,  226,
 /*  2440 */   226,  226,  226,  226,  226,  165,  166,  167,  226,  226,
 /*  2450 */   170,  226,  226,  226,  226,  175,  176,  177,  178,  226,
 /*  2460 */   226,  226,  182,  226,  226,  185,  186,  226,  188,  189,
 /*  2470 */   190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  2480 */   200,  201,  202,  203,  226,  226,  226,  226,  226,  209,
 /*  2490 */   210,  211,  212,  213,  226,  226,  226,  217,  218,  125,
 /*  2500 */   126,  127,  128,  226,  226,  226,  132,  133,  134,  226,
 /*  2510 */   136,  226,  226,  226,  226,  141,  142,  143,  144,  226,
 /*  2520 */   226,  226,  226,  226,  226,  226,  226,  153,  154,  155,
 /*  2530 */   226,  157,  226,  226,  226,  226,  226,  226,  226,  165,
 /*  2540 */   166,  167,  226,  226,  170,  226,  226,  226,  226,  175,
 /*  2550 */   176,  177,  178,  226,  226,  226,  182,  226,  226,  185,
 /*  2560 */   186,  226,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  2570 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  2580 */   226,  226,  226,  209,  210,  211,  212,  213,  226,  226,
 /*  2590 */   226,  217,  218,  226,  125,  126,  127,  128,  226,  226,
 /*  2600 */   226,  132,  133,  134,  226,  136,  226,  226,   13,  226,
 /*  2610 */   141,  142,  143,  144,  226,   20,  226,  226,  226,  226,
 /*  2620 */   226,  226,  153,  154,  155,  226,  157,  226,  226,  226,
 /*  2630 */   226,  226,  226,  226,  165,  166,  167,  226,   43,  170,
 /*  2640 */   226,   46,  226,  226,  175,  176,  177,  178,  226,  226,
 /*  2650 */   226,  182,  226,  226,  185,  186,  226,  188,  189,  190,
 /*  2660 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
 /*  2670 */   201,  202,  203,  226,  226,  226,  226,  226,  209,  210,
 /*  2680 */   211,  212,  213,  126,  127,  128,  217,  218,  226,  132,
 /*  2690 */   133,  134,  226,  136,  226,  226,  226,  226,  141,  142,
 /*  2700 */   143,  144,  226,  108,  109,  110,  111,  226,  113,  226,
 /*  2710 */   153,  154,  155,  226,  157,  226,  226,  226,  226,  226,
 /*  2720 */   226,  226,  165,  166,  167,  226,  226,  170,  226,  226,
 /*  2730 */   226,  226,  175,  176,  177,  178,  226,  226,  226,  182,
 /*  2740 */   226,  226,  185,  186,  226,  188,  189,  190,  191,  192,
 /*  2750 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  2760 */   203,  226,  226,  226,  226,  226,  209,  210,  211,  212,
 /*  2770 */   213,  226,  127,  128,  217,  218,  226,  132,  133,  134,
 /*  2780 */   226,  136,  226,  226,  226,  226,  141,  142,  143,  144,
 /*  2790 */   226,  226,  226,  226,  226,  226,  226,  226,  153,  226,
 /*  2800 */   155,  226,  157,  226,  226,  226,  226,  226,  226,  226,
 /*  2810 */   226,  166,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  2820 */   175,  176,  177,  178,  226,  226,  226,  182,  226,  226,
 /*  2830 */   185,  186,  226,  188,  189,  190,  191,  192,  193,  194,
 /*  2840 */   195,  196,  197,  198,  199,  200,  201,  202,  203,  226,
 /*  2850 */   226,  226,  226,  226,  209,  210,  211,  212,  213,  226,
 /*  2860 */   127,  128,  217,  218,  226,  132,  133,  134,  226,  136,
 /*  2870 */   226,  226,  226,  226,  141,  142,  143,  144,  226,  226,
 /*  2880 */   226,  226,  226,  226,  226,  226,  153,  226,  155,  226,
 /*  2890 */   157,  226,  226,  226,  226,  226,  226,  226,  226,  166,
 /*  2900 */   226,  226,  226,  226,  226,  226,  226,  226,  175,  176,
 /*  2910 */   177,  178,  226,  226,  226,  182,  226,  226,  185,  186,
 /*  2920 */   226,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  2930 */   197,  198,  199,  200,  201,  202,  203,  226,  226,  226,
 /*  2940 */   226,  226,  209,  210,  211,  212,  213,  226,  127,  128,
 /*  2950 */   217,  218,  226,  132,  133,  134,  226,  136,  226,  226,
 /*  2960 */   226,  226,  141,  142,  143,  144,  226,  226,  226,  226,
 /*  2970 */   226,  226,  226,  226,  153,  226,  155,  226,  157,  226,
 /*  2980 */   226,  226,  226,  226,  226,  226,  226,  166,  226,  226,
 /*  2990 */   226,  226,  226,  226,  226,  226,  175,  176,  177,  178,
 /*  3000 */   226,  226,  226,  182,  226,  226,  185,  186,  226,  188,
 /*  3010 */   189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  3020 */   199,  200,  201,  202,  203,  226,  226,  226,  226,  226,
 /*  3030 */   209,  210,  211,  212,  213,  226,  127,  128,  217,  218,
 /*  3040 */   226,  132,  133,  134,  226,  136,  226,  226,  226,  226,
 /*  3050 */   141,  142,  143,  144,  226,  226,  226,  226,  226,  226,
 /*  3060 */   226,  226,  153,  226,  155,  226,  157,  226,  226,  226,
 /*  3070 */   226,  226,  226,  226,  226,  166,  226,  226,  226,  226,
 /*  3080 */   226,  226,  226,  226,  175,  176,  177,  178,  226,  226,
 /*  3090 */   226,  182,  226,  226,  185,  186,  226,  188,  189,  190,
 /*  3100 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
 /*  3110 */   201,  202,  203,  226,  226,  226,  226,  226,  209,  210,
 /*  3120 */   211,  212,  213,  226,  127,  128,  217,  218,  226,  132,
 /*  3130 */   133,  134,  226,  136,  226,  226,  226,  226,  141,  142,
 /*  3140 */   143,  144,  226,  226,  226,   26,   27,   28,   29,  226,
 /*  3150 */   153,   32,  155,  226,  157,  226,  226,  226,  226,  226,
 /*  3160 */   226,  226,  226,  166,  226,  226,   26,   27,   28,   29,
 /*  3170 */   226,  226,  175,  176,  177,  178,  226,  226,  226,  182,
 /*  3180 */   226,  226,  185,  186,  226,  188,  189,  190,  191,  192,
 /*  3190 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  3200 */   203,  226,  226,  226,  226,  226,  209,  210,  211,  212,
 /*  3210 */   213,  226,  226,  226,  217,  218,    9,  226,  226,  226,
 /*  3220 */    13,  226,  226,  226,  226,  226,  226,   20,  226,  226,
 /*  3230 */    23,  226,  226,  114,  115,  116,  117,  118,  119,  120,
 /*  3240 */   121,  122,  226,  226,  226,  226,  226,   40,   41,  226,
 /*  3250 */    43,   44,  226,   46,  114,  115,  116,  117,  118,  119,
 /*  3260 */   120,  121,  122,  226,  226,  226,  226,  226,   13,  226,
 /*  3270 */   226,  140,  226,  142,  226,  226,  226,  226,   71,   72,
 /*  3280 */   226,  226,   75,   76,   77,   78,   79,  226,  157,  158,
 /*  3290 */   226,  226,  226,  226,  226,   40,  226,  166,   43,  168,
 /*  3300 */   169,  226,   95,   96,  226,  226,   99,  100,  101,  226,
 /*  3310 */   226,  104,  105,  106,  107,  108,  109,  110,  111,  226,
 /*  3320 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  3330 */     9,  226,  226,  226,   13,  226,  226,  226,  207,  208,
 /*  3340 */   226,   20,  211,  212,  213,  226,  226,  226,  217,  218,
 /*  3350 */   219,  220,  221,  222,  226,  226,  226,  226,  226,  226,
 /*  3360 */   226,   40,   41,  226,   43,   44,  226,   46,  226,  114,
 /*  3370 */   115,  116,  117,  118,  119,  120,  121,  122,  226,  226,
 /*  3380 */   226,  226,  226,  226,  226,   64,  226,  226,  140,  226,
 /*  3390 */   142,  226,   71,   72,  226,  226,   75,   76,   77,   78,
 /*  3400 */    79,  153,  226,  226,  226,  157,  226,  226,  226,  226,
 /*  3410 */   226,  226,  226,  226,  166,  226,   95,   96,  226,   13,
 /*  3420 */    99,  100,  101,  226,  226,  104,  105,  106,  107,  108,
 /*  3430 */   109,  110,  111,  226,  113,  114,  115,  116,  117,  118,
 /*  3440 */   119,  120,  121,  122,    9,  226,  226,   41,   13,   43,
 /*  3450 */   226,  226,  226,  226,  226,   20,  226,  209,  210,  211,
 /*  3460 */   212,  213,  226,  226,  226,  217,  218,  219,  220,  221,
 /*  3470 */   222,  223,  226,  225,  226,   40,   41,  226,   43,   44,
 /*  3480 */   226,   46,  226,  226,  226,    5,  226,  226,    8,  226,
 /*  3490 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  3500 */   226,  226,  226,  226,  226,   25,   71,   72,  226,  226,
 /*  3510 */    75,   76,   77,   78,   79,  226,  226,  226,  226,  226,
 /*  3520 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  226,
 /*  3530 */    95,   96,  226,  226,   99,  100,  101,  226,  226,  104,
 /*  3540 */   105,  106,  107,  108,  109,  110,  111,  226,  113,  114,
 /*  3550 */   115,  116,  117,  118,  119,  120,  121,  122,  141,  142,
 /*  3560 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*  3570 */   153,  226,  155,  140,  157,  142,  226,  226,  226,  226,
 /*  3580 */   226,  226,  226,  166,  226,  226,  226,  226,  226,  226,
 /*  3590 */   157,  158,  175,  176,  226,  226,  226,  226,  181,  166,
 /*  3600 */   226,  226,  169,  226,  226,  188,  189,  190,  191,  192,
 /*  3610 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  3620 */   203,  226,  226,  226,  226,  226,  209,  210,  211,  212,
 /*  3630 */   213,  226,  226,  226,  217,  218,  226,  226,  226,  226,
 /*  3640 */   207,  208,  226,  226,  211,  212,  213,  140,  141,  142,
 /*  3650 */   217,  218,  219,  220,  221,  222,  226,  226,  226,  226,
 /*  3660 */   153,  226,  226,  226,  157,  226,  226,  226,  142,  226,
 /*  3670 */   144,  226,  226,  166,  226,  226,  226,  226,  226,  226,
 /*  3680 */   226,  226,  175,  157,  226,  226,  226,  226,  226,  226,
 /*  3690 */   226,  165,  166,  167,  226,  188,  226,  226,  191,  192,
 /*  3700 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  3710 */   203,  226,  226,  226,  226,  226,  209,  210,  211,  212,
 /*  3720 */   213,  226,  226,  226,  217,  218,  219,  220,  221,  222,
 /*  3730 */   226,  226,  226,  226,  141,  142,  226,  211,  212,  213,
 /*  3740 */   226,  226,  226,  217,  218,  226,  153,  226,  155,  226,
 /*  3750 */   157,  226,  226,  226,  226,  226,  226,  226,  226,  166,
 /*  3760 */   226,  226,  226,  226,  226,  226,  226,  226,  175,  176,
 /*  3770 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  3780 */   226,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  3790 */   197,  198,  199,  200,  201,  202,  203,  226,  226,  226,
 /*  3800 */   226,  226,  209,  210,  211,  212,  213,  226,  226,  226,
 /*  3810 */   217,  218,  226,  226,  226,  141,  142,  226,  226,  226,
 /*  3820 */   226,    9,  226,  226,  226,   13,  226,  153,  226,  155,
 /*  3830 */   226,  157,   20,  226,  226,  226,  226,  226,  226,  226,
 /*  3840 */   166,  226,  226,  226,  226,  226,  226,  226,  226,  175,
 /*  3850 */   176,  226,   40,   41,  226,   43,   44,  226,   46,  226,
 /*  3860 */   226,  226,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  3870 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  3880 */   226,  226,  226,  209,  210,  211,  212,  213,  226,  226,
 /*  3890 */   226,  217,  218,  226,  226,  226,  226,  226,  226,  226,
 /*  3900 */   226,  226,  226,  226,  226,  226,  226,   95,   96,  226,
 /*  3910 */   226,   99,  100,  101,  226,  226,  104,  105,  106,  107,
 /*  3920 */   108,  109,  110,  111,  226,  113,  114,  115,  116,  117,
 /*  3930 */   118,  119,  120,  121,  122,  141,  142,  226,  226,  226,
 /*  3940 */   226,    9,  226,  226,  226,   13,  226,  153,  226,  155,
 /*  3950 */   226,  157,   20,  226,  226,  226,  226,  226,  226,  226,
 /*  3960 */   166,  226,  226,  226,  226,  226,  226,  226,  226,  175,
 /*  3970 */   176,  226,   40,   41,  226,   43,  226,  226,  226,   47,
 /*  3980 */   226,  226,  188,  189,  190,  191,  192,  193,  194,  195,
 /*  3990 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  4000 */   226,  226,  226,  209,  210,  211,  212,  213,  141,  142,
 /*  4010 */   226,  217,  218,  226,  226,  226,  226,  226,  226,  226,
 /*  4020 */   153,  226,  155,  226,  157,  226,  226,  226,  226,  226,
 /*  4030 */   226,  226,  226,  166,  226,  226,  226,  226,  226,  226,
 /*  4040 */   226,  226,  175,  176,  226,  226,  114,  115,  116,  117,
 /*  4050 */   118,  119,  120,  121,  122,  188,  189,  190,  191,  192,
 /*  4060 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  4070 */   203,  226,  226,  226,  141,  142,  209,  210,  211,  212,
 /*  4080 */   213,  226,  226,   13,  217,  218,  153,  226,  155,  226,
 /*  4090 */   157,  226,  226,  226,  226,  226,  226,   27,   28,  166,
 /*  4100 */   226,  226,  226,   33,  226,  226,  226,  226,  175,  176,
 /*  4110 */    40,  226,  226,   43,  226,  226,  226,  226,  226,  226,
 /*  4120 */   226,  188,  189,  190,  191,  192,  193,  194,  195,  196,
 /*  4130 */   197,  198,  199,  200,  201,  202,  203,  226,  226,  226,
 /*  4140 */   226,  226,  209,  210,  211,  212,  213,  141,  142,  226,
 /*  4150 */   217,  218,  226,  226,  226,  226,  226,  226,  226,  153,
 /*  4160 */   226,  155,  226,  157,  226,  226,  226,  226,  226,  226,
 /*  4170 */   226,  226,  166,  226,  226,  226,  226,  226,  226,  226,
 /*  4180 */   226,  175,  176,  226,  114,  115,  116,  117,  118,  119,
 /*  4190 */   120,  121,  122,  226,  188,  189,  190,  191,  192,  193,
 /*  4200 */   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
 /*  4210 */   226,  226,  226,  226,  226,  209,  210,  211,  212,  213,
 /*  4220 */   141,  142,  226,  217,  218,  226,  226,    9,  226,  226,
 /*  4230 */   226,   13,  153,  226,  155,  226,  157,  226,   20,   21,
 /*  4240 */    22,  226,  226,  226,  226,  166,  226,  226,  226,  226,
 /*  4250 */   226,  226,  226,  226,  175,  176,  226,  226,  226,   41,
 /*  4260 */   226,   43,   44,  226,   46,  226,  226,  188,  189,  190,
 /*  4270 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
 /*  4280 */   201,  202,  203,  226,  226,   13,  141,  142,  209,  210,
 /*  4290 */   211,  212,  213,  226,  226,  226,  217,  218,  153,  226,
 /*  4300 */   155,  226,  157,  226,  226,  226,  226,  226,  226,  226,
 /*  4310 */   226,  166,  226,   95,   96,   43,  226,   99,  100,  101,
 /*  4320 */   175,  176,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  4330 */   226,  113,  226,  188,  189,  190,  191,  192,  193,  194,
 /*  4340 */   195,  196,  197,  198,  199,  200,  201,  202,  203,  226,
 /*  4350 */   226,  226,  226,  226,  209,  210,  211,  212,  213,  140,
 /*  4360 */   141,  142,  217,  218,  226,  226,  226,  226,  226,  226,
 /*  4370 */   226,  226,  153,  226,  226,  226,  157,  226,  226,  226,
 /*  4380 */   226,  226,  226,  226,  226,  166,  114,  115,  116,  117,
 /*  4390 */   118,  119,  120,  121,  122,  226,  226,  226,  226,  226,
 /*  4400 */   226,  141,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  4410 */   226,  226,  226,  153,  195,  196,  197,  198,  199,  200,
 /*  4420 */   201,  202,  203,  226,  226,  226,  166,  226,  209,  210,
 /*  4430 */   211,  212,  213,  226,  226,  175,  217,  218,  219,  220,
 /*  4440 */   221,  222,  156,  226,  158,  226,  226,  161,  162,  163,
 /*  4450 */   226,  191,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  4460 */   200,  201,  202,  203,  141,  205,  206,  226,  226,  209,
 /*  4470 */   210,  226,  226,  187,  226,  226,  153,  217,  218,  226,
 /*  4480 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  166,
 /*  4490 */   204,  226,  226,  207,  208,  226,  226,  226,  175,  226,
 /*  4500 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  4510 */   226,  188,  226,  226,  191,  192,  193,  194,  195,  196,
 /*  4520 */   197,  198,  199,  200,  201,  202,  203,  141,  226,  226,
 /*  4530 */   226,  226,  209,  210,    9,  226,  226,  226,   13,  153,
 /*  4540 */   217,  218,  226,  226,  226,   20,  226,  226,  226,  226,
 /*  4550 */   226,  226,  166,  226,  226,  226,  226,  226,  226,  226,
 /*  4560 */   226,  175,  226,  226,  226,  226,   41,  226,   43,   44,
 /*  4570 */   226,   46,  226,  226,  226,  226,  226,  191,  192,  193,
 /*  4580 */   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
 /*  4590 */   226,  205,  226,  226,  141,  209,  210,  226,   73,  226,
 /*  4600 */   226,  226,  226,  217,  218,    9,  153,  226,  226,   13,
 /*  4610 */   226,  226,  226,  226,  226,  226,   20,   21,  226,  166,
 /*  4620 */    95,   96,  226,  226,   99,  100,  101,  226,  175,  104,
 /*  4630 */   105,  106,  107,  108,  109,  110,  111,   41,  113,   43,
 /*  4640 */    44,  226,   46,  226,  191,  192,  193,  194,  195,  196,
 /*  4650 */   197,  198,  199,  200,  201,  202,  203,  226,  205,  140,
 /*  4660 */    13,  142,  209,  210,  226,  226,  226,   20,  226,  226,
 /*  4670 */   217,  218,  153,  226,  226,  226,  157,  226,  226,   32,
 /*  4680 */   226,  226,  226,  226,  226,  166,  226,   40,  226,  226,
 /*  4690 */    43,   95,   96,   46,  226,   99,  100,  101,  226,  226,
 /*  4700 */   104,  105,  106,  107,  108,  109,  110,  111,  226,  113,
 /*  4710 */     9,  226,  226,  226,   13,  226,  226,  226,  226,  226,
 /*  4720 */   226,   20,  226,  226,  226,  226,  226,  226,  209,  210,
 /*  4730 */   211,  212,  213,  226,  226,  226,  217,  218,  219,  220,
 /*  4740 */   221,  222,   41,  226,   43,   44,  226,   46,   47,  226,
 /*  4750 */   226,  226,  226,  226,  226,  108,  109,  110,  111,  226,
 /*  4760 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  4770 */   141,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  4780 */   226,  226,  153,  226,  226,  226,  226,  226,  226,  226,
 /*  4790 */   226,  226,  226,  226,  226,  166,   95,   96,  226,  226,
 /*  4800 */    99,  100,  101,  226,  175,  104,  105,  106,  107,  108,
 /*  4810 */   109,  110,  111,  226,  113,  226,  226,  188,  226,  226,
 /*  4820 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
 /*  4830 */   201,  202,  203,    9,  226,  226,  226,   13,  209,  210,
 /*  4840 */   226,  153,  226,  226,   20,  226,  217,  218,  226,    9,
 /*  4850 */   226,  226,  226,   13,  166,  226,  226,  226,  226,  226,
 /*  4860 */    20,  226,  226,  226,  226,   41,  226,   43,   44,  226,
 /*  4870 */    46,  226,  226,  226,  226,  226,  226,  226,    9,  226,
 /*  4880 */    40,   41,   13,   43,  226,  226,  198,  199,  226,   20,
 /*  4890 */   202,  203,  226,  226,  226,  226,  226,  209,  210,  226,
 /*  4900 */   226,  226,  226,  226,  226,  217,  218,  226,  226,  226,
 /*  4910 */    41,  226,   43,   44,  226,   46,  226,  226,  226,   95,
 /*  4920 */    96,  226,  226,   99,  100,  101,  226,  226,  104,  105,
 /*  4930 */   106,  107,  108,  109,  110,  111,  226,  113,  141,  226,
 /*  4940 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  4950 */   153,  226,  226,  226,  114,  115,  116,  117,  118,  119,
 /*  4960 */   120,  121,  122,  166,   95,   96,  226,  226,   99,  100,
 /*  4970 */   101,  226,  175,  104,  105,  106,  107,  108,  109,  110,
 /*  4980 */   111,  226,  113,  226,  226,  226,  226,  226,  191,  192,
 /*  4990 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  5000 */   203,  226,  226,  226,  226,  226,  209,  210,  226,  141,
 /*  5010 */   226,  226,   13,  226,  217,  218,  226,  226,  226,   20,
 /*  5020 */   226,  153,  226,  140,  226,  142,  226,  226,  226,  226,
 /*  5030 */   226,  226,  226,  226,  166,  226,  226,  226,  226,   40,
 /*  5040 */   157,  226,   43,  175,  226,   46,  226,  226,  226,  166,
 /*  5050 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  191,
 /*  5060 */   192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
 /*  5070 */   202,  203,  141,  226,  226,  226,  226,  209,  210,  226,
 /*  5080 */   226,  226,  226,  226,  153,  217,  218,  226,  226,  226,
 /*  5090 */   226,  226,  226,  226,  211,  212,  213,  166,  226,  226,
 /*  5100 */   217,  218,  219,  220,  221,  222,  175,  108,  109,  110,
 /*  5110 */   111,  226,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  5120 */   121,  122,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  5130 */   199,  200,  201,  202,  203,  141,  226,  140,  226,  142,
 /*  5140 */   209,  210,  226,  226,  226,   13,  226,  153,  217,  218,
 /*  5150 */   226,  226,   20,  226,  157,  226,  226,  226,  226,  226,
 /*  5160 */   166,  226,  226,  166,  226,  226,  226,  226,  226,  175,
 /*  5170 */   226,  226,  226,  226,  226,   43,  226,  226,   46,  226,
 /*  5180 */   226,  226,  226,  226,  226,  191,  192,  193,  194,  195,
 /*  5190 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  5200 */   226,  141,  226,  209,  210,  226,  226,  226,  211,  212,
 /*  5210 */   213,  217,  218,  153,  217,  218,  219,  220,  221,  222,
 /*  5220 */   226,  226,  226,  226,  226,  226,  166,  226,  226,  226,
 /*  5230 */   226,  226,  226,  226,  226,  175,  104,  105,  106,  107,
 /*  5240 */   108,  109,  110,  111,  226,  113,  226,  226,  226,  226,
 /*  5250 */   226,  191,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  5260 */   200,  201,  202,  203,  141,  226,  226,  226,  226,  209,
 /*  5270 */   210,  226,  226,  226,  226,  226,  153,  217,  218,  226,
 /*  5280 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  166,
 /*  5290 */   226,  226,  226,  226,  226,  226,  226,  226,  175,  153,
 /*  5300 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5310 */   226,  226,  166,  226,  191,  192,  193,  194,  195,  196,
 /*  5320 */   197,  198,  199,  200,  201,  202,  203,  141,  226,  226,
 /*  5330 */   226,  226,  209,  210,  226,  226,  226,  226,  226,  153,
 /*  5340 */   217,  218,  226,  197,  198,  199,  200,  201,  202,  203,
 /*  5350 */   226,  226,  166,  226,  226,  209,  210,  226,  226,  226,
 /*  5360 */   226,  175,  226,  217,  218,  226,  226,  226,  226,  226,
 /*  5370 */   226,  226,  226,  226,  226,  226,  226,  191,  192,  193,
 /*  5380 */   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
 /*  5390 */   226,  226,  226,  141,  226,  209,  210,  226,  226,  226,
 /*  5400 */   226,  226,  226,  217,  218,  153,  226,  226,  226,  226,
 /*  5410 */   226,  226,  226,  226,  226,  226,  226,  226,  166,  226,
 /*  5420 */   226,  226,  226,  226,  226,  226,  226,  175,  226,  226,
 /*  5430 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5440 */   226,  226,  226,  191,  192,  193,  194,  195,  196,  197,
 /*  5450 */   198,  199,  200,  201,  202,  203,  141,  140,  226,  142,
 /*  5460 */   226,  209,  210,  226,  226,  226,  226,  226,  153,  217,
 /*  5470 */   218,  226,  226,  226,  157,  226,  226,  226,  226,  226,
 /*  5480 */   226,  166,  226,  166,  226,  226,  226,  226,  226,  226,
 /*  5490 */   175,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5500 */   226,  226,  226,  226,  226,  226,  191,  192,  193,  194,
 /*  5510 */   195,  196,  197,  198,  199,  200,  201,  202,  203,  141,
 /*  5520 */   226,  226,  226,  226,  209,  210,  226,  226,  211,  212,
 /*  5530 */   213,  153,  217,  218,  217,  218,  219,  220,  221,  222,
 /*  5540 */   226,  226,  226,  226,  166,  226,  226,  226,  226,  226,
 /*  5550 */   226,  226,  226,  175,  226,  226,  226,  226,  226,  226,
 /*  5560 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  191,
 /*  5570 */   192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
 /*  5580 */   202,  203,  226,  226,  226,  141,  226,  209,  210,  226,
 /*  5590 */   226,  226,  226,  226,  226,  217,  218,  153,  140,  226,
 /*  5600 */   142,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5610 */   166,  226,  226,  226,  226,  157,  226,  226,  226,  175,
 /*  5620 */   226,  226,  226,  226,  166,  226,  226,  226,  226,  226,
 /*  5630 */   226,  226,  226,  226,  226,  191,  192,  193,  194,  195,
 /*  5640 */   196,  197,  198,  199,  200,  201,  202,  203,  141,  226,
 /*  5650 */   226,  226,  226,  209,  210,  226,  226,  226,  226,  226,
 /*  5660 */   153,  217,  218,  226,  226,  226,  226,  226,  226,  211,
 /*  5670 */   212,  213,  226,  166,  226,  217,  218,  219,  220,  221,
 /*  5680 */   222,  226,  175,  153,  226,  226,  226,  226,  226,  226,
 /*  5690 */   226,  226,  226,  226,  226,  226,  166,  226,  191,  192,
 /*  5700 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  5710 */   203,  141,  226,  226,  226,  226,  209,  210,  226,  226,
 /*  5720 */   226,  226,  226,  153,  217,  218,  226,  197,  198,  199,
 /*  5730 */   200,  201,  202,  203,  226,  226,  166,  226,  226,  209,
 /*  5740 */   210,  226,  226,  226,  226,  175,  226,  217,  218,  226,
 /*  5750 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5760 */   226,  191,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  5770 */   200,  201,  202,  203,  226,  226,  226,  141,  226,  209,
 /*  5780 */   210,  226,  226,  226,  226,  226,  226,  217,  218,  153,
 /*  5790 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5800 */   226,  226,  166,  226,  226,  226,  226,  226,  226,  226,
 /*  5810 */   226,  175,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5820 */   226,  226,  226,  226,  226,  226,  226,  191,  192,  193,
 /*  5830 */   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
 /*  5840 */   141,  226,  226,  226,  226,  209,  210,  226,  226,  226,
 /*  5850 */   226,  226,  153,  217,  218,  226,  226,  226,  226,  226,
 /*  5860 */   226,  226,  226,  226,  226,  166,  226,  226,  226,  226,
 /*  5870 */   226,  226,  226,  226,  175,  226,  226,  226,  226,  226,
 /*  5880 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5890 */   191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
 /*  5900 */   201,  202,  203,  141,  226,  226,  226,  226,  209,  210,
 /*  5910 */   226,  226,  226,  226,  226,  153,  217,  218,  226,  226,
 /*  5920 */   226,  226,  226,  226,  226,  226,  226,  226,  166,  226,
 /*  5930 */   226,  226,  226,  226,  226,  226,  226,  175,  226,  226,
 /*  5940 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5950 */   226,  226,  226,  191,  192,  193,  194,  195,  196,  197,
 /*  5960 */   198,  199,  200,  201,  202,  203,  226,  226,  226,  141,
 /*  5970 */   226,  209,  210,  226,  226,  226,  226,  226,  226,  217,
 /*  5980 */   218,  153,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  5990 */   226,  226,  226,  226,  166,  226,  226,  226,  226,  226,
 /*  6000 */   226,  226,  226,  175,  226,  226,  226,  226,  226,  226,
 /*  6010 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  191,
 /*  6020 */   192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
 /*  6030 */   202,  203,  141,  226,  226,  226,  226,  209,  210,  226,
 /*  6040 */   226,  226,  226,  226,  153,  217,  218,  226,  226,  226,
 /*  6050 */   226,  226,  226,  226,  226,  226,  226,  166,  226,  226,
 /*  6060 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6070 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6080 */   226,  226,  191,  192,  193,  194,  195,  196,  197,  198,
 /*  6090 */   199,  200,  201,  202,  203,  141,  226,  226,  226,  226,
 /*  6100 */   209,  210,  226,  226,  226,  226,  226,  153,  217,  218,
 /*  6110 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6120 */   166,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6130 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6140 */   226,  226,  226,  226,  226,  226,  192,  193,  194,  195,
 /*  6150 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  6160 */   226,  141,  226,  209,  210,  226,  226,  226,  226,  226,
 /*  6170 */   226,  217,  218,  153,  226,  226,  226,  226,  226,  226,
 /*  6180 */   226,  226,  226,  226,  226,  226,  166,  226,  226,  226,
 /*  6190 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  141,
 /*  6200 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6210 */   226,  153,  192,  193,  194,  195,  196,  197,  198,  199,
 /*  6220 */   200,  201,  202,  203,  166,  226,  226,  226,  226,  209,
 /*  6230 */   210,  226,  226,  226,  226,  226,  226,  217,  218,  226,
 /*  6240 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6250 */   226,  193,  194,  195,  196,  197,  198,  199,  200,  201,
 /*  6260 */   202,  203,  141,  226,  226,  226,  226,  209,  210,  226,
 /*  6270 */   226,  226,  226,  226,  153,  217,  218,  226,  226,  226,
 /*  6280 */   226,  226,  226,  226,  226,  226,  226,  166,  141,  226,
 /*  6290 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6300 */   153,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6310 */   226,  226,  226,  166,  193,  194,  195,  196,  197,  198,
 /*  6320 */   199,  200,  201,  202,  203,  226,  226,  226,  226,  226,
 /*  6330 */   209,  210,  226,  226,  226,  226,  226,  226,  217,  218,
 /*  6340 */   193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  6350 */   203,  226,  226,  226,  141,  226,  209,  210,  226,  226,
 /*  6360 */   226,  226,  226,  226,  217,  218,  153,  226,  226,  226,
 /*  6370 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  166,
 /*  6380 */   141,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6390 */   226,  226,  153,  226,  226,  226,  226,  226,  226,  226,
 /*  6400 */   226,  226,  226,  226,  226,  166,  226,  194,  195,  196,
 /*  6410 */   197,  198,  199,  200,  201,  202,  203,  226,  226,  226,
 /*  6420 */   226,  226,  209,  210,  226,  226,  226,  226,  226,  226,
 /*  6430 */   217,  218,  226,  194,  195,  196,  197,  198,  199,  200,
 /*  6440 */   201,  202,  203,  226,  226,  226,  226,  226,  209,  210,
 /*  6450 */   226,  226,  226,  226,  226,  141,  217,  218,  226,  226,
 /*  6460 */   226,  226,  226,  226,  226,  226,  226,  153,  226,  226,
 /*  6470 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6480 */   166,  141,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6490 */   226,  226,  226,  153,  226,  226,  226,  226,  226,  226,
 /*  6500 */   226,  226,  226,  226,  226,  226,  166,  226,  141,  195,
 /*  6510 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  6520 */   153,  226,  226,  209,  210,  226,  226,  226,  226,  226,
 /*  6530 */   226,  217,  218,  166,  141,  195,  196,  197,  198,  199,
 /*  6540 */   200,  201,  202,  203,  226,  226,  153,  226,  226,  209,
 /*  6550 */   210,  226,  226,  226,  226,  226,  226,  217,  218,  166,
 /*  6560 */   226,  226,  195,  196,  197,  198,  199,  200,  201,  202,
 /*  6570 */   203,  226,  226,  226,  226,  226,  209,  210,  226,  226,
 /*  6580 */   226,  226,  226,  226,  217,  218,  226,  153,  195,  196,
 /*  6590 */   197,  198,  199,  200,  201,  202,  203,  226,  226,  226,
 /*  6600 */   166,  226,  209,  210,  226,  226,  226,  226,  226,  153,
 /*  6610 */   217,  218,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6620 */   226,  226,  166,  226,  226,  226,  226,  226,  226,  195,
 /*  6630 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  6640 */   226,  226,  226,  209,  210,  226,  226,  153,  226,  226,
 /*  6650 */   226,  217,  218,  197,  198,  199,  200,  201,  202,  203,
 /*  6660 */   166,  226,  226,  226,  226,  209,  210,  226,  226,  226,
 /*  6670 */   153,  226,  226,  217,  218,  226,  226,  226,  226,  226,
 /*  6680 */   226,  226,  226,  166,  226,  226,  226,  226,  226,  195,
 /*  6690 */   196,  197,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  6700 */   226,  226,  226,  209,  210,  226,  226,  226,  226,  226,
 /*  6710 */   226,  217,  218,  196,  197,  198,  199,  200,  201,  202,
 /*  6720 */   203,  226,  226,  153,  226,  226,  209,  210,  226,  226,
 /*  6730 */   226,  226,  226,  226,  217,  218,  166,  226,  226,  226,
 /*  6740 */   226,  226,  226,  226,  153,  226,  226,  226,  226,  226,
 /*  6750 */   226,  226,  226,  226,  226,  226,  226,  166,  226,  226,
 /*  6760 */   226,  226,  226,  226,  226,  153,  196,  197,  198,  199,
 /*  6770 */   200,  201,  202,  203,  226,  226,  226,  226,  166,  209,
 /*  6780 */   210,  226,  226,  226,  226,  226,  153,  217,  218,  198,
 /*  6790 */   199,  200,  201,  202,  203,  226,  226,  226,  226,  166,
 /*  6800 */   209,  210,  226,  226,  226,  226,  226,  153,  217,  218,
 /*  6810 */   198,  199,  200,  201,  202,  203,  226,  226,  226,  226,
 /*  6820 */   166,  209,  210,  226,  226,  226,  226,  226,  153,  217,
 /*  6830 */   218,  198,  199,  200,  201,  202,  203,  226,  226,  226,
 /*  6840 */   226,  166,  209,  210,  226,  226,  226,  226,  226,  153,
 /*  6850 */   217,  218,  198,  199,  200,  201,  202,  203,  226,  226,
 /*  6860 */   226,  226,  166,  209,  210,  226,  226,  226,  226,  226,
 /*  6870 */   153,  217,  218,  198,  199,  200,  201,  202,  203,  226,
 /*  6880 */   226,  226,  226,  166,  209,  210,  226,  226,  226,  226,
 /*  6890 */   226,  226,  217,  218,  198,  199,  200,  201,  202,  203,
 /*  6900 */   226,  226,  226,  226,  226,  209,  210,  226,  226,  226,
 /*  6910 */   226,  153,  226,  217,  218,  198,  199,  200,  201,  202,
 /*  6920 */   203,  226,  226,  226,  166,  226,  209,  210,  226,  226,
 /*  6930 */   226,  226,  226,  226,  217,  218,  226,  226,  226,  226,
 /*  6940 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
 /*  6950 */   226,  226,  226,  226,  226,  226,  198,  199,  226,  226,
 /*  6960 */   202,  203,  226,  226,  226,  226,  226,  209,  210,  226,
 /*  6970 */   226,  226,  226,  226,  226,  217,  218,
);
    const YY_SHIFT_USE_DFLT = -117;
    const YY_SHIFT_MAX = 306;
    static public $yy_shift_ofst = array(
 /*     0 */  1131,   -9,  219,  105, 1131,  903,  789,  447, 1131, 1131,
 /*    10 */  1131, 1131, 1131, 1131,  675,  333, 1017,  561, 1131, 1131,
 /*    20 */  1131, 1131, 1131, 1131, 1245, 1245, 1245, 1245, 1245, 3321,
 /*    30 */  3812, 3207, 3435, 3435, 3435, 3435, 3435, 3435, 3435, 3812,
 /*    40 */  4218, 4596, 4701, 4596, 4824, 4525, 4824, 4824, 4824, 4824,
 /*    50 */  4824, 4824, 4824, 4824, 4824, 4824, 4824, 4824, 4824, 4824,
 /*    60 */  4824, 4824, 4824, 4824, 4824, 4824, 4824, 4824, 4647, 3932,
 /*    70 */  4824, 4824, 4840, 4824, 4824, 4824, 4824, 4999, 4999, 4824,
 /*    80 */  4824, 4824, 4824, 4824, 4824, 4824, 3255, 3255, 3255, 3255,
 /*    90 */  4824, 4824, 4824, 4824, 4824, 4824, 4869, 4824, 4070, 5132,
 /*   100 */  5132, 1362, 3255, 3255, 3406, 4272, 1362, 2595, 2595, 1385,
 /*   110 */  3119, 1385, 3140,  351,  441,  441,  441,  204,   43,   -5,
 /*   120 */   273,  125,  106,  304,  624,  575,  137,  387,  553,  477,
 /*   130 */   220,  546,  812,  821,  820,  768,  726,  -11,   63,  -11,
 /*   140 */   175,  -11,  159,  607,   20,   20,  572,   20,   20,   20,
 /*   150 */   164,   20,   20,   20,   20,  392,  726,  768,  726,  726,
 /*   160 */   807,  793,  781,  726, 3480,  210,  210,  210,   62,   62,
 /*   170 */  -116,  -38,   62,  162,  -16,  162,  162,  -16,  -16,  -24,
 /*   180 */   340,  454,  414,  277,  196,  276,  438,  509,  416, -114,
 /*   190 */   174,  363,  174,  140,  251,  335,  140,  451,   30,  174,
 /*   200 */   115,   13,   24,   97,   52,  221,  209,  583,  568,  248,
 /*   210 */   140,  140,  298,  229,   24,   24,  197,  335,  437,  174,
 /*   220 */   587,  140,  335,  140,  453,  612,  398,  330,  313,  181,
 /*   230 */   285,  296,  402,  439,  503,  558,  618,  160,  428,  486,
 /*   240 */   590,  622,  153,   65,  111,  -25,  372,  722,  696,  712,
 /*   250 */   718,  708,  725,  711,  629,  693,  691,  707,  709,  681,
 /*   260 */   714,  747,  746,  752,  751,  719,  733,  755,  740,  731,
 /*   270 */   627,  734,  736,  738,  737,  739,  735,  679,  692,  613,
 /*   280 */   632,  644,  653,  645,  638,  619,  625,  579,  628,  605,
 /*   290 */   614,  608,  664,  640,  586,  585,  588,  589,  665,  626,
 /*   300 */   580,  659,  666,  668,  646,  678,  571,
);
    const YY_REDUCE_USE_DFLT = -151;
    const YY_REDUCE_MAX = 163;
    static public $yy_reduce_ofst = array(
 /*     0 */  1524, 1242, 1341, 1429, 1618, 2091, 1713, 2469, 2374, 1902,
 /*    10 */  2280, 1996, 1807, 2185, 2557, 2557, 2557, 2557, 2557, 2557,
 /*    20 */  2557, 2557, 2557, 2557, 2733, 2909, 2997, 2821, 2645, 3417,
 /*    30 */  3507, 4079, 3867, 3794, 4006, 3933, 4145, 3593, 3674, 4219,
 /*    40 */  4260, 4453, 4629, 4386, 4323, 5252, 5315, 5444, 5378, 5507,
 /*    50 */  5060, 4994, 5123, 5186, 4931, 5828, 5636, 5570, 5699, 5762,
 /*    60 */  4868, 4797, 5891, 5954, 6020, 6058, 6147, 6121, 3248, 3131,
 /*    70 */  6239, 6213, 3433, 6314, 6393, 6367, 6340, 1117, 4519, 6434,
 /*    80 */  6494, 6517, 6570, 5530, 5146, 6456, 4883, 5458, 5317, 4997,
 /*    90 */  6654, 6633, 6675, 6696, 6717, 6612, 6612, 6591, 3526, 4688,
 /*   100 */  6758, 4286,  202,   88,  -23,  -23,  -85,  319,  433,  163,
 /*   110 */   -22, -150,  284,  211,  302,  237,   95,  193,  -28,  356,
 /*   120 */   320,  395,  381,  356,  457,  365,  320,  361,  356,  356,
 /*   130 */   381,  373,  356,  297,  384,  353,  143,  648,  669,  565,
 /*   140 */   634,  592,  656,  637,  663,  661,  689,  660,  641,  639,
 /*   150 */   642,  643,  647,  655,  654,  581,  670,  657,  672,  674,
 /*   160 */   690,  652,  609,  662,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 1 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 35, 36, 37, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 2 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 3 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 35, 36, 37, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 4 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 5 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 6 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 7 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 8 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 9 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 10 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 11 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 12 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 13 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 14 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 15 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 16 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 17 */ array(9, 13, 19, 20, 21, 22, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 18 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 19 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 20 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 21 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 22 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 23 */ array(9, 13, 19, 20, 21, 23, 27, 28, 29, 30, 33, 40, 41, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 24 */ array(9, 13, 19, 20, 21, 23, 27, 28, 30, 33, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 25 */ array(9, 13, 19, 20, 21, 23, 27, 28, 30, 33, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 26 */ array(9, 13, 19, 20, 21, 23, 27, 28, 30, 33, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 27 */ array(9, 13, 19, 20, 21, 23, 27, 28, 30, 33, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 28 */ array(9, 13, 19, 20, 21, 23, 27, 28, 30, 33, 40, 41, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 29 */ array(9, 13, 20, 40, 41, 43, 44, 46, 64, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 30 */ array(9, 13, 20, 40, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 31 */ array(9, 13, 20, 23, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 32 */ array(9, 13, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 33 */ array(9, 13, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 34 */ array(9, 13, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 35 */ array(9, 13, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 36 */ array(9, 13, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 37 */ array(9, 13, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 38 */ array(9, 13, 20, 40, 41, 43, 44, 46, 71, 72, 75, 76, 77, 78, 79, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 39 */ array(9, 13, 20, 40, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 40 */ array(9, 13, 20, 21, 22, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 41 */ array(9, 13, 20, 21, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 42 */ array(9, 13, 20, 41, 43, 44, 46, 47, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 43 */ array(9, 13, 20, 21, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 44 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 45 */ array(9, 13, 20, 41, 43, 44, 46, 73, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 46 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 47 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 48 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 49 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 50 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 51 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 52 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 53 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 54 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 55 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 56 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 57 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 58 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 59 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 60 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 61 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 62 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 63 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 64 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 65 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 66 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 67 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 68 */ array(13, 20, 32, 40, 43, 46, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 69 */ array(9, 13, 20, 40, 41, 43, 47, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 70 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 71 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 72 */ array(9, 13, 20, 40, 41, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 73 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 74 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 75 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 76 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 77 */ array(13, 20, 40, 43, 46, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 78 */ array(13, 20, 40, 43, 46, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 79 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 80 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 81 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 82 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 83 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 84 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 85 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 86 */ array(13, 40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 87 */ array(13, 40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 88 */ array(13, 40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 89 */ array(13, 40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 90 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 91 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 92 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 93 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 94 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 95 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 96 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 97 */ array(9, 13, 20, 41, 43, 44, 46, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 98 */ array(13, 27, 28, 33, 40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 99 */ array(13, 20, 43, 46, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 100 */ array(13, 20, 43, 46, 104, 105, 106, 107, 108, 109, 110, 111, 113, ),
        /* 101 */ array(9, 20, 40, 41, 42, ),
        /* 102 */ array(13, 40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 103 */ array(13, 40, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 104 */ array(13, 41, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 105 */ array(13, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 106 */ array(9, 20, 40, 41, 42, ),
        /* 107 */ array(13, 20, 43, 46, 108, 109, 110, 111, 113, ),
        /* 108 */ array(13, 20, 43, 46, 108, 109, 110, 111, 113, ),
        /* 109 */ array(9, 20, 40, 41, ),
        /* 110 */ array(26, 27, 28, 29, 32, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 111 */ array(9, 20, 40, 41, ),
        /* 112 */ array(26, 27, 28, 29, 114, 115, 116, 117, 118, 119, 120, 121, 122, ),
        /* 113 */ array(13, 31, 46, 112, ),
        /* 114 */ array(20, 40, 41, 42, ),
        /* 115 */ array(20, 40, 41, 42, ),
        /* 116 */ array(20, 40, 41, 42, ),
        /* 117 */ array(13, 31, 46, ),
        /* 118 */ array(31, 46, 112, ),
        /* 119 */ array(20, 43, 44, 45, ),
        /* 120 */ array(13, 31, 112, ),
        /* 121 */ array(22, 66, 67, ),
        /* 122 */ array(25, 46, 73, ),
        /* 123 */ array(43, 44, 45, ),
        /* 124 */ array(20, 22, ),
        /* 125 */ array(49, 50, ),
        /* 126 */ array(13, 31, ),
        /* 127 */ array(31, 112, ),
        /* 128 */ array(20, 43, ),
        /* 129 */ array(20, 43, ),
        /* 130 */ array(46, 73, ),
        /* 131 */ array(13, 31, ),
        /* 132 */ array(43, ),
        /* 133 */ array(31, ),
        /* 134 */ array(21, ),
        /* 135 */ array(63, ),
        /* 136 */ array(46, ),
        /* 137 */ array(20, 40, 41, ),
        /* 138 */ array(22, 66, 67, ),
        /* 139 */ array(20, 40, 41, ),
        /* 140 */ array(27, 28, 33, ),
        /* 141 */ array(20, 40, 41, ),
        /* 142 */ array(34, 38, 39, ),
        /* 143 */ array(20, 21, ),
        /* 144 */ array(21, 23, ),
        /* 145 */ array(21, 23, ),
        /* 146 */ array(21, 23, ),
        /* 147 */ array(21, 23, ),
        /* 148 */ array(21, 23, ),
        /* 149 */ array(21, 23, ),
        /* 150 */ array(21, 23, ),
        /* 151 */ array(21, 23, ),
        /* 152 */ array(21, 23, ),
        /* 153 */ array(21, 23, ),
        /* 154 */ array(21, 23, ),
        /* 155 */ array(24, 32, ),
        /* 156 */ array(46, ),
        /* 157 */ array(63, ),
        /* 158 */ array(46, ),
        /* 159 */ array(46, ),
        /* 160 */ array(21, ),
        /* 161 */ array(20, ),
        /* 162 */ array(43, ),
        /* 163 */ array(46, ),
        /* 164 */ array(5, 8, 25, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, ),
        /* 165 */ array(46, 73, 100, 101, 102, 103, ),
        /* 166 */ array(46, 73, 100, 101, 102, 103, ),
        /* 167 */ array(46, 73, 100, 101, 102, 103, ),
        /* 168 */ array(31, 32, 91, 92, ),
        /* 169 */ array(31, 32, 91, 92, ),
        /* 170 */ array(117, 118, 121, 122, ),
        /* 171 */ array(117, 118, 121, 122, ),
        /* 172 */ array(31, 32, 91, 92, ),
        /* 173 */ array(7, 9, 10, ),
        /* 174 */ array(41, 97, 98, ),
        /* 175 */ array(7, 9, 10, ),
        /* 176 */ array(7, 9, 10, ),
        /* 177 */ array(41, 97, 98, ),
        /* 178 */ array(41, 97, 98, ),
        /* 179 */ array(40, 41, 47, ),
        /* 180 */ array(32, 40, 41, ),
        /* 181 */ array(32, 40, 41, ),
        /* 182 */ array(116, 117, 121, ),
        /* 183 */ array(5, 8, 74, ),
        /* 184 */ array(40, 41, 47, ),
        /* 185 */ array(32, 40, 41, ),
        /* 186 */ array(20, 40, 41, ),
        /* 187 */ array(32, 40, 41, ),
        /* 188 */ array(20, 43, ),
        /* 189 */ array(117, 121, ),
        /* 190 */ array(4, 90, ),
        /* 191 */ array(20, 43, ),
        /* 192 */ array(4, 90, ),
        /* 193 */ array(93, 94, ),
        /* 194 */ array(20, 41, ),
        /* 195 */ array(95, 96, ),
        /* 196 */ array(93, 94, ),
        /* 197 */ array(20, 41, ),
        /* 198 */ array(25, 73, ),
        /* 199 */ array(4, 90, ),
        /* 200 */ array(22, 24, ),
        /* 201 */ array(20, 23, ),
        /* 202 */ array(40, 41, ),
        /* 203 */ array(24, 47, ),
        /* 204 */ array(20, 23, ),
        /* 205 */ array(20, 23, ),
        /* 206 */ array(20, 52, ),
        /* 207 */ array(20, 23, ),
        /* 208 */ array(24, 32, ),
        /* 209 */ array(117, 121, ),
        /* 210 */ array(93, 94, ),
        /* 211 */ array(93, 94, ),
        /* 212 */ array(24, 47, ),
        /* 213 */ array(22, 24, ),
        /* 214 */ array(40, 41, ),
        /* 215 */ array(40, 41, ),
        /* 216 */ array(34, 112, ),
        /* 217 */ array(95, 96, ),
        /* 218 */ array(20, 52, ),
        /* 219 */ array(4, 90, ),
        /* 220 */ array(24, 47, ),
        /* 221 */ array(93, 94, ),
        /* 222 */ array(95, 96, ),
        /* 223 */ array(93, 94, ),
        /* 224 */ array(20, 43, ),
        /* 225 */ array(23, ),
        /* 226 */ array(23, ),
        /* 227 */ array(48, ),
        /* 228 */ array(45, ),
        /* 229 */ array(74, ),
        /* 230 */ array(46, ),
        /* 231 */ array(47, ),
        /* 232 */ array(25, ),
        /* 233 */ array(23, ),
        /* 234 */ array(73, ),
        /* 235 */ array(40, ),
        /* 236 */ array(23, ),
        /* 237 */ array(47, ),
        /* 238 */ array(56, ),
        /* 239 */ array(41, ),
        /* 240 */ array(23, ),
        /* 241 */ array(23, ),
        /* 242 */ array(46, ),
        /* 243 */ array(23, ),
        /* 244 */ array(46, ),
        /* 245 */ array(47, ),
        /* 246 */ array(24, ),
        /* 247 */ array(47, ),
        /* 248 */ array(46, ),
        /* 249 */ array(13, ),
        /* 250 */ array(20, ),
        /* 251 */ array(31, ),
        /* 252 */ array(23, ),
        /* 253 */ array(13, ),
        /* 254 */ array(112, ),
        /* 255 */ array(24, ),
        /* 256 */ array(23, ),
        /* 257 */ array(13, ),
        /* 258 */ array(13, ),
        /* 259 */ array(46, ),
        /* 260 */ array(9, ),
        /* 261 */ array(2, ),
        /* 262 */ array(9, ),
        /* 263 */ array(13, ),
        /* 264 */ array(13, ),
        /* 265 */ array(47, ),
        /* 266 */ array(34, ),
        /* 267 */ array(13, ),
        /* 268 */ array(23, ),
        /* 269 */ array(31, ),
        /* 270 */ array(20, ),
        /* 271 */ array(23, ),
        /* 272 */ array(20, ),
        /* 273 */ array(20, ),
        /* 274 */ array(22, ),
        /* 275 */ array(22, ),
        /* 276 */ array(25, ),
        /* 277 */ array(34, ),
        /* 278 */ array(20, ),
        /* 279 */ array(46, ),
        /* 280 */ array(31, ),
        /* 281 */ array(20, ),
        /* 282 */ array(20, ),
        /* 283 */ array(41, ),
        /* 284 */ array(20, ),
        /* 285 */ array(34, ),
        /* 286 */ array(23, ),
        /* 287 */ array(31, ),
        /* 288 */ array(21, ),
        /* 289 */ array(47, ),
        /* 290 */ array(41, ),
        /* 291 */ array(46, ),
        /* 292 */ array(21, ),
        /* 293 */ array(47, ),
        /* 294 */ array(121, ),
        /* 295 */ array(121, ),
        /* 296 */ array(121, ),
        /* 297 */ array(121, ),
        /* 298 */ array(46, ),
        /* 299 */ array(74, ),
        /* 300 */ array(121, ),
        /* 301 */ array(31, ),
        /* 302 */ array(23, ),
        /* 303 */ array(23, ),
        /* 304 */ array(47, ),
        /* 305 */ array(21, ),
        /* 306 */ array(121, ),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
        /* 398 */ array(),
        /* 399 */ array(),
        /* 400 */ array(),
        /* 401 */ array(),
        /* 402 */ array(),
        /* 403 */ array(),
        /* 404 */ array(),
        /* 405 */ array(),
        /* 406 */ array(),
        /* 407 */ array(),
        /* 408 */ array(),
        /* 409 */ array(),
        /* 410 */ array(),
        /* 411 */ array(),
        /* 412 */ array(),
        /* 413 */ array(),
        /* 414 */ array(),
        /* 415 */ array(),
        /* 416 */ array(),
        /* 417 */ array(),
        /* 418 */ array(),
        /* 419 */ array(),
        /* 420 */ array(),
        /* 421 */ array(),
        /* 422 */ array(),
        /* 423 */ array(),
        /* 424 */ array(),
        /* 425 */ array(),
        /* 426 */ array(),
        /* 427 */ array(),
        /* 428 */ array(),
        /* 429 */ array(),
        /* 430 */ array(),
        /* 431 */ array(),
        /* 432 */ array(),
        /* 433 */ array(),
        /* 434 */ array(),
        /* 435 */ array(),
        /* 436 */ array(),
        /* 437 */ array(),
        /* 438 */ array(),
        /* 439 */ array(),
        /* 440 */ array(),
        /* 441 */ array(),
        /* 442 */ array(),
        /* 443 */ array(),
        /* 444 */ array(),
        /* 445 */ array(),
        /* 446 */ array(),
        /* 447 */ array(),
        /* 448 */ array(),
        /* 449 */ array(),
        /* 450 */ array(),
        /* 451 */ array(),
        /* 452 */ array(),
        /* 453 */ array(),
        /* 454 */ array(),
        /* 455 */ array(),
        /* 456 */ array(),
        /* 457 */ array(),
        /* 458 */ array(),
        /* 459 */ array(),
        /* 460 */ array(),
        /* 461 */ array(),
        /* 462 */ array(),
        /* 463 */ array(),
        /* 464 */ array(),
        /* 465 */ array(),
        /* 466 */ array(),
        /* 467 */ array(),
        /* 468 */ array(),
        /* 469 */ array(),
        /* 470 */ array(),
        /* 471 */ array(),
        /* 472 */ array(),
        /* 473 */ array(),
        /* 474 */ array(),
        /* 475 */ array(),
        /* 476 */ array(),
        /* 477 */ array(),
        /* 478 */ array(),
        /* 479 */ array(),
        /* 480 */ array(),
        /* 481 */ array(),
        /* 482 */ array(),
        /* 483 */ array(),
        /* 484 */ array(),
        /* 485 */ array(),
        /* 486 */ array(),
        /* 487 */ array(),
        /* 488 */ array(),
        /* 489 */ array(),
        /* 490 */ array(),
        /* 491 */ array(),
        /* 492 */ array(),
        /* 493 */ array(),
        /* 494 */ array(),
        /* 495 */ array(),
        /* 496 */ array(),
        /* 497 */ array(),
        /* 498 */ array(),
        /* 499 */ array(),
        /* 500 */ array(),
        /* 501 */ array(),
        /* 502 */ array(),
        /* 503 */ array(),
        /* 504 */ array(),
        /* 505 */ array(),
        /* 506 */ array(),
        /* 507 */ array(),
        /* 508 */ array(),
        /* 509 */ array(),
        /* 510 */ array(),
        /* 511 */ array(),
        /* 512 */ array(),
        /* 513 */ array(),
        /* 514 */ array(),
        /* 515 */ array(),
        /* 516 */ array(),
        /* 517 */ array(),
        /* 518 */ array(),
        /* 519 */ array(),
        /* 520 */ array(),
        /* 521 */ array(),
        /* 522 */ array(),
        /* 523 */ array(),
        /* 524 */ array(),
        /* 525 */ array(),
        /* 526 */ array(),
        /* 527 */ array(),
        /* 528 */ array(),
        /* 529 */ array(),
        /* 530 */ array(),
        /* 531 */ array(),
        /* 532 */ array(),
        /* 533 */ array(),
        /* 534 */ array(),
        /* 535 */ array(),
        /* 536 */ array(),
        /* 537 */ array(),
        /* 538 */ array(),
        /* 539 */ array(),
        /* 540 */ array(),
        /* 541 */ array(),
        /* 542 */ array(),
        /* 543 */ array(),
        /* 544 */ array(),
        /* 545 */ array(),
        /* 546 */ array(),
        /* 547 */ array(),
        /* 548 */ array(),
        /* 549 */ array(),
        /* 550 */ array(),
        /* 551 */ array(),
        /* 552 */ array(),
        /* 553 */ array(),
        /* 554 */ array(),
        /* 555 */ array(),
        /* 556 */ array(),
        /* 557 */ array(),
        /* 558 */ array(),
        /* 559 */ array(),
);
    static public $yy_default = array(
 /*     0 */   879,  879,  879,  879,  566,  879,  879,  879,  879,  879,
 /*    10 */   879,  879,  879,  879,  879,  879,  879,  879,  692,  659,
 /*    20 */   560,  658,  568,  691,  879,  879,  879,  879,  879,  879,
 /*    30 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*    40 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*    50 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*    60 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*    70 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*    80 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*    90 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*   100 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*   110 */   879,  879,  879,  832,  879,  879,  879,  832,  831,  879,
 /*   120 */   832,  879,  783,  879,  879,  654,  832,  831,  879,  879,
 /*   130 */   879,  822,  879,  825,  879,  879,  879,  879,  879,  879,
 /*   140 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*   150 */   879,  879,  879,  879,  879,  879,  879,  676,  879,  879,
 /*   160 */   879,  879,  879,  879,  727,  765,  762,  761,  735,  737,
 /*   170 */   879,  879,  736,  730,  746,  728,  729,  748,  747,  879,
 /*   180 */   879,  879,  873,  879,  879,  879,  650,  879,  879,  875,
 /*   190 */   733,  879,  732,  740,  879,  743,  582,  879,  783,  731,
 /*   200 */   879,  879,  581,  879,  879,  879,  879,  879,  879,  874,
 /*   210 */   738,  742,  879,  879,  845,  843,  803,  744,  879,  734,
 /*   220 */   879,  739,  745,  741,  879,  879,  879,  879,  879,  879,
 /*   230 */   879,  879,  612,  879,  648,  642,  879,  879,  879,  879,
 /*   240 */   879,  879,  879,  879,  879,  879,  705,  879,  879,  879,
 /*   250 */   879,  879,  879,  879,  803,  704,  879,  879,  879,  879,
 /*   260 */   836,  694,  838,  833,  879,  879,  879,  821,  879,  879,
 /*   270 */   879,  879,  575,  563,  879,  879,  580,  879,  879,  879,
 /*   280 */   879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
 /*   290 */   879,  879,  879,  879,  878,  870,  872,  877,  879,  879,
 /*   300 */   876,  879,  879,  879,  879,  879,  871,  674,  675,  631,
 /*   310 */   668,  598,  633,  637,  634,  595,  596,  600,  599,  632,
 /*   320 */   601,  641,  627,  597,  628,  669,  670,  569,  567,  671,
 /*   330 */   626,  605,  604,  630,  625,  602,  606,  629,  603,  672,
 /*   340 */   607,  673,  684,  685,  662,  663,  686,  661,  678,  699,
 /*   350 */   698,  660,  664,  697,  667,  695,  690,  688,  666,  665,
 /*   360 */   696,  687,  700,  562,  693,  635,  683,  680,  679,  657,
 /*   370 */   655,  636,  681,  638,  652,  653,  656,  689,  651,  639,
 /*   380 */   682,  677,  640,  797,  828,  827,  817,  778,  829,  831,
 /*   390 */   839,  837,  835,  834,  707,  806,  809,  802,  801,  800,
 /*   400 */   810,  804,  824,  823,  805,  840,  851,  866,  863,  860,
 /*   410 */   857,  869,  858,  780,  779,  861,  868,  865,  864,  854,
 /*   420 */   853,  852,  867,  855,  862,  859,  856,  799,  847,  753,
 /*   430 */   749,  842,  841,  766,  754,  756,  755,  767,  578,  577,
 /*   440 */   570,  565,  564,  561,  571,  572,  576,  574,  573,  757,
 /*   450 */   758,  774,  752,  701,  776,  777,  816,  820,  819,  818,
 /*   460 */   775,  773,  750,  716,  760,  759,  706,  751,  772,  764,
 /*   470 */   763,  826,  807,  579,  589,  587,  586,  588,  590,  594,
 /*   480 */   593,  592,  585,  584,  723,  722,  721,  720,  724,  725,
 /*   490 */   583,  769,  726,  621,  622,  644,  643,  620,  618,  645,
 /*   500 */   647,  623,  646,  649,  616,  615,  613,  610,  608,  591,
 /*   510 */   609,  611,  619,  617,  614,  719,  718,  782,  703,  702,
 /*   520 */   849,  784,  785,  790,  787,  786,  850,  848,  813,  812,
 /*   530 */   811,  808,  814,  815,  846,  844,  830,  791,  788,  714,
 /*   540 */   713,  712,  711,  715,  768,  717,  771,  770,  710,  709,
 /*   550 */   794,  792,  793,  789,  796,  798,  708,  781,  795,  624,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 227;
    const YYSTACKDEPTH = 100;
    const block_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 560;
    const YYNRULE = 319;
    const YYERRORSYMBOL = 123;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'NOTEQUAL',    
  'EQUAL',         'LOGICALAND',    'BINARYAND',     'BINARYOR',    
  'LOGICALOR',     'AMPERSAND',     'BINARYXOR',     'UINDIRECTION',
  'UADRESS',       'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',       
  'UBRACKET',      'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',
  'IDENTIFIER',    'LEFTFIGUREBRACKET',  'RIGHTFIGUREBRACKET',  'SEMICOLON',   
  'COMMA',         'ASSIGN',        'TYPENAMEKWD',   'CLASSKWD',    
  'STRUCTKWD',     'ENUMKWD',       'TEMPLATEKWD',   'LESSER',      
  'GREATER',       'UNIONKWD',      'COLON',         'PUBLICKWD',   
  'PROTECTEDKWD',  'PRIVATEKWD',    'SIGNALSKWD',    'SLOTSKWD',    
  'CONSTKWD',      'MULTIPLY',      'OPERATOROVERLOADDECLARATION',  'TYPENAME',    
  'BINARYNOT',     'OUTER_CONSTRUCTOR_NAME',  'LEFTROUNDBRACKET',  'RIGHTROUNDBRACKET',
  'PREPROCESSOR_ENDIF',  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ELSE',  'PREPROCESSOR_IFDEF',
  'CUSTOMTYPENAME',  'PREPROCESSOR_IF',  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_INCLUDE',
  'WHILEKWD',      'DOKWD',         'FORKWD',        'RETURNKWD',   
  'CONTINUEKWD',   'GOTOKWD',       'TRYKWD',        'CATCHKWD',    
  'ELLIPSIS',      'SWITCHKWD',     'CASEKWD',       'DEFAULTKWD',  
  'IFKWD',         'TYPEDEF',       'BREAKKWD',      'NEWKWD',      
  'DELETE',        'LEFTSQUAREBRACKET',  'RIGHTSQUAREBRACKET',  'STATICKWD',   
  'EXTERNKWD',     'REGISTERKWD',   'VOLATILEKWD',   'FRIENDKWD',   
  'BINARYXOR_ASSIGN',  'BINARYOR_ASSIGN',  'BINARYAND_ASSIGN',  'RIGHTSHIFT_ASSIGN',
  'LEFTSHIFT_ASSIGN',  'MODULO_ASSIGN',  'DIVISION_ASSIGN',  'MULTIPLY_ASSIGN',
  'PLUS_ASSIGN',   'MINUS_ASSIGN',  'NOT_EQUAL',     'LESSER_OR_EQUAL',
  'GREATER_OR_EQUAL',  'LEFTSHIFT',     'RIGHTSHIFT',    'MINUS',       
  'PLUS',          'MODULOSIGN',    'DIVISION',      'LOGICALNOT',  
  'DECREMENT',     'INCREMENT',     'DOT',           'RIGHTARROW',  
  'CONST_CAST',    'STATIC_CAST',   'DYNAMIC_CAST',  'REINTERPRET_CAST',
  'NUMERIC',       'CHARACTER',     'STRING',        'PREPROCESSOR_STRINGIFY',
  'PREPROCESSOR_CONCAT',  'SIZEOF',        'VOID',          'FLOAT',       
  'DOUBLE',        'LONG',          'CHAR',          'SIGNED',      
  'UNSIGNED',      'INT',           'SHORT',         'error',       
  'program',       'stmt_list',     'stmt_or_defined_macro',  'namespace_definition_start',
  'stmt',          'namespace_body',  'start_of_empty_namespace',  'namespace_statements',
  'class_or_union_or_struct',  'identified_type_meta_specifier_with_template_def',  'type_meta_specifier_with_template_def',  'structure_body',
  'nonidentified_type_meta_specifier_with_template_def',  'template_spec_list',  'template_spec',  'template_typename',
  'type_or_type_ref_or_with_ptr',  'expr_prec_7',   'builtintype',   'template_def',
  'type_meta_specifier',  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',  'visibility_spec_full',
  'visibility_spec',  'signal_slots',  'enum_body',     'enum_value_list',
  'enum_value',    'expr_atom',     'enum_definition_start',  'type_or_type_with_qualifier',
  'function_definition_without_type',  'type',          'lvalue',        'formal_args_list_with_or_without_const',
  'function_body',  'operator_overload_declaration_type_modificators',  'operator_overload_declaration_ptr',  'operator_overload_declaration_without_type',
  'formal_args_list',  'outer_constructor_name',  'namespace_resolve',  'outer_destructor_name',
  'arg_list',      'arg',           'preprocessor_cond',  'preprocessor_else_clauses',
  'preprocessor_elif_list',  'preprocessor_else',  'preprocessor_elif',  'expr_prec_10',
  'expr_prec_11',  'try_catch',     'try',           'catch_list',  
  'catch',         'expr_prec_11_or_ellipsis',  'switch_stmt',   'switch_case_list',
  'case',          'if_then_else',  'if_then',       'lvalue_or_assignment_list',
  'expr_list',     'type_with_qualifier',  'varqualifier',  'expr_prec_9', 
  'expr_binary_ops',  'expr_or_equal',  'expr_prec_8',   'expr_prec_6', 
  'expr_prec_5',   'expr_prec_4',   'try_value_access',  'try_pointer_access',
  'expr_prec_3',   'typecast',      'expr_prec_2',   'cpp_style_cast',
  'lvalue_or_assignment',  'initialization_list',  'initialization_list_argument_list',  'possibly_identifier_preceded_ref',
  'possibly_idenitifer_preceded_ptrs',  'assignable',    'scoped_identifier',  'non_const_type',
  'scoped_type',   'typename_or_instantiated_template_type',  'template_instantiation_arguments',  'instantiated_template_type_on_in_namespace_resolve',
  'typename_in_namespace_resolve',  'instantiated_template_type_on_start_of_namespace_resolve',  'typename_on_start_of_namespace_resolve',  'type_ref_one',
  'type_ref_two',  'type_ref',      'type_or_type_ref',  'template_instantiation_argument_list',
  'template_instantiation_arguments_begin',  'template_instantiation_arguments_end',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "namespace_definition_start ::= NAMESPACEKWD",
 /*   4 */ "namespace_definition_start ::= NAMESPACEKWD IDENTIFIER",
 /*   5 */ "stmt ::= namespace_definition_start namespace_body",
 /*   6 */ "start_of_empty_namespace ::= LEFTFIGUREBRACKET",
 /*   7 */ "namespace_body ::= start_of_empty_namespace RIGHTFIGUREBRACKET",
 /*   8 */ "namespace_statements ::= stmt_list",
 /*   9 */ "namespace_body ::= LEFTFIGUREBRACKET namespace_statements RIGHTFIGUREBRACKET",
 /*  10 */ "stmt ::= class_or_union_or_struct",
 /*  11 */ "identified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def IDENTIFIER",
 /*  12 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  13 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  14 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def SEMICOLON",
 /*  15 */ "nonidentified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def",
 /*  16 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  17 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  18 */ "template_spec_list ::= template_spec_list COMMA template_spec",
 /*  19 */ "template_spec_list ::= template_spec",
 /*  20 */ "template_spec ::= template_typename IDENTIFIER",
 /*  21 */ "template_spec ::= template_typename IDENTIFIER ASSIGN type_or_type_ref_or_with_ptr",
 /*  22 */ "template_spec ::= template_typename IDENTIFIER ASSIGN expr_prec_7",
 /*  23 */ "template_typename ::= TYPENAMEKWD",
 /*  24 */ "template_typename ::= CLASSKWD",
 /*  25 */ "template_typename ::= STRUCTKWD",
 /*  26 */ "template_typename ::= ENUMKWD",
 /*  27 */ "template_typename ::= builtintype",
 /*  28 */ "template_def ::= TEMPLATEKWD LESSER GREATER",
 /*  29 */ "template_def ::= TEMPLATEKWD LESSER template_spec_list GREATER",
 /*  30 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  31 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  32 */ "type_meta_specifier ::= CLASSKWD",
 /*  33 */ "type_meta_specifier ::= STRUCTKWD",
 /*  34 */ "type_meta_specifier ::= UNIONKWD",
 /*  35 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  36 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  37 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  38 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  39 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  40 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  41 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  42 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  43 */ "visibility_spec ::= PUBLICKWD",
 /*  44 */ "visibility_spec ::= PROTECTEDKWD",
 /*  45 */ "visibility_spec ::= PRIVATEKWD",
 /*  46 */ "signal_slots ::= SIGNALSKWD",
 /*  47 */ "signal_slots ::= SLOTSKWD",
 /*  48 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  49 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  50 */ "enum_value_list ::= enum_value_list COMMA enum_value",
 /*  51 */ "enum_value_list ::= enum_value",
 /*  52 */ "enum_value ::= IDENTIFIER",
 /*  53 */ "enum_value ::= IDENTIFIER ASSIGN expr_atom",
 /*  54 */ "enum_definition_start ::= ENUMKWD IDENTIFIER",
 /*  55 */ "stmt_or_defined_macro ::= enum_definition_start SEMICOLON",
 /*  56 */ "stmt_or_defined_macro ::= enum_definition_start enum_body SEMICOLON",
 /*  57 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  58 */ "stmt_or_defined_macro ::= enum_definition_start enum_body IDENTIFIER SEMICOLON",
 /*  59 */ "stmt_or_defined_macro ::= ENUMKWD enum_body IDENTIFIER SEMICOLON",
 /*  60 */ "stmt_or_defined_macro ::= type_or_type_with_qualifier function_definition_without_type",
 /*  61 */ "stmt_or_defined_macro ::= template_def type function_definition_without_type",
 /*  62 */ "function_definition_without_type ::= lvalue formal_args_list_with_or_without_const function_body",
 /*  63 */ "function_definition_without_type ::= operator_overload_declaration_type_modificators",
 /*  64 */ "operator_overload_declaration_type_modificators ::= AMPERSAND operator_overload_declaration_ptr",
 /*  65 */ "operator_overload_declaration_type_modificators ::= operator_overload_declaration_ptr",
 /*  66 */ "operator_overload_declaration_ptr ::= CONSTKWD MULTIPLY operator_overload_declaration_ptr",
 /*  67 */ "operator_overload_declaration_ptr ::= MULTIPLY operator_overload_declaration_ptr",
 /*  68 */ "operator_overload_declaration_ptr ::= operator_overload_declaration_without_type",
 /*  69 */ "operator_overload_declaration_without_type ::= OPERATOROVERLOADDECLARATION formal_args_list_with_or_without_const function_body",
 /*  70 */ "stmt_or_defined_macro ::= template_def TYPENAME formal_args_list function_body",
 /*  71 */ "stmt_or_defined_macro ::= TYPENAME formal_args_list function_body",
 /*  72 */ "stmt_or_defined_macro ::= BINARYNOT TYPENAME formal_args_list function_body",
 /*  73 */ "outer_constructor_name ::= namespace_resolve OUTER_CONSTRUCTOR_NAME",
 /*  74 */ "stmt_or_defined_macro ::= template_def outer_constructor_name formal_args_list function_body",
 /*  75 */ "stmt_or_defined_macro ::= outer_constructor_name formal_args_list function_body",
 /*  76 */ "outer_destructor_name ::= namespace_resolve BINARYNOT OUTER_CONSTRUCTOR_NAME",
 /*  77 */ "stmt_or_defined_macro ::= template_def outer_destructor_name formal_args_list function_body",
 /*  78 */ "stmt_or_defined_macro ::= outer_destructor_name formal_args_list function_body",
 /*  79 */ "function_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  80 */ "function_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  81 */ "function_body ::= SEMICOLON",
 /*  82 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  83 */ "formal_args_list_with_or_without_const ::= formal_args_list CONSTKWD",
 /*  84 */ "formal_args_list ::= LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /*  85 */ "formal_args_list ::= LEFTROUNDBRACKET arg_list RIGHTROUNDBRACKET",
 /*  86 */ "arg_list ::= arg",
 /*  87 */ "arg_list ::= arg_list COMMA arg",
 /*  88 */ "arg ::= lvalue",
 /*  89 */ "arg ::= type_or_type_ref_or_with_ptr IDENTIFIER",
 /*  90 */ "arg ::= type_or_type_ref_or_with_ptr",
 /*  91 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list PREPROCESSOR_ENDIF",
 /*  92 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses PREPROCESSOR_ENDIF",
 /*  93 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  94 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  95 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  96 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  97 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  98 */ "preprocessor_elif ::= PREPROCESSOR_ELIF stmt_list",
 /*  99 */ "preprocessor_else ::= PREPROCESSOR_ELSE stmt_list",
 /* 100 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF IDENTIFIER",
 /* 101 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF CUSTOMTYPENAME",
 /* 102 */ "preprocessor_cond ::= PREPROCESSOR_IF",
 /* 103 */ "stmt_or_defined_macro ::= PREPROCESSOR_DEFINE",
 /* 104 */ "stmt_or_defined_macro ::= stmt",
 /* 105 */ "stmt ::= PREPROCESSOR_INCLUDE",
 /* 106 */ "stmt ::= WHILEKWD LEFTROUNDBRACKET expr_prec_10 RIGHTROUNDBRACKET stmt",
 /* 107 */ "stmt ::= DOKWD stmt WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET SEMICOLON",
 /* 108 */ "stmt ::= FORKWD LEFTROUNDBRACKET expr_prec_11 SEMICOLON expr_prec_11 SEMICOLON expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 109 */ "stmt ::= RETURNKWD expr_prec_11 SEMICOLON",
 /* 110 */ "stmt ::= RETURNKWD SEMICOLON",
 /* 111 */ "stmt ::= CONTINUEKWD SEMICOLON",
 /* 112 */ "stmt ::= GOTOKWD IDENTIFIER SEMICOLON",
 /* 113 */ "stmt ::= GOTOKWD CUSTOMTYPENAME SEMICOLON",
 /* 114 */ "stmt ::= IDENTIFIER COLON",
 /* 115 */ "stmt ::= try_catch",
 /* 116 */ "try_catch ::= try catch_list",
 /* 117 */ "try ::= TRYKWD LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 118 */ "try ::= TRYKWD LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 119 */ "catch_list ::= catch_list catch",
 /* 120 */ "catch_list ::= catch",
 /* 121 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 122 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 123 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 124 */ "expr_prec_11_or_ellipsis ::= ELLIPSIS",
 /* 125 */ "stmt ::= SEMICOLON",
 /* 126 */ "stmt ::= switch_stmt",
 /* 127 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 128 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET switch_case_list RIGHTFIGUREBRACKET",
 /* 129 */ "switch_case_list ::= case",
 /* 130 */ "switch_case_list ::= switch_case_list case",
 /* 131 */ "case ::= CASEKWD expr_atom COLON stmt_list",
 /* 132 */ "case ::= DEFAULTKWD COLON stmt_list",
 /* 133 */ "stmt ::= if_then_else",
 /* 134 */ "if_then_else ::= if_then",
 /* 135 */ "if_then_else ::= if_then ELSEKWD stmt",
 /* 136 */ "if_then ::= IFKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 137 */ "stmt ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 138 */ "stmt ::= TYPEDEF type IDENTIFIER SEMICOLON",
 /* 139 */ "stmt ::= BREAKKWD SEMICOLON",
 /* 140 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 141 */ "expr_prec_11 ::= NEWKWD expr_prec_10",
 /* 142 */ "expr_prec_11 ::= DELETE LEFTSQUAREBRACKET RIGHTSQUAREBRACKET expr_prec_10",
 /* 143 */ "expr_prec_11 ::= DELETE expr_prec_10",
 /* 144 */ "expr_prec_11 ::= type_or_type_with_qualifier lvalue_or_assignment_list",
 /* 145 */ "expr_prec_11 ::= expr_list",
 /* 146 */ "expr_list ::= expr_list COMMA expr_prec_10",
 /* 147 */ "expr_list ::= expr_prec_10",
 /* 148 */ "type_or_type_with_qualifier ::= type_with_qualifier",
 /* 149 */ "type_or_type_with_qualifier ::= type",
 /* 150 */ "type_with_qualifier ::= varqualifier type",
 /* 151 */ "varqualifier ::= STATICKWD",
 /* 152 */ "varqualifier ::= EXTERNKWD",
 /* 153 */ "varqualifier ::= REGISTERKWD",
 /* 154 */ "varqualifier ::= VOLATILEKWD",
 /* 155 */ "varqualifier ::= FRIENDKWD",
 /* 156 */ "expr_prec_10 ::= expr_prec_9 BINARYXOR_ASSIGN expr_prec_10",
 /* 157 */ "expr_prec_10 ::= expr_prec_9 BINARYOR_ASSIGN expr_prec_10",
 /* 158 */ "expr_prec_10 ::= expr_prec_9 BINARYAND_ASSIGN expr_prec_10",
 /* 159 */ "expr_prec_10 ::= expr_prec_9 RIGHTSHIFT_ASSIGN expr_prec_10",
 /* 160 */ "expr_prec_10 ::= expr_prec_9 LEFTSHIFT_ASSIGN expr_prec_10",
 /* 161 */ "expr_prec_10 ::= expr_prec_9 MODULO_ASSIGN expr_prec_10",
 /* 162 */ "expr_prec_10 ::= expr_prec_9 DIVISION_ASSIGN expr_prec_10",
 /* 163 */ "expr_prec_10 ::= expr_prec_9 MULTIPLY_ASSIGN expr_prec_10",
 /* 164 */ "expr_prec_10 ::= expr_prec_9 PLUS_ASSIGN expr_prec_10",
 /* 165 */ "expr_prec_10 ::= expr_prec_9 MINUS_ASSIGN expr_prec_10",
 /* 166 */ "expr_prec_10 ::= expr_prec_9 ASSIGN expr_prec_10",
 /* 167 */ "expr_prec_10 ::= expr_prec_9",
 /* 168 */ "expr_prec_9 ::= expr_prec_9 LOGICALAND expr_binary_ops",
 /* 169 */ "expr_prec_9 ::= expr_prec_9 LOGICALOR expr_binary_ops",
 /* 170 */ "expr_prec_9 ::= expr_binary_ops",
 /* 171 */ "expr_binary_ops ::= expr_binary_ops BINARYXOR expr_or_equal",
 /* 172 */ "expr_binary_ops ::= expr_binary_ops BINARYOR expr_or_equal",
 /* 173 */ "expr_binary_ops ::= expr_binary_ops AMPERSAND expr_or_equal",
 /* 174 */ "expr_binary_ops ::= expr_or_equal",
 /* 175 */ "expr_or_equal ::= expr_or_equal NOT_EQUAL expr_prec_8",
 /* 176 */ "expr_or_equal ::= expr_or_equal EQUAL expr_prec_8",
 /* 177 */ "expr_or_equal ::= expr_prec_8",
 /* 178 */ "expr_prec_8 ::= expr_prec_8 LESSER_OR_EQUAL expr_prec_7",
 /* 179 */ "expr_prec_8 ::= expr_prec_8 GREATER_OR_EQUAL expr_prec_7",
 /* 180 */ "expr_prec_8 ::= expr_prec_8 GREATER expr_prec_7",
 /* 181 */ "expr_prec_8 ::= expr_prec_8 LESSER expr_prec_7",
 /* 182 */ "expr_prec_8 ::= expr_prec_7",
 /* 183 */ "expr_prec_7 ::= expr_prec_7 LEFTSHIFT expr_prec_6",
 /* 184 */ "expr_prec_7 ::= expr_prec_7 RIGHTSHIFT expr_prec_6",
 /* 185 */ "expr_prec_7 ::= expr_prec_6",
 /* 186 */ "expr_prec_6 ::= expr_prec_6 MINUS expr_prec_5",
 /* 187 */ "expr_prec_6 ::= expr_prec_6 PLUS expr_prec_5",
 /* 188 */ "expr_prec_6 ::= expr_prec_5",
 /* 189 */ "expr_prec_5 ::= expr_prec_5 MODULOSIGN expr_prec_4",
 /* 190 */ "expr_prec_5 ::= expr_prec_5 DIVISION expr_prec_4",
 /* 191 */ "expr_prec_5 ::= expr_prec_5 MULTIPLY expr_prec_4",
 /* 192 */ "expr_prec_5 ::= expr_prec_4",
 /* 193 */ "expr_prec_4 ::= try_value_access MULTIPLY IDENTIFIER",
 /* 194 */ "expr_prec_4 ::= try_pointer_access MULTIPLY IDENTIFIER",
 /* 195 */ "expr_prec_4 ::= expr_prec_3",
 /* 196 */ "expr_prec_3 ::= AMPERSAND expr_prec_3",
 /* 197 */ "expr_prec_3 ::= MULTIPLY expr_prec_3",
 /* 198 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 199 */ "expr_prec_3 ::= LOGICALNOT expr_prec_3",
 /* 200 */ "expr_prec_3 ::= BINARYNOT expr_prec_3",
 /* 201 */ "expr_prec_3 ::= MINUS expr_prec_2",
 /* 202 */ "expr_prec_3 ::= PLUS expr_prec_2",
 /* 203 */ "expr_prec_3 ::= DECREMENT expr_prec_3",
 /* 204 */ "expr_prec_3 ::= INCREMENT expr_prec_3",
 /* 205 */ "expr_prec_3 ::= expr_prec_2",
 /* 206 */ "expr_prec_2 ::= try_value_access IDENTIFIER",
 /* 207 */ "expr_prec_2 ::= try_pointer_access IDENTIFIER",
 /* 208 */ "expr_prec_2 ::= cpp_style_cast LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 209 */ "expr_prec_2 ::= expr_prec_2 LEFTSQUAREBRACKET expr_prec_10 RIGHTSQUAREBRACKET",
 /* 210 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET expr_list RIGHTROUNDBRACKET",
 /* 211 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /* 212 */ "expr_prec_2 ::= expr_prec_2 INCREMENT",
 /* 213 */ "expr_prec_2 ::= expr_prec_2 DECREMENT",
 /* 214 */ "expr_prec_2 ::= expr_atom",
 /* 215 */ "try_value_access ::= expr_prec_2 DOT",
 /* 216 */ "try_pointer_access ::= expr_prec_2 RIGHTARROW",
 /* 217 */ "cpp_style_cast ::= CONST_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 218 */ "cpp_style_cast ::= STATIC_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 219 */ "cpp_style_cast ::= DYNAMIC_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 220 */ "cpp_style_cast ::= REINTERPRET_CAST LESSER type_or_type_ref_or_with_ptr GREATER",
 /* 221 */ "lvalue_or_assignment_list ::= lvalue_or_assignment",
 /* 222 */ "lvalue_or_assignment_list ::= lvalue_or_assignment_list COMMA lvalue_or_assignment",
 /* 223 */ "lvalue_or_assignment ::= lvalue",
 /* 224 */ "lvalue_or_assignment ::= lvalue ASSIGN expr_prec_10",
 /* 225 */ "lvalue_or_assignment ::= lvalue ASSIGN initialization_list",
 /* 226 */ "initialization_list ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 227 */ "initialization_list ::= LEFTFIGUREBRACKET initialization_list_argument_list RIGHTFIGUREBRACKET",
 /* 228 */ "initialization_list_argument_list ::= expr_prec_10",
 /* 229 */ "initialization_list_argument_list ::= initialization_list",
 /* 230 */ "initialization_list_argument_list ::= initialization_list_argument_list COMMA expr_prec_10",
 /* 231 */ "initialization_list_argument_list ::= initialization_list_argument_list COMMA initialization_list",
 /* 232 */ "lvalue ::= possibly_identifier_preceded_ref",
 /* 233 */ "lvalue ::= lvalue LEFTSQUAREBRACKET expr_prec_9 RIGHTSQUAREBRACKET",
 /* 234 */ "possibly_identifier_preceded_ref ::= AMPERSAND possibly_idenitifer_preceded_ptrs",
 /* 235 */ "possibly_identifier_preceded_ref ::= possibly_idenitifer_preceded_ptrs",
 /* 236 */ "possibly_idenitifer_preceded_ptrs ::= IDENTIFIER",
 /* 237 */ "possibly_idenitifer_preceded_ptrs ::= MULTIPLY possibly_idenitifer_preceded_ptrs",
 /* 238 */ "possibly_idenitifer_preceded_ptrs ::= CONSTKWD MULTIPLY possibly_idenitifer_preceded_ptrs",
 /* 239 */ "expr_atom ::= NUMERIC",
 /* 240 */ "expr_atom ::= assignable",
 /* 241 */ "expr_atom ::= CHARACTER",
 /* 242 */ "expr_atom ::= STRING",
 /* 243 */ "assignable ::= IDENTIFIER",
 /* 244 */ "assignable ::= scoped_identifier",
 /* 245 */ "scoped_identifier ::= namespace_resolve IDENTIFIER",
 /* 246 */ "expr_atom ::= LEFTROUNDBRACKET expr_list RIGHTROUNDBRACKET",
 /* 247 */ "expr_atom ::= PREPROCESSOR_STRINGIFY IDENTIFIER",
 /* 248 */ "expr_atom ::= PREPROCESSOR_STRINGIFY TYPENAME",
 /* 249 */ "expr_atom ::= IDENTIFIER PREPROCESSOR_CONCAT IDENTIFIER",
 /* 250 */ "expr_atom ::= IDENTIFIER PREPROCESSOR_CONCAT TYPENAME",
 /* 251 */ "expr_atom ::= TYPENAME PREPROCESSOR_CONCAT IDENTIFIER",
 /* 252 */ "expr_atom ::= TYPENAME PREPROCESSOR_CONCAT TYPENAME",
 /* 253 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET type_or_type_ref_or_with_ptr RIGHTROUNDBRACKET",
 /* 254 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET expr_atom RIGHTROUNDBRACKET",
 /* 255 */ "typecast ::= LEFTROUNDBRACKET type_or_type_ref_or_with_ptr RIGHTROUNDBRACKET",
 /* 256 */ "type ::= CONSTKWD non_const_type",
 /* 257 */ "type ::= non_const_type",
 /* 258 */ "non_const_type ::= builtintype",
 /* 259 */ "non_const_type ::= scoped_type",
 /* 260 */ "non_const_type ::= typename_or_instantiated_template_type",
 /* 261 */ "scoped_type ::= namespace_resolve TYPENAME template_instantiation_arguments",
 /* 262 */ "scoped_type ::= namespace_resolve TYPENAME",
 /* 263 */ "namespace_resolve ::= namespace_resolve instantiated_template_type_on_in_namespace_resolve NAMESPACE_RESOLVE",
 /* 264 */ "namespace_resolve ::= namespace_resolve typename_in_namespace_resolve NAMESPACE_RESOLVE",
 /* 265 */ "typename_in_namespace_resolve ::= TYPENAME",
 /* 266 */ "instantiated_template_type_on_in_namespace_resolve ::= TYPENAME template_instantiation_arguments",
 /* 267 */ "namespace_resolve ::= instantiated_template_type_on_start_of_namespace_resolve NAMESPACE_RESOLVE",
 /* 268 */ "namespace_resolve ::= typename_on_start_of_namespace_resolve NAMESPACE_RESOLVE",
 /* 269 */ "namespace_resolve ::= NAMESPACE_RESOLVE typename_on_start_of_namespace_resolve NAMESPACE_RESOLVE",
 /* 270 */ "instantiated_template_type_on_start_of_namespace_resolve ::= TYPENAME template_instantiation_arguments",
 /* 271 */ "typename_on_start_of_namespace_resolve ::= TYPENAME",
 /* 272 */ "typename_or_instantiated_template_type ::= TYPENAME",
 /* 273 */ "typename_or_instantiated_template_type ::= TYPENAME template_instantiation_arguments",
 /* 274 */ "type_ref_one ::= type AMPERSAND",
 /* 275 */ "type_ref_two ::= type_ref_one AMPERSAND",
 /* 276 */ "type_ref ::= type_ref_one",
 /* 277 */ "type_ref ::= type_ref_two",
 /* 278 */ "type_or_type_ref ::= type",
 /* 279 */ "type_or_type_ref ::= type_ref",
 /* 280 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref",
 /* 281 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr MULTIPLY",
 /* 282 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr CONSTKWD MULTIPLY",
 /* 283 */ "template_instantiation_argument_list ::= type_or_type_ref_or_with_ptr",
 /* 284 */ "template_instantiation_argument_list ::= expr_atom",
 /* 285 */ "template_instantiation_argument_list ::= template_instantiation_argument_list COMMA type_or_type_ref_or_with_ptr",
 /* 286 */ "template_instantiation_argument_list ::= template_instantiation_argument_list COMMA expr_atom",
 /* 287 */ "template_instantiation_arguments_begin ::= LESSER",
 /* 288 */ "template_instantiation_arguments_end ::= GREATER",
 /* 289 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_arguments_end",
 /* 290 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_argument_list template_instantiation_arguments_end",
 /* 291 */ "builtintype ::= VOID",
 /* 292 */ "builtintype ::= FLOAT",
 /* 293 */ "builtintype ::= DOUBLE",
 /* 294 */ "builtintype ::= LONG DOUBLE",
 /* 295 */ "builtintype ::= CHAR",
 /* 296 */ "builtintype ::= SIGNED CHAR",
 /* 297 */ "builtintype ::= UNSIGNED CHAR",
 /* 298 */ "builtintype ::= INT",
 /* 299 */ "builtintype ::= SIGNED INT",
 /* 300 */ "builtintype ::= UNSIGNED INT",
 /* 301 */ "builtintype ::= SHORT INT",
 /* 302 */ "builtintype ::= SIGNED SHORT INT",
 /* 303 */ "builtintype ::= UNSIGNED SHORT INT",
 /* 304 */ "builtintype ::= LONG INT",
 /* 305 */ "builtintype ::= SIGNED LONG INT",
 /* 306 */ "builtintype ::= UNSIGNED LONG INT",
 /* 307 */ "builtintype ::= LONG LONG INT",
 /* 308 */ "builtintype ::= SIGNED LONG LONG INT",
 /* 309 */ "builtintype ::= UNSIGNED LONG LONG INT",
 /* 310 */ "builtintype ::= SHORT",
 /* 311 */ "builtintype ::= SIGNED SHORT",
 /* 312 */ "builtintype ::= UNSIGNED SHORT",
 /* 313 */ "builtintype ::= LONG",
 /* 314 */ "builtintype ::= SIGNED LONG",
 /* 315 */ "builtintype ::= UNSIGNED LONG",
 /* 316 */ "builtintype ::= LONG LONG",
 /* 317 */ "builtintype ::= SIGNED LONG LONG",
 /* 318 */ "builtintype ::= UNSIGNED LONG LONG",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param block_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new block_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 132, 'rhs' => 4 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 132, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 4 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 138, 'rhs' => 4 ),
  array( 'lhs' => 138, 'rhs' => 4 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 3 ),
  array( 'lhs' => 143, 'rhs' => 4 ),
  array( 'lhs' => 134, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 3 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 151, 'rhs' => 3 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 2 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 2 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 165, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 167, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 2 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 170, 'rhs' => 2 ),
  array( 'lhs' => 170, 'rhs' => 2 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 5 ),
  array( 'lhs' => 128, 'rhs' => 7 ),
  array( 'lhs' => 128, 'rhs' => 9 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 4 ),
  array( 'lhs' => 179, 'rhs' => 2 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 6 ),
  array( 'lhs' => 180, 'rhs' => 7 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 6 ),
  array( 'lhs' => 182, 'rhs' => 7 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 4 ),
  array( 'lhs' => 184, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 5 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 4 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 3 ),
  array( 'lhs' => 188, 'rhs' => 1 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 192, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 2 ),
  array( 'lhs' => 202, 'rhs' => 2 ),
  array( 'lhs' => 202, 'rhs' => 4 ),
  array( 'lhs' => 202, 'rhs' => 4 ),
  array( 'lhs' => 202, 'rhs' => 4 ),
  array( 'lhs' => 202, 'rhs' => 3 ),
  array( 'lhs' => 202, 'rhs' => 2 ),
  array( 'lhs' => 202, 'rhs' => 2 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 199, 'rhs' => 2 ),
  array( 'lhs' => 203, 'rhs' => 4 ),
  array( 'lhs' => 203, 'rhs' => 4 ),
  array( 'lhs' => 203, 'rhs' => 4 ),
  array( 'lhs' => 203, 'rhs' => 4 ),
  array( 'lhs' => 187, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 3 ),
  array( 'lhs' => 204, 'rhs' => 1 ),
  array( 'lhs' => 204, 'rhs' => 3 ),
  array( 'lhs' => 204, 'rhs' => 3 ),
  array( 'lhs' => 205, 'rhs' => 2 ),
  array( 'lhs' => 205, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 1 ),
  array( 'lhs' => 206, 'rhs' => 1 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 4 ),
  array( 'lhs' => 207, 'rhs' => 2 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 2 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 4 ),
  array( 'lhs' => 153, 'rhs' => 4 ),
  array( 'lhs' => 201, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 3 ),
  array( 'lhs' => 212, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 216, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 217, 'rhs' => 2 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 2 ),
  array( 'lhs' => 219, 'rhs' => 2 ),
  array( 'lhs' => 220, 'rhs' => 2 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 222, 'rhs' => 1 ),
  array( 'lhs' => 222, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 2 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 223, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 3 ),
  array( 'lhs' => 223, 'rhs' => 3 ),
  array( 'lhs' => 224, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 214, 'rhs' => 2 ),
  array( 'lhs' => 214, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 4 ),
  array( 'lhs' => 142, 'rhs' => 4 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        8 => 6,
        7 => 7,
        9 => 9,
        10 => 10,
        19 => 10,
        23 => 10,
        24 => 10,
        25 => 10,
        26 => 10,
        27 => 10,
        31 => 10,
        32 => 10,
        33 => 10,
        34 => 10,
        37 => 10,
        40 => 10,
        43 => 10,
        44 => 10,
        45 => 10,
        46 => 10,
        51 => 10,
        63 => 10,
        65 => 10,
        68 => 10,
        88 => 10,
        90 => 10,
        145 => 10,
        148 => 10,
        149 => 10,
        221 => 10,
        223 => 10,
        228 => 10,
        229 => 10,
        232 => 10,
        235 => 10,
        236 => 10,
        244 => 10,
        258 => 10,
        259 => 10,
        260 => 10,
        272 => 10,
        276 => 10,
        277 => 10,
        278 => 10,
        279 => 10,
        280 => 10,
        283 => 10,
        284 => 10,
        11 => 11,
        12 => 12,
        16 => 12,
        13 => 13,
        17 => 13,
        14 => 14,
        15 => 15,
        18 => 18,
        20 => 20,
        21 => 21,
        22 => 21,
        28 => 28,
        29 => 29,
        30 => 30,
        35 => 35,
        36 => 36,
        38 => 38,
        39 => 39,
        170 => 39,
        174 => 39,
        41 => 41,
        42 => 42,
        47 => 47,
        257 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        58 => 58,
        59 => 59,
        60 => 60,
        61 => 61,
        62 => 62,
        69 => 62,
        64 => 64,
        66 => 66,
        67 => 67,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        89 => 89,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 100,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 112,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        133 => 126,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        132 => 132,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        146 => 146,
        147 => 147,
        167 => 147,
        177 => 147,
        182 => 147,
        185 => 147,
        188 => 147,
        192 => 147,
        195 => 147,
        205 => 147,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
        168 => 168,
        169 => 169,
        171 => 171,
        172 => 172,
        173 => 173,
        175 => 175,
        176 => 176,
        178 => 178,
        179 => 179,
        180 => 180,
        181 => 181,
        183 => 183,
        184 => 184,
        186 => 186,
        187 => 187,
        189 => 189,
        190 => 190,
        191 => 191,
        193 => 193,
        194 => 193,
        196 => 196,
        197 => 197,
        198 => 198,
        199 => 199,
        200 => 200,
        201 => 201,
        202 => 202,
        203 => 203,
        204 => 204,
        206 => 206,
        207 => 206,
        208 => 208,
        209 => 209,
        210 => 210,
        211 => 211,
        212 => 212,
        213 => 213,
        214 => 214,
        215 => 215,
        216 => 216,
        217 => 217,
        218 => 218,
        219 => 219,
        220 => 220,
        222 => 222,
        224 => 224,
        225 => 224,
        226 => 226,
        227 => 227,
        230 => 230,
        231 => 230,
        233 => 233,
        234 => 234,
        237 => 237,
        238 => 238,
        239 => 239,
        241 => 239,
        242 => 239,
        243 => 239,
        240 => 240,
        245 => 245,
        246 => 246,
        247 => 247,
        248 => 247,
        249 => 249,
        250 => 249,
        251 => 249,
        252 => 249,
        253 => 253,
        254 => 254,
        255 => 255,
        256 => 256,
        261 => 261,
        262 => 262,
        263 => 263,
        264 => 264,
        265 => 265,
        266 => 266,
        267 => 267,
        268 => 267,
        269 => 269,
        270 => 270,
        271 => 271,
        273 => 273,
        274 => 274,
        275 => 275,
        281 => 281,
        282 => 282,
        285 => 285,
        286 => 286,
        287 => 287,
        288 => 288,
        289 => 289,
        290 => 290,
        291 => 291,
        292 => 292,
        293 => 293,
        294 => 294,
        295 => 295,
        296 => 296,
        297 => 297,
        298 => 298,
        299 => 299,
        300 => 300,
        301 => 301,
        302 => 302,
        303 => 303,
        304 => 304,
        305 => 305,
        306 => 306,
        307 => 307,
        308 => 308,
        309 => 309,
        310 => 310,
        311 => 311,
        312 => 312,
        313 => 313,
        314 => 314,
        315 => 315,
        316 => 316,
        317 => 317,
        318 => 318,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 88 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 3929 "langs_src/parser_cpp_language.php"
#line 104 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3935 "langs_src/parser_cpp_language.php"
#line 109 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3941 "langs_src/parser_cpp_language.php"
#line 114 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->mapper->push_anonymous_type();
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3947 "langs_src/parser_cpp_language.php"
#line 119 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3955 "langs_src/parser_cpp_language.php"
#line 126 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('namespace', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3961 "langs_src/parser_cpp_language.php"
#line 131 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3967 "langs_src/parser_cpp_language.php"
#line 136 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3973 "langs_src/parser_cpp_language.php"
#line 146 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3979 "langs_src/parser_cpp_language.php"
#line 153 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3984 "langs_src/parser_cpp_language.php"
#line 157 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_constructable($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value(), $this->mapper->extract_template_parameters($this->yystack[$this->yyidx + -1]->minor));
	$this->_retvalue = $this->create_node('identified_type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3992 "langs_src/parser_cpp_language.php"
#line 164 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3998 "langs_src/parser_cpp_language.php"
#line 169 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4004 "langs_src/parser_cpp_language.php"
#line 174 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4010 "langs_src/parser_cpp_language.php"
#line 179 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->mapper->push_anonymous_type($this->mapper->extract_template_parameters($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4016 "langs_src/parser_cpp_language.php"
#line 198 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4022 "langs_src/parser_cpp_language.php"
#line 207 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4029 "langs_src/parser_cpp_language.php"
#line 213 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4036 "langs_src/parser_cpp_language.php"
#line 246 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4042 "langs_src/parser_cpp_language.php"
#line 251 "langs_src/parser_cpp_language.y"
    function yy_r29(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4048 "langs_src/parser_cpp_language.php"
#line 257 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4054 "langs_src/parser_cpp_language.php"
#line 278 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4061 "langs_src/parser_cpp_language.php"
#line 284 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4068 "langs_src/parser_cpp_language.php"
#line 294 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4074 "langs_src/parser_cpp_language.php"
#line 301 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4079 "langs_src/parser_cpp_language.php"
#line 309 "langs_src/parser_cpp_language.y"
    function yy_r41(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4085 "langs_src/parser_cpp_language.php"
#line 314 "langs_src/parser_cpp_language.y"
    function yy_r42(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4091 "langs_src/parser_cpp_language.php"
#line 335 "langs_src/parser_cpp_language.y"
    function yy_r47(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4096 "langs_src/parser_cpp_language.php"
#line 342 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4102 "langs_src/parser_cpp_language.php"
#line 347 "langs_src/parser_cpp_language.y"
    function yy_r49(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4108 "langs_src/parser_cpp_language.php"
#line 352 "langs_src/parser_cpp_language.y"
    function yy_r50(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4114 "langs_src/parser_cpp_language.php"
#line 361 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4120 "langs_src/parser_cpp_language.php"
#line 366 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4126 "langs_src/parser_cpp_language.php"
#line 372 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('enum_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4133 "langs_src/parser_cpp_language.php"
#line 378 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4139 "langs_src/parser_cpp_language.php"
#line 383 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4145 "langs_src/parser_cpp_language.php"
#line 388 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4151 "langs_src/parser_cpp_language.php"
#line 393 "langs_src/parser_cpp_language.y"
    function yy_r58(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4157 "langs_src/parser_cpp_language.php"
#line 398 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4163 "langs_src/parser_cpp_language.php"
#line 405 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4169 "langs_src/parser_cpp_language.php"
#line 410 "langs_src/parser_cpp_language.y"
    function yy_r61(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4175 "langs_src/parser_cpp_language.php"
#line 415 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('function_definition_without_type', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4181 "langs_src/parser_cpp_language.php"
#line 424 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4187 "langs_src/parser_cpp_language.php"
#line 433 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4193 "langs_src/parser_cpp_language.php"
#line 438 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4199 "langs_src/parser_cpp_language.php"
#line 455 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4205 "langs_src/parser_cpp_language.php"
#line 461 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4211 "langs_src/parser_cpp_language.php"
#line 467 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('destructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4217 "langs_src/parser_cpp_language.php"
#line 475 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('outer_constructor_name', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4224 "langs_src/parser_cpp_language.php"
#line 481 "langs_src/parser_cpp_language.y"
    function yy_r74(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, E));
    }
#line 4231 "langs_src/parser_cpp_language.php"
#line 488 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4238 "langs_src/parser_cpp_language.php"
#line 494 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->mapper->clear_lookup_namespace();
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('outer_destructor_name', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4245 "langs_src/parser_cpp_language.php"
#line 501 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4251 "langs_src/parser_cpp_language.php"
#line 507 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4257 "langs_src/parser_cpp_language.php"
#line 512 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4263 "langs_src/parser_cpp_language.php"
#line 517 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4269 "langs_src/parser_cpp_language.php"
#line 522 "langs_src/parser_cpp_language.y"
    function yy_r81(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4275 "langs_src/parser_cpp_language.php"
#line 530 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4281 "langs_src/parser_cpp_language.php"
#line 535 "langs_src/parser_cpp_language.y"
    function yy_r83(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4287 "langs_src/parser_cpp_language.php"
#line 540 "langs_src/parser_cpp_language.y"
    function yy_r84(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4293 "langs_src/parser_cpp_language.php"
#line 545 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4299 "langs_src/parser_cpp_language.php"
#line 550 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4305 "langs_src/parser_cpp_language.php"
#line 555 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4311 "langs_src/parser_cpp_language.php"
#line 564 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4317 "langs_src/parser_cpp_language.php"
#line 576 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4323 "langs_src/parser_cpp_language.php"
#line 581 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4329 "langs_src/parser_cpp_language.php"
#line 586 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4335 "langs_src/parser_cpp_language.php"
#line 591 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4341 "langs_src/parser_cpp_language.php"
#line 596 "langs_src/parser_cpp_language.y"
    function yy_r95(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4347 "langs_src/parser_cpp_language.php"
#line 601 "langs_src/parser_cpp_language.y"
    function yy_r96(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4353 "langs_src/parser_cpp_language.php"
#line 606 "langs_src/parser_cpp_language.y"
    function yy_r97(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4359 "langs_src/parser_cpp_language.php"
#line 611 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4365 "langs_src/parser_cpp_language.php"
#line 616 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4371 "langs_src/parser_cpp_language.php"
#line 621 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 4377 "langs_src/parser_cpp_language.php"
#line 631 "langs_src/parser_cpp_language.y"
    function yy_r102(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 4383 "langs_src/parser_cpp_language.php"
#line 636 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 4389 "langs_src/parser_cpp_language.php"
#line 641 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4395 "langs_src/parser_cpp_language.php"
#line 646 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4401 "langs_src/parser_cpp_language.php"
#line 658 "langs_src/parser_cpp_language.y"
    function yy_r106(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4407 "langs_src/parser_cpp_language.php"
#line 670 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4413 "langs_src/parser_cpp_language.php"
#line 683 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4419 "langs_src/parser_cpp_language.php"
#line 691 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4425 "langs_src/parser_cpp_language.php"
#line 696 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4431 "langs_src/parser_cpp_language.php"
#line 704 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4437 "langs_src/parser_cpp_language.php"
#line 711 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4443 "langs_src/parser_cpp_language.php"
#line 721 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4449 "langs_src/parser_cpp_language.php"
#line 728 "langs_src/parser_cpp_language.y"
    function yy_r115(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4455 "langs_src/parser_cpp_language.php"
#line 733 "langs_src/parser_cpp_language.y"
    function yy_r116(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4461 "langs_src/parser_cpp_language.php"
#line 738 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4467 "langs_src/parser_cpp_language.php"
#line 743 "langs_src/parser_cpp_language.y"
    function yy_r118(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4473 "langs_src/parser_cpp_language.php"
#line 748 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4479 "langs_src/parser_cpp_language.php"
#line 753 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4485 "langs_src/parser_cpp_language.php"
#line 758 "langs_src/parser_cpp_language.y"
    function yy_r121(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4491 "langs_src/parser_cpp_language.php"
#line 763 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4497 "langs_src/parser_cpp_language.php"
#line 768 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4503 "langs_src/parser_cpp_language.php"
#line 773 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4509 "langs_src/parser_cpp_language.php"
#line 780 "langs_src/parser_cpp_language.y"
    function yy_r125(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4515 "langs_src/parser_cpp_language.php"
#line 787 "langs_src/parser_cpp_language.y"
    function yy_r126(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4521 "langs_src/parser_cpp_language.php"
#line 792 "langs_src/parser_cpp_language.y"
    function yy_r127(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4527 "langs_src/parser_cpp_language.php"
#line 797 "langs_src/parser_cpp_language.y"
    function yy_r128(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4533 "langs_src/parser_cpp_language.php"
#line 802 "langs_src/parser_cpp_language.y"
    function yy_r129(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4539 "langs_src/parser_cpp_language.php"
#line 807 "langs_src/parser_cpp_language.y"
    function yy_r130(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4545 "langs_src/parser_cpp_language.php"
#line 812 "langs_src/parser_cpp_language.y"
    function yy_r131(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4551 "langs_src/parser_cpp_language.php"
#line 817 "langs_src/parser_cpp_language.y"
    function yy_r132(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4557 "langs_src/parser_cpp_language.php"
#line 829 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4563 "langs_src/parser_cpp_language.php"
#line 834 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4569 "langs_src/parser_cpp_language.php"
#line 839 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4575 "langs_src/parser_cpp_language.php"
#line 846 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4581 "langs_src/parser_cpp_language.php"
#line 851 "langs_src/parser_cpp_language.y"
    function yy_r138(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 4588 "langs_src/parser_cpp_language.php"
#line 858 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4594 "langs_src/parser_cpp_language.php"
#line 863 "langs_src/parser_cpp_language.y"
    function yy_r140(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4600 "langs_src/parser_cpp_language.php"
#line 870 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('new_kwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4606 "langs_src/parser_cpp_language.php"
#line 875 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_array', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4612 "langs_src/parser_cpp_language.php"
#line 880 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_pointer', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4618 "langs_src/parser_cpp_language.php"
#line 886 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменных", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4624 "langs_src/parser_cpp_language.php"
#line 897 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4630 "langs_src/parser_cpp_language.php"
#line 902 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4636 "langs_src/parser_cpp_language.php"
#line 917 "langs_src/parser_cpp_language.y"
    function yy_r150(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 4643 "langs_src/parser_cpp_language.php"
#line 923 "langs_src/parser_cpp_language.y"
    function yy_r151(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4649 "langs_src/parser_cpp_language.php"
#line 928 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4655 "langs_src/parser_cpp_language.php"
#line 933 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4661 "langs_src/parser_cpp_language.php"
#line 938 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4667 "langs_src/parser_cpp_language.php"
#line 943 "langs_src/parser_cpp_language.y"
    function yy_r155(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4673 "langs_src/parser_cpp_language.php"
#line 950 "langs_src/parser_cpp_language.y"
    function yy_r156(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryxor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4679 "langs_src/parser_cpp_language.php"
#line 955 "langs_src/parser_cpp_language.y"
    function yy_r157(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4685 "langs_src/parser_cpp_language.php"
#line 960 "langs_src/parser_cpp_language.y"
    function yy_r158(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryand_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4691 "langs_src/parser_cpp_language.php"
#line 965 "langs_src/parser_cpp_language.y"
    function yy_r159(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4697 "langs_src/parser_cpp_language.php"
#line 970 "langs_src/parser_cpp_language.y"
    function yy_r160(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4703 "langs_src/parser_cpp_language.php"
#line 975 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulo_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4709 "langs_src/parser_cpp_language.php"
#line 980 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4715 "langs_src/parser_cpp_language.php"
#line 985 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4721 "langs_src/parser_cpp_language.php"
#line 990 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4727 "langs_src/parser_cpp_language.php"
#line 995 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4733 "langs_src/parser_cpp_language.php"
#line 1000 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4739 "langs_src/parser_cpp_language.php"
#line 1012 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4745 "langs_src/parser_cpp_language.php"
#line 1017 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4751 "langs_src/parser_cpp_language.php"
#line 1026 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_xor', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4757 "langs_src/parser_cpp_language.php"
#line 1031 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4763 "langs_src/parser_cpp_language.php"
#line 1036 "langs_src/parser_cpp_language.y"
    function yy_r173(){
	// Well, that's what you get when you mix binary and and adress taking
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4770 "langs_src/parser_cpp_language.php"
#line 1046 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_notequal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4776 "langs_src/parser_cpp_language.php"
#line 1051 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4782 "langs_src/parser_cpp_language.php"
#line 1063 "langs_src/parser_cpp_language.y"
    function yy_r178(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4788 "langs_src/parser_cpp_language.php"
#line 1068 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4794 "langs_src/parser_cpp_language.php"
#line 1073 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4800 "langs_src/parser_cpp_language.php"
#line 1078 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4806 "langs_src/parser_cpp_language.php"
#line 1090 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4812 "langs_src/parser_cpp_language.php"
#line 1095 "langs_src/parser_cpp_language.y"
    function yy_r184(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4818 "langs_src/parser_cpp_language.php"
#line 1107 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4824 "langs_src/parser_cpp_language.php"
#line 1112 "langs_src/parser_cpp_language.y"
    function yy_r187(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4830 "langs_src/parser_cpp_language.php"
#line 1124 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulosign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4836 "langs_src/parser_cpp_language.php"
#line 1129 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4842 "langs_src/parser_cpp_language.php"
#line 1134 "langs_src/parser_cpp_language.y"
    function yy_r191(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4848 "langs_src/parser_cpp_language.php"
#line 1146 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_get_property', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4854 "langs_src/parser_cpp_language.php"
#line 1163 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_take_adress', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4860 "langs_src/parser_cpp_language.php"
#line 1168 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_dereference', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4866 "langs_src/parser_cpp_language.php"
#line 1173 "langs_src/parser_cpp_language.y"
    function yy_r198(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_typecast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4872 "langs_src/parser_cpp_language.php"
#line 1178 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4878 "langs_src/parser_cpp_language.php"
#line 1183 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4884 "langs_src/parser_cpp_language.php"
#line 1188 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4890 "langs_src/parser_cpp_language.php"
#line 1193 "langs_src/parser_cpp_language.y"
    function yy_r202(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4896 "langs_src/parser_cpp_language.php"
#line 1198 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4902 "langs_src/parser_cpp_language.php"
#line 1203 "langs_src/parser_cpp_language.y"
    function yy_r204(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4908 "langs_src/parser_cpp_language.php"
#line 1215 "langs_src/parser_cpp_language.y"
    function yy_r206(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_property_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4914 "langs_src/parser_cpp_language.php"
#line 1225 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4920 "langs_src/parser_cpp_language.php"
#line 1230 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4926 "langs_src/parser_cpp_language.php"
#line 1235 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4932 "langs_src/parser_cpp_language.php"
#line 1240 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4938 "langs_src/parser_cpp_language.php"
#line 1245 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_postfix_increment', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4944 "langs_src/parser_cpp_language.php"
#line 1250 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_postfix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4950 "langs_src/parser_cpp_language.php"
#line 1255 "langs_src/parser_cpp_language.y"
    function yy_r214(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4956 "langs_src/parser_cpp_language.php"
#line 1262 "langs_src/parser_cpp_language.y"
    function yy_r215(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4962 "langs_src/parser_cpp_language.php"
#line 1267 "langs_src/parser_cpp_language.y"
    function yy_r216(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4968 "langs_src/parser_cpp_language.php"
#line 1274 "langs_src/parser_cpp_language.y"
    function yy_r217(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_const_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4974 "langs_src/parser_cpp_language.php"
#line 1279 "langs_src/parser_cpp_language.y"
    function yy_r218(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_static_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4980 "langs_src/parser_cpp_language.php"
#line 1284 "langs_src/parser_cpp_language.y"
    function yy_r219(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_dynamic_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4986 "langs_src/parser_cpp_language.php"
#line 1289 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_reinterpret_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4992 "langs_src/parser_cpp_language.php"
#line 1300 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue_or_assignment_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4998 "langs_src/parser_cpp_language.php"
#line 1309 "langs_src/parser_cpp_language.y"
    function yy_r224(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5004 "langs_src/parser_cpp_language.php"
#line 1319 "langs_src/parser_cpp_language.y"
    function yy_r226(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5010 "langs_src/parser_cpp_language.php"
#line 1324 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5016 "langs_src/parser_cpp_language.php"
#line 1338 "langs_src/parser_cpp_language.y"
    function yy_r230(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('initialization_list_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, C));
    }
#line 5022 "langs_src/parser_cpp_language.php"
#line 1352 "langs_src/parser_cpp_language.y"
    function yy_r233(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5028 "langs_src/parser_cpp_language.php"
#line 1357 "langs_src/parser_cpp_language.y"
    function yy_r234(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5034 "langs_src/parser_cpp_language.php"
#line 1370 "langs_src/parser_cpp_language.y"
    function yy_r237(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5040 "langs_src/parser_cpp_language.php"
#line 1375 "langs_src/parser_cpp_language.y"
    function yy_r238(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5046 "langs_src/parser_cpp_language.php"
#line 1383 "langs_src/parser_cpp_language.y"
    function yy_r239(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5052 "langs_src/parser_cpp_language.php"
#line 1388 "langs_src/parser_cpp_language.y"
    function yy_r240(){
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5057 "langs_src/parser_cpp_language.php"
#line 1411 "langs_src/parser_cpp_language.y"
    function yy_r245(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('scoped_identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5063 "langs_src/parser_cpp_language.php"
#line 1417 "langs_src/parser_cpp_language.y"
    function yy_r246(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_brackets', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5069 "langs_src/parser_cpp_language.php"
#line 1422 "langs_src/parser_cpp_language.y"
    function yy_r247(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_stringify', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5075 "langs_src/parser_cpp_language.php"
#line 1432 "langs_src/parser_cpp_language.y"
    function yy_r249(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_concat', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5081 "langs_src/parser_cpp_language.php"
#line 1454 "langs_src/parser_cpp_language.y"
    function yy_r253(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5087 "langs_src/parser_cpp_language.php"
#line 1459 "langs_src/parser_cpp_language.y"
    function yy_r254(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5093 "langs_src/parser_cpp_language.php"
#line 1466 "langs_src/parser_cpp_language.y"
    function yy_r255(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('c_style_typecast_operator', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 5100 "langs_src/parser_cpp_language.php"
#line 1474 "langs_src/parser_cpp_language.y"
    function yy_r256(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5106 "langs_src/parser_cpp_language.php"
#line 1495 "langs_src/parser_cpp_language.y"
    function yy_r261(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5113 "langs_src/parser_cpp_language.php"
#line 1501 "langs_src/parser_cpp_language.y"
    function yy_r262(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -1]->minor,  $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5120 "langs_src/parser_cpp_language.php"
#line 1507 "langs_src/parser_cpp_language.y"
    function yy_r263(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5126 "langs_src/parser_cpp_language.php"
#line 1512 "langs_src/parser_cpp_language.y"
    function yy_r264(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5132 "langs_src/parser_cpp_language.php"
#line 1517 "langs_src/parser_cpp_language.y"
    function yy_r265(){
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5138 "langs_src/parser_cpp_language.php"
#line 1522 "langs_src/parser_cpp_language.y"
    function yy_r266(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5145 "langs_src/parser_cpp_language.php"
#line 1528 "langs_src/parser_cpp_language.y"
    function yy_r267(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5151 "langs_src/parser_cpp_language.php"
#line 1539 "langs_src/parser_cpp_language.y"
    function yy_r269(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5157 "langs_src/parser_cpp_language.php"
#line 1544 "langs_src/parser_cpp_language.y"
    function yy_r270(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5165 "langs_src/parser_cpp_language.php"
#line 1551 "langs_src/parser_cpp_language.y"
    function yy_r271(){
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5172 "langs_src/parser_cpp_language.php"
#line 1563 "langs_src/parser_cpp_language.y"
    function yy_r273(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5178 "langs_src/parser_cpp_language.php"
#line 1571 "langs_src/parser_cpp_language.y"
    function yy_r274(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак  ссылки"));
	$this->_retvalue = $this->create_node('type_ref', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5184 "langs_src/parser_cpp_language.php"
#line 1576 "langs_src/parser_cpp_language.y"
    function yy_r275(){
	$this->yystack[$this->yyidx + -1]->minor->add_child($this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 5190 "langs_src/parser_cpp_language.php"
#line 1601 "langs_src/parser_cpp_language.y"
    function yy_r281(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5196 "langs_src/parser_cpp_language.php"
#line 1606 "langs_src/parser_cpp_language.y"
    function yy_r282(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5202 "langs_src/parser_cpp_language.php"
#line 1621 "langs_src/parser_cpp_language.y"
    function yy_r285(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_instantiation_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5208 "langs_src/parser_cpp_language.php"
#line 1626 "langs_src/parser_cpp_language.y"
    function yy_r286(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5214 "langs_src/parser_cpp_language.php"
#line 1631 "langs_src/parser_cpp_language.y"
    function yy_r287(){
	$this->mapper->start_new_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5220 "langs_src/parser_cpp_language.php"
#line 1636 "langs_src/parser_cpp_language.y"
    function yy_r288(){
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5226 "langs_src/parser_cpp_language.php"
#line 1641 "langs_src/parser_cpp_language.y"
    function yy_r289(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5232 "langs_src/parser_cpp_language.php"
#line 1646 "langs_src/parser_cpp_language.y"
    function yy_r290(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "%ur(именительный)", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5238 "langs_src/parser_cpp_language.php"
#line 1653 "langs_src/parser_cpp_language.y"
    function yy_r291(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя пустого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5244 "langs_src/parser_cpp_language.php"
#line 1661 "langs_src/parser_cpp_language.y"
    function yy_r292(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой одинарной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5250 "langs_src/parser_cpp_language.php"
#line 1666 "langs_src/parser_cpp_language.y"
    function yy_r293(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5256 "langs_src/parser_cpp_language.php"
#line 1671 "langs_src/parser_cpp_language.y"
    function yy_r294(){
    $this->currentrule = new block_formal_langs_description_rule("имя длинного типа c плавающей запятой двойной точности", array("признак длинного числа", "имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5262 "langs_src/parser_cpp_language.php"
#line 1679 "langs_src/parser_cpp_language.y"
    function yy_r295(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя символьного типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5268 "langs_src/parser_cpp_language.php"
#line 1684 "langs_src/parser_cpp_language.y"
    function yy_r296(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый символьный тип", array("признак знаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5274 "langs_src/parser_cpp_language.php"
#line 1689 "langs_src/parser_cpp_language.y"
    function yy_r297(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый символьный тип", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5280 "langs_src/parser_cpp_language.php"
#line 1697 "langs_src/parser_cpp_language.y"
    function yy_r298(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5286 "langs_src/parser_cpp_language.php"
#line 1702 "langs_src/parser_cpp_language.y"
    function yy_r299(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый целый тип", array("признак знаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5292 "langs_src/parser_cpp_language.php"
#line 1707 "langs_src/parser_cpp_language.y"
    function yy_r300(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый целый тип", array("признак беззнаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5298 "langs_src/parser_cpp_language.php"
#line 1712 "langs_src/parser_cpp_language.y"
    function yy_r301(){
    $this->currentrule = new block_formal_langs_description_rule("короткий целый тип", array("признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5304 "langs_src/parser_cpp_language.php"
#line 1717 "langs_src/parser_cpp_language.y"
    function yy_r302(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5310 "langs_src/parser_cpp_language.php"
#line 1722 "langs_src/parser_cpp_language.y"
    function yy_r303(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5316 "langs_src/parser_cpp_language.php"
#line 1727 "langs_src/parser_cpp_language.y"
    function yy_r304(){
    $this->currentrule = new block_formal_langs_description_rule("длинный целый тип", array("признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5322 "langs_src/parser_cpp_language.php"
#line 1732 "langs_src/parser_cpp_language.y"
    function yy_r305(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целый тип", array("признак знаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5328 "langs_src/parser_cpp_language.php"
#line 1737 "langs_src/parser_cpp_language.y"
    function yy_r306(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целый тип", array("признак беззнаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5334 "langs_src/parser_cpp_language.php"
#line 1742 "langs_src/parser_cpp_language.y"
    function yy_r307(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5340 "langs_src/parser_cpp_language.php"
#line 1748 "langs_src/parser_cpp_language.y"
    function yy_r308(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5346 "langs_src/parser_cpp_language.php"
#line 1753 "langs_src/parser_cpp_language.y"
    function yy_r309(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5352 "langs_src/parser_cpp_language.php"
#line 1761 "langs_src/parser_cpp_language.y"
    function yy_r310(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5358 "langs_src/parser_cpp_language.php"
#line 1766 "langs_src/parser_cpp_language.y"
    function yy_r311(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5364 "langs_src/parser_cpp_language.php"
#line 1771 "langs_src/parser_cpp_language.y"
    function yy_r312(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5370 "langs_src/parser_cpp_language.php"
#line 1778 "langs_src/parser_cpp_language.y"
    function yy_r313(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5376 "langs_src/parser_cpp_language.php"
#line 1783 "langs_src/parser_cpp_language.y"
    function yy_r314(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целвый тип", array("признак знаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5382 "langs_src/parser_cpp_language.php"
#line 1788 "langs_src/parser_cpp_language.y"
    function yy_r315(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целвый тип", array("признак беззнаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5388 "langs_src/parser_cpp_language.php"
#line 1795 "langs_src/parser_cpp_language.y"
    function yy_r316(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5394 "langs_src/parser_cpp_language.php"
#line 1800 "langs_src/parser_cpp_language.y"
    function yy_r317(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5400 "langs_src/parser_cpp_language.php"
#line 1805 "langs_src/parser_cpp_language.y"
    function yy_r318(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5406 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //block_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 40 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 5551 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
