<?php
/* Driver template for the PHP_block_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class block_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof block_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof block_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof block_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof block_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class block_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 3 "langs_src/parser_cpp_language.y"

require_once($CFG->dirroot.'/blocks/formal_langs/descriptions/descriptionrule.php');
#line 102 "langs_src/parser_cpp_language.php"

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 107 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 6 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 145 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const NOTEQUAL                       =  3;
    const EQUAL                          =  4;
    const LOGICALAND                     =  5;
    const BINARYAND                      =  6;
    const BINARYOR                       =  7;
    const LOGICALOR                      =  8;
    const AMPERSAND                      =  9;
    const BINARYXOR                      = 10;
    const UINDIRECTION                   = 11;
    const UADRESS                        = 12;
    const NAMESPACE_RESOLVE              = 13;
    const UMINUS                         = 14;
    const UPLUS                          = 15;
    const UBRACKET                       = 16;
    const TYPEUNARY                      = 17;
    const MACROPARAMETERPRIORITY         = 18;
    const NAMESPACEKWD                   = 19;
    const LEFTFIGUREBRACKET              = 20;
    const RIGHTFIGUREBRACKET             = 21;
    const SEMICOLON                      = 22;
    const IDENTIFIER                     = 23;
    const ASSIGN                         = 24;
    const TYPENAMEKWD                    = 25;
    const CLASSKWD                       = 26;
    const STRUCTKWD                      = 27;
    const ENUMKWD                        = 28;
    const TEMPLATEKWD                    = 29;
    const UNIONKWD                       = 30;
    const COLON                          = 31;
    const PUBLICKWD                      = 32;
    const PROTECTEDKWD                   = 33;
    const PRIVATEKWD                     = 34;
    const SIGNALSKWD                     = 35;
    const SLOTSKWD                       = 36;
    const OPERATOROVERLOADDECLARATION    = 37;
    const BINARYNOT                      = 38;
    const OUTER_CONSTRUCTOR_NAME         = 39;
    const PREPROCESSOR_ENDIF             = 40;
    const PREPROCESSOR_ELIF              = 41;
    const PREPROCESSOR_ELSE              = 42;
    const PREPROCESSOR_IFDEF             = 43;
    const CUSTOMTYPENAME                 = 44;
    const PREPROCESSOR_IF                = 45;
    const PREPROCESSOR_DEFINE            = 46;
    const PREPROCESSOR_INCLUDE           = 47;
    const WHILEKWD                       = 48;
    const DOKWD                          = 49;
    const FORKWD                         = 50;
    const RETURNKWD                      = 51;
    const CONTINUEKWD                    = 52;
    const GOTOKWD                        = 53;
    const TRYKWD                         = 54;
    const CATCHKWD                       = 55;
    const LEFTROUNDBRACKET               = 56;
    const RIGHTROUNDBRACKET              = 57;
    const ELLIPSIS                       = 58;
    const SWITCHKWD                      = 59;
    const CASEKWD                        = 60;
    const DEFAULTKWD                     = 61;
    const IFKWD                          = 62;
    const TYPEDEF                        = 63;
    const BREAKKWD                       = 64;
    const NEWKWD                         = 65;
    const DELETE                         = 66;
    const LEFTSQUAREBRACKET              = 67;
    const RIGHTSQUAREBRACKET             = 68;
    const STATICKWD                      = 69;
    const EXTERNKWD                      = 70;
    const REGISTERKWD                    = 71;
    const VOLATILEKWD                    = 72;
    const FRIENDKWD                      = 73;
    const BINARYXOR_ASSIGN               = 74;
    const BINARYOR_ASSIGN                = 75;
    const BINARYAND_ASSIGN               = 76;
    const RIGHTSHIFT_ASSIGN              = 77;
    const LEFTSHIFT_ASSIGN               = 78;
    const MODULO_ASSIGN                  = 79;
    const DIVISION_ASSIGN                = 80;
    const MULTIPLY_ASSIGN                = 81;
    const PLUS_ASSIGN                    = 82;
    const MINUS_ASSIGN                   = 83;
    const NOT_EQUAL                      = 84;
    const LESSER_OR_EQUAL                = 85;
    const GREATER_OR_EQUAL               = 86;
    const LEFTSHIFT                      = 87;
    const RIGHTSHIFT                     = 88;
    const MINUS                          = 89;
    const PLUS                           = 90;
    const MODULOSIGN                     = 91;
    const DIVISION                       = 92;
    const LOGICALNOT                     = 93;
    const DECREMENT                      = 94;
    const INCREMENT                      = 95;
    const DOT                            = 96;
    const RIGHTARROW                     = 97;
    const CONST_CAST                     = 98;
    const STATIC_CAST                    = 99;
    const DYNAMIC_CAST                   = 100;
    const REINTERPRET_CAST               = 101;
    const COMMA                          = 102;
    const NUMERIC                        = 103;
    const CHARACTER                      = 104;
    const STRING                         = 105;
    const UNSIGNED                       = 106;
    const SIGNED                         = 107;
    const LONG                           = 108;
    const SHORT                          = 109;
    const INT                            = 110;
    const CHAR                           = 111;
    const DOUBLE                         = 112;
    const FLOAT                          = 113;
    const VOID                           = 114;
    const GREATER                        = 115;
    const LESSER                         = 116;
    const MULTIPLY                       = 117;
    const CONSTKWD                       = 118;
    const TYPENAME                       = 119;
    const SIZEOF                         = 120;
    const PREPROCESSOR_CONCAT            = 121;
    const PREPROCESSOR_STRINGIFY         = 122;
    const COMMENT                        = 123;
    const YY_NO_ACTION = 977;
    const YY_ACCEPT_ACTION = 976;
    const YY_ERROR_ACTION = 975;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 9846;
static public $yy_action = array(
 /*     0 */   381,  172,  230,  394,  436,  240,  141,  492,  202,  238,
 /*    10 */   297,  243,  603,  256,  229,  259,  207,  279,  504,   85,
 /*    20 */   298,  370,  556,    3,  378,  380,  184,   72,   43,  251,
 /*    30 */    71,  503,  196,  106,  518,  590,  568,  194,  562,    5,
 /*    40 */    94,  384,  102,   98,  260,  115,  571,  173,  120,  175,
 /*    50 */    30,  389,  208,  122,   12,  247,  477,  560,  240,  433,
 /*    60 */   317,  406,  174,  234,   47,  231,  390,  446,  446,  392,
 /*    70 */   331,  603,  270,  596,   99,  271,  182,  285,  148,  281,
 /*    80 */   186,  502,  163,  157,  496,   95,  178,  224,  555,   68,
 /*    90 */   108,  319,   69,  444,  450,  164,  603,  213,  431,  475,
 /*   100 */   474,  223,  602,  171,  383,  263,  267,   67,  368,  371,
 /*   110 */   367,  242,  113,  375,  467,  466,  465,  137,  472,  121,
 /*   120 */   119,  461,  218,  490,  172,  230,  394,  232,  567,  249,
 /*   130 */   492,  202,  238,  449,  243,  359,  242,  113,  375,   73,
 /*   140 */   279,  504,   85,  156,  156,  556,  152,  471,  304,  582,
 /*   150 */   464,  268,  599,  251,  503,  196,  106,  260,  590,   40,
 /*   160 */    40,  605,  235,   94,  240,  102,   98,  240,  115,  232,
 /*   170 */   173,  120,  175,   30,  232,  388,  141,   12,  300,  165,
 /*   180 */   357,  361,  433,  317,  406,  174,  602,  527,  526,  390,
 /*   190 */   603,  541,  392,  331,  233,  270,  596,   99,  271,  182,
 /*   200 */   285,  148,  281,  186,  502,  163,  157,  496,   95,  178,
 /*   210 */   224,  603,  479,  309,  108,  319,  444,  450,  164,   74,
 /*   220 */   213,  431,  475,  474,   90,   89,  171,  259,  263,  267,
 /*   230 */   208,  122,  203,  234,  879,  231,   41,  467,  466,  465,
 /*   240 */   137,  472,  121,  119,  461,  218,  381,  172,  230,  394,
 /*   250 */   246,  208,  122,  492,  202,  238,  240,  243,  246,  245,
 /*   260 */   198,  246,  245,  279,  504,   85,   47,  446,  556,  239,
 /*   270 */   355,  380,  184,   41,  247,  477,  228,  503,  196,  106,
 /*   280 */   606,  590,  250,  581,  246,  245,   94,   67,  102,   98,
 /*   290 */   403,  115,  879,  173,  120,  175,   30,  249,  228,  446,
 /*   300 */    12,  605,  446,  240,  345,  433,  317,  406,  174,   67,
 /*   310 */   491,  336,  390,  240,  603,  392,  331,  144,  270,  596,
 /*   320 */    99,  271,  182,  285,  148,  281,  186,  502,  163,  157,
 /*   330 */   496,   95,  178,  224,  256,  228,  259,  260,  262,  444,
 /*   340 */   450,  164,  235,  213,  431,  475,  474,  351,  304,  171,
 /*   350 */   246,  263,  267,  373,  242,  113,  375,  246,  245,   40,
 /*   360 */   467,  466,  465,  137,  472,  121,  119,  461,  218,   22,
 /*   370 */   410,  172,  230,  394,   87,   86,  337,  492,  202,  238,
 /*   380 */   320,  243,  487,  579,  291,  298,  370,  279,  504,   85,
 /*   390 */   422,   40,  556,  550,   40,  260,  140,  246,  245,  240,
 /*   400 */   235,  503,  196,  106,  606,  590,  456,   82,   81,  223,
 /*   410 */    94,  423,  102,   98,  197,  115,  449,  173,  120,  175,
 /*   420 */    30,  153,  455,  239,   12,  454,  205,   41,  879,  433,
 /*   430 */   317,  406,  174,  247,  477,  463,  390,  250,  260,  392,
 /*   440 */   331,  249,  270,  596,   99,  271,  182,  285,  148,  281,
 /*   450 */   186,  502,  163,  157,  496,   95,  178,  224,  432,  145,
 /*   460 */   228,  215,  358,  444,  450,  164,  223,  213,  431,  475,
 /*   470 */   474,  228,    1,  171,  486,  263,  267,  469,  258,  247,
 /*   480 */   477,  140,  470,  552,  467,  466,  465,  137,  472,  121,
 /*   490 */   119,  461,  218,  976,   21,  410,  172,  230,  394,  247,
 /*   500 */   477,  506,  492,  202,  238,  192,  243,  482,  583,   41,
 /*   510 */   576,  519,  279,  504,   85,  191,  234,  556,  231,   41,
 /*   520 */   260,  232,  247,  477,  439,  235,  503,  196,  106,   75,
 /*   530 */   590,  260,  247,  477,  250,   94,  873,  102,   98,  879,
 /*   540 */   115,   55,  173,  120,  175,   30,   83,   84,  236,   12,
 /*   550 */   546,  240,  107,  580,  433,  317,  406,  174,  493,  240,
 /*   560 */   524,  390,  246,  245,  392,  331,   55,  270,  596,   99,
 /*   570 */   271,  182,  285,  148,  281,  186,  502,  163,  157,  496,
 /*   580 */    95,  178,  224,  247,  477,  269,   44,  222,  444,  450,
 /*   590 */   164,  459,  213,  431,  475,  474,   79,   80,  171,  484,
 /*   600 */   263,  267,  265,  559,  434,  240,  457,  179,  413,  467,
 /*   610 */   466,  465,  137,  472,  121,  119,  461,  218,   16,  410,
 /*   620 */   172,  230,  394,  256,  548,  259,  492,  202,  238,  297,
 /*   630 */   243,  578,  561,   55,    9,   13,  279,  504,   85,  260,
 /*   640 */   237,  556,  260,  448,  386,  424,  402,  488,  399,  190,
 /*   650 */   503,  196,  106,   41,  590,   54,    7,  554,  189,   94,
 /*   660 */   112,  102,   98,  232,  115,  440,  173,  120,  175,   30,
 /*   670 */   435,  593,  398,   12,  577,  228,  438,  251,  433,  317,
 /*   680 */   406,  174,   33,  437,  308,  390,  451,  315,  392,  331,
 /*   690 */   487,  270,  596,   99,  271,  182,  285,  148,  281,  186,
 /*   700 */   502,  163,  157,  496,   95,  178,  224,  322,  594,   52,
 /*   710 */   473,   28,  444,  450,  164,  303,  213,  431,  475,  474,
 /*   720 */   340,  310,  171,  313,  263,  267,  365,  312,  426,    8,
 /*   730 */   874,  418,  379,  467,  466,  465,  137,  472,  121,  119,
 /*   740 */   461,  218,   14,  410,  172,  230,  394,   10,   29,  307,
 /*   750 */   492,  202,  238,  328,  243,  428,   25,  150,  553,  109,
 /*   760 */   279,  504,   85,   36,   34,  556,  253,  425,  396,    6,
 /*   770 */   494,   32,  531,  417,  503,  196,  106,   67,  590,  545,
 /*   780 */    39,   24,  485,   94,   35,  102,   98,  878,  115,  311,
 /*   790 */   173,  120,  175,   30,  376,  427,  347,   12,  246,  346,
 /*   800 */   125,   26,  433,  317,  406,  174,   37,  204,  385,  390,
 /*   810 */   409,  299,  392,  331,  341,  270,  596,   99,  271,  182,
 /*   820 */   285,  148,  281,  186,  502,  163,  157,  496,   95,  178,
 /*   830 */   224,  458,  405,  338,  335,  332,  444,  450,  164,  334,
 /*   840 */   213,  431,  475,  474,  460,  584,  171,   77,  263,  267,
 /*   850 */    42,  557,  377,   46,   76,  391,    4,  467,  466,  465,
 /*   860 */   137,  472,  121,  119,  461,  218,   18,  410,  172,  230,
 /*   870 */   394,  223,  240,   88,  492,  202,  238,  411,  243,  366,
 /*   880 */   528,  199,  349,  170,  279,  504,   85,  363,  356,  556,
 /*   890 */   294,   48,   70,  302,  350,  442,  325,  316,  503,  196,
 /*   900 */   106,  324,  590,  364,  441,  484,  482,   94,  321,  102,
 /*   910 */    98,  167,  115,  235,  173,  120,  175,   30,  483,  105,
 /*   920 */   275,   12,  329,  476,    1,  326,  433,  317,  406,  174,
 /*   930 */   245,  481,  116,  390,  543,  489,  392,  331,   78,  270,
 /*   940 */   596,   99,  271,  182,  285,  148,  281,  186,  502,  163,
 /*   950 */   157,  496,   95,  178,  224,  495,   38,  620,  323,  620,
 /*   960 */   444,  450,  164,  333,  213,  431,  475,  474,  462,  342,
 /*   970 */   171,  620,  263,  267,  620,  620,  620,  620,  620,  620,
 /*   980 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*   990 */    20,  410,  172,  230,  394,  620,  620,  620,  492,  202,
 /*  1000 */   238,  620,  243,  620,  620,  620,  620,  620,  279,  504,
 /*  1010 */    85,  620,  620,  556,  620,  620,  620,  620,  620,  620,
 /*  1020 */   620,  620,  503,  196,  106,  620,  590,  620,  620,  620,
 /*  1030 */   620,   94,  620,  102,   98,  620,  115,  620,  173,  120,
 /*  1040 */   175,   30,  620,  620,  620,   12,  620,  620,  620,  620,
 /*  1050 */   433,  317,  406,  174,  620,  620,  620,  390,  620,  620,
 /*  1060 */   392,  331,  620,  270,  596,   99,  271,  182,  285,  148,
 /*  1070 */   281,  186,  502,  163,  157,  496,   95,  178,  224,  620,
 /*  1080 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  431,
 /*  1090 */   475,  474,  620,  620,  171,  620,  263,  267,  620,  620,
 /*  1100 */   620,  620,  620,  620,  620,  467,  466,  465,  137,  472,
 /*  1110 */   121,  119,  461,  218,   17,  410,  172,  230,  394,  620,
 /*  1120 */   620,  620,  492,  202,  238,  620,  243,  620,  620,  620,
 /*  1130 */   620,  620,  279,  504,   85,  620,  620,  556,  620,  620,
 /*  1140 */   620,  620,  620,  620,  620,  620,  503,  196,  106,  620,
 /*  1150 */   590,  620,  620,  620,  620,   94,  620,  102,   98,  620,
 /*  1160 */   115,  620,  173,  120,  175,   30,  620,  620,  620,   12,
 /*  1170 */   620,  620,  620,  620,  433,  317,  406,  174,  620,  620,
 /*  1180 */   620,  390,  620,  620,  392,  331,  620,  270,  596,   99,
 /*  1190 */   271,  182,  285,  148,  281,  186,  502,  163,  157,  496,
 /*  1200 */    95,  178,  224,  620,  620,  620,  620,  620,  444,  450,
 /*  1210 */   164,  620,  213,  431,  475,  474,  620,  620,  171,  620,
 /*  1220 */   263,  267,  620,  620,  620,  620,  620,  620,  620,  467,
 /*  1230 */   466,  465,  137,  472,  121,  119,  461,  218,   15,  410,
 /*  1240 */   172,  230,  394,  620,  620,  620,  492,  202,  238,  620,
 /*  1250 */   243,  620,  620,  620,  620,  620,  279,  504,   85,  620,
 /*  1260 */   620,  556,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  1270 */   503,  196,  106,  620,  590,  620,  620,  620,  620,   94,
 /*  1280 */   620,  102,   98,  620,  115,  620,  173,  120,  175,   30,
 /*  1290 */   620,  620,  620,   12,  620,  620,  620,  620,  433,  317,
 /*  1300 */   406,  174,  620,  620,  620,  390,  620,  620,  392,  331,
 /*  1310 */   620,  270,  596,   99,  271,  182,  285,  148,  281,  186,
 /*  1320 */   502,  163,  157,  496,   95,  178,  224,  620,  620,  620,
 /*  1330 */   620,  620,  444,  450,  164,  620,  213,  431,  475,  474,
 /*  1340 */   620,  620,  171,  620,  263,  267,  620,  620,  620,  620,
 /*  1350 */   620,  620,  620,  467,  466,  465,  137,  472,  121,  119,
 /*  1360 */   461,  218,    2,  410,  172,  230,  394,  620,  620,  620,
 /*  1370 */   492,  202,  238,  620,  243,  620,  620,  620,  620,  620,
 /*  1380 */   279,  504,   85,  620,  620,  556,  620,  620,  620,  620,
 /*  1390 */   620,  620,  620,  620,  503,  196,  106,  620,  590,  620,
 /*  1400 */   620,  620,  620,   94,  620,  102,   98,  620,  115,  620,
 /*  1410 */   173,  120,  175,   30,  620,  620,  620,   12,  620,  620,
 /*  1420 */   620,  620,  433,  317,  406,  174,  620,  620,  620,  390,
 /*  1430 */   620,  620,  392,  331,  620,  270,  596,   99,  271,  182,
 /*  1440 */   285,  148,  281,  186,  502,  163,  157,  496,   95,  178,
 /*  1450 */   224,  620,  620,  620,  620,  620,  444,  450,  164,  620,
 /*  1460 */   213,  431,  475,  474,  620,  620,  171,  620,  263,  267,
 /*  1470 */   620,  620,  620,  620,  620,  620,  620,  467,  466,  465,
 /*  1480 */   137,  472,  121,  119,  461,  218,   23,  410,  172,  230,
 /*  1490 */   394,  620,  620,  620,  492,  202,  238,  620,  243,  620,
 /*  1500 */   620,  620,  620,  620,  279,  504,   85,  620,  620,  556,
 /*  1510 */   620,  620,  620,  620,  620,  620,  620,  620,  503,  196,
 /*  1520 */   106,  620,  590,  620,  620,  620,  620,   94,  620,  102,
 /*  1530 */    98,  620,  115,  620,  173,  120,  175,   30,  620,  620,
 /*  1540 */   620,   12,  620,  620,  620,  620,  433,  317,  406,  174,
 /*  1550 */   620,  620,  620,  390,  620,  620,  392,  331,  620,  270,
 /*  1560 */   596,   99,  271,  182,  285,  148,  281,  186,  502,  163,
 /*  1570 */   157,  496,   95,  178,  224,  620,  620,  620,  620,  620,
 /*  1580 */   444,  450,  164,  620,  213,  431,  475,  474,  620,  620,
 /*  1590 */   171,  620,  263,  267,  620,  620,  620,  620,  620,  620,
 /*  1600 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  1610 */    19,  410,  172,  230,  394,  620,  620,  620,  492,  202,
 /*  1620 */   238,  620,  243,  620,  620,  620,  620,  620,  279,  504,
 /*  1630 */    85,  620,  620,  556,  620,  620,  620,  620,  251,  620,
 /*  1640 */   620,  620,  503,  196,  106,  620,  590,  620,  620,  620,
 /*  1650 */   620,   94,  240,  102,   98,  620,  115,  620,  173,  120,
 /*  1660 */   175,   30,  620,  620,  620,   12,  144,  620,  620,  620,
 /*  1670 */   433,  317,  406,  174,  620,  620,  620,  390,  620,  620,
 /*  1680 */   392,  331,  620,  270,  596,   99,  271,  182,  285,  148,
 /*  1690 */   281,  186,  502,  163,  157,  496,   95,  178,  224,  620,
 /*  1700 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  431,
 /*  1710 */   475,  474,  620,  620,  171,  620,  263,  267,  620,  620,
 /*  1720 */   620,  620,  620,  620,  620,  467,  466,  465,  137,  472,
 /*  1730 */   121,  119,  461,  218,  490,  172,  230,  394,  620,  620,
 /*  1740 */   620,  492,  202,  238,  620,  243,  246,  245,  620,  620,
 /*  1750 */   620,  279,  504,   85,  620,  620,  556,  620,  620,  620,
 /*  1760 */   620,  620,  620,  620,  620,  503,  196,  106,  620,  590,
 /*  1770 */   620,  620,  620,  620,   94,  620,  102,   98,  620,  115,
 /*  1780 */   620,  173,  120,  175,   30,  620,  620,  620,   12,  620,
 /*  1790 */   620,  620,  620,  433,  317,  406,  174,  620,  620,  620,
 /*  1800 */   390,  620,  620,  392,  331,  620,  270,  596,   99,  271,
 /*  1810 */   182,  285,  148,  281,  186,  502,  163,  157,  496,   95,
 /*  1820 */   178,  224,  620,  620,  620,  620,  620,  444,  450,  164,
 /*  1830 */   233,  213,  431,  475,  474,  620,  620,  171,  620,  263,
 /*  1840 */   267,  620,  620,  527,  526,  620,  620,  541,  467,  466,
 /*  1850 */   465,  137,  472,  121,  119,  461,  218,  620,  251,  446,
 /*  1860 */   620,  620,  233,  620,  620,  620,  620,  620,  241,   11,
 /*  1870 */   353,  397,  195,  620,  620,  527,  526,  166,  244,  541,
 /*  1880 */   620,  372,  374,  369,  620,  200,  620,   96,  620,   41,
 /*  1890 */   620,  620,  286,  620,  408,  393,  395,  261,   27,  206,
 /*  1900 */    31,  343,  158,  352,  620,  228,  620,  620,  330,  620,
 /*  1910 */   620,  305,  100,  318,   53,   50,  620,  620,  588,  587,
 /*  1920 */   591,  592,  595,  220,  210,  256,  229,  259,  207,  262,
 /*  1930 */   221,  216,  620,  620,  620,  245,  223,  620,  103,  104,
 /*  1940 */   304,  620,   91,   92,   93,  620,  620,  225,  264,  212,
 /*  1950 */   214,   40,  445,  443,  447,  220,  210,  256,  229,  259,
 /*  1960 */   207,  262,  221,  216,  620,  620,  246,  245,  223,  217,
 /*  1970 */   251,  219,  620,  620,  233,  620,  620,  620,  620,  620,
 /*  1980 */   241,   11,  354,  397,  195,  620,  620,  527,  526,  166,
 /*  1990 */   244,  541,  620,  372,  374,  369,  620,  620,  620,   96,
 /*  2000 */   620,  603,  620,  620,  286,  228,  408,  393,  395,  261,
 /*  2010 */    27,  206,   31,  343,  158,  352,   63,  228,  620,  620,
 /*  2020 */   330,  620,  620,  305,  100,  318,   53,   50,  620,  620,
 /*  2030 */   588,  587,  591,  592,  595,  273,  620,  620,  620,  124,
 /*  2040 */   620,  208,  122,  501,  507,  500,  499,  620,  620,  620,
 /*  2050 */   103,  104,  620,  620,   91,   92,   93,  620,  620,  225,
 /*  2060 */   264,  212,  214,  620,  445,  443,  447,  220,  210,  256,
 /*  2070 */   229,  259,  207,  262,  221,  216,  620,  620,  246,  245,
 /*  2080 */   223,  217,  251,  219,  620,  620,  233,  570,  620,  620,
 /*  2090 */   598,  604,  241,   11,  620,  397,  195,  620,  620,  527,
 /*  2100 */   526,  166,  244,  541,  620,  620,  620,  620,  620,  620,
 /*  2110 */   620,   96,  620,  419,    9,   13,  286,  620,  408,  393,
 /*  2120 */   395,  261,   27,  206,   31,  343,  158,  352,  620,  228,
 /*  2130 */   620,  620,  330,  620,  620,  305,  100,  318,   53,   50,
 /*  2140 */   620,  620,  588,  587,  591,  592,  595,  620,  620,  620,
 /*  2150 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  2160 */   620,  620,  103,  104,  620,  620,   91,   92,   93,  620,
 /*  2170 */   620,  225,  264,  212,  214,  620,  445,  443,  447,  220,
 /*  2180 */   210,  256,  229,  259,  207,  262,  221,  216,  620,  620,
 /*  2190 */   246,  245,  223,  217,  251,  219,  620,  620,  233,  620,
 /*  2200 */   620,  620,  620,  620,  241,   11,  404,  397,  195,  620,
 /*  2210 */   620,  527,  526,  166,  244,  541,  620,  620,  620,  620,
 /*  2220 */   620,  620,  620,   96,  620,  620,  620,  620,  286,  620,
 /*  2230 */   408,  393,  395,  261,   27,  206,   31,  343,  158,  352,
 /*  2240 */   620,  228,  620,  620,  330,  620,  620,  305,  100,  318,
 /*  2250 */    53,   50,  620,  620,  588,  587,  591,  592,  595,  620,
 /*  2260 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  2270 */   620,  620,  620,  620,  103,  104,  620,  620,   91,   92,
 /*  2280 */    93,  620,  620,  225,  264,  212,  214,  620,  445,  443,
 /*  2290 */   447,  220,  210,  256,  229,  259,  207,  262,  221,  216,
 /*  2300 */   620,  620,  246,  245,  223,  217,  251,  219,  620,  620,
 /*  2310 */   233,  620,  620,  620,  620,  620,  241,   11,  420,  397,
 /*  2320 */   195,  620,  620,  527,  526,  166,  244,  541,  620,  620,
 /*  2330 */   620,  620,  620,  620,  620,   96,  620,  620,  620,  620,
 /*  2340 */   286,  620,  408,  393,  395,  261,   27,  206,   31,  343,
 /*  2350 */   158,  352,  620,  228,  620,  620,  330,  620,  620,  305,
 /*  2360 */   100,  318,   53,   50,  620,  620,  588,  587,  591,  592,
 /*  2370 */   595,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  2380 */   620,  620,  620,  620,  620,  620,  103,  104,  620,  620,
 /*  2390 */    91,   92,   93,  620,  620,  225,  264,  212,  214,  620,
 /*  2400 */   445,  443,  447,  220,  210,  256,  229,  259,  207,  262,
 /*  2410 */   221,  216,  620,  620,  246,  245,  223,  217,  251,  219,
 /*  2420 */   620,  620,  233,  620,  620,  620,  620,  620,  241,   11,
 /*  2430 */   412,  397,  195,  620,  620,  527,  526,  166,  244,  541,
 /*  2440 */   620,  620,  620,  620,  620,  620,  620,   96,  620,  620,
 /*  2450 */   620,  620,  286,  620,  408,  393,  395,  261,   27,  206,
 /*  2460 */    31,  343,  158,  352,  620,  228,  620,  620,  330,  620,
 /*  2470 */   620,  305,  100,  318,   53,   50,  620,  620,  588,  587,
 /*  2480 */   591,  592,  595,  620,  620,  620,  620,  620,  620,  620,
 /*  2490 */   620,  620,  620,  620,  620,  620,  620,  620,  103,  104,
 /*  2500 */   620,  620,   91,   92,   93,  620,  620,  225,  264,  212,
 /*  2510 */   214,  620,  445,  443,  447,  220,  210,  256,  229,  259,
 /*  2520 */   207,  262,  221,  216,  620,  620,  246,  245,  223,  217,
 /*  2530 */   620,  219,  172,  230,  421,  620,  620,  620,  492,  202,
 /*  2540 */   238,  620,  243,  620,  620,  620,  620,  620,  279,  504,
 /*  2550 */   180,  620,  620,  556,  620,  620,  620,  620,  620,  620,
 /*  2560 */   620,  620,  503,  620,  111,  620,  590,  620,  620,  620,
 /*  2570 */   620,   94,  620,  102,   98,  620,  123,  620,  620,  127,
 /*  2580 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  2590 */   433,  317,  406,  174,  620,  620,  620,  390,  620,  620,
 /*  2600 */   392,  331,  620,  270,  596,   99,  271,  182,  285,  148,
 /*  2610 */   281,  186,  502,  163,  157,  496,   95,  178,  224,  620,
 /*  2620 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  431,
 /*  2630 */   475,  474,  620,  620,  171,  620,  263,  267,  620,  530,
 /*  2640 */   523,  522,  521,  620,  620,  467,  466,  465,  137,  472,
 /*  2650 */   121,  119,  461,  218,  620,  251,  620,  620,  620,  233,
 /*  2660 */   620,  620,  620,  620,  620,  241,   11,  414,  397,  195,
 /*  2670 */   620,  620,  527,  526,  166,  244,  541,  620,  620,  620,
 /*  2680 */   620,  620,  620,  620,   96,  620,  620,  620,  620,  286,
 /*  2690 */   620,  408,  393,  395,  261,   27,  206,   31,  343,  158,
 /*  2700 */   352,  620,  228,  620,  620,  330,  620,  620,  305,  100,
 /*  2710 */   318,   53,   50,  620,  620,  588,  587,  591,  592,  595,
 /*  2720 */   220,  210,  256,  229,  259,  207,  262,  221,  216,  250,
 /*  2730 */   620,  620,  620,  478,  248,  103,  104,  520,  620,   91,
 /*  2740 */    92,   93,  620,  620,  225,  264,  212,  214,  620,  445,
 /*  2750 */   443,  447,  220,  210,  256,  229,  259,  207,  262,  221,
 /*  2760 */   216,  620,  620,  246,  245,  223,  217,  251,  219,  620,
 /*  2770 */   620,  233,  620,  620,  620,  620,  620,  241,   11,  415,
 /*  2780 */   397,  195,  620,  620,  527,  526,  166,  244,  541,  620,
 /*  2790 */   620,  620,  620,  620,  620,  620,   96,  620,  620,  620,
 /*  2800 */   620,  286,  620,  408,  393,  395,  261,   27,  206,   31,
 /*  2810 */   343,  158,  352,  620,  228,  620,  620,  330,  620,  620,
 /*  2820 */   305,  100,  318,   53,   50,  620,  620,  588,  587,  591,
 /*  2830 */   592,  595,  620,  467,  466,  465,  137,  472,  121,  119,
 /*  2840 */   461,  218,  620,  620,  620,  620,  620,  103,  104,  620,
 /*  2850 */   620,   91,   92,   93,  620,  233,  225,  264,  212,  214,
 /*  2860 */   620,  445,  443,  447,  220,  210,  256,  229,  259,  207,
 /*  2870 */   262,  221,  216,  620,  620,  246,  245,  223,  217,  251,
 /*  2880 */   219,  620,  620,  233,  620,  620,  620,  620,  620,  241,
 /*  2890 */    11,  362,  397,  195,  620,  620,  527,  526,  166,  244,
 /*  2900 */   541,  620,  620,  620,  620,  620,  620,  620,   96,  620,
 /*  2910 */   620,  620,  620,  286,  620,  408,  393,  395,  261,   27,
 /*  2920 */   206,   31,  343,  158,  352,  620,  228,  620,  620,  330,
 /*  2930 */   620,  620,  305,  100,  318,   53,   50,  620,  620,  588,
 /*  2940 */   587,  591,  592,  595,  620,  620,  620,  620,  220,  210,
 /*  2950 */   256,  229,  259,  207,  262,  221,  216,  620,  620,  103,
 /*  2960 */   104,  223,  620,   91,   92,   93,  620,  620,  225,  264,
 /*  2970 */   212,  214,  620,  445,  443,  447,  220,  210,  256,  229,
 /*  2980 */   259,  207,  262,  221,  216,  620,  620,  246,  245,  223,
 /*  2990 */   217,  251,  219,  620,  620,  233,  620,  620,  620,  620,
 /*  3000 */   620,  241,   11,  416,  397,  195,  620,  620,  527,  526,
 /*  3010 */   166,  244,  541,  620,  620,  620,  620,  620,  620,  620,
 /*  3020 */    96,  620,  620,  620,  620,  286,  620,  408,  393,  395,
 /*  3030 */   261,   27,  206,   31,  343,  158,  352,  620,  228,  620,
 /*  3040 */   620,  330,  620,  620,  305,  100,  318,   53,   50,  620,
 /*  3050 */   620,  588,  587,  591,  592,  595,  620,  620,  620,  620,
 /*  3060 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  3070 */   620,  103,  104,  620,  620,   91,   92,   93,  620,  620,
 /*  3080 */   225,  264,  212,  214,  620,  445,  443,  447,  220,  210,
 /*  3090 */   256,  229,  259,  207,  262,  221,  216,  620,  620,  246,
 /*  3100 */   245,  223,  217,  620,  219,  172,  230,  407,  620,  620,
 /*  3110 */   620,  492,  202,  238,  620,  243,  620,  620,  620,  620,
 /*  3120 */   620,  279,  504,  180,  620,  620,  556,  620,  620,  620,
 /*  3130 */   620,  620,  620,  620,  620,  503,  620,  111,  620,  590,
 /*  3140 */   620,  620,  620,  620,   94,  620,  102,   98,  620,  123,
 /*  3150 */   620,  620,  127,  620,   30,  620,  620,  620,  620,  620,
 /*  3160 */   620,  620,  620,  433,  317,  406,  174,  620,  620,  620,
 /*  3170 */   390,  620,  620,  392,  331,  620,  270,  596,   99,  271,
 /*  3180 */   182,  285,  148,  281,  186,  502,  163,  157,  496,   95,
 /*  3190 */   178,  224,  620,  620,  620,  620,  620,  444,  450,  164,
 /*  3200 */   620,  213,  431,  475,  474,  620,  620,  171,  620,  263,
 /*  3210 */   267,  620,  620,  620,  620,  620,  620,  620,  467,  466,
 /*  3220 */   465,  137,  472,  121,  119,  461,  218,  620,  172,  230,
 /*  3230 */   296,  620,  620,  620,  492,  202,  238,  620,  243,  620,
 /*  3240 */   620,  620,  620,  620,  279,  504,  180,  620,  620,  556,
 /*  3250 */   620,  620,  620,  620,  620,  620,  620,  620,  503,  620,
 /*  3260 */   111,  620,  590,  620,  620,  620,  620,   94,  620,  102,
 /*  3270 */    98,  620,  123,  620,  620,  127,  620,   30,  620,  620,
 /*  3280 */   620,  620,  620,  620,  620,  620,  433,  317,  406,  174,
 /*  3290 */   620,  620,  620,  390,  620,  620,  392,  331,  620,  270,
 /*  3300 */   596,   99,  271,  182,  285,  148,  281,  186,  502,  163,
 /*  3310 */   157,  496,   95,  178,  224,  620,  620,  620,  620,  620,
 /*  3320 */   444,  450,  164,  620,  213,  431,  475,  474,  620,  620,
 /*  3330 */   171,  620,  263,  267,  620,  620,  620,  620,  620,  620,
 /*  3340 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  3350 */   172,  230,  400,  620,  620,  620,  492,  202,  238,  620,
 /*  3360 */   243,  620,  620,  620,  620,  620,  279,  504,  180,  620,
 /*  3370 */   620,  556,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  3380 */   503,  620,  111,  620,  590,  620,  620,  620,  620,   94,
 /*  3390 */   620,  102,   98,  620,  123,  620,  620,  127,  620,   30,
 /*  3400 */   620,  620,  620,  620,  620,  620,  620,  620,  433,  317,
 /*  3410 */   406,  174,  620,  620,  620,  390,  620,  620,  392,  331,
 /*  3420 */   620,  270,  596,   99,  271,  182,  285,  148,  281,  186,
 /*  3430 */   502,  163,  157,  496,   95,  178,  224,  620,  620,  620,
 /*  3440 */   620,  620,  444,  450,  164,  620,  213,  431,  475,  474,
 /*  3450 */   620,  620,  171,  620,  263,  267,  620,  620,  620,  620,
 /*  3460 */   620,  620,  620,  467,  466,  465,  137,  472,  121,  119,
 /*  3470 */   461,  218,  172,  230,  387,  620,  620,  620,  492,  202,
 /*  3480 */   238,  620,  243,  620,  620,  620,  620,  620,  279,  504,
 /*  3490 */   180,  620,  620,  556,  620,  620,  620,  620,  620,  620,
 /*  3500 */   620,  620,  503,  620,  111,  620,  590,  620,  620,  620,
 /*  3510 */   620,   94,  620,  102,   98,  620,  123,  620,  620,  127,
 /*  3520 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  3530 */   433,  317,  406,  174,  620,  620,  620,  390,  620,  620,
 /*  3540 */   392,  331,  620,  270,  596,   99,  271,  182,  285,  148,
 /*  3550 */   281,  186,  502,  163,  157,  496,   95,  178,  224,  620,
 /*  3560 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  431,
 /*  3570 */   475,  474,  620,  620,  171,  620,  263,  267,  620,  530,
 /*  3580 */   523,  522,  521,  620,  620,  467,  466,  465,  137,  472,
 /*  3590 */   121,  119,  461,  218,  620,  251,  446,  620,  620,  233,
 /*  3600 */   620,  620,  620,  620,  620,  241,   11,  620,  397,  195,
 /*  3610 */   620,  620,  527,  526,  166,  244,  541,  620,  620,  620,
 /*  3620 */   620,  620,  201,  620,   96,  620,   41,  620,  620,  286,
 /*  3630 */   620,  408,  393,  395,  261,   27,  206,   31,  343,  158,
 /*  3640 */   352,  620,  228,  620,  620,  330,  620,  620,  305,  100,
 /*  3650 */   318,   53,   50,  620,  620,  588,  587,  591,  592,  595,
 /*  3660 */   220,  210,  256,  229,  259,  207,  262,  221,  216,  620,
 /*  3670 */   620,  620,  156,  620,  620,  103,  104,  304,  620,   91,
 /*  3680 */    92,   93,  620,  620,  225,  264,  212,  214,   40,  445,
 /*  3690 */   443,  447,  220,  210,  256,  229,  259,  207,  262,  221,
 /*  3700 */   216,  620,  620,  246,  245,  223,  217,  251,  219,  620,
 /*  3710 */   620,  233,  620,  620,  620,  620,  620,  241,   11,  620,
 /*  3720 */   397,  195,  620,  620,  527,  526,  620,  244,  541,  154,
 /*  3730 */   620,  525,  248,  620,  620,  520,   97,  620,  529,  620,
 /*  3740 */   620,  620,  620,  620,  620,  395,  261,   27,  206,   31,
 /*  3750 */   343,  158,  352,  620,  228,  620,  620,  330,  620,  620,
 /*  3760 */   305,  100,  318,   53,   50,  620,  620,  588,  587,  591,
 /*  3770 */   592,  595,  620,  620,  620,  620,  233,  620,  620,  620,
 /*  3780 */   620,  620,  620,  620,  620,  620,  240,  103,  104,  620,
 /*  3790 */   620,   91,   92,   93,  620,  620,  225,  264,  212,  214,
 /*  3800 */   620,  445,  443,  447,  220,  210,  256,  229,  259,  207,
 /*  3810 */   262,  221,  216,  620,  230,  246,  245,  223,  217,  228,
 /*  3820 */   219,  620,  620,  620,  620,  620,  620,  620,  129,  279,
 /*  3830 */   504,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  3840 */   620,  620,  620,  503,  620,  620,  620,  252,  620,  233,
 /*  3850 */   620,  620,   94,  620,  102,   98,  620,  123,  620,  620,
 /*  3860 */   127,  620,   30,  620,  620,  620,  445,  443,  447,  620,
 /*  3870 */   620,  433,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  3880 */   620,  620,  223,  217,  155,  219,  620,  271,  182,  285,
 /*  3890 */   148,  281,  186,  502,  163,  157,  496,   95,  178,  224,
 /*  3900 */   620,  620,  620,  620,  620,  444,  450,  164,  620,  213,
 /*  3910 */   431,  475,  474,  620,  620,  171,  620,  263,  267,  254,
 /*  3920 */   452,  453,  468,  230,  620,  620,  467,  466,  465,  137,
 /*  3930 */   472,  121,  119,  461,  218,  620,  620,  620,  279,  504,
 /*  3940 */   620,  620,  220,  210,  256,  229,  259,  207,  262,  221,
 /*  3950 */   216,  620,  503,  246,  111,  223,  590,  620,  620,  620,
 /*  3960 */   620,   94,  620,  102,   98,  620,  123,  620,  620,  127,
 /*  3970 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  3980 */   433,  429,  620,  620,  620,  620,  339,  620,  620,  620,
 /*  3990 */   620,  620,  620,  270,  596,   99,  271,  182,  285,  148,
 /*  4000 */   281,  186,  502,  163,  157,  496,   95,  178,  224,  620,
 /*  4010 */   620,  620,  620,  620,  444,  450,  164,  230,  213,  431,
 /*  4020 */   475,  474,  620,  620,  171,  620,  263,  267,  620,  620,
 /*  4030 */   620,  620,  279,  504,  620,  467,  466,  465,  137,  472,
 /*  4040 */   121,  119,  461,  218,  620,  620,  503,  446,  111,  620,
 /*  4050 */   590,  620,  620,  620,  620,   94,  620,  102,   98,  620,
 /*  4060 */   123,  620,  620,  127,  620,   30,  620,  620,  620,  620,
 /*  4070 */   620,  620,  620,  193,  433,  266,  620,   41,  620,  620,
 /*  4080 */   620,  620,  620,  620,  620,  620,  620,  270,  596,   99,
 /*  4090 */   271,  182,  285,  148,  281,  186,  502,  163,  157,  496,
 /*  4100 */    95,  178,  224,  620,  620,  620,  620,  620,  444,  450,
 /*  4110 */   164,  230,  213,  431,  475,  474,  620,  620,  171,  620,
 /*  4120 */   263,  267,  620,  156,  620,  620,  279,  504,  582,  467,
 /*  4130 */   466,  465,  137,  472,  121,  119,  461,  218,  620,   40,
 /*  4140 */   503,  620,  111,  620,  590,  620,  620,  620,  620,   94,
 /*  4150 */   620,  102,   98,  620,  123,  620,  620,  127,  620,   30,
 /*  4160 */   620,  620,  620,  620,  620,  620,  620,  620,  433,  209,
 /*  4170 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  4180 */   620,  270,  596,   99,  271,  182,  285,  148,  281,  186,
 /*  4190 */   502,  163,  157,  496,   95,  178,  224,  620,  620,  620,
 /*  4200 */   620,  620,  444,  450,  164,  230,  213,  431,  475,  474,
 /*  4210 */   620,  620,  171,  620,  263,  267,  620,  620,  620,  620,
 /*  4220 */   279,  504,  620,  467,  466,  465,  137,  472,  121,  119,
 /*  4230 */   461,  218,  620,  620,  503,  620,  111,  620,  590,  620,
 /*  4240 */   620,  620,  620,   94,  620,  102,   98,  620,  123,  620,
 /*  4250 */   620,  127,  620,   30,  620,  620,  620,  620,  620,  620,
 /*  4260 */   620,  620,  433,  293,  620,  620,  620,  620,  620,  620,
 /*  4270 */   620,  620,  620,  620,  620,  270,  596,   99,  271,  182,
 /*  4280 */   285,  148,  281,  186,  502,  163,  157,  496,   95,  178,
 /*  4290 */   224,  620,  620,  620,  620,  620,  444,  450,  164,  230,
 /*  4300 */   213,  431,  475,  474,  620,  620,  171,  620,  263,  267,
 /*  4310 */   620,  620,  620,  620,  279,  504,  620,  467,  466,  465,
 /*  4320 */   137,  472,  121,  119,  461,  218,  620,  620,  503,  620,
 /*  4330 */   111,  620,  590,  620,  620,  620,  620,   94,  620,  102,
 /*  4340 */    98,  620,  123,  620,  620,  127,  620,   30,  620,  620,
 /*  4350 */   620,  620,  620,  620,  620,  620,  433,  306,  620,  620,
 /*  4360 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  270,
 /*  4370 */   596,   99,  271,  182,  285,  148,  281,  186,  502,  163,
 /*  4380 */   157,  496,   95,  178,  224,  620,  620,  620,  620,  620,
 /*  4390 */   444,  450,  164,  230,  213,  431,  475,  474,  620,  620,
 /*  4400 */   171,  620,  263,  267,  620,  620,  620,  620,  279,  504,
 /*  4410 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  4420 */   620,  620,  503,  620,  111,  620,  590,  620,  620,  620,
 /*  4430 */   620,   94,  620,  102,   98,  620,  123,  620,  620,  127,
 /*  4440 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  4450 */   433,  301,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  4460 */   620,  620,  620,  270,  596,   99,  271,  182,  285,  148,
 /*  4470 */   281,  186,  502,  163,  157,  496,   95,  178,  224,  620,
 /*  4480 */   620,  620,  620,  620,  444,  450,  164,  230,  213,  431,
 /*  4490 */   475,  474,  620,  620,  171,  620,  263,  267,  620,  620,
 /*  4500 */   620,  620,  279,  504,  620,  467,  466,  465,  137,  472,
 /*  4510 */   121,  119,  461,  218,  620,  620,  503,  620,  111,  620,
 /*  4520 */   590,  620,  620,  620,  620,   94,  620,  102,   98,  620,
 /*  4530 */   123,  620,  620,  127,  620,   30,  620,  620,  620,  620,
 /*  4540 */   620,  620,  620,  620,  433,  292,  620,  620,  620,  620,
 /*  4550 */   620,  620,  620,  620,  620,  620,  620,  270,  596,   99,
 /*  4560 */   271,  182,  285,  148,  281,  186,  502,  163,  157,  496,
 /*  4570 */    95,  178,  224,  620,  620,  620,  620,  620,  444,  450,
 /*  4580 */   164,  230,  213,  431,  475,  474,  620,  620,  171,  620,
 /*  4590 */   263,  267,  620,  620,  620,  620,  279,  504,  620,  467,
 /*  4600 */   466,  465,  137,  472,  121,  119,  461,  218,  620,  620,
 /*  4610 */   503,  620,  111,  620,  590,  620,  620,  620,  620,   94,
 /*  4620 */   620,  102,   98,  620,  123,  620,  620,  127,  620,   30,
 /*  4630 */   620,  620,  620,  620,  620,  620,  620,  620,  433,  255,
 /*  4640 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  4650 */   620,  270,  596,   99,  271,  182,  285,  148,  281,  186,
 /*  4660 */   502,  163,  157,  496,   95,  178,  224,  620,  620,  620,
 /*  4670 */   620,  620,  444,  450,  164,  230,  213,  431,  475,  474,
 /*  4680 */   620,  620,  171,  620,  263,  267,  620,  620,  620,  620,
 /*  4690 */   279,  504,  620,  467,  466,  465,  137,  472,  121,  119,
 /*  4700 */   461,  218,  620,  620,  503,  620,  111,  620,  590,  620,
 /*  4710 */   620,  620,  620,   94,  620,  102,   98,  620,  123,  620,
 /*  4720 */   620,  127,  620,   30,  620,  620,  620,  620,  620,  620,
 /*  4730 */   620,  620,  433,  295,  620,  620,  620,  620,  620,  620,
 /*  4740 */   620,  620,  620,  620,  620,  270,  596,   99,  271,  182,
 /*  4750 */   285,  148,  281,  186,  502,  163,  157,  496,   95,  178,
 /*  4760 */   224,   68,  620,  620,   69,  620,  444,  450,  164,  230,
 /*  4770 */   213,  431,  475,  474,  620,  620,  171,  620,  263,  267,
 /*  4780 */    62,  620,  620,  161,  277,  504,  620,  467,  466,  465,
 /*  4790 */   137,  472,  121,  119,  461,  218,  620,  620,  503,  620,
 /*  4800 */   620,  620,  252,  620,  620,  620,  620,   94,  620,  102,
 /*  4810 */    98,  620,  123,  620,  620,  127,  620,   30,  620,  620,
 /*  4820 */   620,  620,  620,  620,  620,  620,  620,  620,  504,  620,
 /*  4830 */    51,   60,   59,   58,   56,   57,   66,   61,   64,   65,
 /*  4840 */   620,  620,  620,  620,  620,  620,  281,  186,  502,  163,
 /*  4850 */   157,  496,   95,  178,  224,  139,  620,  620,  146,  620,
 /*  4860 */   444,  450,  164,  620,  213,  431,  475,  474,  620,  620,
 /*  4870 */   171,  620,  263,  267,  254,  452,  453,  468,  620,  620,
 /*  4880 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  4890 */   620,  251,  620,  620,  620,  233,  620,  620,  620,  620,
 /*  4900 */   620,  620,  620,  620,  620,  240,  620,  620,  505,  475,
 /*  4910 */   474,  620,  620,  171,  620,  263,  267,  620,  620,  620,
 /*  4920 */    97,  620,  620,  603,  467,  466,  465,  137,  472,  121,
 /*  4930 */   119,  461,  218,  620,  620,  620,  620,  135,  228,  504,
 /*  4940 */   360,  620,  620,  620,  620,  620,  620,   53,   50,  620,
 /*  4950 */   620,  588,  587,  591,  592,  595,  252,  290,  620,  620,
 /*  4960 */   620,  124,  620,  101,  122,  620,  139,  620,  620,  146,
 /*  4970 */   620,  103,  104,  620,  551,   91,   92,   93,  620,  620,
 /*  4980 */   225,  264,  212,  214,  620,  445,  443,  447,  220,  210,
 /*  4990 */   256,  229,  259,  207,  262,  221,  216,  620,  620,  246,
 /*  5000 */   245,  223,  217,  251,  219,  620,  620,  233,  620,  620,
 /*  5010 */   620,  620,  598,  604,  620,  620,  401,  240,  620,  431,
 /*  5020 */   475,  474,  620,  620,  171,  620,  263,  267,  254,  452,
 /*  5030 */   453,  468,   97,  620,  620,  467,  466,  465,  137,  472,
 /*  5040 */   121,  119,  461,  218,  620,  620,  620,  620,  620,  136,
 /*  5050 */   228,  504,  620,  620,  620,  620,  620,  620,  620,   53,
 /*  5060 */    50,  620,  620,  588,  587,  591,  592,  595,  252,  620,
 /*  5070 */   620,  620,  620,  620,  620,  102,  620,  620,  139,  620,
 /*  5080 */   620,  146,  620,  103,  104,  620,  620,   91,   92,   93,
 /*  5090 */   620,  620,  225,  264,  212,  214,  620,  445,  443,  447,
 /*  5100 */   220,  210,  256,  229,  259,  207,  262,  221,  216,  620,
 /*  5110 */   620,  246,  245,  223,  217,  251,  219,  620,  620,  233,
 /*  5120 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  240,
 /*  5130 */   620,  431,  475,  474,  620,  620,  171,  620,  263,  267,
 /*  5140 */   254,  452,  453,  468,   97,  620,  620,  467,  466,  465,
 /*  5150 */   137,  472,  121,  119,  461,  218,  620,  620,  620,  620,
 /*  5160 */   620,  620,  228,  620,  620,  620,  620,  620,  620,  620,
 /*  5170 */   620,   53,   50,  620,  620,  588,  587,  591,  592,  595,
 /*  5180 */   620,  620,  620,  620,  620,  233,  620,  620,  620,  620,
 /*  5190 */   620,  620,  620,  620,  620,  103,  104,  620,  620,   91,
 /*  5200 */    92,   93,  620,  620,  225,  264,  212,  214,  620,  445,
 /*  5210 */   443,  447,  220,  210,  256,  229,  259,  207,  262,  221,
 /*  5220 */   216,  620,  230,  246,  245,  223,  217,  620,  219,  620,
 /*  5230 */   620,  620,  620,  620,  620,  620,  159,  620,  504,  620,
 /*  5240 */   620,  568,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  5250 */   620,  575,  620,  620,  620,  252,  620,  620,  620,  603,
 /*  5260 */   620,  620,  102,  620,  620,  123,  620,  620,  127,  620,
 /*  5270 */    49,  620,  620,  135,  620,  504,  620,  620,  220,  210,
 /*  5280 */   256,  229,  259,  207,  262,  221,  216,  620,  620,  620,
 /*  5290 */   245,  223,  252,  290,  620,  620,  620,  124,  620,  101,
 /*  5300 */   122,  620,  139,  620,  620,  146,  620,  251,  547,  151,
 /*  5310 */   549,  233,  620,  444,  450,  164,  620,  213,  431,  475,
 /*  5320 */   474,  240,  620,  171,  620,  263,  267,  254,  452,  453,
 /*  5330 */   468,  143,  620,  566,  467,  466,  465,  137,  472,  121,
 /*  5340 */   119,  461,  218,  620,  620,  620,  620,  620,  598,  604,
 /*  5350 */   603,  620,  620,  620,  230,  431,  475,  474,  620,  620,
 /*  5360 */   171,  620,  263,  267,  254,  452,  453,  468,  160,  620,
 /*  5370 */   504,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  5380 */   620,  620,  620,  574,  273,  230,  620,  252,  124,  620,
 /*  5390 */   208,  122,  620,  620,  102,  620,  620,  123,  620,  132,
 /*  5400 */   127,  504,   49,  620,  220,  210,  256,  229,  259,  207,
 /*  5410 */   262,  221,  216,  620,  211,  246,  245,  223,  252,  344,
 /*  5420 */   620,  620,  620,  620,  620,  102,  620,  620,  123,  620,
 /*  5430 */   620,  127,  620,   49,  620,  620,  597,  620,  620,  598,
 /*  5440 */   604,  620,  620,  620,  620,  444,  450,  164,  620,  213,
 /*  5450 */   431,  475,  474,  620,  620,  171,  620,  263,  267,  254,
 /*  5460 */   452,  453,  468,  620,  620,  620,  467,  466,  465,  137,
 /*  5470 */   472,  121,  119,  461,  218,  620,  444,  450,  164,  230,
 /*  5480 */   213,  431,  475,  474,  620,  620,  171,  620,  263,  267,
 /*  5490 */   254,  452,  453,  468,  279,  620,  620,  467,  466,  465,
 /*  5500 */   137,  472,  121,  119,  461,  218,  620,  620,  503,  620,
 /*  5510 */   620,  620,  620,  620,  620,  620,  134,   94,  504,  620,
 /*  5520 */    98,  620,  126,  620,  620,  128,  620,   30,  620,  620,
 /*  5530 */   620,  620,  620,  620,  233,  252,  601,  620,  620,  620,
 /*  5540 */   620,  620,  102,  620,  240,  139,  620,  620,  146,  620,
 /*  5550 */   620,  620,  271,  182,  285,  148,  281,  186,  502,  163,
 /*  5560 */   157,  496,   95,  178,  224,  251,  600,  188,  620,  233,
 /*  5570 */   444,  450,  164,  620,  213,  620,  620,  228,  620,  240,
 /*  5580 */   171,  620,  263,  267,  620,  620,  620,  620,  620,  620,
 /*  5590 */   620,  620,  620,  620,   97,  620,  620,  620,  431,  475,
 /*  5600 */   474,  620,  620,  171,  620,  263,  267,  254,  452,  453,
 /*  5610 */   468,  620,  228,  620,  467,  466,  465,  137,  472,  121,
 /*  5620 */   119,  461,  218,  620,  445,  443,  447,  220,  210,  256,
 /*  5630 */   229,  259,  207,  262,  221,  216,  250,  620,  620,  245,
 /*  5640 */   223,  217,  620,  219,  620,  103,  104,  603,  620,   91,
 /*  5650 */    92,   93,  620,  620,  225,  264,  212,  214,  620,  445,
 /*  5660 */   443,  447,  220,  210,  256,  229,  259,  207,  262,  221,
 /*  5670 */   216,  620,  620,  246,  245,  223,  217,  620,  219,  544,
 /*  5680 */   620,  133,  230,  620,  607,  114,  382,  242,  113,  375,
 /*  5690 */   620,  620,  620,  620,  620,  620,  620,  279,  620,  620,
 /*  5700 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  5710 */   620,  503,  620,  620,  620,  620,  344,  620,  620,  620,
 /*  5720 */    94,  620,  620,   98,  620,  126,  620,  620,  128,  620,
 /*  5730 */    30,  564,  620,  597,  620,  620,  598,  604,  620,  433,
 /*  5740 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  5750 */   620,  620,  162,  620,  620,  271,  182,  285,  148,  281,
 /*  5760 */   186,  502,  163,  157,  496,   95,  178,  224,  620,  620,
 /*  5770 */   620,  620,  620,  444,  450,  164,  230,  213,  620,  620,
 /*  5780 */   620,  620,  620,  171,  620,  263,  267,  620,  620,  620,
 /*  5790 */   620,  279,  620,  620,  620,  620,  620,  620,  620,  233,
 /*  5800 */   620,  620,  620,  620,  620,  503,  603,  620,  620,  240,
 /*  5810 */   620,  620,  620,  620,   94,  620,  620,   98,  620,  126,
 /*  5820 */   620,  620,  128,  620,   30,  620,  620,  620,  620,  620,
 /*  5830 */   620,  620,  620,  573,  620,  620,  620,  620,  542,  620,
 /*  5840 */   142,  620,  228,  607,  114,  382,  242,  113,  375,  271,
 /*  5850 */   182,  285,  148,  281,  186,  502,  163,  157,  496,   95,
 /*  5860 */   178,  224,  620,  572,  620,  620,  620,  444,  450,  164,
 /*  5870 */   620,  213,  620,  620,  620,  620,  620,  171,  620,  263,
 /*  5880 */   267,  620,  230,  620,  225,  264,  212,  214,  620,  445,
 /*  5890 */   443,  447,  620,  620,  620,  598,  604,  279,  620,  620,
 /*  5900 */   620,  620,  620,  620,  620,  223,  217,  620,  219,  620,
 /*  5910 */   620,  503,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  5920 */    94,  620,  620,   98,  620,  126,  620,  620,  128,  620,
 /*  5930 */    30,  620,  620,  620,  620,  620,  620,  620,  620,  433,
 /*  5940 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  5950 */   620,  620,  155,  620,  620,  271,  182,  285,  148,  281,
 /*  5960 */   186,  502,  163,  157,  496,   95,  178,  224,  620,  620,
 /*  5970 */   620,  620,  620,  444,  450,  164,  620,  213,  620,  230,
 /*  5980 */   620,  620,  620,  171,  620,  263,  267,  620,  620,  620,
 /*  5990 */   620,  620,  620,  620,  279,  620,  620,  620,  620,  620,
 /*  6000 */   620,  620,  620,  620,  620,  620,  620,  620,  503,  620,
 /*  6010 */   620,  620,  620,  620,  620,  620,  620,   94,  620,  620,
 /*  6020 */    98,  620,  126,  620,  620,  128,  620,   30,  620,  620,
 /*  6030 */   620,  620,  620,  620,  620,  620,  585,  620,  620,  620,
 /*  6040 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6050 */   230,  620,  271,  182,  285,  148,  281,  186,  502,  163,
 /*  6060 */   157,  496,   95,  178,  224,  279,  586,  620,  620,  620,
 /*  6070 */   444,  450,  164,  620,  213,  620,  620,  620,  620,  503,
 /*  6080 */   171,  620,  263,  267,  620,  620,  620,  620,   94,  620,
 /*  6090 */   620,   98,  620,  126,  620,  620,  128,  620,   30,  620,
 /*  6100 */   620,  620,  620,  620,  620,  620,  620,  534,  620,  620,
 /*  6110 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6120 */   620,  620,  620,  271,  182,  285,  148,  281,  186,  502,
 /*  6130 */   163,  157,  496,   95,  178,  224,  620,  620,  620,  620,
 /*  6140 */   620,  444,  450,  164,  620,  213,  620,  230,  620,  620,
 /*  6150 */   620,  171,  620,  263,  267,  620,  620,  620,  620,  620,
 /*  6160 */   620,  620,  279,  620,  620,  620,  620,  620,  620,  620,
 /*  6170 */   620,  620,  620,  620,  620,  620,  503,  620,  620,  620,
 /*  6180 */   620,  620,  620,  620,  620,   94,  620,  620,   98,  620,
 /*  6190 */   126,  620,  620,  128,  620,   30,  620,  620,  620,  620,
 /*  6200 */   620,  620,  620,  620,  569,  620,  620,  620,  620,  620,
 /*  6210 */   620,  620,  620,  620,  620,  620,  620,  620,  230,  620,
 /*  6220 */   271,  182,  285,  148,  281,  186,  502,  163,  157,  496,
 /*  6230 */    95,  178,  224,  279,  620,  620,  620,  620,  444,  450,
 /*  6240 */   164,  620,  213,  620,  620,  620,  620,  503,  171,  620,
 /*  6250 */   263,  267,  620,  620,  620,  620,   94,  620,  620,   98,
 /*  6260 */   620,  126,  620,  620,  128,  620,   30,  620,  620,  620,
 /*  6270 */   620,  620,  620,  620,  620,  535,  620,  620,  620,  620,
 /*  6280 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6290 */   620,  271,  182,  285,  148,  281,  186,  502,  163,  157,
 /*  6300 */   496,   95,  178,  224,  620,  620,  620,  620,  620,  444,
 /*  6310 */   450,  164,  620,  213,  620,  230,  620,  620,  620,  171,
 /*  6320 */   620,  263,  267,  620,  620,  620,  620,  620,  620,  620,
 /*  6330 */   279,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6340 */   620,  620,  620,  620,  503,  620,  620,  620,  620,  620,
 /*  6350 */   620,  620,  620,   94,  620,  620,   98,  620,  126,  620,
 /*  6360 */   620,  128,  620,   30,  620,  620,  620,  620,  620,  620,
 /*  6370 */   620,  620,  513,  620,  620,  620,  620,  620,  620,  620,
 /*  6380 */   620,  620,  620,  620,  620,  620,  230,  620,  271,  182,
 /*  6390 */   285,  148,  281,  186,  502,  163,  157,  496,   95,  178,
 /*  6400 */   224,  279,  620,  620,  620,  620,  444,  450,  164,  620,
 /*  6410 */   213,  620,  620,  620,  620,  503,  171,  620,  263,  267,
 /*  6420 */   620,  620,  620,  620,   94,  620,  620,   98,  620,  126,
 /*  6430 */   620,  620,  128,  620,   30,  620,  620,  620,  620,  620,
 /*  6440 */   620,  620,  620,  532,  620,  620,  620,  620,  620,  620,
 /*  6450 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  271,
 /*  6460 */   182,  285,  148,  281,  186,  502,  163,  157,  496,   95,
 /*  6470 */   178,  224,  620,  620,  620,  620,  620,  444,  450,  164,
 /*  6480 */   620,  213,  620,  230,  620,  620,  620,  171,  620,  263,
 /*  6490 */   267,  620,  620,  620,  620,  620,  620,  620,  279,  620,
 /*  6500 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6510 */   620,  620,  503,  620,  620,  620,  620,  620,  620,  620,
 /*  6520 */   620,   94,  620,  620,   98,  620,  126,  620,  620,  128,
 /*  6530 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6540 */   533,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6550 */   620,  620,  620,  620,  230,  620,  271,  182,  285,  148,
 /*  6560 */   281,  186,  502,  163,  157,  496,   95,  178,  224,  279,
 /*  6570 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  620,
 /*  6580 */   620,  620,  620,  503,  171,  620,  263,  267,  620,  620,
 /*  6590 */   620,  620,   94,  620,  620,   98,  620,  126,  620,  620,
 /*  6600 */   128,  620,   30,  620,  620,  620,  620,  620,  620,  620,
 /*  6610 */   620,  257,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6620 */   620,  620,  620,  620,  620,  620,  620,  271,  182,  285,
 /*  6630 */   148,  281,  186,  502,  163,  157,  496,   95,  178,  224,
 /*  6640 */   620,  620,  620,  620,  620,  444,  450,  164,  620,  213,
 /*  6650 */   620,  230,  620,  620,  620,  171,  620,  263,  267,  620,
 /*  6660 */   620,  620,  620,  620,  620,  620,  279,  620,  620,  620,
 /*  6670 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6680 */   503,  620,  620,  620,  620,  620,  620,  620,  620,   94,
 /*  6690 */   620,  620,   98,  620,  126,  620,  620,  128,  620,   30,
 /*  6700 */   620,  620,  620,  620,  620,  620,  620,  620,  540,  620,
 /*  6710 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6720 */   620,  620,  230,  620,  271,  182,  285,  148,  281,  186,
 /*  6730 */   502,  163,  157,  496,   95,  178,  224,  279,  620,  620,
 /*  6740 */   620,  620,  444,  450,  164,  620,  213,  620,  620,  620,
 /*  6750 */   620,  503,  171,  620,  263,  267,  620,  620,  620,  620,
 /*  6760 */    94,  620,  620,   98,  620,  126,  620,  620,  128,  620,
 /*  6770 */    30,  620,  620,  620,  620,  620,  620,  620,  620,  563,
 /*  6780 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6790 */   620,  620,  620,  620,  620,  271,  182,  285,  148,  281,
 /*  6800 */   186,  502,  163,  157,  496,   95,  178,  224,  620,  620,
 /*  6810 */   620,  620,  620,  444,  450,  164,  620,  213,  620,  230,
 /*  6820 */   620,  620,  620,  171,  620,  263,  267,  620,  620,  620,
 /*  6830 */   620,  620,  620,  620,  279,  620,  620,  620,  620,  620,
 /*  6840 */   620,  620,  620,  620,  620,  620,  620,  620,  503,  620,
 /*  6850 */   620,  620,  620,  620,  620,  620,  620,   94,  620,  620,
 /*  6860 */    98,  620,  126,  620,  620,  128,  620,   30,  620,  620,
 /*  6870 */   620,  620,  620,  620,  620,  620,  517,  620,  620,  620,
 /*  6880 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6890 */   230,  620,  271,  182,  285,  148,  281,  186,  502,  163,
 /*  6900 */   157,  496,   95,  178,  224,  279,  620,  620,  620,  620,
 /*  6910 */   444,  450,  164,  620,  213,  620,  620,  620,  620,  503,
 /*  6920 */   171,  620,  263,  267,  620,  620,  620,  620,   94,  620,
 /*  6930 */   620,   98,  620,  126,  620,  620,  128,  620,   30,  620,
 /*  6940 */   620,  620,  620,  620,  620,  620,  620,  289,  620,  620,
 /*  6950 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  6960 */   620,  620,  620,  271,  182,  285,  148,  281,  186,  502,
 /*  6970 */   163,  157,  496,   95,  178,  224,  620,  620,  620,  620,
 /*  6980 */   620,  444,  450,  164,  620,  213,  620,  230,  620,  620,
 /*  6990 */   620,  171,  620,  263,  267,  620,  620,  620,  620,  620,
 /*  7000 */   620,  620,  279,  620,  620,  620,  620,  620,  620,  620,
 /*  7010 */   620,  620,  620,  620,  620,  620,  503,  620,  620,  620,
 /*  7020 */   620,  620,  620,  620,  620,   94,  620,  620,   98,  620,
 /*  7030 */   126,  620,  620,  128,  620,   30,  620,  620,  620,  620,
 /*  7040 */   620,  620,  620,  620,  565,  620,  620,  620,  620,  620,
 /*  7050 */   620,  620,  620,  620,  620,  620,  620,  620,  230,  620,
 /*  7060 */   271,  182,  285,  148,  281,  186,  502,  163,  157,  496,
 /*  7070 */    95,  178,  224,  279,  620,  620,  620,  620,  444,  450,
 /*  7080 */   164,  620,  213,  620,  620,  620,  620,  503,  171,  620,
 /*  7090 */   263,  267,  620,  620,  620,  620,   94,  620,  620,   98,
 /*  7100 */   620,  126,  620,  620,  128,  620,   30,  620,  620,  620,
 /*  7110 */   620,  620,  620,  620,  620,  538,  620,  620,  620,  620,
 /*  7120 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7130 */   620,  271,  182,  285,  148,  281,  186,  502,  163,  157,
 /*  7140 */   496,   95,  178,  224,  620,  620,  620,  620,  620,  444,
 /*  7150 */   450,  164,  620,  213,  620,  230,  620,  620,  620,  171,
 /*  7160 */   620,  263,  267,  620,  620,  620,  620,  620,  620,  620,
 /*  7170 */   279,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7180 */   620,  620,  620,  620,  503,  620,  620,  620,  620,  620,
 /*  7190 */   620,  620,  620,   94,  620,  620,   98,  620,  126,  620,
 /*  7200 */   620,  128,  620,   30,  620,  620,  620,  620,  620,  620,
 /*  7210 */   620,  620,  539,  620,  620,  620,  620,  620,  620,  620,
 /*  7220 */   620,  620,  620,  620,  620,  620,  230,  620,  271,  182,
 /*  7230 */   285,  148,  281,  186,  502,  163,  157,  496,   95,  178,
 /*  7240 */   224,  279,  620,  620,  620,  620,  444,  450,  164,  620,
 /*  7250 */   213,  620,  620,  620,  620,  503,  171,  620,  263,  267,
 /*  7260 */   620,  620,  620,  620,   94,  620,  620,   98,  620,  126,
 /*  7270 */   620,  620,  128,  620,   30,  620,  620,  620,  620,  620,
 /*  7280 */   620,  620,  620,  536,  620,  620,  620,  620,  620,  620,
 /*  7290 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  271,
 /*  7300 */   182,  285,  148,  281,  186,  502,  163,  157,  496,   95,
 /*  7310 */   178,  224,  620,  620,  620,  620,  620,  444,  450,  164,
 /*  7320 */   620,  213,  620,  230,  620,  620,  620,  171,  620,  263,
 /*  7330 */   267,  620,  620,  620,  620,  620,  620,  620,  279,  620,
 /*  7340 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7350 */   620,  620,  503,  620,  620,  620,  620,  620,  620,  620,
 /*  7360 */   620,   94,  620,  620,   98,  620,  126,  620,  620,  128,
 /*  7370 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7380 */   537,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7390 */   620,  620,  620,  620,  230,  620,  271,  182,  285,  148,
 /*  7400 */   281,  186,  502,  163,  157,  496,   95,  178,  224,  279,
 /*  7410 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  620,
 /*  7420 */   620,  620,  620,  503,  171,  620,  263,  267,  620,  620,
 /*  7430 */   620,  620,   94,  620,  620,   98,  620,  126,  620,  620,
 /*  7440 */   128,  620,   30,  620,  620,  251,  620,  620,  620,  233,
 /*  7450 */   620,  498,  620,  620,  620,  620,  620,  620,  620,  240,
 /*  7460 */   620,  620,  620,  620,  620,  620,  620,  271,  182,  285,
 /*  7470 */   148,  281,  186,  502,  163,  157,  496,   95,  178,  224,
 /*  7480 */   620,  620,  620,  620,  620,  444,  450,  164,  620,  213,
 /*  7490 */   620,  230,  620,  249,  620,  171,  620,  263,  267,  620,
 /*  7500 */   620,  620,  620,  620,  620,  620,  279,  620,  620,  620,
 /*  7510 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7520 */   503,  620,  620,  620,  620,  620,  620,  620,  620,   94,
 /*  7530 */   620,  620,   98,  620,  126,  620,  620,  128,  620,   30,
 /*  7540 */   620,  620,  220,  210,  256,  229,  259,  207,  262,  221,
 /*  7550 */   216,  620,  620,  246,  245,  223,  620,  620,  620,  620,
 /*  7560 */   620,  620,  230,  620,  272,  182,  285,  148,  281,  186,
 /*  7570 */   502,  163,  157,  496,   95,  178,  224,  279,  620,  620,
 /*  7580 */   620,  620,  444,  450,  164,  620,  213,  620,  620,  620,
 /*  7590 */   620,  503,  171,  620,  263,  267,  620,  620,  620,  620,
 /*  7600 */    94,  620,  620,   98,  620,  126,  620,  620,  128,  620,
 /*  7610 */    30,  620,  620,  620,  620,  620,  620,  620,  620,  233,
 /*  7620 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  240,
 /*  7630 */   620,  620,  620,  620,  620,  620,  187,  285,  148,  281,
 /*  7640 */   186,  502,  163,  157,  496,   95,  178,  224,  620,  620,
 /*  7650 */   620,  620,  620,  444,  450,  164,  620,  213,  620,  230,
 /*  7660 */   620,  620,  228,  171,  620,  263,  267,  620,  620,  620,
 /*  7670 */   620,  620,  620,  620,  279,  620,  620,  620,  620,  620,
 /*  7680 */   620,  620,  620,  620,  620,  620,  620,  620,  503,  620,
 /*  7690 */   620,  620,  620,  620,  620,  620,  620,   94,  620,  620,
 /*  7700 */    98,  620,  126,  620,  620,  128,  620,   30,  620,  445,
 /*  7710 */   443,  447,  220,  210,  256,  229,  259,  207,  262,  221,
 /*  7720 */   216,  620,  620,  620,  245,  223,  217,  620,  219,  620,
 /*  7730 */   230,  620,  620,  185,  285,  148,  281,  186,  502,  163,
 /*  7740 */   157,  496,   95,  178,  224,  279,  620,  620,  620,  620,
 /*  7750 */   444,  450,  164,  620,  213,  620,  620,  620,  620,  503,
 /*  7760 */   171,  620,  263,  267,  620,  620,  620,  620,   94,  620,
 /*  7770 */   620,   98,  620,  126,  620,  620,  128,  620,   30,  620,
 /*  7780 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  230,
 /*  7790 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7800 */   620,  620,  620,  620,  279,  280,  148,  281,  186,  502,
 /*  7810 */   163,  157,  496,   95,  178,  224,  620,  620,  503,  620,
 /*  7820 */   620,  444,  450,  164,  620,  213,  620,   94,  620,  620,
 /*  7830 */    98,  171,  126,  263,  267,  128,  620,   30,  620,  620,
 /*  7840 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7850 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7860 */   230,  620,  620,  620,  287,  148,  281,  186,  502,  163,
 /*  7870 */   157,  496,   95,  178,  224,  279,  620,  620,  620,  620,
 /*  7880 */   444,  450,  164,  131,  213,  504,  620,  620,  620,  503,
 /*  7890 */   171,  620,  263,  267,  620,  620,  620,  620,   94,  620,
 /*  7900 */   620,   98,  252,  126,  620,  620,  128,  620,   30,  102,
 /*  7910 */   620,  620,  139,  620,  620,  146,  620,  620,  620,  620,
 /*  7920 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  7930 */   620,  620,  620,  620,  620,  283,  148,  281,  186,  502,
 /*  7940 */   163,  157,  496,   95,  178,  224,  620,  620,  620,  620,
 /*  7950 */   620,  444,  450,  164,  620,  213,  620,  620,  620,  620,
 /*  7960 */   620,  171,  620,  263,  267,  431,  475,  474,  620,  620,
 /*  7970 */   171,  620,  263,  267,  254,  452,  453,  468,  620,  620,
 /*  7980 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  7990 */   230,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  8000 */   620,  620,  620,  620,  620,  279,  620,  620,  620,  620,
 /*  8010 */   620,  620,  620,  138,  620,  504,  620,  620,  620,  503,
 /*  8020 */   620,  620,  620,  620,  620,  620,  620,  620,   94,  620,
 /*  8030 */   620,   98,  252,  126,  620,  620,  128,  620,   30,  102,
 /*  8040 */   620,  620,  139,  620,  620,  146,  620,  620,  620,  620,
 /*  8050 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  8060 */   620,  620,  620,  620,  620,  620,  147,  281,  186,  502,
 /*  8070 */   163,  157,  496,   95,  178,  224,  620,  620,  620,  620,
 /*  8080 */   620,  444,  450,  164,  620,  213,  620,  620,  620,  620,
 /*  8090 */   620,  171,  620,  263,  267,  431,  475,  474,  620,  620,
 /*  8100 */   171,  620,  263,  267,  254,  452,  453,  468,  620,  620,
 /*  8110 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  8120 */   230,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  8130 */   620,  620,  620,  620,  620,  279,  620,  620,  620,  620,
 /*  8140 */   620,  620,  620,  230,  620,  620,  620,  620,  620,  503,
 /*  8150 */   620,  620,  620,  620,  620,  620,  620,  620,   94,  620,
 /*  8160 */   620,   98,  620,  126,  620,  620,  128,  620,   30,  620,
 /*  8170 */   620,  620,  558,  620,  620,  620,  620,  620,  620,  620,
 /*  8180 */   620,  620,  620,  620,  620,  620,  126,  620,  620,  128,
 /*  8190 */   620,   49,  620,  620,  620,  620,  149,  281,  186,  502,
 /*  8200 */   163,  157,  496,   95,  178,  224,  620,  620,  620,  620,
 /*  8210 */   620,  444,  450,  164,  620,  213,  620,  620,  620,  620,
 /*  8220 */   620,  171,  620,  263,  267,  230,  620,  620,  620,  620,
 /*  8230 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  620,
 /*  8240 */   278,  620,  620,  620,  171,  620,  263,  267,  620,  620,
 /*  8250 */   620,  620,  620,  620,  503,  620,  620,  620,  620,  620,
 /*  8260 */   620,  620,  620,   94,  620,  504,   98,  620,  126,  620,
 /*  8270 */   620,  128,  620,   30,  620,  620,  620,  620,  620,  620,
 /*  8280 */   620,  620,  327,  620,  620,  620,  620,  620,  620,  102,
 /*  8290 */   620,  620,  139,  620,  620,  146,  230,  620,  620,  620,
 /*  8300 */   620,  620,  281,  186,  502,  163,  157,  496,   95,  178,
 /*  8310 */   224,  284,  620,  620,  620,  620,  444,  450,  164,  620,
 /*  8320 */   213,  620,  620,  620,  620,  503,  171,  620,  263,  267,
 /*  8330 */   620,  620,  620,  620,   94,  620,  620,   98,  620,  126,
 /*  8340 */   620,  620,  128,  620,   30,  431,  475,  474,  620,  620,
 /*  8350 */   171,  620,  263,  267,  620,  230,  620,  620,  620,  620,
 /*  8360 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  8370 */   276,  620,  620,  281,  186,  502,  163,  157,  496,   95,
 /*  8380 */   178,  224,  620,  620,  503,  620,  620,  444,  450,  164,
 /*  8390 */   620,  213,  620,   94,  620,  620,   98,  171,  126,  263,
 /*  8400 */   267,  128,  620,   30,  620,  620,  620,  620,  620,  620,
 /*  8410 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  8420 */   620,  620,  620,  620,  620,  620,  230,  620,  620,  620,
 /*  8430 */   620,  620,  281,  186,  502,  163,  157,  496,   95,  178,
 /*  8440 */   224,  282,  620,  620,  620,  620,  444,  450,  164,  620,
 /*  8450 */   213,  620,  620,  504,  620,  503,  171,  528,  263,  267,
 /*  8460 */   620,  620,  620,  620,   94,  620,  620,   98,  620,  126,
 /*  8470 */   110,  620,  128,  620,   30,  620,  620,  102,  620,  620,
 /*  8480 */   118,  620,  169,  130,  168,  620,  620,  620,  620,  620,
 /*  8490 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  230,
 /*  8500 */   620,  620,  620,  281,  186,  502,  163,  157,  496,   95,
 /*  8510 */   178,  224,  620,  620,  620,  620,  620,  444,  450,  164,
 /*  8520 */   620,  213,  620,  620,  620,  620,  620,  171,  314,  263,
 /*  8530 */   267,  230,  620,  431,  475,  474,  620,  620,  171,  620,
 /*  8540 */   263,  267,  126,  620,  620,  128,  620,   49,  620,  467,
 /*  8550 */   466,  465,  137,  472,  121,  119,  461,  218,  620,  251,
 /*  8560 */   503,  620,  620,  233,  620,  620,  620,  620,  620,   94,
 /*  8570 */    45,  430,   98,  240,  126,  620,  620,  128,  620,   30,
 /*  8580 */   620,  620,  620,  620,  620,  620,  620,  620,   97,  620,
 /*  8590 */   444,  450,  164,  620,  213,  620,  620,  620,  620,  620,
 /*  8600 */   171,  620,  263,  267,  620,  620,  228,  620,  288,  186,
 /*  8610 */   502,  163,  157,  496,   95,  178,  224,  620,  620,  620,
 /*  8620 */   620,  620,  444,  450,  164,  620,  213,  620,  620,  620,
 /*  8630 */   620,  620,  171,  230,  263,  267,  620,  620,  620,  103,
 /*  8640 */   104,  620,  620,   91,   92,   93,  620,  620,  225,  264,
 /*  8650 */   212,  214,  620,  445,  443,  447,  620,  620,  620,  620,
 /*  8660 */   230,  620,  503,  620,  620,  620,  620,  246,  620,  223,
 /*  8670 */   217,   94,  219,  620,   98,  620,  126,  620,  620,  128,
 /*  8680 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  503,
 /*  8690 */   620,  620,  620,  620,  620,  620,  620,  620,   94,  620,
 /*  8700 */   620,   98,  620,  126,  620,  620,  128,  620,   30,  620,
 /*  8710 */   274,  186,  502,  163,  157,  496,   95,  178,  224,  620,
 /*  8720 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  620,
 /*  8730 */   620,  620,  620,  620,  171,  620,  263,  267,  183,  502,
 /*  8740 */   163,  157,  496,   95,  178,  224,  230,  620,  620,  620,
 /*  8750 */   620,  444,  450,  164,  620,  213,  620,  620,  620,  620,
 /*  8760 */   620,  171,  620,  263,  267,  620,  620,  620,  620,  620,
 /*  8770 */   620,  620,  620,  620,  251,  503,  620,  620,  233,  620,
 /*  8780 */   620,  620,  620,  620,   94,   45,  620,   98,  240,  126,
 /*  8790 */   620,  620,  128,  620,   30,  620,  620,  620,  620,  620,
 /*  8800 */   620,  620,  620,   97,  620,  620,  620,  620,  620,  620,
 /*  8810 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  8820 */   620,  228,  620,  620,  181,  502,  163,  157,  496,   95,
 /*  8830 */   178,  224,  620,  620,  620,  620,  620,  444,  450,  164,
 /*  8840 */   620,  213,  620,  620,  620,  620,  620,  171,  251,  263,
 /*  8850 */   267,  620,  233,  620,  103,  104,  620,  620,   91,   92,
 /*  8860 */    93,  620,  240,  225,  264,  212,  214,  620,  445,  443,
 /*  8870 */   447,  620,  620,  620,  620,  620,  620,   97,  620,  620,
 /*  8880 */   620,  620,  246,  620,  223,  217,  620,  219,  620,  620,
 /*  8890 */   620,  620,  620,  620,  620,  228,  620,  620,  620,  620,
 /*  8900 */   620,  620,  620,  620,  620,  620,  348,  620,  620,  620,
 /*  8910 */   620,  620,  620,  620,  620,  620,  251,  620,  620,  620,
 /*  8920 */   233,  620,  620,  620,  620,  620,  620,  620,  103,  104,
 /*  8930 */   240,  620,   91,   92,   93,  504,  620,  225,  264,  212,
 /*  8940 */   214,  620,  445,  443,  447,   97,  620,  620,  620,  620,
 /*  8950 */   620,  620,  620,  620,  620,  620,  246,  620,  223,  217,
 /*  8960 */   125,  219,  139,  228,  249,  146,  251,  620,  620,  620,
 /*  8970 */   233,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  8980 */   240,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  8990 */   620,  620,  620,  620,  620,   97,  103,  104,  620,  620,
 /*  9000 */    91,   92,   93,  620,  620,  225,  264,  212,  214,  620,
 /*  9010 */   445,  443,  447,  228,  620,  505,  475,  474,  620,  620,
 /*  9020 */   171,  620,  263,  267,  246,  230,  223,  217,  620,  219,
 /*  9030 */   620,  467,  466,  465,  137,  472,  121,  119,  461,  218,
 /*  9040 */   620,  620,  620,  620,  620,  620,  103,  104,  620,  620,
 /*  9050 */    91,   92,   93,  620,  503,  225,  264,  212,  214,  620,
 /*  9060 */   445,  443,  447,   94,  620,  620,   98,  620,  126,  620,
 /*  9070 */   620,  128,  620,   30,  246,  620,  223,  217,  620,  219,
 /*  9080 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9090 */   620,  620,  620,  230,  620,  620,  620,  620,  620,  620,
 /*  9100 */   620,  620,  620,  620,  516,  163,  157,  496,   95,  178,
 /*  9110 */   224,  620,  620,  620,  620,  620,  444,  450,  164,  620,
 /*  9120 */   213,  620,  503,  620,  620,  620,  171,  620,  263,  267,
 /*  9130 */   620,   94,  620,  620,   98,  620,  126,  620,  620,  128,
 /*  9140 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9150 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9160 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9170 */   620,  620,  514,  163,  157,  496,   95,  178,  224,  620,
 /*  9180 */   230,  620,  620,  620,  444,  450,  164,  620,  213,  620,
 /*  9190 */   620,  620,  620,  620,  171,  620,  263,  267,  620,  620,
 /*  9200 */   620,  620,  620,  620,  620,  620,  230,  620,  620,  503,
 /*  9210 */   620,  620,  620,  620,  620,  620,  620,  620,   94,  620,
 /*  9220 */   620,   98,  620,  126,  620,  620,  128,  620,   30,  620,
 /*  9230 */   620,  620,  620,  620,  620,  503,  620,  620,  620,  620,
 /*  9240 */   620,  620,  620,  620,   94,  620,  620,   98,  620,  126,
 /*  9250 */   620,  620,  128,  620,   30,  620,  620,  620,  620,  480,
 /*  9260 */   163,  157,  496,   95,  178,  224,  620,  620,  620,  620,
 /*  9270 */   620,  444,  450,  164,  620,  213,  620,  620,  620,  620,
 /*  9280 */   620,  171,  620,  263,  267,  620,  227,  226,  511,   95,
 /*  9290 */   178,  224,  620,  620,  620,  620,  620,  444,  450,  164,
 /*  9300 */   620,  213,  230,  620,  620,  620,  620,  171,  620,  263,
 /*  9310 */   267,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9320 */   620,  620,  620,  620,  620,  620,  620,  230,  620,  620,
 /*  9330 */   620,  503,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9340 */    94,  620,  620,   98,  620,  126,  620,  620,  128,  620,
 /*  9350 */    30,  620,  620,  620,  620,  620,  503,  620,  620,  620,
 /*  9360 */   620,  620,  620,  620,  620,   94,  620,  620,   98,  620,
 /*  9370 */   126,  620,  620,  128,  620,   30,  620,  620,  620,  620,
 /*  9380 */   620,  620,  227,  226,  497,   95,  178,  224,  620,  620,
 /*  9390 */   620,  620,  620,  444,  450,  164,  620,  213,  620,  620,
 /*  9400 */   620,  620,  620,  171,  620,  263,  267,  227,  226,  509,
 /*  9410 */    95,  178,  224,  230,  620,  620,  620,  620,  444,  450,
 /*  9420 */   164,  620,  213,  620,  620,  620,  620,  620,  171,  620,
 /*  9430 */   263,  267,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9440 */   620,  620,  503,  504,  620,  620,  620,  620,  620,  620,
 /*  9450 */   620,   94,  620,  620,   98,  620,  126,  620,  620,  128,
 /*  9460 */   589,   30,  620,  620,  620,  620,  620,  102,  620,  620,
 /*  9470 */   139,  620,  620,  146,  620,  620,  620,  620,  620,  620,
 /*  9480 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9490 */   620,  620,  620,  227,  226,  512,   95,  178,  224,  620,
 /*  9500 */   620,  620,  620,  620,  444,  450,  164,  620,  213,  620,
 /*  9510 */   620,  620,  620,  620,  171,  620,  263,  267,  620,  620,
 /*  9520 */   620,  620,  620,  431,  475,  474,  620,  230,  171,  620,
 /*  9530 */   263,  267,  620,  620,  620,  620,  620,  620,  620,  467,
 /*  9540 */   466,  465,  137,  472,  121,  119,  461,  218,  620,  620,
 /*  9550 */   620,  620,  230,  620,  620,  620,  503,  620,  620,  620,
 /*  9560 */   620,  620,  620,  620,  620,   94,  620,  620,   98,  620,
 /*  9570 */   117,  620,  620,  128,  620,   30,  620,  620,  620,  620,
 /*  9580 */   620,  503,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9590 */    94,  620,  620,   98,  620,  126,  620,  620,  128,  620,
 /*  9600 */    30,  620,  620,  620,  620,  620,  620,  227,  226,  509,
 /*  9610 */    95,  178,  224,  620,  620,  620,  620,  620,  444,  450,
 /*  9620 */   164,  620,  213,  230,  620,  620,  620,  620,  171,  620,
 /*  9630 */   263,  267,  227,  226,  510,   95,  178,  224,  620,  620,
 /*  9640 */   620,  620,  620,  444,  450,  164,  620,  213,  620,  620,
 /*  9650 */   620,  620,  503,  171,  230,  263,  267,  620,  620,  620,
 /*  9660 */   620,   94,  620,  620,   98,  620,  126,  620,  620,  128,
 /*  9670 */   620,   30,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9680 */   620,  620,  230,  503,  620,  620,  620,  620,  620,  620,
 /*  9690 */   620,  620,   94,  620,  620,   98,  620,  126,  620,  620,
 /*  9700 */   128,  620,   30,  227,  226,  508,   95,  178,  224,  620,
 /*  9710 */   620,  503,  620,  620,  444,  450,  164,  620,  213,  620,
 /*  9720 */   620,  620,  620,  620,  171,  126,  263,  267,  128,  620,
 /*  9730 */    49,  620,  620,  620,  227,  226,  515,   95,  178,  224,
 /*  9740 */   620,  230,  620,  620,  620,  444,  450,  164,  620,  213,
 /*  9750 */   620,  620,  620,  620,  620,  171,  620,  263,  267,  620,
 /*  9760 */   620,  620,  227,  226,  620,  620,  176,  224,  620,  620,
 /*  9770 */   503,  620,  620,  444,  450,  164,  620,  213,  620,  620,
 /*  9780 */   620,  620,  620,  171,  126,  263,  267,  128,  620,   49,
 /*  9790 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9800 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9810 */   620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
 /*  9820 */   620,  227,  226,  620,  620,  177,  224,  620,  620,  620,
 /*  9830 */   620,  620,  444,  450,  164,  620,  213,  620,  620,  620,
 /*  9840 */   620,  620,  171,  620,  263,  267,
    );
    static public $yy_lookahead = array(
 /*     0 */   127,  128,  129,  130,  230,   23,  172,  134,  135,  136,
 /*    10 */   129,  138,  129,  108,  109,  110,  111,  144,  145,  146,
 /*    20 */    38,   39,  149,  150,  151,  152,  153,    7,  140,    9,
 /*    30 */    10,  158,  159,  160,  148,  162,  148,  156,  157,   20,
 /*    40 */   167,   22,  169,  170,  116,  172,   21,  174,  175,  176,
 /*    50 */   177,   21,  169,  170,  181,  169,  170,   22,   23,  186,
 /*    60 */   187,  188,  189,  229,   24,  231,  193,  147,  147,  196,
 /*    70 */   197,  129,  199,  200,  201,  202,  203,  204,  205,  206,
 /*    80 */   207,  208,  209,  210,  211,  212,  213,  214,   21,    5,
 /*    90 */    60,   61,    8,  220,  221,  222,  129,  224,  225,  226,
 /*   100 */   227,  119,  219,  230,   31,  232,  233,   67,   35,   36,
 /*   110 */   168,  169,  170,  171,  241,  242,  243,  244,  245,  246,
 /*   120 */   247,  248,  249,  127,  128,  129,  130,  102,  240,   57,
 /*   130 */   134,  135,  136,  129,  138,  168,  169,  170,  171,    4,
 /*   140 */   144,  145,  146,  223,  223,  149,  244,  245,  228,  228,
 /*   150 */   248,  249,   68,    9,  158,  159,  160,  116,  162,  239,
 /*   160 */   239,  219,  121,  167,   23,  169,  170,   23,  172,  102,
 /*   170 */   174,  175,  176,  177,  102,   21,  172,  181,  182,  183,
 /*   180 */   184,  185,  186,  187,  188,  189,  219,   26,   27,  193,
 /*   190 */   129,   30,  196,  197,   13,  199,  200,  201,  202,  203,
 /*   200 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*   210 */   214,  129,   22,   23,   60,   61,  220,  221,  222,   84,
 /*   220 */   224,  225,  226,  227,   91,   92,  230,  110,  232,  233,
 /*   230 */   169,  170,  173,  229,   13,  231,  177,  241,  242,  243,
 /*   240 */   244,  245,  246,  247,  248,  249,  127,  128,  129,  130,
 /*   250 */   117,  169,  170,  134,  135,  136,   23,  138,  117,  118,
 /*   260 */   164,  117,  118,  144,  145,  146,   24,  147,  149,  173,
 /*   270 */   151,  152,  153,  177,  169,  170,   56,  158,  159,  160,
 /*   280 */   219,  162,  115,  178,  117,  118,  167,   67,  169,  170,
 /*   290 */    31,  172,   13,  174,  175,  176,  177,   57,   56,  147,
 /*   300 */   181,  219,  147,   23,  129,  186,  187,  188,  189,   67,
 /*   310 */   131,  132,  193,   23,  129,  196,  197,   37,  199,  200,
 /*   320 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*   330 */   211,  212,  213,  214,  108,   56,  110,  116,  112,  220,
 /*   340 */   221,  222,  121,  224,  225,  226,  227,  172,  228,  230,
 /*   350 */   117,  232,  233,  168,  169,  170,  171,  117,  118,  239,
 /*   360 */   241,  242,  243,  244,  245,  246,  247,  248,  249,  126,
 /*   370 */   127,  128,  129,  130,   89,   90,  133,  134,  135,  136,
 /*   380 */   228,  138,  123,  228,  178,   38,   39,  144,  145,  146,
 /*   390 */    23,  239,  149,  129,  239,  116,   20,  117,  118,   23,
 /*   400 */   121,  158,  159,  160,  219,  162,  248,   85,   86,  119,
 /*   410 */   167,   44,  169,  170,  164,  172,  129,  174,  175,  176,
 /*   420 */   177,  244,  245,  173,  181,  248,  249,  177,   13,  186,
 /*   430 */   187,  188,  189,  169,  170,  248,  193,  115,  116,  196,
 /*   440 */   197,   57,  199,  200,  201,  202,  203,  204,  205,  206,
 /*   450 */   207,  208,  209,  210,  211,  212,  213,  214,  148,  172,
 /*   460 */    56,  190,  191,  220,  221,  222,  119,  224,  225,  226,
 /*   470 */   227,   56,   20,  230,   22,  232,  233,  243,  244,  169,
 /*   480 */   170,   20,  248,   22,  241,  242,  243,  244,  245,  246,
 /*   490 */   247,  248,  249,  125,  126,  127,  128,  129,  130,  169,
 /*   500 */   170,  148,  134,  135,  136,  173,  138,  129,  178,  177,
 /*   510 */   129,  148,  144,  145,  146,  173,  229,  149,  231,  177,
 /*   520 */   116,  102,  169,  170,  172,  121,  158,  159,  160,  147,
 /*   530 */   162,  116,  169,  170,  115,  167,   13,  169,  170,   13,
 /*   540 */   172,  140,  174,  175,  176,  177,   87,   88,  170,  181,
 /*   550 */    22,   23,  140,  172,  186,  187,  188,  189,   22,   23,
 /*   560 */   148,  193,  117,  118,  196,  197,  140,  199,  200,  201,
 /*   570 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*   580 */   212,  213,  214,  169,  170,  233,  140,  244,  220,  221,
 /*   590 */   222,  248,  224,  225,  226,  227,  147,  148,  230,  129,
 /*   600 */   232,  233,  244,   21,  178,   23,  248,  194,  195,  241,
 /*   610 */   242,  243,  244,  245,  246,  247,  248,  249,  126,  127,
 /*   620 */   128,  129,  130,  108,  178,  110,  134,  135,  136,  129,
 /*   630 */   138,  129,  129,  140,   41,   42,  144,  145,  146,  116,
 /*   640 */   170,  149,  116,  129,  184,  185,   22,  123,   22,  173,
 /*   650 */   158,  159,  160,  177,  162,   68,   20,  157,  155,  167,
 /*   660 */   102,  169,  170,  102,  172,  230,  174,  175,  176,  177,
 /*   670 */   230,  178,   22,  181,  172,   56,  167,    9,  186,  187,
 /*   680 */   188,  189,  177,  167,  250,  193,  172,  250,  196,  197,
 /*   690 */   123,  199,  200,  201,  202,  203,  204,  205,  206,  207,
 /*   700 */   208,  209,  210,  211,  212,  213,  214,  250,  178,  177,
 /*   710 */   248,  178,  220,  221,  222,  250,  224,  225,  226,  227,
 /*   720 */    57,  250,  230,  250,  232,  233,   21,  250,   22,   31,
 /*   730 */    13,   22,   21,  241,  242,  243,  244,  245,  246,  247,
 /*   740 */   248,  249,  126,  127,  128,  129,  130,   31,   56,  129,
 /*   750 */   134,  135,  136,   23,  138,   22,    2,   20,   22,   24,
 /*   760 */   144,  145,  146,   22,   22,  149,   48,   22,   22,   20,
 /*   770 */    22,   56,   68,   39,  158,  159,  160,   67,  162,   22,
 /*   780 */    24,   57,   22,  167,   56,  169,  170,   13,  172,   57,
 /*   790 */   174,  175,  176,  177,   31,   40,  250,  181,  117,  250,
 /*   800 */   170,  178,  186,  187,  188,  189,  177,  137,  165,  193,
 /*   810 */   165,  129,  196,  197,  129,  199,  200,  201,  202,  203,
 /*   820 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*   830 */   214,  248,  191,   55,  250,  250,  220,  221,  222,  250,
 /*   840 */   224,  225,  226,  227,  248,  178,  230,  147,  232,  233,
 /*   850 */   177,  165,  165,  177,  147,  195,   20,  241,  242,  243,
 /*   860 */   244,  245,  246,  247,  248,  249,  126,  127,  128,  129,
 /*   870 */   130,  119,   23,  170,  134,  135,  136,  165,  138,  165,
 /*   880 */   149,  155,  250,  140,  144,  145,  146,  165,  165,  149,
 /*   890 */   129,  140,  167,  154,  250,  230,  250,  250,  158,  159,
 /*   900 */   160,  250,  162,  165,  230,  129,  129,  167,  250,  169,
 /*   910 */   170,  223,  172,  121,  174,  175,  176,  177,  129,  147,
 /*   920 */   137,  181,  250,  170,   20,  250,  186,  187,  188,  189,
 /*   930 */   118,  129,  170,  193,  169,  129,  196,  197,  147,  199,
 /*   940 */   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
 /*   950 */   210,  211,  212,  213,  214,  129,  177,  251,  250,  251,
 /*   960 */   220,  221,  222,  250,  224,  225,  226,  227,  248,  250,
 /*   970 */   230,  251,  232,  233,  251,  251,  251,  251,  251,  251,
 /*   980 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*   990 */   126,  127,  128,  129,  130,  251,  251,  251,  134,  135,
 /*  1000 */   136,  251,  138,  251,  251,  251,  251,  251,  144,  145,
 /*  1010 */   146,  251,  251,  149,  251,  251,  251,  251,  251,  251,
 /*  1020 */   251,  251,  158,  159,  160,  251,  162,  251,  251,  251,
 /*  1030 */   251,  167,  251,  169,  170,  251,  172,  251,  174,  175,
 /*  1040 */   176,  177,  251,  251,  251,  181,  251,  251,  251,  251,
 /*  1050 */   186,  187,  188,  189,  251,  251,  251,  193,  251,  251,
 /*  1060 */   196,  197,  251,  199,  200,  201,  202,  203,  204,  205,
 /*  1070 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  251,
 /*  1080 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  225,
 /*  1090 */   226,  227,  251,  251,  230,  251,  232,  233,  251,  251,
 /*  1100 */   251,  251,  251,  251,  251,  241,  242,  243,  244,  245,
 /*  1110 */   246,  247,  248,  249,  126,  127,  128,  129,  130,  251,
 /*  1120 */   251,  251,  134,  135,  136,  251,  138,  251,  251,  251,
 /*  1130 */   251,  251,  144,  145,  146,  251,  251,  149,  251,  251,
 /*  1140 */   251,  251,  251,  251,  251,  251,  158,  159,  160,  251,
 /*  1150 */   162,  251,  251,  251,  251,  167,  251,  169,  170,  251,
 /*  1160 */   172,  251,  174,  175,  176,  177,  251,  251,  251,  181,
 /*  1170 */   251,  251,  251,  251,  186,  187,  188,  189,  251,  251,
 /*  1180 */   251,  193,  251,  251,  196,  197,  251,  199,  200,  201,
 /*  1190 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  1200 */   212,  213,  214,  251,  251,  251,  251,  251,  220,  221,
 /*  1210 */   222,  251,  224,  225,  226,  227,  251,  251,  230,  251,
 /*  1220 */   232,  233,  251,  251,  251,  251,  251,  251,  251,  241,
 /*  1230 */   242,  243,  244,  245,  246,  247,  248,  249,  126,  127,
 /*  1240 */   128,  129,  130,  251,  251,  251,  134,  135,  136,  251,
 /*  1250 */   138,  251,  251,  251,  251,  251,  144,  145,  146,  251,
 /*  1260 */   251,  149,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  1270 */   158,  159,  160,  251,  162,  251,  251,  251,  251,  167,
 /*  1280 */   251,  169,  170,  251,  172,  251,  174,  175,  176,  177,
 /*  1290 */   251,  251,  251,  181,  251,  251,  251,  251,  186,  187,
 /*  1300 */   188,  189,  251,  251,  251,  193,  251,  251,  196,  197,
 /*  1310 */   251,  199,  200,  201,  202,  203,  204,  205,  206,  207,
 /*  1320 */   208,  209,  210,  211,  212,  213,  214,  251,  251,  251,
 /*  1330 */   251,  251,  220,  221,  222,  251,  224,  225,  226,  227,
 /*  1340 */   251,  251,  230,  251,  232,  233,  251,  251,  251,  251,
 /*  1350 */   251,  251,  251,  241,  242,  243,  244,  245,  246,  247,
 /*  1360 */   248,  249,  126,  127,  128,  129,  130,  251,  251,  251,
 /*  1370 */   134,  135,  136,  251,  138,  251,  251,  251,  251,  251,
 /*  1380 */   144,  145,  146,  251,  251,  149,  251,  251,  251,  251,
 /*  1390 */   251,  251,  251,  251,  158,  159,  160,  251,  162,  251,
 /*  1400 */   251,  251,  251,  167,  251,  169,  170,  251,  172,  251,
 /*  1410 */   174,  175,  176,  177,  251,  251,  251,  181,  251,  251,
 /*  1420 */   251,  251,  186,  187,  188,  189,  251,  251,  251,  193,
 /*  1430 */   251,  251,  196,  197,  251,  199,  200,  201,  202,  203,
 /*  1440 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  1450 */   214,  251,  251,  251,  251,  251,  220,  221,  222,  251,
 /*  1460 */   224,  225,  226,  227,  251,  251,  230,  251,  232,  233,
 /*  1470 */   251,  251,  251,  251,  251,  251,  251,  241,  242,  243,
 /*  1480 */   244,  245,  246,  247,  248,  249,  126,  127,  128,  129,
 /*  1490 */   130,  251,  251,  251,  134,  135,  136,  251,  138,  251,
 /*  1500 */   251,  251,  251,  251,  144,  145,  146,  251,  251,  149,
 /*  1510 */   251,  251,  251,  251,  251,  251,  251,  251,  158,  159,
 /*  1520 */   160,  251,  162,  251,  251,  251,  251,  167,  251,  169,
 /*  1530 */   170,  251,  172,  251,  174,  175,  176,  177,  251,  251,
 /*  1540 */   251,  181,  251,  251,  251,  251,  186,  187,  188,  189,
 /*  1550 */   251,  251,  251,  193,  251,  251,  196,  197,  251,  199,
 /*  1560 */   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
 /*  1570 */   210,  211,  212,  213,  214,  251,  251,  251,  251,  251,
 /*  1580 */   220,  221,  222,  251,  224,  225,  226,  227,  251,  251,
 /*  1590 */   230,  251,  232,  233,  251,  251,  251,  251,  251,  251,
 /*  1600 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  1610 */   126,  127,  128,  129,  130,  251,  251,  251,  134,  135,
 /*  1620 */   136,  251,  138,  251,  251,  251,  251,  251,  144,  145,
 /*  1630 */   146,  251,  251,  149,  251,  251,  251,  251,    9,  251,
 /*  1640 */   251,  251,  158,  159,  160,  251,  162,  251,  251,  251,
 /*  1650 */   251,  167,   23,  169,  170,  251,  172,  251,  174,  175,
 /*  1660 */   176,  177,  251,  251,  251,  181,   37,  251,  251,  251,
 /*  1670 */   186,  187,  188,  189,  251,  251,  251,  193,  251,  251,
 /*  1680 */   196,  197,  251,  199,  200,  201,  202,  203,  204,  205,
 /*  1690 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  251,
 /*  1700 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  225,
 /*  1710 */   226,  227,  251,  251,  230,  251,  232,  233,  251,  251,
 /*  1720 */   251,  251,  251,  251,  251,  241,  242,  243,  244,  245,
 /*  1730 */   246,  247,  248,  249,  127,  128,  129,  130,  251,  251,
 /*  1740 */   251,  134,  135,  136,  251,  138,  117,  118,  251,  251,
 /*  1750 */   251,  144,  145,  146,  251,  251,  149,  251,  251,  251,
 /*  1760 */   251,  251,  251,  251,  251,  158,  159,  160,  251,  162,
 /*  1770 */   251,  251,  251,  251,  167,  251,  169,  170,  251,  172,
 /*  1780 */   251,  174,  175,  176,  177,  251,  251,  251,  181,  251,
 /*  1790 */   251,  251,  251,  186,  187,  188,  189,  251,  251,  251,
 /*  1800 */   193,  251,  251,  196,  197,  251,  199,  200,  201,  202,
 /*  1810 */   203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
 /*  1820 */   213,  214,  251,  251,  251,  251,  251,  220,  221,  222,
 /*  1830 */    13,  224,  225,  226,  227,  251,  251,  230,  251,  232,
 /*  1840 */   233,  251,  251,   26,   27,  251,  251,   30,  241,  242,
 /*  1850 */   243,  244,  245,  246,  247,  248,  249,  251,    9,  147,
 /*  1860 */   251,  251,   13,  251,  251,  251,  251,  251,   19,   20,
 /*  1870 */    21,   22,   23,  251,  251,   26,   27,   28,   29,   30,
 /*  1880 */   251,   32,   33,   34,  251,  173,  251,   38,  251,  177,
 /*  1890 */   251,  251,   43,  251,   45,   46,   47,   48,   49,   50,
 /*  1900 */    51,   52,   53,   54,  251,   56,  251,  251,   59,  251,
 /*  1910 */   251,   62,   63,   64,   65,   66,  251,  251,   69,   70,
 /*  1920 */    71,   72,   73,  106,  107,  108,  109,  110,  111,  112,
 /*  1930 */   113,  114,  251,  251,  251,  118,  119,  251,   89,   90,
 /*  1940 */   228,  251,   93,   94,   95,  251,  251,   98,   99,  100,
 /*  1950 */   101,  239,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1960 */   111,  112,  113,  114,  251,  251,  117,  118,  119,  120,
 /*  1970 */     9,  122,  251,  251,   13,  251,  251,  251,  251,  251,
 /*  1980 */    19,   20,   21,   22,   23,  251,  251,   26,   27,   28,
 /*  1990 */    29,   30,  251,   32,   33,   34,  251,  251,  251,   38,
 /*  2000 */   251,  129,  251,  251,   43,   56,   45,   46,   47,   48,
 /*  2010 */    49,   50,   51,   52,   53,   54,   67,   56,  251,  251,
 /*  2020 */    59,  251,  251,   62,   63,   64,   65,   66,  251,  251,
 /*  2030 */    69,   70,   71,   72,   73,  163,  251,  251,  251,  167,
 /*  2040 */   251,  169,  170,   94,   95,   96,   97,  251,  251,  251,
 /*  2050 */    89,   90,  251,  251,   93,   94,   95,  251,  251,   98,
 /*  2060 */    99,  100,  101,  251,  103,  104,  105,  106,  107,  108,
 /*  2070 */   109,  110,  111,  112,  113,  114,  251,  251,  117,  118,
 /*  2080 */   119,  120,    9,  122,  251,  251,   13,  215,  251,  251,
 /*  2090 */   218,  219,   19,   20,  251,   22,   23,  251,  251,   26,
 /*  2100 */    27,   28,   29,   30,  251,  251,  251,  251,  251,  251,
 /*  2110 */   251,   38,  251,   40,   41,   42,   43,  251,   45,   46,
 /*  2120 */    47,   48,   49,   50,   51,   52,   53,   54,  251,   56,
 /*  2130 */   251,  251,   59,  251,  251,   62,   63,   64,   65,   66,
 /*  2140 */   251,  251,   69,   70,   71,   72,   73,  251,  251,  251,
 /*  2150 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  2160 */   251,  251,   89,   90,  251,  251,   93,   94,   95,  251,
 /*  2170 */   251,   98,   99,  100,  101,  251,  103,  104,  105,  106,
 /*  2180 */   107,  108,  109,  110,  111,  112,  113,  114,  251,  251,
 /*  2190 */   117,  118,  119,  120,    9,  122,  251,  251,   13,  251,
 /*  2200 */   251,  251,  251,  251,   19,   20,   21,   22,   23,  251,
 /*  2210 */   251,   26,   27,   28,   29,   30,  251,  251,  251,  251,
 /*  2220 */   251,  251,  251,   38,  251,  251,  251,  251,   43,  251,
 /*  2230 */    45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
 /*  2240 */   251,   56,  251,  251,   59,  251,  251,   62,   63,   64,
 /*  2250 */    65,   66,  251,  251,   69,   70,   71,   72,   73,  251,
 /*  2260 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  2270 */   251,  251,  251,  251,   89,   90,  251,  251,   93,   94,
 /*  2280 */    95,  251,  251,   98,   99,  100,  101,  251,  103,  104,
 /*  2290 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2300 */   251,  251,  117,  118,  119,  120,    9,  122,  251,  251,
 /*  2310 */    13,  251,  251,  251,  251,  251,   19,   20,   21,   22,
 /*  2320 */    23,  251,  251,   26,   27,   28,   29,   30,  251,  251,
 /*  2330 */   251,  251,  251,  251,  251,   38,  251,  251,  251,  251,
 /*  2340 */    43,  251,   45,   46,   47,   48,   49,   50,   51,   52,
 /*  2350 */    53,   54,  251,   56,  251,  251,   59,  251,  251,   62,
 /*  2360 */    63,   64,   65,   66,  251,  251,   69,   70,   71,   72,
 /*  2370 */    73,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  2380 */   251,  251,  251,  251,  251,  251,   89,   90,  251,  251,
 /*  2390 */    93,   94,   95,  251,  251,   98,   99,  100,  101,  251,
 /*  2400 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2410 */   113,  114,  251,  251,  117,  118,  119,  120,    9,  122,
 /*  2420 */   251,  251,   13,  251,  251,  251,  251,  251,   19,   20,
 /*  2430 */    21,   22,   23,  251,  251,   26,   27,   28,   29,   30,
 /*  2440 */   251,  251,  251,  251,  251,  251,  251,   38,  251,  251,
 /*  2450 */   251,  251,   43,  251,   45,   46,   47,   48,   49,   50,
 /*  2460 */    51,   52,   53,   54,  251,   56,  251,  251,   59,  251,
 /*  2470 */   251,   62,   63,   64,   65,   66,  251,  251,   69,   70,
 /*  2480 */    71,   72,   73,  251,  251,  251,  251,  251,  251,  251,
 /*  2490 */   251,  251,  251,  251,  251,  251,  251,  251,   89,   90,
 /*  2500 */   251,  251,   93,   94,   95,  251,  251,   98,   99,  100,
 /*  2510 */   101,  251,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2520 */   111,  112,  113,  114,  251,  251,  117,  118,  119,  120,
 /*  2530 */   251,  122,  128,  129,  130,  251,  251,  251,  134,  135,
 /*  2540 */   136,  251,  138,  251,  251,  251,  251,  251,  144,  145,
 /*  2550 */   146,  251,  251,  149,  251,  251,  251,  251,  251,  251,
 /*  2560 */   251,  251,  158,  251,  160,  251,  162,  251,  251,  251,
 /*  2570 */   251,  167,  251,  169,  170,  251,  172,  251,  251,  175,
 /*  2580 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  2590 */   186,  187,  188,  189,  251,  251,  251,  193,  251,  251,
 /*  2600 */   196,  197,  251,  199,  200,  201,  202,  203,  204,  205,
 /*  2610 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  251,
 /*  2620 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  225,
 /*  2630 */   226,  227,  251,  251,  230,  251,  232,  233,  251,   25,
 /*  2640 */    26,   27,   28,  251,  251,  241,  242,  243,  244,  245,
 /*  2650 */   246,  247,  248,  249,  251,    9,  251,  251,  251,   13,
 /*  2660 */   251,  251,  251,  251,  251,   19,   20,   21,   22,   23,
 /*  2670 */   251,  251,   26,   27,   28,   29,   30,  251,  251,  251,
 /*  2680 */   251,  251,  251,  251,   38,  251,  251,  251,  251,   43,
 /*  2690 */   251,   45,   46,   47,   48,   49,   50,   51,   52,   53,
 /*  2700 */    54,  251,   56,  251,  251,   59,  251,  251,   62,   63,
 /*  2710 */    64,   65,   66,  251,  251,   69,   70,   71,   72,   73,
 /*  2720 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  2730 */   251,  251,  251,  141,  142,   89,   90,  145,  251,   93,
 /*  2740 */    94,   95,  251,  251,   98,   99,  100,  101,  251,  103,
 /*  2750 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  2760 */   114,  251,  251,  117,  118,  119,  120,    9,  122,  251,
 /*  2770 */   251,   13,  251,  251,  251,  251,  251,   19,   20,   21,
 /*  2780 */    22,   23,  251,  251,   26,   27,   28,   29,   30,  251,
 /*  2790 */   251,  251,  251,  251,  251,  251,   38,  251,  251,  251,
 /*  2800 */   251,   43,  251,   45,   46,   47,   48,   49,   50,   51,
 /*  2810 */    52,   53,   54,  251,   56,  251,  251,   59,  251,  251,
 /*  2820 */    62,   63,   64,   65,   66,  251,  251,   69,   70,   71,
 /*  2830 */    72,   73,  251,  241,  242,  243,  244,  245,  246,  247,
 /*  2840 */   248,  249,  251,  251,  251,  251,  251,   89,   90,  251,
 /*  2850 */   251,   93,   94,   95,  251,   13,   98,   99,  100,  101,
 /*  2860 */   251,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2870 */   112,  113,  114,  251,  251,  117,  118,  119,  120,    9,
 /*  2880 */   122,  251,  251,   13,  251,  251,  251,  251,  251,   19,
 /*  2890 */    20,   21,   22,   23,  251,  251,   26,   27,   28,   29,
 /*  2900 */    30,  251,  251,  251,  251,  251,  251,  251,   38,  251,
 /*  2910 */   251,  251,  251,   43,  251,   45,   46,   47,   48,   49,
 /*  2920 */    50,   51,   52,   53,   54,  251,   56,  251,  251,   59,
 /*  2930 */   251,  251,   62,   63,   64,   65,   66,  251,  251,   69,
 /*  2940 */    70,   71,   72,   73,  251,  251,  251,  251,  106,  107,
 /*  2950 */   108,  109,  110,  111,  112,  113,  114,  251,  251,   89,
 /*  2960 */    90,  119,  251,   93,   94,   95,  251,  251,   98,   99,
 /*  2970 */   100,  101,  251,  103,  104,  105,  106,  107,  108,  109,
 /*  2980 */   110,  111,  112,  113,  114,  251,  251,  117,  118,  119,
 /*  2990 */   120,    9,  122,  251,  251,   13,  251,  251,  251,  251,
 /*  3000 */   251,   19,   20,   21,   22,   23,  251,  251,   26,   27,
 /*  3010 */    28,   29,   30,  251,  251,  251,  251,  251,  251,  251,
 /*  3020 */    38,  251,  251,  251,  251,   43,  251,   45,   46,   47,
 /*  3030 */    48,   49,   50,   51,   52,   53,   54,  251,   56,  251,
 /*  3040 */   251,   59,  251,  251,   62,   63,   64,   65,   66,  251,
 /*  3050 */   251,   69,   70,   71,   72,   73,  251,  251,  251,  251,
 /*  3060 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  3070 */   251,   89,   90,  251,  251,   93,   94,   95,  251,  251,
 /*  3080 */    98,   99,  100,  101,  251,  103,  104,  105,  106,  107,
 /*  3090 */   108,  109,  110,  111,  112,  113,  114,  251,  251,  117,
 /*  3100 */   118,  119,  120,  251,  122,  128,  129,  130,  251,  251,
 /*  3110 */   251,  134,  135,  136,  251,  138,  251,  251,  251,  251,
 /*  3120 */   251,  144,  145,  146,  251,  251,  149,  251,  251,  251,
 /*  3130 */   251,  251,  251,  251,  251,  158,  251,  160,  251,  162,
 /*  3140 */   251,  251,  251,  251,  167,  251,  169,  170,  251,  172,
 /*  3150 */   251,  251,  175,  251,  177,  251,  251,  251,  251,  251,
 /*  3160 */   251,  251,  251,  186,  187,  188,  189,  251,  251,  251,
 /*  3170 */   193,  251,  251,  196,  197,  251,  199,  200,  201,  202,
 /*  3180 */   203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
 /*  3190 */   213,  214,  251,  251,  251,  251,  251,  220,  221,  222,
 /*  3200 */   251,  224,  225,  226,  227,  251,  251,  230,  251,  232,
 /*  3210 */   233,  251,  251,  251,  251,  251,  251,  251,  241,  242,
 /*  3220 */   243,  244,  245,  246,  247,  248,  249,  251,  128,  129,
 /*  3230 */   130,  251,  251,  251,  134,  135,  136,  251,  138,  251,
 /*  3240 */   251,  251,  251,  251,  144,  145,  146,  251,  251,  149,
 /*  3250 */   251,  251,  251,  251,  251,  251,  251,  251,  158,  251,
 /*  3260 */   160,  251,  162,  251,  251,  251,  251,  167,  251,  169,
 /*  3270 */   170,  251,  172,  251,  251,  175,  251,  177,  251,  251,
 /*  3280 */   251,  251,  251,  251,  251,  251,  186,  187,  188,  189,
 /*  3290 */   251,  251,  251,  193,  251,  251,  196,  197,  251,  199,
 /*  3300 */   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
 /*  3310 */   210,  211,  212,  213,  214,  251,  251,  251,  251,  251,
 /*  3320 */   220,  221,  222,  251,  224,  225,  226,  227,  251,  251,
 /*  3330 */   230,  251,  232,  233,  251,  251,  251,  251,  251,  251,
 /*  3340 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  3350 */   128,  129,  130,  251,  251,  251,  134,  135,  136,  251,
 /*  3360 */   138,  251,  251,  251,  251,  251,  144,  145,  146,  251,
 /*  3370 */   251,  149,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  3380 */   158,  251,  160,  251,  162,  251,  251,  251,  251,  167,
 /*  3390 */   251,  169,  170,  251,  172,  251,  251,  175,  251,  177,
 /*  3400 */   251,  251,  251,  251,  251,  251,  251,  251,  186,  187,
 /*  3410 */   188,  189,  251,  251,  251,  193,  251,  251,  196,  197,
 /*  3420 */   251,  199,  200,  201,  202,  203,  204,  205,  206,  207,
 /*  3430 */   208,  209,  210,  211,  212,  213,  214,  251,  251,  251,
 /*  3440 */   251,  251,  220,  221,  222,  251,  224,  225,  226,  227,
 /*  3450 */   251,  251,  230,  251,  232,  233,  251,  251,  251,  251,
 /*  3460 */   251,  251,  251,  241,  242,  243,  244,  245,  246,  247,
 /*  3470 */   248,  249,  128,  129,  130,  251,  251,  251,  134,  135,
 /*  3480 */   136,  251,  138,  251,  251,  251,  251,  251,  144,  145,
 /*  3490 */   146,  251,  251,  149,  251,  251,  251,  251,  251,  251,
 /*  3500 */   251,  251,  158,  251,  160,  251,  162,  251,  251,  251,
 /*  3510 */   251,  167,  251,  169,  170,  251,  172,  251,  251,  175,
 /*  3520 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  3530 */   186,  187,  188,  189,  251,  251,  251,  193,  251,  251,
 /*  3540 */   196,  197,  251,  199,  200,  201,  202,  203,  204,  205,
 /*  3550 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  251,
 /*  3560 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  225,
 /*  3570 */   226,  227,  251,  251,  230,  251,  232,  233,  251,   25,
 /*  3580 */    26,   27,   28,  251,  251,  241,  242,  243,  244,  245,
 /*  3590 */   246,  247,  248,  249,  251,    9,  147,  251,  251,   13,
 /*  3600 */   251,  251,  251,  251,  251,   19,   20,  251,   22,   23,
 /*  3610 */   251,  251,   26,   27,   28,   29,   30,  251,  251,  251,
 /*  3620 */   251,  251,  173,  251,   38,  251,  177,  251,  251,   43,
 /*  3630 */   251,   45,   46,   47,   48,   49,   50,   51,   52,   53,
 /*  3640 */    54,  251,   56,  251,  251,   59,  251,  251,   62,   63,
 /*  3650 */    64,   65,   66,  251,  251,   69,   70,   71,   72,   73,
 /*  3660 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  251,
 /*  3670 */   251,  251,  223,  251,  251,   89,   90,  228,  251,   93,
 /*  3680 */    94,   95,  251,  251,   98,   99,  100,  101,  239,  103,
 /*  3690 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  3700 */   114,  251,  251,  117,  118,  119,  120,    9,  122,  251,
 /*  3710 */   251,   13,  251,  251,  251,  251,  251,   19,   20,  251,
 /*  3720 */    22,   23,  251,  251,   26,   27,  251,   29,   30,  139,
 /*  3730 */   251,  141,  142,  251,  251,  145,   38,  251,  148,  251,
 /*  3740 */   251,  251,  251,  251,  251,   47,   48,   49,   50,   51,
 /*  3750 */    52,   53,   54,  251,   56,  251,  251,   59,  251,  251,
 /*  3760 */    62,   63,   64,   65,   66,  251,  251,   69,   70,   71,
 /*  3770 */    72,   73,  251,  251,  251,  251,   13,  251,  251,  251,
 /*  3780 */   251,  251,  251,  251,  251,  251,   23,   89,   90,  251,
 /*  3790 */   251,   93,   94,   95,  251,  251,   98,   99,  100,  101,
 /*  3800 */   251,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  3810 */   112,  113,  114,  251,  129,  117,  118,  119,  120,   56,
 /*  3820 */   122,  251,  251,  251,  251,  251,  251,  251,  143,  144,
 /*  3830 */   145,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  3840 */   251,  251,  251,  158,  251,  251,  251,  162,  251,   13,
 /*  3850 */   251,  251,  167,  251,  169,  170,  251,  172,  251,  251,
 /*  3860 */   175,  251,  177,  251,  251,  251,  103,  104,  105,  251,
 /*  3870 */   251,  186,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  3880 */   251,  251,  119,  120,  199,  122,  251,  202,  203,  204,
 /*  3890 */   205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
 /*  3900 */   251,  251,  251,  251,  251,  220,  221,  222,  251,  224,
 /*  3910 */   225,  226,  227,  251,  251,  230,  251,  232,  233,  234,
 /*  3920 */   235,  236,  237,  129,  251,  251,  241,  242,  243,  244,
 /*  3930 */   245,  246,  247,  248,  249,  251,  251,  251,  144,  145,
 /*  3940 */   251,  251,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  3950 */   114,  251,  158,  117,  160,  119,  162,  251,  251,  251,
 /*  3960 */   251,  167,  251,  169,  170,  251,  172,  251,  251,  175,
 /*  3970 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  3980 */   186,  187,  251,  251,  251,  251,  192,  251,  251,  251,
 /*  3990 */   251,  251,  251,  199,  200,  201,  202,  203,  204,  205,
 /*  4000 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  251,
 /*  4010 */   251,  251,  251,  251,  220,  221,  222,  129,  224,  225,
 /*  4020 */   226,  227,  251,  251,  230,  251,  232,  233,  251,  251,
 /*  4030 */   251,  251,  144,  145,  251,  241,  242,  243,  244,  245,
 /*  4040 */   246,  247,  248,  249,  251,  251,  158,  147,  160,  251,
 /*  4050 */   162,  251,  251,  251,  251,  167,  251,  169,  170,  251,
 /*  4060 */   172,  251,  251,  175,  251,  177,  251,  251,  251,  251,
 /*  4070 */   251,  251,  251,  173,  186,  187,  251,  177,  251,  251,
 /*  4080 */   251,  251,  251,  251,  251,  251,  251,  199,  200,  201,
 /*  4090 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  4100 */   212,  213,  214,  251,  251,  251,  251,  251,  220,  221,
 /*  4110 */   222,  129,  224,  225,  226,  227,  251,  251,  230,  251,
 /*  4120 */   232,  233,  251,  223,  251,  251,  144,  145,  228,  241,
 /*  4130 */   242,  243,  244,  245,  246,  247,  248,  249,  251,  239,
 /*  4140 */   158,  251,  160,  251,  162,  251,  251,  251,  251,  167,
 /*  4150 */   251,  169,  170,  251,  172,  251,  251,  175,  251,  177,
 /*  4160 */   251,  251,  251,  251,  251,  251,  251,  251,  186,  187,
 /*  4170 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  4180 */   251,  199,  200,  201,  202,  203,  204,  205,  206,  207,
 /*  4190 */   208,  209,  210,  211,  212,  213,  214,  251,  251,  251,
 /*  4200 */   251,  251,  220,  221,  222,  129,  224,  225,  226,  227,
 /*  4210 */   251,  251,  230,  251,  232,  233,  251,  251,  251,  251,
 /*  4220 */   144,  145,  251,  241,  242,  243,  244,  245,  246,  247,
 /*  4230 */   248,  249,  251,  251,  158,  251,  160,  251,  162,  251,
 /*  4240 */   251,  251,  251,  167,  251,  169,  170,  251,  172,  251,
 /*  4250 */   251,  175,  251,  177,  251,  251,  251,  251,  251,  251,
 /*  4260 */   251,  251,  186,  187,  251,  251,  251,  251,  251,  251,
 /*  4270 */   251,  251,  251,  251,  251,  199,  200,  201,  202,  203,
 /*  4280 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  4290 */   214,  251,  251,  251,  251,  251,  220,  221,  222,  129,
 /*  4300 */   224,  225,  226,  227,  251,  251,  230,  251,  232,  233,
 /*  4310 */   251,  251,  251,  251,  144,  145,  251,  241,  242,  243,
 /*  4320 */   244,  245,  246,  247,  248,  249,  251,  251,  158,  251,
 /*  4330 */   160,  251,  162,  251,  251,  251,  251,  167,  251,  169,
 /*  4340 */   170,  251,  172,  251,  251,  175,  251,  177,  251,  251,
 /*  4350 */   251,  251,  251,  251,  251,  251,  186,  187,  251,  251,
 /*  4360 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  199,
 /*  4370 */   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
 /*  4380 */   210,  211,  212,  213,  214,  251,  251,  251,  251,  251,
 /*  4390 */   220,  221,  222,  129,  224,  225,  226,  227,  251,  251,
 /*  4400 */   230,  251,  232,  233,  251,  251,  251,  251,  144,  145,
 /*  4410 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  4420 */   251,  251,  158,  251,  160,  251,  162,  251,  251,  251,
 /*  4430 */   251,  167,  251,  169,  170,  251,  172,  251,  251,  175,
 /*  4440 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  4450 */   186,  187,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  4460 */   251,  251,  251,  199,  200,  201,  202,  203,  204,  205,
 /*  4470 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  251,
 /*  4480 */   251,  251,  251,  251,  220,  221,  222,  129,  224,  225,
 /*  4490 */   226,  227,  251,  251,  230,  251,  232,  233,  251,  251,
 /*  4500 */   251,  251,  144,  145,  251,  241,  242,  243,  244,  245,
 /*  4510 */   246,  247,  248,  249,  251,  251,  158,  251,  160,  251,
 /*  4520 */   162,  251,  251,  251,  251,  167,  251,  169,  170,  251,
 /*  4530 */   172,  251,  251,  175,  251,  177,  251,  251,  251,  251,
 /*  4540 */   251,  251,  251,  251,  186,  187,  251,  251,  251,  251,
 /*  4550 */   251,  251,  251,  251,  251,  251,  251,  199,  200,  201,
 /*  4560 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  4570 */   212,  213,  214,  251,  251,  251,  251,  251,  220,  221,
 /*  4580 */   222,  129,  224,  225,  226,  227,  251,  251,  230,  251,
 /*  4590 */   232,  233,  251,  251,  251,  251,  144,  145,  251,  241,
 /*  4600 */   242,  243,  244,  245,  246,  247,  248,  249,  251,  251,
 /*  4610 */   158,  251,  160,  251,  162,  251,  251,  251,  251,  167,
 /*  4620 */   251,  169,  170,  251,  172,  251,  251,  175,  251,  177,
 /*  4630 */   251,  251,  251,  251,  251,  251,  251,  251,  186,  187,
 /*  4640 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  4650 */   251,  199,  200,  201,  202,  203,  204,  205,  206,  207,
 /*  4660 */   208,  209,  210,  211,  212,  213,  214,  251,  251,  251,
 /*  4670 */   251,  251,  220,  221,  222,  129,  224,  225,  226,  227,
 /*  4680 */   251,  251,  230,  251,  232,  233,  251,  251,  251,  251,
 /*  4690 */   144,  145,  251,  241,  242,  243,  244,  245,  246,  247,
 /*  4700 */   248,  249,  251,  251,  158,  251,  160,  251,  162,  251,
 /*  4710 */   251,  251,  251,  167,  251,  169,  170,  251,  172,  251,
 /*  4720 */   251,  175,  251,  177,  251,  251,  251,  251,  251,  251,
 /*  4730 */   251,  251,  186,  187,  251,  251,  251,  251,  251,  251,
 /*  4740 */   251,  251,  251,  251,  251,  199,  200,  201,  202,  203,
 /*  4750 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  4760 */   214,    5,  251,  251,    8,  251,  220,  221,  222,  129,
 /*  4770 */   224,  225,  226,  227,  251,  251,  230,  251,  232,  233,
 /*  4780 */    24,  251,  251,  143,  144,  145,  251,  241,  242,  243,
 /*  4790 */   244,  245,  246,  247,  248,  249,  251,  251,  158,  251,
 /*  4800 */   251,  251,  162,  251,  251,  251,  251,  167,  251,  169,
 /*  4810 */   170,  251,  172,  251,  251,  175,  251,  177,  251,  251,
 /*  4820 */   251,  251,  251,  251,  251,  251,  251,  251,  145,  251,
 /*  4830 */    74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
 /*  4840 */   251,  251,  251,  251,  251,  251,  206,  207,  208,  209,
 /*  4850 */   210,  211,  212,  213,  214,  172,  251,  251,  175,  251,
 /*  4860 */   220,  221,  222,  251,  224,  225,  226,  227,  251,  251,
 /*  4870 */   230,  251,  232,  233,  234,  235,  236,  237,  251,  251,
 /*  4880 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  4890 */   251,    9,  251,  251,  251,   13,  251,  251,  251,  251,
 /*  4900 */   251,  251,  251,  251,  251,   23,  251,  251,  225,  226,
 /*  4910 */   227,  251,  251,  230,  251,  232,  233,  251,  251,  251,
 /*  4920 */    38,  251,  251,  129,  241,  242,  243,  244,  245,  246,
 /*  4930 */   247,  248,  249,  251,  251,  251,  251,  143,   56,  145,
 /*  4940 */    58,  251,  251,  251,  251,  251,  251,   65,   66,  251,
 /*  4950 */   251,   69,   70,   71,   72,   73,  162,  163,  251,  251,
 /*  4960 */   251,  167,  251,  169,  170,  251,  172,  251,  251,  175,
 /*  4970 */   251,   89,   90,  251,  180,   93,   94,   95,  251,  251,
 /*  4980 */    98,   99,  100,  101,  251,  103,  104,  105,  106,  107,
 /*  4990 */   108,  109,  110,  111,  112,  113,  114,  251,  251,  117,
 /*  5000 */   118,  119,  120,    9,  122,  251,  251,   13,  251,  251,
 /*  5010 */   251,  251,  218,  219,  251,  251,   22,   23,  251,  225,
 /*  5020 */   226,  227,  251,  251,  230,  251,  232,  233,  234,  235,
 /*  5030 */   236,  237,   38,  251,  251,  241,  242,  243,  244,  245,
 /*  5040 */   246,  247,  248,  249,  251,  251,  251,  251,  251,  143,
 /*  5050 */    56,  145,  251,  251,  251,  251,  251,  251,  251,   65,
 /*  5060 */    66,  251,  251,   69,   70,   71,   72,   73,  162,  251,
 /*  5070 */   251,  251,  251,  251,  251,  169,  251,  251,  172,  251,
 /*  5080 */   251,  175,  251,   89,   90,  251,  251,   93,   94,   95,
 /*  5090 */   251,  251,   98,   99,  100,  101,  251,  103,  104,  105,
 /*  5100 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  251,
 /*  5110 */   251,  117,  118,  119,  120,    9,  122,  251,  251,   13,
 /*  5120 */   251,  251,  251,  251,  251,  251,  251,  251,  251,   23,
 /*  5130 */   251,  225,  226,  227,  251,  251,  230,  251,  232,  233,
 /*  5140 */   234,  235,  236,  237,   38,  251,  251,  241,  242,  243,
 /*  5150 */   244,  245,  246,  247,  248,  249,  251,  251,  251,  251,
 /*  5160 */   251,  251,   56,  251,  251,  251,  251,  251,  251,  251,
 /*  5170 */   251,   65,   66,  251,  251,   69,   70,   71,   72,   73,
 /*  5180 */   251,  251,  251,  251,  251,   13,  251,  251,  251,  251,
 /*  5190 */   251,  251,  251,  251,  251,   89,   90,  251,  251,   93,
 /*  5200 */    94,   95,  251,  251,   98,   99,  100,  101,  251,  103,
 /*  5210 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  5220 */   114,  251,  129,  117,  118,  119,  120,  251,  122,  251,
 /*  5230 */   251,  251,  251,  251,  251,  251,  143,  251,  145,  251,
 /*  5240 */   251,  148,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  5250 */   251,  158,  251,  251,  251,  162,  251,  251,  251,  129,
 /*  5260 */   251,  251,  169,  251,  251,  172,  251,  251,  175,  251,
 /*  5270 */   177,  251,  251,  143,  251,  145,  251,  251,  106,  107,
 /*  5280 */   108,  109,  110,  111,  112,  113,  114,  251,  251,  251,
 /*  5290 */   118,  119,  162,  163,  251,  251,  251,  167,  251,  169,
 /*  5300 */   170,  251,  172,  251,  251,  175,  251,    9,  178,  179,
 /*  5310 */   180,   13,  251,  220,  221,  222,  251,  224,  225,  226,
 /*  5320 */   227,   23,  251,  230,  251,  232,  233,  234,  235,  236,
 /*  5330 */   237,  238,  251,  240,  241,  242,  243,  244,  245,  246,
 /*  5340 */   247,  248,  249,  251,  251,  251,  251,  251,  218,  219,
 /*  5350 */   129,  251,  251,  251,  129,  225,  226,  227,  251,  251,
 /*  5360 */   230,  251,  232,  233,  234,  235,  236,  237,  143,  251,
 /*  5370 */   145,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  5380 */   251,  251,  251,  158,  163,  129,  251,  162,  167,  251,
 /*  5390 */   169,  170,  251,  251,  169,  251,  251,  172,  251,  143,
 /*  5400 */   175,  145,  177,  251,  106,  107,  108,  109,  110,  111,
 /*  5410 */   112,  113,  114,  251,  158,  117,  118,  119,  162,  198,
 /*  5420 */   251,  251,  251,  251,  251,  169,  251,  251,  172,  251,
 /*  5430 */   251,  175,  251,  177,  251,  251,  215,  251,  251,  218,
 /*  5440 */   219,  251,  251,  251,  251,  220,  221,  222,  251,  224,
 /*  5450 */   225,  226,  227,  251,  251,  230,  251,  232,  233,  234,
 /*  5460 */   235,  236,  237,  251,  251,  251,  241,  242,  243,  244,
 /*  5470 */   245,  246,  247,  248,  249,  251,  220,  221,  222,  129,
 /*  5480 */   224,  225,  226,  227,  251,  251,  230,  251,  232,  233,
 /*  5490 */   234,  235,  236,  237,  144,  251,  251,  241,  242,  243,
 /*  5500 */   244,  245,  246,  247,  248,  249,  251,  251,  158,  251,
 /*  5510 */   251,  251,  251,  251,  251,  251,  143,  167,  145,  251,
 /*  5520 */   170,  251,  172,  251,  251,  175,  251,  177,  251,  251,
 /*  5530 */   251,  251,  251,  251,   13,  162,  186,  251,  251,  251,
 /*  5540 */   251,  251,  169,  251,   23,  172,  251,  251,  175,  251,
 /*  5550 */   251,  251,  202,  203,  204,  205,  206,  207,  208,  209,
 /*  5560 */   210,  211,  212,  213,  214,    9,  216,  217,  251,   13,
 /*  5570 */   220,  221,  222,  251,  224,  251,  251,   56,  251,   23,
 /*  5580 */   230,  251,  232,  233,  251,  251,  251,  251,  251,  251,
 /*  5590 */   251,  251,  251,  251,   38,  251,  251,  251,  225,  226,
 /*  5600 */   227,  251,  251,  230,  251,  232,  233,  234,  235,  236,
 /*  5610 */   237,  251,   56,  251,  241,  242,  243,  244,  245,  246,
 /*  5620 */   247,  248,  249,  251,  103,  104,  105,  106,  107,  108,
 /*  5630 */   109,  110,  111,  112,  113,  114,  115,  251,  251,  118,
 /*  5640 */   119,  120,  251,  122,  251,   89,   90,  129,  251,   93,
 /*  5650 */    94,   95,  251,  251,   98,   99,  100,  101,  251,  103,
 /*  5660 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  5670 */   114,  251,  251,  117,  118,  119,  120,  251,  122,  161,
 /*  5680 */   251,  163,  129,  251,  166,  167,  168,  169,  170,  171,
 /*  5690 */   251,  251,  251,  251,  251,  251,  251,  144,  251,  251,
 /*  5700 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  5710 */   251,  158,  251,  251,  251,  251,  198,  251,  251,  251,
 /*  5720 */   167,  251,  251,  170,  251,  172,  251,  251,  175,  251,
 /*  5730 */   177,  178,  251,  215,  251,  251,  218,  219,  251,  186,
 /*  5740 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  5750 */   251,  251,  199,  251,  251,  202,  203,  204,  205,  206,
 /*  5760 */   207,  208,  209,  210,  211,  212,  213,  214,  251,  251,
 /*  5770 */   251,  251,  251,  220,  221,  222,  129,  224,  251,  251,
 /*  5780 */   251,  251,  251,  230,  251,  232,  233,  251,  251,  251,
 /*  5790 */   251,  144,  251,  251,  251,  251,  251,  251,  251,   13,
 /*  5800 */   251,  251,  251,  251,  251,  158,  129,  251,  251,   23,
 /*  5810 */   251,  251,  251,  251,  167,  251,  251,  170,  251,  172,
 /*  5820 */   251,  251,  175,  251,  177,  251,  251,  251,  251,  251,
 /*  5830 */   251,  251,  251,  186,  251,  251,  251,  251,  161,  251,
 /*  5840 */   163,  251,   56,  166,  167,  168,  169,  170,  171,  202,
 /*  5850 */   203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
 /*  5860 */   213,  214,  251,  216,  251,  251,  251,  220,  221,  222,
 /*  5870 */   251,  224,  251,  251,  251,  251,  251,  230,  251,  232,
 /*  5880 */   233,  251,  129,  251,   98,   99,  100,  101,  251,  103,
 /*  5890 */   104,  105,  251,  251,  251,  218,  219,  144,  251,  251,
 /*  5900 */   251,  251,  251,  251,  251,  119,  120,  251,  122,  251,
 /*  5910 */   251,  158,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  5920 */   167,  251,  251,  170,  251,  172,  251,  251,  175,  251,
 /*  5930 */   177,  251,  251,  251,  251,  251,  251,  251,  251,  186,
 /*  5940 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  5950 */   251,  251,  199,  251,  251,  202,  203,  204,  205,  206,
 /*  5960 */   207,  208,  209,  210,  211,  212,  213,  214,  251,  251,
 /*  5970 */   251,  251,  251,  220,  221,  222,  251,  224,  251,  129,
 /*  5980 */   251,  251,  251,  230,  251,  232,  233,  251,  251,  251,
 /*  5990 */   251,  251,  251,  251,  144,  251,  251,  251,  251,  251,
 /*  6000 */   251,  251,  251,  251,  251,  251,  251,  251,  158,  251,
 /*  6010 */   251,  251,  251,  251,  251,  251,  251,  167,  251,  251,
 /*  6020 */   170,  251,  172,  251,  251,  175,  251,  177,  251,  251,
 /*  6030 */   251,  251,  251,  251,  251,  251,  186,  251,  251,  251,
 /*  6040 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6050 */   129,  251,  202,  203,  204,  205,  206,  207,  208,  209,
 /*  6060 */   210,  211,  212,  213,  214,  144,  216,  251,  251,  251,
 /*  6070 */   220,  221,  222,  251,  224,  251,  251,  251,  251,  158,
 /*  6080 */   230,  251,  232,  233,  251,  251,  251,  251,  167,  251,
 /*  6090 */   251,  170,  251,  172,  251,  251,  175,  251,  177,  251,
 /*  6100 */   251,  251,  251,  251,  251,  251,  251,  186,  251,  251,
 /*  6110 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6120 */   251,  251,  251,  202,  203,  204,  205,  206,  207,  208,
 /*  6130 */   209,  210,  211,  212,  213,  214,  251,  251,  251,  251,
 /*  6140 */   251,  220,  221,  222,  251,  224,  251,  129,  251,  251,
 /*  6150 */   251,  230,  251,  232,  233,  251,  251,  251,  251,  251,
 /*  6160 */   251,  251,  144,  251,  251,  251,  251,  251,  251,  251,
 /*  6170 */   251,  251,  251,  251,  251,  251,  158,  251,  251,  251,
 /*  6180 */   251,  251,  251,  251,  251,  167,  251,  251,  170,  251,
 /*  6190 */   172,  251,  251,  175,  251,  177,  251,  251,  251,  251,
 /*  6200 */   251,  251,  251,  251,  186,  251,  251,  251,  251,  251,
 /*  6210 */   251,  251,  251,  251,  251,  251,  251,  251,  129,  251,
 /*  6220 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  6230 */   212,  213,  214,  144,  251,  251,  251,  251,  220,  221,
 /*  6240 */   222,  251,  224,  251,  251,  251,  251,  158,  230,  251,
 /*  6250 */   232,  233,  251,  251,  251,  251,  167,  251,  251,  170,
 /*  6260 */   251,  172,  251,  251,  175,  251,  177,  251,  251,  251,
 /*  6270 */   251,  251,  251,  251,  251,  186,  251,  251,  251,  251,
 /*  6280 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6290 */   251,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  6300 */   211,  212,  213,  214,  251,  251,  251,  251,  251,  220,
 /*  6310 */   221,  222,  251,  224,  251,  129,  251,  251,  251,  230,
 /*  6320 */   251,  232,  233,  251,  251,  251,  251,  251,  251,  251,
 /*  6330 */   144,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6340 */   251,  251,  251,  251,  158,  251,  251,  251,  251,  251,
 /*  6350 */   251,  251,  251,  167,  251,  251,  170,  251,  172,  251,
 /*  6360 */   251,  175,  251,  177,  251,  251,  251,  251,  251,  251,
 /*  6370 */   251,  251,  186,  251,  251,  251,  251,  251,  251,  251,
 /*  6380 */   251,  251,  251,  251,  251,  251,  129,  251,  202,  203,
 /*  6390 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  6400 */   214,  144,  251,  251,  251,  251,  220,  221,  222,  251,
 /*  6410 */   224,  251,  251,  251,  251,  158,  230,  251,  232,  233,
 /*  6420 */   251,  251,  251,  251,  167,  251,  251,  170,  251,  172,
 /*  6430 */   251,  251,  175,  251,  177,  251,  251,  251,  251,  251,
 /*  6440 */   251,  251,  251,  186,  251,  251,  251,  251,  251,  251,
 /*  6450 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  202,
 /*  6460 */   203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
 /*  6470 */   213,  214,  251,  251,  251,  251,  251,  220,  221,  222,
 /*  6480 */   251,  224,  251,  129,  251,  251,  251,  230,  251,  232,
 /*  6490 */   233,  251,  251,  251,  251,  251,  251,  251,  144,  251,
 /*  6500 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6510 */   251,  251,  158,  251,  251,  251,  251,  251,  251,  251,
 /*  6520 */   251,  167,  251,  251,  170,  251,  172,  251,  251,  175,
 /*  6530 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6540 */   186,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6550 */   251,  251,  251,  251,  129,  251,  202,  203,  204,  205,
 /*  6560 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  144,
 /*  6570 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  251,
 /*  6580 */   251,  251,  251,  158,  230,  251,  232,  233,  251,  251,
 /*  6590 */   251,  251,  167,  251,  251,  170,  251,  172,  251,  251,
 /*  6600 */   175,  251,  177,  251,  251,  251,  251,  251,  251,  251,
 /*  6610 */   251,  186,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6620 */   251,  251,  251,  251,  251,  251,  251,  202,  203,  204,
 /*  6630 */   205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
 /*  6640 */   251,  251,  251,  251,  251,  220,  221,  222,  251,  224,
 /*  6650 */   251,  129,  251,  251,  251,  230,  251,  232,  233,  251,
 /*  6660 */   251,  251,  251,  251,  251,  251,  144,  251,  251,  251,
 /*  6670 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6680 */   158,  251,  251,  251,  251,  251,  251,  251,  251,  167,
 /*  6690 */   251,  251,  170,  251,  172,  251,  251,  175,  251,  177,
 /*  6700 */   251,  251,  251,  251,  251,  251,  251,  251,  186,  251,
 /*  6710 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6720 */   251,  251,  129,  251,  202,  203,  204,  205,  206,  207,
 /*  6730 */   208,  209,  210,  211,  212,  213,  214,  144,  251,  251,
 /*  6740 */   251,  251,  220,  221,  222,  251,  224,  251,  251,  251,
 /*  6750 */   251,  158,  230,  251,  232,  233,  251,  251,  251,  251,
 /*  6760 */   167,  251,  251,  170,  251,  172,  251,  251,  175,  251,
 /*  6770 */   177,  251,  251,  251,  251,  251,  251,  251,  251,  186,
 /*  6780 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6790 */   251,  251,  251,  251,  251,  202,  203,  204,  205,  206,
 /*  6800 */   207,  208,  209,  210,  211,  212,  213,  214,  251,  251,
 /*  6810 */   251,  251,  251,  220,  221,  222,  251,  224,  251,  129,
 /*  6820 */   251,  251,  251,  230,  251,  232,  233,  251,  251,  251,
 /*  6830 */   251,  251,  251,  251,  144,  251,  251,  251,  251,  251,
 /*  6840 */   251,  251,  251,  251,  251,  251,  251,  251,  158,  251,
 /*  6850 */   251,  251,  251,  251,  251,  251,  251,  167,  251,  251,
 /*  6860 */   170,  251,  172,  251,  251,  175,  251,  177,  251,  251,
 /*  6870 */   251,  251,  251,  251,  251,  251,  186,  251,  251,  251,
 /*  6880 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6890 */   129,  251,  202,  203,  204,  205,  206,  207,  208,  209,
 /*  6900 */   210,  211,  212,  213,  214,  144,  251,  251,  251,  251,
 /*  6910 */   220,  221,  222,  251,  224,  251,  251,  251,  251,  158,
 /*  6920 */   230,  251,  232,  233,  251,  251,  251,  251,  167,  251,
 /*  6930 */   251,  170,  251,  172,  251,  251,  175,  251,  177,  251,
 /*  6940 */   251,  251,  251,  251,  251,  251,  251,  186,  251,  251,
 /*  6950 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  6960 */   251,  251,  251,  202,  203,  204,  205,  206,  207,  208,
 /*  6970 */   209,  210,  211,  212,  213,  214,  251,  251,  251,  251,
 /*  6980 */   251,  220,  221,  222,  251,  224,  251,  129,  251,  251,
 /*  6990 */   251,  230,  251,  232,  233,  251,  251,  251,  251,  251,
 /*  7000 */   251,  251,  144,  251,  251,  251,  251,  251,  251,  251,
 /*  7010 */   251,  251,  251,  251,  251,  251,  158,  251,  251,  251,
 /*  7020 */   251,  251,  251,  251,  251,  167,  251,  251,  170,  251,
 /*  7030 */   172,  251,  251,  175,  251,  177,  251,  251,  251,  251,
 /*  7040 */   251,  251,  251,  251,  186,  251,  251,  251,  251,  251,
 /*  7050 */   251,  251,  251,  251,  251,  251,  251,  251,  129,  251,
 /*  7060 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  7070 */   212,  213,  214,  144,  251,  251,  251,  251,  220,  221,
 /*  7080 */   222,  251,  224,  251,  251,  251,  251,  158,  230,  251,
 /*  7090 */   232,  233,  251,  251,  251,  251,  167,  251,  251,  170,
 /*  7100 */   251,  172,  251,  251,  175,  251,  177,  251,  251,  251,
 /*  7110 */   251,  251,  251,  251,  251,  186,  251,  251,  251,  251,
 /*  7120 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7130 */   251,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  7140 */   211,  212,  213,  214,  251,  251,  251,  251,  251,  220,
 /*  7150 */   221,  222,  251,  224,  251,  129,  251,  251,  251,  230,
 /*  7160 */   251,  232,  233,  251,  251,  251,  251,  251,  251,  251,
 /*  7170 */   144,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7180 */   251,  251,  251,  251,  158,  251,  251,  251,  251,  251,
 /*  7190 */   251,  251,  251,  167,  251,  251,  170,  251,  172,  251,
 /*  7200 */   251,  175,  251,  177,  251,  251,  251,  251,  251,  251,
 /*  7210 */   251,  251,  186,  251,  251,  251,  251,  251,  251,  251,
 /*  7220 */   251,  251,  251,  251,  251,  251,  129,  251,  202,  203,
 /*  7230 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  7240 */   214,  144,  251,  251,  251,  251,  220,  221,  222,  251,
 /*  7250 */   224,  251,  251,  251,  251,  158,  230,  251,  232,  233,
 /*  7260 */   251,  251,  251,  251,  167,  251,  251,  170,  251,  172,
 /*  7270 */   251,  251,  175,  251,  177,  251,  251,  251,  251,  251,
 /*  7280 */   251,  251,  251,  186,  251,  251,  251,  251,  251,  251,
 /*  7290 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  202,
 /*  7300 */   203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
 /*  7310 */   213,  214,  251,  251,  251,  251,  251,  220,  221,  222,
 /*  7320 */   251,  224,  251,  129,  251,  251,  251,  230,  251,  232,
 /*  7330 */   233,  251,  251,  251,  251,  251,  251,  251,  144,  251,
 /*  7340 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7350 */   251,  251,  158,  251,  251,  251,  251,  251,  251,  251,
 /*  7360 */   251,  167,  251,  251,  170,  251,  172,  251,  251,  175,
 /*  7370 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7380 */   186,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7390 */   251,  251,  251,  251,  129,  251,  202,  203,  204,  205,
 /*  7400 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  144,
 /*  7410 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  251,
 /*  7420 */   251,  251,  251,  158,  230,  251,  232,  233,  251,  251,
 /*  7430 */   251,  251,  167,  251,  251,  170,  251,  172,  251,  251,
 /*  7440 */   175,  251,  177,  251,  251,    9,  251,  251,  251,   13,
 /*  7450 */   251,  186,  251,  251,  251,  251,  251,  251,  251,   23,
 /*  7460 */   251,  251,  251,  251,  251,  251,  251,  202,  203,  204,
 /*  7470 */   205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
 /*  7480 */   251,  251,  251,  251,  251,  220,  221,  222,  251,  224,
 /*  7490 */   251,  129,  251,   57,  251,  230,  251,  232,  233,  251,
 /*  7500 */   251,  251,  251,  251,  251,  251,  144,  251,  251,  251,
 /*  7510 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7520 */   158,  251,  251,  251,  251,  251,  251,  251,  251,  167,
 /*  7530 */   251,  251,  170,  251,  172,  251,  251,  175,  251,  177,
 /*  7540 */   251,  251,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  7550 */   114,  251,  251,  117,  118,  119,  251,  251,  251,  251,
 /*  7560 */   251,  251,  129,  251,  202,  203,  204,  205,  206,  207,
 /*  7570 */   208,  209,  210,  211,  212,  213,  214,  144,  251,  251,
 /*  7580 */   251,  251,  220,  221,  222,  251,  224,  251,  251,  251,
 /*  7590 */   251,  158,  230,  251,  232,  233,  251,  251,  251,  251,
 /*  7600 */   167,  251,  251,  170,  251,  172,  251,  251,  175,  251,
 /*  7610 */   177,  251,  251,  251,  251,  251,  251,  251,  251,   13,
 /*  7620 */   251,  251,  251,  251,  251,  251,  251,  251,  251,   23,
 /*  7630 */   251,  251,  251,  251,  251,  251,  203,  204,  205,  206,
 /*  7640 */   207,  208,  209,  210,  211,  212,  213,  214,  251,  251,
 /*  7650 */   251,  251,  251,  220,  221,  222,  251,  224,  251,  129,
 /*  7660 */   251,  251,   56,  230,  251,  232,  233,  251,  251,  251,
 /*  7670 */   251,  251,  251,  251,  144,  251,  251,  251,  251,  251,
 /*  7680 */   251,  251,  251,  251,  251,  251,  251,  251,  158,  251,
 /*  7690 */   251,  251,  251,  251,  251,  251,  251,  167,  251,  251,
 /*  7700 */   170,  251,  172,  251,  251,  175,  251,  177,  251,  103,
 /*  7710 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  7720 */   114,  251,  251,  251,  118,  119,  120,  251,  122,  251,
 /*  7730 */   129,  251,  251,  203,  204,  205,  206,  207,  208,  209,
 /*  7740 */   210,  211,  212,  213,  214,  144,  251,  251,  251,  251,
 /*  7750 */   220,  221,  222,  251,  224,  251,  251,  251,  251,  158,
 /*  7760 */   230,  251,  232,  233,  251,  251,  251,  251,  167,  251,
 /*  7770 */   251,  170,  251,  172,  251,  251,  175,  251,  177,  251,
 /*  7780 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  129,
 /*  7790 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7800 */   251,  251,  251,  251,  144,  204,  205,  206,  207,  208,
 /*  7810 */   209,  210,  211,  212,  213,  214,  251,  251,  158,  251,
 /*  7820 */   251,  220,  221,  222,  251,  224,  251,  167,  251,  251,
 /*  7830 */   170,  230,  172,  232,  233,  175,  251,  177,  251,  251,
 /*  7840 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7850 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7860 */   129,  251,  251,  251,  204,  205,  206,  207,  208,  209,
 /*  7870 */   210,  211,  212,  213,  214,  144,  251,  251,  251,  251,
 /*  7880 */   220,  221,  222,  143,  224,  145,  251,  251,  251,  158,
 /*  7890 */   230,  251,  232,  233,  251,  251,  251,  251,  167,  251,
 /*  7900 */   251,  170,  162,  172,  251,  251,  175,  251,  177,  169,
 /*  7910 */   251,  251,  172,  251,  251,  175,  251,  251,  251,  251,
 /*  7920 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  7930 */   251,  251,  251,  251,  251,  204,  205,  206,  207,  208,
 /*  7940 */   209,  210,  211,  212,  213,  214,  251,  251,  251,  251,
 /*  7950 */   251,  220,  221,  222,  251,  224,  251,  251,  251,  251,
 /*  7960 */   251,  230,  251,  232,  233,  225,  226,  227,  251,  251,
 /*  7970 */   230,  251,  232,  233,  234,  235,  236,  237,  251,  251,
 /*  7980 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  7990 */   129,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  8000 */   251,  251,  251,  251,  251,  144,  251,  251,  251,  251,
 /*  8010 */   251,  251,  251,  143,  251,  145,  251,  251,  251,  158,
 /*  8020 */   251,  251,  251,  251,  251,  251,  251,  251,  167,  251,
 /*  8030 */   251,  170,  162,  172,  251,  251,  175,  251,  177,  169,
 /*  8040 */   251,  251,  172,  251,  251,  175,  251,  251,  251,  251,
 /*  8050 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  8060 */   251,  251,  251,  251,  251,  251,  205,  206,  207,  208,
 /*  8070 */   209,  210,  211,  212,  213,  214,  251,  251,  251,  251,
 /*  8080 */   251,  220,  221,  222,  251,  224,  251,  251,  251,  251,
 /*  8090 */   251,  230,  251,  232,  233,  225,  226,  227,  251,  251,
 /*  8100 */   230,  251,  232,  233,  234,  235,  236,  237,  251,  251,
 /*  8110 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  8120 */   129,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  8130 */   251,  251,  251,  251,  251,  144,  251,  251,  251,  251,
 /*  8140 */   251,  251,  251,  129,  251,  251,  251,  251,  251,  158,
 /*  8150 */   251,  251,  251,  251,  251,  251,  251,  251,  167,  251,
 /*  8160 */   251,  170,  251,  172,  251,  251,  175,  251,  177,  251,
 /*  8170 */   251,  251,  158,  251,  251,  251,  251,  251,  251,  251,
 /*  8180 */   251,  251,  251,  251,  251,  251,  172,  251,  251,  175,
 /*  8190 */   251,  177,  251,  251,  251,  251,  205,  206,  207,  208,
 /*  8200 */   209,  210,  211,  212,  213,  214,  251,  251,  251,  251,
 /*  8210 */   251,  220,  221,  222,  251,  224,  251,  251,  251,  251,
 /*  8220 */   251,  230,  251,  232,  233,  129,  251,  251,  251,  251,
 /*  8230 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  251,
 /*  8240 */   144,  251,  251,  251,  230,  251,  232,  233,  251,  251,
 /*  8250 */   251,  251,  251,  251,  158,  251,  251,  251,  251,  251,
 /*  8260 */   251,  251,  251,  167,  251,  145,  170,  251,  172,  251,
 /*  8270 */   251,  175,  251,  177,  251,  251,  251,  251,  251,  251,
 /*  8280 */   251,  251,  162,  251,  251,  251,  251,  251,  251,  169,
 /*  8290 */   251,  251,  172,  251,  251,  175,  129,  251,  251,  251,
 /*  8300 */   251,  251,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  8310 */   214,  144,  251,  251,  251,  251,  220,  221,  222,  251,
 /*  8320 */   224,  251,  251,  251,  251,  158,  230,  251,  232,  233,
 /*  8330 */   251,  251,  251,  251,  167,  251,  251,  170,  251,  172,
 /*  8340 */   251,  251,  175,  251,  177,  225,  226,  227,  251,  251,
 /*  8350 */   230,  251,  232,  233,  251,  129,  251,  251,  251,  251,
 /*  8360 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  8370 */   144,  251,  251,  206,  207,  208,  209,  210,  211,  212,
 /*  8380 */   213,  214,  251,  251,  158,  251,  251,  220,  221,  222,
 /*  8390 */   251,  224,  251,  167,  251,  251,  170,  230,  172,  232,
 /*  8400 */   233,  175,  251,  177,  251,  251,  251,  251,  251,  251,
 /*  8410 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  8420 */   251,  251,  251,  251,  251,  251,  129,  251,  251,  251,
 /*  8430 */   251,  251,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  8440 */   214,  144,  251,  251,  251,  251,  220,  221,  222,  251,
 /*  8450 */   224,  251,  251,  145,  251,  158,  230,  149,  232,  233,
 /*  8460 */   251,  251,  251,  251,  167,  251,  251,  170,  251,  172,
 /*  8470 */   162,  251,  175,  251,  177,  251,  251,  169,  251,  251,
 /*  8480 */   172,  251,  174,  175,  176,  251,  251,  251,  251,  251,
 /*  8490 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  129,
 /*  8500 */   251,  251,  251,  206,  207,  208,  209,  210,  211,  212,
 /*  8510 */   213,  214,  251,  251,  251,  251,  251,  220,  221,  222,
 /*  8520 */   251,  224,  251,  251,  251,  251,  251,  230,  158,  232,
 /*  8530 */   233,  129,  251,  225,  226,  227,  251,  251,  230,  251,
 /*  8540 */   232,  233,  172,  251,  251,  175,  251,  177,  251,  241,
 /*  8550 */   242,  243,  244,  245,  246,  247,  248,  249,  251,    9,
 /*  8560 */   158,  251,  251,   13,  251,  251,  251,  251,  251,  167,
 /*  8570 */    20,   21,  170,   23,  172,  251,  251,  175,  251,  177,
 /*  8580 */   251,  251,  251,  251,  251,  251,  251,  251,   38,  251,
 /*  8590 */   220,  221,  222,  251,  224,  251,  251,  251,  251,  251,
 /*  8600 */   230,  251,  232,  233,  251,  251,   56,  251,  206,  207,
 /*  8610 */   208,  209,  210,  211,  212,  213,  214,  251,  251,  251,
 /*  8620 */   251,  251,  220,  221,  222,  251,  224,  251,  251,  251,
 /*  8630 */   251,  251,  230,  129,  232,  233,  251,  251,  251,   89,
 /*  8640 */    90,  251,  251,   93,   94,   95,  251,  251,   98,   99,
 /*  8650 */   100,  101,  251,  103,  104,  105,  251,  251,  251,  251,
 /*  8660 */   129,  251,  158,  251,  251,  251,  251,  117,  251,  119,
 /*  8670 */   120,  167,  122,  251,  170,  251,  172,  251,  251,  175,
 /*  8680 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  158,
 /*  8690 */   251,  251,  251,  251,  251,  251,  251,  251,  167,  251,
 /*  8700 */   251,  170,  251,  172,  251,  251,  175,  251,  177,  251,
 /*  8710 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  251,
 /*  8720 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  251,
 /*  8730 */   251,  251,  251,  251,  230,  251,  232,  233,  207,  208,
 /*  8740 */   209,  210,  211,  212,  213,  214,  129,  251,  251,  251,
 /*  8750 */   251,  220,  221,  222,  251,  224,  251,  251,  251,  251,
 /*  8760 */   251,  230,  251,  232,  233,  251,  251,  251,  251,  251,
 /*  8770 */   251,  251,  251,  251,    9,  158,  251,  251,   13,  251,
 /*  8780 */   251,  251,  251,  251,  167,   20,  251,  170,   23,  172,
 /*  8790 */   251,  251,  175,  251,  177,  251,  251,  251,  251,  251,
 /*  8800 */   251,  251,  251,   38,  251,  251,  251,  251,  251,  251,
 /*  8810 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  8820 */   251,   56,  251,  251,  207,  208,  209,  210,  211,  212,
 /*  8830 */   213,  214,  251,  251,  251,  251,  251,  220,  221,  222,
 /*  8840 */   251,  224,  251,  251,  251,  251,  251,  230,    9,  232,
 /*  8850 */   233,  251,   13,  251,   89,   90,  251,  251,   93,   94,
 /*  8860 */    95,  251,   23,   98,   99,  100,  101,  251,  103,  104,
 /*  8870 */   105,  251,  251,  251,  251,  251,  251,   38,  251,  251,
 /*  8880 */   251,  251,  117,  251,  119,  120,  251,  122,  251,  251,
 /*  8890 */   251,  251,  251,  251,  251,   56,  251,  251,  251,  251,
 /*  8900 */   251,  251,  251,  251,  251,  251,   67,  251,  251,  251,
 /*  8910 */   251,  251,  251,  251,  251,  251,    9,  251,  251,  251,
 /*  8920 */    13,  251,  251,  251,  251,  251,  251,  251,   89,   90,
 /*  8930 */    23,  251,   93,   94,   95,  145,  251,   98,   99,  100,
 /*  8940 */   101,  251,  103,  104,  105,   38,  251,  251,  251,  251,
 /*  8950 */   251,  251,  251,  251,  251,  251,  117,  251,  119,  120,
 /*  8960 */   170,  122,  172,   56,   57,  175,    9,  251,  251,  251,
 /*  8970 */    13,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  8980 */    23,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  8990 */   251,  251,  251,  251,  251,   38,   89,   90,  251,  251,
 /*  9000 */    93,   94,   95,  251,  251,   98,   99,  100,  101,  251,
 /*  9010 */   103,  104,  105,   56,  251,  225,  226,  227,  251,  251,
 /*  9020 */   230,  251,  232,  233,  117,  129,  119,  120,  251,  122,
 /*  9030 */   251,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  9040 */   251,  251,  251,  251,  251,  251,   89,   90,  251,  251,
 /*  9050 */    93,   94,   95,  251,  158,   98,   99,  100,  101,  251,
 /*  9060 */   103,  104,  105,  167,  251,  251,  170,  251,  172,  251,
 /*  9070 */   251,  175,  251,  177,  117,  251,  119,  120,  251,  122,
 /*  9080 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9090 */   251,  251,  251,  129,  251,  251,  251,  251,  251,  251,
 /*  9100 */   251,  251,  251,  251,  208,  209,  210,  211,  212,  213,
 /*  9110 */   214,  251,  251,  251,  251,  251,  220,  221,  222,  251,
 /*  9120 */   224,  251,  158,  251,  251,  251,  230,  251,  232,  233,
 /*  9130 */   251,  167,  251,  251,  170,  251,  172,  251,  251,  175,
 /*  9140 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9150 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9160 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9170 */   251,  251,  208,  209,  210,  211,  212,  213,  214,  251,
 /*  9180 */   129,  251,  251,  251,  220,  221,  222,  251,  224,  251,
 /*  9190 */   251,  251,  251,  251,  230,  251,  232,  233,  251,  251,
 /*  9200 */   251,  251,  251,  251,  251,  251,  129,  251,  251,  158,
 /*  9210 */   251,  251,  251,  251,  251,  251,  251,  251,  167,  251,
 /*  9220 */   251,  170,  251,  172,  251,  251,  175,  251,  177,  251,
 /*  9230 */   251,  251,  251,  251,  251,  158,  251,  251,  251,  251,
 /*  9240 */   251,  251,  251,  251,  167,  251,  251,  170,  251,  172,
 /*  9250 */   251,  251,  175,  251,  177,  251,  251,  251,  251,  208,
 /*  9260 */   209,  210,  211,  212,  213,  214,  251,  251,  251,  251,
 /*  9270 */   251,  220,  221,  222,  251,  224,  251,  251,  251,  251,
 /*  9280 */   251,  230,  251,  232,  233,  251,  209,  210,  211,  212,
 /*  9290 */   213,  214,  251,  251,  251,  251,  251,  220,  221,  222,
 /*  9300 */   251,  224,  129,  251,  251,  251,  251,  230,  251,  232,
 /*  9310 */   233,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9320 */   251,  251,  251,  251,  251,  251,  251,  129,  251,  251,
 /*  9330 */   251,  158,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9340 */   167,  251,  251,  170,  251,  172,  251,  251,  175,  251,
 /*  9350 */   177,  251,  251,  251,  251,  251,  158,  251,  251,  251,
 /*  9360 */   251,  251,  251,  251,  251,  167,  251,  251,  170,  251,
 /*  9370 */   172,  251,  251,  175,  251,  177,  251,  251,  251,  251,
 /*  9380 */   251,  251,  209,  210,  211,  212,  213,  214,  251,  251,
 /*  9390 */   251,  251,  251,  220,  221,  222,  251,  224,  251,  251,
 /*  9400 */   251,  251,  251,  230,  251,  232,  233,  209,  210,  211,
 /*  9410 */   212,  213,  214,  129,  251,  251,  251,  251,  220,  221,
 /*  9420 */   222,  251,  224,  251,  251,  251,  251,  251,  230,  251,
 /*  9430 */   232,  233,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9440 */   251,  251,  158,  145,  251,  251,  251,  251,  251,  251,
 /*  9450 */   251,  167,  251,  251,  170,  251,  172,  251,  251,  175,
 /*  9460 */   162,  177,  251,  251,  251,  251,  251,  169,  251,  251,
 /*  9470 */   172,  251,  251,  175,  251,  251,  251,  251,  251,  251,
 /*  9480 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9490 */   251,  251,  251,  209,  210,  211,  212,  213,  214,  251,
 /*  9500 */   251,  251,  251,  251,  220,  221,  222,  251,  224,  251,
 /*  9510 */   251,  251,  251,  251,  230,  251,  232,  233,  251,  251,
 /*  9520 */   251,  251,  251,  225,  226,  227,  251,  129,  230,  251,
 /*  9530 */   232,  233,  251,  251,  251,  251,  251,  251,  251,  241,
 /*  9540 */   242,  243,  244,  245,  246,  247,  248,  249,  251,  251,
 /*  9550 */   251,  251,  129,  251,  251,  251,  158,  251,  251,  251,
 /*  9560 */   251,  251,  251,  251,  251,  167,  251,  251,  170,  251,
 /*  9570 */   172,  251,  251,  175,  251,  177,  251,  251,  251,  251,
 /*  9580 */   251,  158,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9590 */   167,  251,  251,  170,  251,  172,  251,  251,  175,  251,
 /*  9600 */   177,  251,  251,  251,  251,  251,  251,  209,  210,  211,
 /*  9610 */   212,  213,  214,  251,  251,  251,  251,  251,  220,  221,
 /*  9620 */   222,  251,  224,  129,  251,  251,  251,  251,  230,  251,
 /*  9630 */   232,  233,  209,  210,  211,  212,  213,  214,  251,  251,
 /*  9640 */   251,  251,  251,  220,  221,  222,  251,  224,  251,  251,
 /*  9650 */   251,  251,  158,  230,  129,  232,  233,  251,  251,  251,
 /*  9660 */   251,  167,  251,  251,  170,  251,  172,  251,  251,  175,
 /*  9670 */   251,  177,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9680 */   251,  251,  129,  158,  251,  251,  251,  251,  251,  251,
 /*  9690 */   251,  251,  167,  251,  251,  170,  251,  172,  251,  251,
 /*  9700 */   175,  251,  177,  209,  210,  211,  212,  213,  214,  251,
 /*  9710 */   251,  158,  251,  251,  220,  221,  222,  251,  224,  251,
 /*  9720 */   251,  251,  251,  251,  230,  172,  232,  233,  175,  251,
 /*  9730 */   177,  251,  251,  251,  209,  210,  211,  212,  213,  214,
 /*  9740 */   251,  129,  251,  251,  251,  220,  221,  222,  251,  224,
 /*  9750 */   251,  251,  251,  251,  251,  230,  251,  232,  233,  251,
 /*  9760 */   251,  251,  209,  210,  251,  251,  213,  214,  251,  251,
 /*  9770 */   158,  251,  251,  220,  221,  222,  251,  224,  251,  251,
 /*  9780 */   251,  251,  251,  230,  172,  232,  233,  175,  251,  177,
 /*  9790 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9800 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9810 */   251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
 /*  9820 */   251,  209,  210,  251,  251,  213,  214,  251,  251,  251,
 /*  9830 */   251,  251,  220,  221,  222,  251,  224,  251,  251,  251,
 /*  9840 */   251,  251,  230,  251,  232,  233,
);
    const YY_SHIFT_USE_DFLT = -96;
    const YY_SHIFT_MAX = 352;
    static public $yy_shift_ofst = array(
 /*     0 */  3586, 1849, 2073, 1961, 3586, 2870, 2758, 2646, 3586, 3586,
 /*    10 */  3586, 3586, 3586, 3586, 2982, 2409, 2185, 2297, 3586, 3586,
 /*    20 */  3586, 3586, 3586, 3586, 3698, 3698, 3698, 3698, 3698, 4882,
 /*    30 */  5556, 4994, 5106, 5106, 5106, 5106, 5106, 5106, 5106, 5556,
 /*    40 */  5521, 7436, 7606, 7606, 5298, 8550, 8907, 8765, 8765, 8957,
 /*    50 */  8839, 8957, 8957, 8957, 8957, 8957, 8957, 8957, 8957, 8957,
 /*    60 */  8957, 8957, 8957, 8957, 8957, 8957, 8957, 8957, 8957, 8957,
 /*    70 */  8957, 8957, 8957, 8957, 8957, 5172, 5172, 5172, 5172, 8957,
 /*    80 */  8957, 8957, 8957, 8957, 8957, 1817, 8957, 8957, 8957, 8957,
 /*    90 */  8957, 8957, 8957, 8957, 8957, 8957, 8957, 8957, 8957, 5172,
 /*   100 */  5172, 3836, 2842, 5786, 5786, 2614, 1629, 3554, 3763, 3763,
 /*   110 */  1629,  144,  144,  280,  280,  279,  280,  404,  415,  -95,
 /*   120 */   -18,  -95,  141,  221,  141,  141,   41,  290,  290,  240,
 /*   130 */   347,  167,  240,  242,  167,  141,  167,  226,  167,  526,
 /*   140 */   582,  523,  220,  419,  619,  -72,  752,  322,  322,  322,
 /*   150 */    30,   72,  515,  515,  419,   72,  290,  233,  290,  445,
 /*   160 */   445,  445,   72,  233,  290,  593,  376,  290,  619,  619,
 /*   170 */   849,  752,  836,  619,  778,  619, 1949, 1949, 1949,  154,
 /*   180 */   161,  133,   20,  133,   73,   20,  133,   20,   25,   35,
 /*   190 */    19,   19,   19,   19,   67,  259,  461,   19,   19,  528,
 /*   200 */    19,   19,  452,   19,  536,  117,  619,  567,  681,  384,
 /*   210 */   567,  384,  -72,  619,  -72,  778,  567,  567,  117,  567,
 /*   220 */   567,  567,  117,  567,  619,  -72,  849,  849,  567,  567,
 /*   230 */   792,  181,  567,  567,  181,  567,  849,  849,  849,  812,
 /*   240 */   567,  849,  681,  904,  -72,  567,  567,  681,  849,  567,
 /*   250 */   567,  567,  668,  619,  668,  384,  567,  384,  117,  567,
 /*   260 */   567,  619,  567,  181,  -72,  117,  384,  181,  117,  181,
 /*   270 */   561, 4756,   84,   40,  285,  190,  459,  459,  459,  459,
 /*   280 */   135,  285,  459,  135,  459,  135,  367,  135,  285,  704,
 /*   290 */   710,  746,  745,  741,  736,  742,  718,  735,  734,  757,
 /*   300 */   755,  732,  763,  524,  774,  728,  724,  756,  524,  760,
 /*   310 */   524,  737,  524,  524,  716,  524,  524,  709,  706,  698,
 /*   320 */   717,  524,  524,  524,  524,  524,  524,  730,  733,  524,
 /*   330 */   715,  754,  524,  524,  524,  524,  705,  711,  692,  663,
 /*   340 */   749,  748,  524,  626,  558,  650,  524,  524,  587,  524,
 /*   350 */   524,  624,  636,
);
    const YY_REDUCE_USE_DFLT = -227;
    const YY_REDUCE_MAX = 270;
    static public $yy_reduce_ofst = array(
 /*     0 */   368, -127,   -4,  119,  243, 1112,  616,  492,  864, 1484,
 /*    10 */   740,  988, 1236, 1360, 1607, 1607, 1607, 1607, 1607, 1607,
 /*    20 */  1607, 1607, 1607, 1607, 2404, 2977, 3222, 3100, 3344, 3794,
 /*    30 */  3685, 4358, 4264, 3888, 3982, 4170, 4546, 4076, 4452, 4640,
 /*    40 */  5093, 5130, 5256, 5225, 4794, 5350, 5553, 5647, 5850, 5753,
 /*    50 */  6018, 6186, 6425, 7265, 6858, 6690, 6354, 6257, 5921, 6089,
 /*    60 */  6593, 7194, 6929, 6761, 6522, 7026, 7097, 7362, 7530, 7433,
 /*    70 */  7601, 7660, 7731, 7861, 7991, 7740, 5373, 7870, 4906, 8226,
 /*    80 */  8297, 8167, 8096, 8504, 8402, 8308, 8617, 8531, 8896, 8964,
 /*    90 */  9051, 9423, 9525, 9494, 9173, 9077, 9398, 9198, 9284, 9298,
 /*   100 */  8120, 8790, 4683, 9612, 9553, 3590, 5518, 2592, 8370, 8014,
 /*   110 */  5677, 5221, 1872,  185,  -33, 3449,  -58, 3900, 1712,  177,
 /*   120 */     4,  -98,   61,  -80, -117,   82,  -79,    4,  287,  330,
 /*   130 */  -166,  310,  105,   96,  363,  264,  353,  234, -114,  120,
 /*   140 */  -119,  152,   96, -112,  250,  155, -166,  449,  449,  449,
 /*   150 */   413,  446,  358,  343,  412,  426,  381,  378,  175,  414,
 /*   160 */   414,  414,  493,  470,  502,  460,  503,  514,  342,  476,
 /*   170 */   500,  352,  179,   59,  271,  332,  676,  676,  676,  660,
 /*   180 */   731,  703,  725,  703,  739,  725,  703,  725,  751,  761,
 /*   190 */   722,  714,  712,  723,  743,  632,  726,  687,  686,  682,
 /*   200 */   738,  643,  670,  645,  685,  583,  629,  549,  630,  623,
 /*   210 */   584,  667,  700,  673,  707,  641,  585,  589,  596,  644,
 /*   220 */   719,  713,  720,  708,  779,  791,  777,  776,  658,  546,
 /*   230 */   688,  674,  647,  646,  665,  651,  789,  802,  826,  765,
 /*   240 */   632,  806,  762,  783,  772,  672,  675,  753,  620,  437,
 /*   250 */   457,  434,  509,  505,  516,  530,  477,  533,  462,  473,
 /*   260 */   465,  532,  471,  440,  382,  158,  206, -226,  187,  435,
 /*   270 */   401,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 1 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 2 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 3 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 4 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 5 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 6 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 7 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 8 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 9 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 10 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 11 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 12 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 13 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 14 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 15 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 16 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 17 */ array(9, 13, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 18 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 19 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 20 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 21 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 22 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 23 */ array(9, 13, 19, 20, 22, 23, 26, 27, 28, 29, 30, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 24 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 38, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 25 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 38, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 26 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 38, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 27 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 38, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 28 */ array(9, 13, 19, 20, 22, 23, 26, 27, 29, 30, 38, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 29 */ array(9, 13, 23, 38, 56, 58, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 30 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 31 */ array(9, 13, 22, 23, 38, 56, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 32 */ array(9, 13, 23, 38, 56, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 33 */ array(9, 13, 23, 38, 56, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 34 */ array(9, 13, 23, 38, 56, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 35 */ array(9, 13, 23, 38, 56, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 36 */ array(9, 13, 23, 38, 56, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 37 */ array(9, 13, 23, 38, 56, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 38 */ array(9, 13, 23, 38, 56, 65, 66, 69, 70, 71, 72, 73, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 39 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, ),
        /* 40 */ array(13, 23, 56, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 122, ),
        /* 41 */ array(9, 13, 23, 57, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, ),
        /* 42 */ array(13, 23, 56, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 122, ),
        /* 43 */ array(13, 23, 56, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 122, ),
        /* 44 */ array(9, 13, 23, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, ),
        /* 45 */ array(9, 13, 20, 21, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 46 */ array(9, 13, 23, 38, 56, 57, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 47 */ array(9, 13, 20, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 48 */ array(9, 13, 20, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 49 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 50 */ array(9, 13, 23, 38, 56, 67, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 51 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 52 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 53 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 54 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 55 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 56 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 57 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 58 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 59 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 60 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 61 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 62 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 63 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 64 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 65 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 66 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 67 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 68 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 69 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 70 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 71 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 72 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 73 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 74 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 75 */ array(13, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, ),
        /* 76 */ array(13, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, ),
        /* 77 */ array(13, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, ),
        /* 78 */ array(13, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, ),
        /* 79 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 80 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 81 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 82 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 83 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 84 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 85 */ array(13, 26, 27, 30, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, ),
        /* 86 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 87 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 88 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 89 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 90 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 91 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 92 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 93 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 94 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 95 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 96 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 97 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 98 */ array(9, 13, 23, 38, 56, 89, 90, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 117, 119, 120, 122, ),
        /* 99 */ array(13, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, ),
        /* 100 */ array(13, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, ),
        /* 101 */ array(13, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 119, ),
        /* 102 */ array(13, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, ),
        /* 103 */ array(13, 23, 56, 98, 99, 100, 101, 103, 104, 105, 119, 120, 122, ),
        /* 104 */ array(13, 23, 56, 98, 99, 100, 101, 103, 104, 105, 119, 120, 122, ),
        /* 105 */ array(25, 26, 27, 28, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, ),
        /* 106 */ array(9, 23, 37, 117, 118, ),
        /* 107 */ array(25, 26, 27, 28, 106, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 108 */ array(13, 23, 56, 103, 104, 105, 119, 120, 122, ),
        /* 109 */ array(13, 23, 56, 103, 104, 105, 119, 120, 122, ),
        /* 110 */ array(9, 23, 37, 117, 118, ),
        /* 111 */ array(9, 23, 117, 118, ),
        /* 112 */ array(9, 23, 117, 118, ),
        /* 113 */ array(23, 37, 117, 118, ),
        /* 114 */ array(23, 37, 117, 118, ),
        /* 115 */ array(13, 56, 116, 121, ),
        /* 116 */ array(23, 37, 117, 118, ),
        /* 117 */ array(56, 116, 121, ),
        /* 118 */ array(13, 56, 116, ),
        /* 119 */ array(108, 109, 110, 111, ),
        /* 120 */ array(23, 38, 39, 119, ),
        /* 121 */ array(108, 109, 110, 111, ),
        /* 122 */ array(23, 117, 118, ),
        /* 123 */ array(13, 116, 121, ),
        /* 124 */ array(23, 117, 118, ),
        /* 125 */ array(23, 117, 118, ),
        /* 126 */ array(116, 121, ),
        /* 127 */ array(23, 119, ),
        /* 128 */ array(23, 119, ),
        /* 129 */ array(57, 117, 118, ),
        /* 130 */ array(38, 39, 119, ),
        /* 131 */ array(115, 117, 118, ),
        /* 132 */ array(57, 117, 118, ),
        /* 133 */ array(24, 56, 67, ),
        /* 134 */ array(115, 117, 118, ),
        /* 135 */ array(23, 117, 118, ),
        /* 136 */ array(115, 117, 118, ),
        /* 137 */ array(108, 110, 112, ),
        /* 138 */ array(115, 117, 118, ),
        /* 139 */ array(13, 116, ),
        /* 140 */ array(21, 23, ),
        /* 141 */ array(13, 116, ),
        /* 142 */ array(56, 67, ),
        /* 143 */ array(102, 115, ),
        /* 144 */ array(56, ),
        /* 145 */ array(116, ),
        /* 146 */ array(119, ),
        /* 147 */ array(85, 86, 115, 116, ),
        /* 148 */ array(85, 86, 115, 116, ),
        /* 149 */ array(85, 86, 115, 116, ),
        /* 150 */ array(21, 60, 61, ),
        /* 151 */ array(57, 102, ),
        /* 152 */ array(108, 110, ),
        /* 153 */ array(108, 110, ),
        /* 154 */ array(102, 115, ),
        /* 155 */ array(57, 102, ),
        /* 156 */ array(23, 119, ),
        /* 157 */ array(23, 117, ),
        /* 158 */ array(23, 119, ),
        /* 159 */ array(117, 118, ),
        /* 160 */ array(117, 118, ),
        /* 161 */ array(117, 118, ),
        /* 162 */ array(57, 102, ),
        /* 163 */ array(23, 117, ),
        /* 164 */ array(23, 119, ),
        /* 165 */ array(41, 42, ),
        /* 166 */ array(20, 23, ),
        /* 167 */ array(23, 119, ),
        /* 168 */ array(56, ),
        /* 169 */ array(56, ),
        /* 170 */ array(23, ),
        /* 171 */ array(119, ),
        /* 172 */ array(20, ),
        /* 173 */ array(56, ),
        /* 174 */ array(55, ),
        /* 175 */ array(56, ),
        /* 176 */ array(56, 67, 94, 95, 96, 97, ),
        /* 177 */ array(56, 67, 94, 95, 96, 97, ),
        /* 178 */ array(56, 67, 94, 95, 96, 97, ),
        /* 179 */ array(21, 60, 61, ),
        /* 180 */ array(26, 27, 30, ),
        /* 181 */ array(91, 92, 117, ),
        /* 182 */ array(7, 9, 10, ),
        /* 183 */ array(91, 92, 117, ),
        /* 184 */ array(31, 35, 36, ),
        /* 185 */ array(7, 9, 10, ),
        /* 186 */ array(91, 92, 117, ),
        /* 187 */ array(7, 9, 10, ),
        /* 188 */ array(21, 102, ),
        /* 189 */ array(22, 23, ),
        /* 190 */ array(20, 22, ),
        /* 191 */ array(20, 22, ),
        /* 192 */ array(20, 22, ),
        /* 193 */ array(20, 22, ),
        /* 194 */ array(21, 102, ),
        /* 195 */ array(31, 123, ),
        /* 196 */ array(20, 22, ),
        /* 197 */ array(20, 22, ),
        /* 198 */ array(20, 22, ),
        /* 199 */ array(22, 23, ),
        /* 200 */ array(20, 22, ),
        /* 201 */ array(20, 22, ),
        /* 202 */ array(20, 22, ),
        /* 203 */ array(20, 22, ),
        /* 204 */ array(22, 23, ),
        /* 205 */ array(110, ),
        /* 206 */ array(56, ),
        /* 207 */ array(123, ),
        /* 208 */ array(117, ),
        /* 209 */ array(57, ),
        /* 210 */ array(123, ),
        /* 211 */ array(57, ),
        /* 212 */ array(116, ),
        /* 213 */ array(56, ),
        /* 214 */ array(116, ),
        /* 215 */ array(55, ),
        /* 216 */ array(123, ),
        /* 217 */ array(123, ),
        /* 218 */ array(110, ),
        /* 219 */ array(123, ),
        /* 220 */ array(123, ),
        /* 221 */ array(123, ),
        /* 222 */ array(110, ),
        /* 223 */ array(123, ),
        /* 224 */ array(56, ),
        /* 225 */ array(116, ),
        /* 226 */ array(23, ),
        /* 227 */ array(23, ),
        /* 228 */ array(123, ),
        /* 229 */ array(123, ),
        /* 230 */ array(121, ),
        /* 231 */ array(13, ),
        /* 232 */ array(123, ),
        /* 233 */ array(123, ),
        /* 234 */ array(13, ),
        /* 235 */ array(123, ),
        /* 236 */ array(23, ),
        /* 237 */ array(23, ),
        /* 238 */ array(23, ),
        /* 239 */ array(118, ),
        /* 240 */ array(123, ),
        /* 241 */ array(23, ),
        /* 242 */ array(117, ),
        /* 243 */ array(20, ),
        /* 244 */ array(116, ),
        /* 245 */ array(123, ),
        /* 246 */ array(123, ),
        /* 247 */ array(117, ),
        /* 248 */ array(23, ),
        /* 249 */ array(123, ),
        /* 250 */ array(123, ),
        /* 251 */ array(123, ),
        /* 252 */ array(9, ),
        /* 253 */ array(56, ),
        /* 254 */ array(9, ),
        /* 255 */ array(57, ),
        /* 256 */ array(123, ),
        /* 257 */ array(57, ),
        /* 258 */ array(110, ),
        /* 259 */ array(123, ),
        /* 260 */ array(123, ),
        /* 261 */ array(56, ),
        /* 262 */ array(123, ),
        /* 263 */ array(13, ),
        /* 264 */ array(116, ),
        /* 265 */ array(110, ),
        /* 266 */ array(57, ),
        /* 267 */ array(13, ),
        /* 268 */ array(110, ),
        /* 269 */ array(13, ),
        /* 270 */ array(102, ),
        /* 271 */ array(5, 8, 24, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, ),
        /* 272 */ array(5, 8, 68, ),
        /* 273 */ array(24, 67, ),
        /* 274 */ array(89, 90, ),
        /* 275 */ array(22, 23, ),
        /* 276 */ array(87, 88, ),
        /* 277 */ array(87, 88, ),
        /* 278 */ array(87, 88, ),
        /* 279 */ array(87, 88, ),
        /* 280 */ array(4, 84, ),
        /* 281 */ array(89, 90, ),
        /* 282 */ array(87, 88, ),
        /* 283 */ array(4, 84, ),
        /* 284 */ array(87, 88, ),
        /* 285 */ array(4, 84, ),
        /* 286 */ array(23, 44, ),
        /* 287 */ array(4, 84, ),
        /* 288 */ array(89, 90, ),
        /* 289 */ array(68, ),
        /* 290 */ array(67, ),
        /* 291 */ array(22, ),
        /* 292 */ array(22, ),
        /* 293 */ array(22, ),
        /* 294 */ array(22, ),
        /* 295 */ array(22, ),
        /* 296 */ array(48, ),
        /* 297 */ array(24, ),
        /* 298 */ array(39, ),
        /* 299 */ array(22, ),
        /* 300 */ array(40, ),
        /* 301 */ array(57, ),
        /* 302 */ array(31, ),
        /* 303 */ array(123, ),
        /* 304 */ array(13, ),
        /* 305 */ array(56, ),
        /* 306 */ array(57, ),
        /* 307 */ array(24, ),
        /* 308 */ array(123, ),
        /* 309 */ array(22, ),
        /* 310 */ array(123, ),
        /* 311 */ array(20, ),
        /* 312 */ array(123, ),
        /* 313 */ array(123, ),
        /* 314 */ array(31, ),
        /* 315 */ array(123, ),
        /* 316 */ array(123, ),
        /* 317 */ array(22, ),
        /* 318 */ array(22, ),
        /* 319 */ array(31, ),
        /* 320 */ array(13, ),
        /* 321 */ array(123, ),
        /* 322 */ array(123, ),
        /* 323 */ array(123, ),
        /* 324 */ array(123, ),
        /* 325 */ array(123, ),
        /* 326 */ array(123, ),
        /* 327 */ array(23, ),
        /* 328 */ array(22, ),
        /* 329 */ array(123, ),
        /* 330 */ array(56, ),
        /* 331 */ array(2, ),
        /* 332 */ array(123, ),
        /* 333 */ array(123, ),
        /* 334 */ array(123, ),
        /* 335 */ array(123, ),
        /* 336 */ array(21, ),
        /* 337 */ array(21, ),
        /* 338 */ array(56, ),
        /* 339 */ array(57, ),
        /* 340 */ array(20, ),
        /* 341 */ array(22, ),
        /* 342 */ array(123, ),
        /* 343 */ array(22, ),
        /* 344 */ array(102, ),
        /* 345 */ array(22, ),
        /* 346 */ array(123, ),
        /* 347 */ array(123, ),
        /* 348 */ array(68, ),
        /* 349 */ array(123, ),
        /* 350 */ array(123, ),
        /* 351 */ array(22, ),
        /* 352 */ array(20, ),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
        /* 398 */ array(),
        /* 399 */ array(),
        /* 400 */ array(),
        /* 401 */ array(),
        /* 402 */ array(),
        /* 403 */ array(),
        /* 404 */ array(),
        /* 405 */ array(),
        /* 406 */ array(),
        /* 407 */ array(),
        /* 408 */ array(),
        /* 409 */ array(),
        /* 410 */ array(),
        /* 411 */ array(),
        /* 412 */ array(),
        /* 413 */ array(),
        /* 414 */ array(),
        /* 415 */ array(),
        /* 416 */ array(),
        /* 417 */ array(),
        /* 418 */ array(),
        /* 419 */ array(),
        /* 420 */ array(),
        /* 421 */ array(),
        /* 422 */ array(),
        /* 423 */ array(),
        /* 424 */ array(),
        /* 425 */ array(),
        /* 426 */ array(),
        /* 427 */ array(),
        /* 428 */ array(),
        /* 429 */ array(),
        /* 430 */ array(),
        /* 431 */ array(),
        /* 432 */ array(),
        /* 433 */ array(),
        /* 434 */ array(),
        /* 435 */ array(),
        /* 436 */ array(),
        /* 437 */ array(),
        /* 438 */ array(),
        /* 439 */ array(),
        /* 440 */ array(),
        /* 441 */ array(),
        /* 442 */ array(),
        /* 443 */ array(),
        /* 444 */ array(),
        /* 445 */ array(),
        /* 446 */ array(),
        /* 447 */ array(),
        /* 448 */ array(),
        /* 449 */ array(),
        /* 450 */ array(),
        /* 451 */ array(),
        /* 452 */ array(),
        /* 453 */ array(),
        /* 454 */ array(),
        /* 455 */ array(),
        /* 456 */ array(),
        /* 457 */ array(),
        /* 458 */ array(),
        /* 459 */ array(),
        /* 460 */ array(),
        /* 461 */ array(),
        /* 462 */ array(),
        /* 463 */ array(),
        /* 464 */ array(),
        /* 465 */ array(),
        /* 466 */ array(),
        /* 467 */ array(),
        /* 468 */ array(),
        /* 469 */ array(),
        /* 470 */ array(),
        /* 471 */ array(),
        /* 472 */ array(),
        /* 473 */ array(),
        /* 474 */ array(),
        /* 475 */ array(),
        /* 476 */ array(),
        /* 477 */ array(),
        /* 478 */ array(),
        /* 479 */ array(),
        /* 480 */ array(),
        /* 481 */ array(),
        /* 482 */ array(),
        /* 483 */ array(),
        /* 484 */ array(),
        /* 485 */ array(),
        /* 486 */ array(),
        /* 487 */ array(),
        /* 488 */ array(),
        /* 489 */ array(),
        /* 490 */ array(),
        /* 491 */ array(),
        /* 492 */ array(),
        /* 493 */ array(),
        /* 494 */ array(),
        /* 495 */ array(),
        /* 496 */ array(),
        /* 497 */ array(),
        /* 498 */ array(),
        /* 499 */ array(),
        /* 500 */ array(),
        /* 501 */ array(),
        /* 502 */ array(),
        /* 503 */ array(),
        /* 504 */ array(),
        /* 505 */ array(),
        /* 506 */ array(),
        /* 507 */ array(),
        /* 508 */ array(),
        /* 509 */ array(),
        /* 510 */ array(),
        /* 511 */ array(),
        /* 512 */ array(),
        /* 513 */ array(),
        /* 514 */ array(),
        /* 515 */ array(),
        /* 516 */ array(),
        /* 517 */ array(),
        /* 518 */ array(),
        /* 519 */ array(),
        /* 520 */ array(),
        /* 521 */ array(),
        /* 522 */ array(),
        /* 523 */ array(),
        /* 524 */ array(),
        /* 525 */ array(),
        /* 526 */ array(),
        /* 527 */ array(),
        /* 528 */ array(),
        /* 529 */ array(),
        /* 530 */ array(),
        /* 531 */ array(),
        /* 532 */ array(),
        /* 533 */ array(),
        /* 534 */ array(),
        /* 535 */ array(),
        /* 536 */ array(),
        /* 537 */ array(),
        /* 538 */ array(),
        /* 539 */ array(),
        /* 540 */ array(),
        /* 541 */ array(),
        /* 542 */ array(),
        /* 543 */ array(),
        /* 544 */ array(),
        /* 545 */ array(),
        /* 546 */ array(),
        /* 547 */ array(),
        /* 548 */ array(),
        /* 549 */ array(),
        /* 550 */ array(),
        /* 551 */ array(),
        /* 552 */ array(),
        /* 553 */ array(),
        /* 554 */ array(),
        /* 555 */ array(),
        /* 556 */ array(),
        /* 557 */ array(),
        /* 558 */ array(),
        /* 559 */ array(),
        /* 560 */ array(),
        /* 561 */ array(),
        /* 562 */ array(),
        /* 563 */ array(),
        /* 564 */ array(),
        /* 565 */ array(),
        /* 566 */ array(),
        /* 567 */ array(),
        /* 568 */ array(),
        /* 569 */ array(),
        /* 570 */ array(),
        /* 571 */ array(),
        /* 572 */ array(),
        /* 573 */ array(),
        /* 574 */ array(),
        /* 575 */ array(),
        /* 576 */ array(),
        /* 577 */ array(),
        /* 578 */ array(),
        /* 579 */ array(),
        /* 580 */ array(),
        /* 581 */ array(),
        /* 582 */ array(),
        /* 583 */ array(),
        /* 584 */ array(),
        /* 585 */ array(),
        /* 586 */ array(),
        /* 587 */ array(),
        /* 588 */ array(),
        /* 589 */ array(),
        /* 590 */ array(),
        /* 591 */ array(),
        /* 592 */ array(),
        /* 593 */ array(),
        /* 594 */ array(),
        /* 595 */ array(),
        /* 596 */ array(),
        /* 597 */ array(),
        /* 598 */ array(),
        /* 599 */ array(),
        /* 600 */ array(),
        /* 601 */ array(),
        /* 602 */ array(),
        /* 603 */ array(),
        /* 604 */ array(),
        /* 605 */ array(),
        /* 606 */ array(),
        /* 607 */ array(),
);
    static public $yy_default = array(
 /*     0 */   975,  975,  975,  975,  614,  975,  975,  975,  975,  975,
 /*    10 */   975,  975,  975,  975,  975,  975,  975,  975,  739,  706,
 /*    20 */   740,  608,  616,  707,  975,  975,  975,  975,  975,  975,
 /*    30 */   975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
 /*    40 */   975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
 /*    50 */   975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
 /*    60 */   975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
 /*    70 */   975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
 /*    80 */   975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
 /*    90 */   975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
 /*   100 */   975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
 /*   110 */   975,  975,  975,  975,  975,  880,  975,  879,  880,  975,
 /*   120 */   975,  975,  975,  880,  975,  975,  879,  975,  975,  975,
 /*   130 */   975,  975,  975,  831,  975,  698,  975,  921,  975,  880,
 /*   140 */   975,  870,  975,  975,  975,  873,  975,  784,  785,  783,
 /*   150 */   975,  975,  922,  923,  975,  975,  975,  975,  975,  891,
 /*   160 */   893,  629,  975,  975,  975,  702,  975,  975,  975,  975,
 /*   170 */   975,  975,  975,  975,  975,  975,  810,  809,  813,  975,
 /*   180 */   975,  795,  778,  794,  975,  776,  796,  777,  975,  975,
 /*   190 */   975,  975,  975,  975,  975,  967,  975,  975,  975,  975,
 /*   200 */   975,  975,  975,  975,  975,  920,  975,  937,  975,  975,
 /*   210 */   929,  975,  975,  975,  975,  724,  943,  965,  918,  971,
 /*   220 */   927,  941,  926,  957,  975,  975,  975,  975,  961,  933,
 /*   230 */   851,  975,  947,  959,  975,  969,  975,  975,  623,  690,
 /*   240 */   967,  611,  975,  975,  975,  955,  951,  975,  975,  963,
 /*   250 */   945,  953,  886,  975,  884,  975,  931,  975,  924,  935,
 /*   260 */   949,  975,  939,  975,  975,  925,  975,  975,  919,  975,
 /*   270 */   753,  775,  975,  831,  791,  975,  789,  630,  786,  790,
 /*   280 */   781,  793,  788,  780,  787,  782,  975,  779,  792,  975,
 /*   290 */   696,  975,  975,  975,  975,  975,  975,  660,  975,  975,
 /*   300 */   975,  975,  975,  950,  881,  975,  975,  628,  954,  975,
 /*   310 */   940,  975,  932,  936,  975,  964,  948,  975,  975,  975,
 /*   320 */   869,  962,  946,  958,  970,  960,  952,  975,  975,  956,
 /*   330 */   975,  742,  944,  942,  966,  930,  975,  975,  975,  975,
 /*   340 */   975,  975,  928,  975,  752,  975,  938,  934,  975,  968,
 /*   350 */   972,  975,  975,  643,  644,  646,  680,  703,  728,  672,
 /*   360 */   732,  705,  688,  682,  678,  615,  685,  674,  654,  653,
 /*   370 */   681,  655,  651,  675,  652,  676,  650,  677,  645,  617,
 /*   380 */   647,  648,  673,  649,  689,  679,  701,  714,  736,  735,
 /*   390 */   734,  738,  741,  711,  712,  713,  715,  733,  720,  719,
 /*   400 */   716,  718,  721,  722,  726,  727,  723,  743,  710,  683,
 /*   410 */   610,  686,  687,  737,  725,  729,  730,  684,  748,  699,
 /*   420 */   745,  744,  708,  709,  704,  717,  747,  700,  746,  731,
 /*   430 */   834,  865,  826,  755,  854,  875,  876,  883,  882,  879,
 /*   440 */   877,  872,  871,  849,  848,  847,  895,  850,  857,  853,
 /*   450 */   852,  858,  885,  887,  908,  905,  916,  913,  911,  914,
 /*   460 */   909,  906,  917,  910,  907,  901,  900,  899,  888,  902,
 /*   470 */   912,  904,  903,  915,  868,  867,  890,  889,  626,  625,
 /*   480 */   797,  801,  815,  802,  814,  624,  622,  974,  973,  612,
 /*   490 */   609,  613,  618,  621,  620,  619,  803,  804,  749,  824,
 /*   500 */   823,  821,  800,  822,  866,  864,  825,  820,  812,  808,
 /*   510 */   807,  806,  805,  764,  798,  811,  799,  754,  827,  828,
 /*   520 */   635,  634,  633,  632,  637,  627,  641,  640,  638,  636,
 /*   530 */   631,  817,  769,  768,  767,  766,  770,  771,  774,  773,
 /*   540 */   772,  642,  669,  691,  668,  666,  664,  692,  693,  694,
 /*   550 */   697,  695,  663,  667,  658,  656,  639,  670,  661,  657,
 /*   560 */   665,  662,  659,  765,  819,  750,  897,  898,  896,  751,
 /*   570 */   830,  835,  833,  832,  894,  892,  859,  856,  855,  874,
 /*   580 */   860,  861,  878,  863,  862,  838,  839,  760,  759,  758,
 /*   590 */   757,  761,  762,  818,  816,  763,  756,  829,  840,  841,
 /*   600 */   837,  836,  842,  844,  843,  846,  845,  671,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 252;
    const YYSTACKDEPTH = 100;
    const block_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 608;
    const YYNRULE = 367;
    const YYERRORSYMBOL = 124;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'NOTEQUAL',    
  'EQUAL',         'LOGICALAND',    'BINARYAND',     'BINARYOR',    
  'LOGICALOR',     'AMPERSAND',     'BINARYXOR',     'UINDIRECTION',
  'UADRESS',       'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',       
  'UBRACKET',      'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',
  'LEFTFIGUREBRACKET',  'RIGHTFIGUREBRACKET',  'SEMICOLON',     'IDENTIFIER',  
  'ASSIGN',        'TYPENAMEKWD',   'CLASSKWD',      'STRUCTKWD',   
  'ENUMKWD',       'TEMPLATEKWD',   'UNIONKWD',      'COLON',       
  'PUBLICKWD',     'PROTECTEDKWD',  'PRIVATEKWD',    'SIGNALSKWD',  
  'SLOTSKWD',      'OPERATOROVERLOADDECLARATION',  'BINARYNOT',     'OUTER_CONSTRUCTOR_NAME',
  'PREPROCESSOR_ENDIF',  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ELSE',  'PREPROCESSOR_IFDEF',
  'CUSTOMTYPENAME',  'PREPROCESSOR_IF',  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_INCLUDE',
  'WHILEKWD',      'DOKWD',         'FORKWD',        'RETURNKWD',   
  'CONTINUEKWD',   'GOTOKWD',       'TRYKWD',        'CATCHKWD',    
  'LEFTROUNDBRACKET',  'RIGHTROUNDBRACKET',  'ELLIPSIS',      'SWITCHKWD',   
  'CASEKWD',       'DEFAULTKWD',    'IFKWD',         'TYPEDEF',     
  'BREAKKWD',      'NEWKWD',        'DELETE',        'LEFTSQUAREBRACKET',
  'RIGHTSQUAREBRACKET',  'STATICKWD',     'EXTERNKWD',     'REGISTERKWD', 
  'VOLATILEKWD',   'FRIENDKWD',     'BINARYXOR_ASSIGN',  'BINARYOR_ASSIGN',
  'BINARYAND_ASSIGN',  'RIGHTSHIFT_ASSIGN',  'LEFTSHIFT_ASSIGN',  'MODULO_ASSIGN',
  'DIVISION_ASSIGN',  'MULTIPLY_ASSIGN',  'PLUS_ASSIGN',   'MINUS_ASSIGN',
  'NOT_EQUAL',     'LESSER_OR_EQUAL',  'GREATER_OR_EQUAL',  'LEFTSHIFT',   
  'RIGHTSHIFT',    'MINUS',         'PLUS',          'MODULOSIGN',  
  'DIVISION',      'LOGICALNOT',    'DECREMENT',     'INCREMENT',   
  'DOT',           'RIGHTARROW',    'CONST_CAST',    'STATIC_CAST', 
  'DYNAMIC_CAST',  'REINTERPRET_CAST',  'COMMA',         'NUMERIC',     
  'CHARACTER',     'STRING',        'UNSIGNED',      'SIGNED',      
  'LONG',          'SHORT',         'INT',           'CHAR',        
  'DOUBLE',        'FLOAT',         'VOID',          'GREATER',     
  'LESSER',        'MULTIPLY',      'CONSTKWD',      'TYPENAME',    
  'SIZEOF',        'PREPROCESSOR_CONCAT',  'PREPROCESSOR_STRINGIFY',  'COMMENT',     
  'error',         'program',       'stmt_list',     'stmt_or_defined_macro',
  'namespace_definition_start',  'identifier',    'stmt',          'namespace_body',
  'start_of_empty_namespace',  'namespace_statements',  'class_or_union_or_struct',  'identified_type_meta_specifier_with_template_def',
  'type_meta_specifier_with_template_def',  'structure_body',  'nonidentified_type_meta_specifier_with_template_def',  'template_spec_list',
  'comma',         'template_spec',  'template_typename',  'type_or_type_ref_or_with_ptr',
  'expr_prec_7',   'builtintype',   'template_def',  'lesser',      
  'greater',       'type_meta_specifier',  'stmt_or_visibility_spec_list',  'stmt_or_visibility_spec',
  'visibility_spec_full',  'visibility_spec',  'signal_slots',  'enum_body',   
  'enum_value_list',  'enum_value',    'expr_atom',     'enum_definition_start',
  'type_or_type_with_qualifier',  'function_definition_without_type',  'type',          'lvalue',      
  'formal_args_list_with_or_without_const',  'function_body',  'operator_overload_declaration_type_modificators',  'ampersand',   
  'operator_overload_declaration_ptr',  'constkwd',      'multiply',      'operator_overload_declaration_without_type',
  'typename',      'formal_args_list',  'outer_constructor_name',  'namespace_resolve',
  'outer_destructor_name',  'leftroundbracket',  'rightroundbracket',  'arg_list',    
  'arg',           'preprocessor_cond',  'preprocessor_else_clauses',  'preprocessor_elif_list',
  'preprocessor_else',  'preprocessor_elif',  'expr_prec_10',  'expr_prec_11',
  'try_catch',     'try',           'catch_list',    'catch',       
  'expr_prec_11_or_ellipsis',  'switch_stmt',   'switch_case_list',  'case',        
  'if_then_else',  'if_then',       'lvalue_or_assignment_list',  'expr_list',   
  'type_with_qualifier',  'varqualifier',  'expr_prec_9',   'expr_binary_ops',
  'expr_or_equal',  'expr_prec_8',   'expr_prec_6',   'expr_prec_5', 
  'expr_prec_4',   'try_value_access',  'try_pointer_access',  'expr_prec_3', 
  'typecast',      'expr_prec_2',   'cpp_style_cast',  'lvalue_or_assignment',
  'initialization_list',  'initialization_list_argument_list',  'possibly_identifier_preceded_ref',  'possibly_idenitifer_preceded_ptrs',
  'assignable',    'scoped_identifier',  'preprocessor_stringify',  'preprocessor_concat',
  'sizeof',        'non_const_type',  'scoped_type',   'typename_or_instantiated_template_type',
  'template_instantiation_arguments',  'instantiated_template_type_on_in_namespace_resolve',  'namespace_resolve_terminal',  'typename_in_namespace_resolve',
  'instantiated_template_type_on_start_of_namespace_resolve',  'typename_on_start_of_namespace_resolve',  'type_ref_one',  'type_ref_two',
  'type_ref',      'type_or_type_ref',  'template_instantiation_argument_list',  'template_instantiation_arguments_begin',
  'template_instantiation_arguments_end',  'void',          'float',         'double',      
  'long',          'char',          'signed',        'unsigned',    
  'int',           'short',         'comment_list',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "namespace_definition_start ::= NAMESPACEKWD",
 /*   4 */ "namespace_definition_start ::= NAMESPACEKWD identifier",
 /*   5 */ "stmt ::= namespace_definition_start namespace_body",
 /*   6 */ "start_of_empty_namespace ::= LEFTFIGUREBRACKET",
 /*   7 */ "namespace_body ::= start_of_empty_namespace RIGHTFIGUREBRACKET",
 /*   8 */ "namespace_statements ::= stmt_list",
 /*   9 */ "namespace_body ::= LEFTFIGUREBRACKET namespace_statements RIGHTFIGUREBRACKET",
 /*  10 */ "stmt ::= class_or_union_or_struct",
 /*  11 */ "identified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def identifier",
 /*  12 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body identifier SEMICOLON",
 /*  13 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  14 */ "class_or_union_or_struct ::= identified_type_meta_specifier_with_template_def SEMICOLON",
 /*  15 */ "nonidentified_type_meta_specifier_with_template_def ::= type_meta_specifier_with_template_def",
 /*  16 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  17 */ "class_or_union_or_struct ::= nonidentified_type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  18 */ "template_spec_list ::= template_spec_list comma template_spec",
 /*  19 */ "template_spec_list ::= template_spec",
 /*  20 */ "template_spec ::= template_typename identifier",
 /*  21 */ "template_spec ::= template_typename identifier ASSIGN type_or_type_ref_or_with_ptr",
 /*  22 */ "template_spec ::= template_typename identifier ASSIGN expr_prec_7",
 /*  23 */ "template_typename ::= TYPENAMEKWD",
 /*  24 */ "template_typename ::= CLASSKWD",
 /*  25 */ "template_typename ::= STRUCTKWD",
 /*  26 */ "template_typename ::= ENUMKWD",
 /*  27 */ "template_typename ::= builtintype",
 /*  28 */ "template_def ::= TEMPLATEKWD lesser greater",
 /*  29 */ "template_def ::= TEMPLATEKWD lesser template_spec_list greater",
 /*  30 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  31 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  32 */ "type_meta_specifier ::= CLASSKWD",
 /*  33 */ "type_meta_specifier ::= STRUCTKWD",
 /*  34 */ "type_meta_specifier ::= UNIONKWD",
 /*  35 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  36 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  37 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  38 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  39 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  40 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  41 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  42 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  43 */ "visibility_spec ::= PUBLICKWD",
 /*  44 */ "visibility_spec ::= PROTECTEDKWD",
 /*  45 */ "visibility_spec ::= PRIVATEKWD",
 /*  46 */ "signal_slots ::= SIGNALSKWD",
 /*  47 */ "signal_slots ::= SLOTSKWD",
 /*  48 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  49 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  50 */ "enum_value_list ::= enum_value_list comma enum_value",
 /*  51 */ "enum_value_list ::= enum_value",
 /*  52 */ "enum_value ::= identifier",
 /*  53 */ "enum_value ::= identifier ASSIGN expr_atom",
 /*  54 */ "enum_definition_start ::= ENUMKWD identifier",
 /*  55 */ "stmt_or_defined_macro ::= enum_definition_start SEMICOLON",
 /*  56 */ "stmt_or_defined_macro ::= enum_definition_start enum_body SEMICOLON",
 /*  57 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  58 */ "stmt_or_defined_macro ::= enum_definition_start enum_body identifier SEMICOLON",
 /*  59 */ "stmt_or_defined_macro ::= ENUMKWD enum_body identifier SEMICOLON",
 /*  60 */ "stmt_or_defined_macro ::= type_or_type_with_qualifier function_definition_without_type",
 /*  61 */ "stmt_or_defined_macro ::= template_def type function_definition_without_type",
 /*  62 */ "function_definition_without_type ::= lvalue formal_args_list_with_or_without_const function_body",
 /*  63 */ "function_definition_without_type ::= operator_overload_declaration_type_modificators",
 /*  64 */ "operator_overload_declaration_type_modificators ::= ampersand operator_overload_declaration_ptr",
 /*  65 */ "operator_overload_declaration_type_modificators ::= operator_overload_declaration_ptr",
 /*  66 */ "operator_overload_declaration_ptr ::= constkwd multiply operator_overload_declaration_ptr",
 /*  67 */ "operator_overload_declaration_ptr ::= multiply operator_overload_declaration_ptr",
 /*  68 */ "operator_overload_declaration_ptr ::= operator_overload_declaration_without_type",
 /*  69 */ "operator_overload_declaration_without_type ::= OPERATOROVERLOADDECLARATION formal_args_list_with_or_without_const function_body",
 /*  70 */ "stmt_or_defined_macro ::= template_def typename formal_args_list function_body",
 /*  71 */ "stmt_or_defined_macro ::= typename formal_args_list function_body",
 /*  72 */ "stmt_or_defined_macro ::= BINARYNOT typename formal_args_list function_body",
 /*  73 */ "outer_constructor_name ::= namespace_resolve OUTER_CONSTRUCTOR_NAME",
 /*  74 */ "stmt_or_defined_macro ::= template_def outer_constructor_name formal_args_list function_body",
 /*  75 */ "stmt_or_defined_macro ::= outer_constructor_name formal_args_list function_body",
 /*  76 */ "outer_destructor_name ::= namespace_resolve BINARYNOT OUTER_CONSTRUCTOR_NAME",
 /*  77 */ "stmt_or_defined_macro ::= template_def outer_destructor_name formal_args_list function_body",
 /*  78 */ "stmt_or_defined_macro ::= outer_destructor_name formal_args_list function_body",
 /*  79 */ "function_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  80 */ "function_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  81 */ "function_body ::= SEMICOLON",
 /*  82 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  83 */ "formal_args_list_with_or_without_const ::= formal_args_list constkwd",
 /*  84 */ "formal_args_list ::= leftroundbracket rightroundbracket",
 /*  85 */ "formal_args_list ::= leftroundbracket arg_list rightroundbracket",
 /*  86 */ "arg_list ::= arg",
 /*  87 */ "arg_list ::= arg_list comma arg",
 /*  88 */ "arg ::= lvalue",
 /*  89 */ "arg ::= type_or_type_ref_or_with_ptr identifier",
 /*  90 */ "arg ::= type_or_type_ref_or_with_ptr",
 /*  91 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list PREPROCESSOR_ENDIF",
 /*  92 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses PREPROCESSOR_ENDIF",
 /*  93 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  94 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  95 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  96 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  97 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  98 */ "preprocessor_elif ::= PREPROCESSOR_ELIF stmt_list",
 /*  99 */ "preprocessor_else ::= PREPROCESSOR_ELSE stmt_list",
 /* 100 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF IDENTIFIER",
 /* 101 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF CUSTOMTYPENAME",
 /* 102 */ "preprocessor_cond ::= PREPROCESSOR_IF",
 /* 103 */ "stmt_or_defined_macro ::= PREPROCESSOR_DEFINE",
 /* 104 */ "stmt_or_defined_macro ::= stmt",
 /* 105 */ "stmt ::= PREPROCESSOR_INCLUDE",
 /* 106 */ "stmt ::= WHILEKWD leftroundbracket expr_prec_10 rightroundbracket stmt",
 /* 107 */ "stmt ::= DOKWD stmt WHILEKWD leftroundbracket expr_prec_11 rightroundbracket SEMICOLON",
 /* 108 */ "stmt ::= FORKWD leftroundbracket expr_prec_11 SEMICOLON expr_prec_11 SEMICOLON expr_prec_11 rightroundbracket stmt",
 /* 109 */ "stmt ::= RETURNKWD expr_prec_11 SEMICOLON",
 /* 110 */ "stmt ::= RETURNKWD SEMICOLON",
 /* 111 */ "stmt ::= CONTINUEKWD SEMICOLON",
 /* 112 */ "stmt ::= GOTOKWD identifier SEMICOLON",
 /* 113 */ "stmt ::= GOTOKWD typename SEMICOLON",
 /* 114 */ "stmt ::= IDENTIFIER COLON",
 /* 115 */ "stmt ::= try_catch",
 /* 116 */ "try_catch ::= try catch_list",
 /* 117 */ "try ::= TRYKWD LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 118 */ "try ::= TRYKWD LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 119 */ "catch_list ::= catch_list catch",
 /* 120 */ "catch_list ::= catch",
 /* 121 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 122 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 123 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 124 */ "expr_prec_11_or_ellipsis ::= ELLIPSIS",
 /* 125 */ "stmt ::= SEMICOLON",
 /* 126 */ "stmt ::= switch_stmt",
 /* 127 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 128 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET switch_case_list RIGHTFIGUREBRACKET",
 /* 129 */ "switch_case_list ::= case",
 /* 130 */ "switch_case_list ::= switch_case_list case",
 /* 131 */ "case ::= CASEKWD expr_atom COLON stmt_list",
 /* 132 */ "case ::= DEFAULTKWD COLON stmt_list",
 /* 133 */ "stmt ::= if_then_else",
 /* 134 */ "if_then_else ::= if_then",
 /* 135 */ "if_then_else ::= if_then ELSEKWD stmt",
 /* 136 */ "if_then ::= IFKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 137 */ "stmt ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 138 */ "stmt ::= TYPEDEF type IDENTIFIER SEMICOLON",
 /* 139 */ "stmt ::= BREAKKWD SEMICOLON",
 /* 140 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 141 */ "expr_prec_11 ::= NEWKWD expr_prec_10",
 /* 142 */ "expr_prec_11 ::= DELETE LEFTSQUAREBRACKET RIGHTSQUAREBRACKET expr_prec_10",
 /* 143 */ "expr_prec_11 ::= DELETE expr_prec_10",
 /* 144 */ "expr_prec_11 ::= type_or_type_with_qualifier lvalue_or_assignment_list",
 /* 145 */ "expr_prec_11 ::= expr_list",
 /* 146 */ "expr_list ::= expr_list comma expr_prec_10",
 /* 147 */ "expr_list ::= expr_prec_10",
 /* 148 */ "type_or_type_with_qualifier ::= type_with_qualifier",
 /* 149 */ "type_or_type_with_qualifier ::= type",
 /* 150 */ "type_with_qualifier ::= varqualifier type",
 /* 151 */ "varqualifier ::= STATICKWD",
 /* 152 */ "varqualifier ::= EXTERNKWD",
 /* 153 */ "varqualifier ::= REGISTERKWD",
 /* 154 */ "varqualifier ::= VOLATILEKWD",
 /* 155 */ "varqualifier ::= FRIENDKWD",
 /* 156 */ "expr_prec_10 ::= expr_prec_9 BINARYXOR_ASSIGN expr_prec_10",
 /* 157 */ "expr_prec_10 ::= expr_prec_9 BINARYOR_ASSIGN expr_prec_10",
 /* 158 */ "expr_prec_10 ::= expr_prec_9 BINARYAND_ASSIGN expr_prec_10",
 /* 159 */ "expr_prec_10 ::= expr_prec_9 RIGHTSHIFT_ASSIGN expr_prec_10",
 /* 160 */ "expr_prec_10 ::= expr_prec_9 LEFTSHIFT_ASSIGN expr_prec_10",
 /* 161 */ "expr_prec_10 ::= expr_prec_9 MODULO_ASSIGN expr_prec_10",
 /* 162 */ "expr_prec_10 ::= expr_prec_9 DIVISION_ASSIGN expr_prec_10",
 /* 163 */ "expr_prec_10 ::= expr_prec_9 MULTIPLY_ASSIGN expr_prec_10",
 /* 164 */ "expr_prec_10 ::= expr_prec_9 PLUS_ASSIGN expr_prec_10",
 /* 165 */ "expr_prec_10 ::= expr_prec_9 MINUS_ASSIGN expr_prec_10",
 /* 166 */ "expr_prec_10 ::= expr_prec_9 ASSIGN expr_prec_10",
 /* 167 */ "expr_prec_10 ::= expr_prec_9",
 /* 168 */ "expr_prec_9 ::= expr_prec_9 LOGICALAND expr_binary_ops",
 /* 169 */ "expr_prec_9 ::= expr_prec_9 LOGICALOR expr_binary_ops",
 /* 170 */ "expr_prec_9 ::= expr_binary_ops",
 /* 171 */ "expr_binary_ops ::= expr_binary_ops BINARYXOR expr_or_equal",
 /* 172 */ "expr_binary_ops ::= expr_binary_ops BINARYOR expr_or_equal",
 /* 173 */ "expr_binary_ops ::= expr_binary_ops ampersand expr_or_equal",
 /* 174 */ "expr_binary_ops ::= expr_or_equal",
 /* 175 */ "expr_or_equal ::= expr_or_equal NOT_EQUAL expr_prec_8",
 /* 176 */ "expr_or_equal ::= expr_or_equal EQUAL expr_prec_8",
 /* 177 */ "expr_or_equal ::= expr_prec_8",
 /* 178 */ "expr_prec_8 ::= expr_prec_8 LESSER_OR_EQUAL expr_prec_7",
 /* 179 */ "expr_prec_8 ::= expr_prec_8 GREATER_OR_EQUAL expr_prec_7",
 /* 180 */ "expr_prec_8 ::= expr_prec_8 greater expr_prec_7",
 /* 181 */ "expr_prec_8 ::= expr_prec_8 lesser expr_prec_7",
 /* 182 */ "expr_prec_8 ::= expr_prec_7",
 /* 183 */ "expr_prec_7 ::= expr_prec_7 LEFTSHIFT expr_prec_6",
 /* 184 */ "expr_prec_7 ::= expr_prec_7 RIGHTSHIFT expr_prec_6",
 /* 185 */ "expr_prec_7 ::= expr_prec_6",
 /* 186 */ "expr_prec_6 ::= expr_prec_6 MINUS expr_prec_5",
 /* 187 */ "expr_prec_6 ::= expr_prec_6 PLUS expr_prec_5",
 /* 188 */ "expr_prec_6 ::= expr_prec_5",
 /* 189 */ "expr_prec_5 ::= expr_prec_5 MODULOSIGN expr_prec_4",
 /* 190 */ "expr_prec_5 ::= expr_prec_5 DIVISION expr_prec_4",
 /* 191 */ "expr_prec_5 ::= expr_prec_5 multiply expr_prec_4",
 /* 192 */ "expr_prec_5 ::= expr_prec_4",
 /* 193 */ "expr_prec_4 ::= try_value_access multiply identifier",
 /* 194 */ "expr_prec_4 ::= try_pointer_access multiply identifier",
 /* 195 */ "expr_prec_4 ::= expr_prec_3",
 /* 196 */ "expr_prec_3 ::= ampersand expr_prec_3",
 /* 197 */ "expr_prec_3 ::= multiply expr_prec_3",
 /* 198 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 199 */ "expr_prec_3 ::= LOGICALNOT expr_prec_3",
 /* 200 */ "expr_prec_3 ::= BINARYNOT expr_prec_3",
 /* 201 */ "expr_prec_3 ::= MINUS expr_prec_2",
 /* 202 */ "expr_prec_3 ::= PLUS expr_prec_2",
 /* 203 */ "expr_prec_3 ::= DECREMENT expr_prec_3",
 /* 204 */ "expr_prec_3 ::= INCREMENT expr_prec_3",
 /* 205 */ "expr_prec_3 ::= expr_prec_2",
 /* 206 */ "expr_prec_2 ::= try_value_access identifier",
 /* 207 */ "expr_prec_2 ::= try_pointer_access identifier",
 /* 208 */ "expr_prec_2 ::= cpp_style_cast leftroundbracket expr_prec_11 rightroundbracket",
 /* 209 */ "expr_prec_2 ::= expr_prec_2 LEFTSQUAREBRACKET expr_prec_10 RIGHTSQUAREBRACKET",
 /* 210 */ "expr_prec_2 ::= expr_prec_2 leftroundbracket expr_list rightroundbracket",
 /* 211 */ "expr_prec_2 ::= expr_prec_2 leftroundbracket rightroundbracket",
 /* 212 */ "expr_prec_2 ::= expr_prec_2 INCREMENT",
 /* 213 */ "expr_prec_2 ::= expr_prec_2 DECREMENT",
 /* 214 */ "expr_prec_2 ::= expr_atom",
 /* 215 */ "try_value_access ::= expr_prec_2 DOT",
 /* 216 */ "try_pointer_access ::= expr_prec_2 RIGHTARROW",
 /* 217 */ "cpp_style_cast ::= CONST_CAST lesser type_or_type_ref_or_with_ptr greater",
 /* 218 */ "cpp_style_cast ::= STATIC_CAST lesser type_or_type_ref_or_with_ptr greater",
 /* 219 */ "cpp_style_cast ::= DYNAMIC_CAST lesser type_or_type_ref_or_with_ptr greater",
 /* 220 */ "cpp_style_cast ::= REINTERPRET_CAST lesser type_or_type_ref_or_with_ptr greater",
 /* 221 */ "lvalue_or_assignment_list ::= lvalue_or_assignment",
 /* 222 */ "lvalue_or_assignment_list ::= lvalue_or_assignment_list COMMA lvalue_or_assignment",
 /* 223 */ "lvalue_or_assignment ::= lvalue",
 /* 224 */ "lvalue_or_assignment ::= lvalue ASSIGN expr_prec_10",
 /* 225 */ "lvalue_or_assignment ::= lvalue ASSIGN initialization_list",
 /* 226 */ "initialization_list ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 227 */ "initialization_list ::= LEFTFIGUREBRACKET initialization_list_argument_list RIGHTFIGUREBRACKET",
 /* 228 */ "initialization_list_argument_list ::= expr_prec_10",
 /* 229 */ "initialization_list_argument_list ::= initialization_list",
 /* 230 */ "initialization_list_argument_list ::= initialization_list_argument_list comma expr_prec_10",
 /* 231 */ "initialization_list_argument_list ::= initialization_list_argument_list comma initialization_list",
 /* 232 */ "lvalue ::= possibly_identifier_preceded_ref",
 /* 233 */ "lvalue ::= lvalue LEFTSQUAREBRACKET expr_prec_9 RIGHTSQUAREBRACKET",
 /* 234 */ "possibly_identifier_preceded_ref ::= ampersand possibly_idenitifer_preceded_ptrs",
 /* 235 */ "possibly_identifier_preceded_ref ::= possibly_idenitifer_preceded_ptrs",
 /* 236 */ "possibly_idenitifer_preceded_ptrs ::= identifier",
 /* 237 */ "possibly_idenitifer_preceded_ptrs ::= multiply possibly_idenitifer_preceded_ptrs",
 /* 238 */ "possibly_idenitifer_preceded_ptrs ::= constkwd multiply possibly_idenitifer_preceded_ptrs",
 /* 239 */ "expr_atom ::= NUMERIC",
 /* 240 */ "expr_atom ::= assignable",
 /* 241 */ "expr_atom ::= CHARACTER",
 /* 242 */ "expr_atom ::= STRING",
 /* 243 */ "assignable ::= identifier",
 /* 244 */ "assignable ::= scoped_identifier",
 /* 245 */ "scoped_identifier ::= namespace_resolve identifier",
 /* 246 */ "expr_atom ::= leftroundbracket expr_list rightroundbracket",
 /* 247 */ "expr_atom ::= preprocessor_stringify identifier",
 /* 248 */ "expr_atom ::= preprocessor_stringify typename",
 /* 249 */ "expr_atom ::= identifier preprocessor_concat identifier",
 /* 250 */ "expr_atom ::= identifier preprocessor_concat typename",
 /* 251 */ "expr_atom ::= typename preprocessor_concat identifier",
 /* 252 */ "expr_atom ::= typename preprocessor_concat typename",
 /* 253 */ "expr_atom ::= sizeof leftroundbracket type_or_type_ref_or_with_ptr rightroundbracket",
 /* 254 */ "expr_atom ::= sizeof leftroundbracket expr_atom rightroundbracket",
 /* 255 */ "typecast ::= leftroundbracket type_or_type_ref_or_with_ptr rightroundbracket",
 /* 256 */ "type ::= constkwd non_const_type",
 /* 257 */ "type ::= non_const_type",
 /* 258 */ "non_const_type ::= builtintype",
 /* 259 */ "non_const_type ::= scoped_type",
 /* 260 */ "non_const_type ::= typename_or_instantiated_template_type",
 /* 261 */ "scoped_type ::= namespace_resolve typename template_instantiation_arguments",
 /* 262 */ "scoped_type ::= namespace_resolve typename",
 /* 263 */ "namespace_resolve ::= namespace_resolve instantiated_template_type_on_in_namespace_resolve namespace_resolve_terminal",
 /* 264 */ "namespace_resolve ::= namespace_resolve typename_in_namespace_resolve namespace_resolve_terminal",
 /* 265 */ "typename_in_namespace_resolve ::= typename",
 /* 266 */ "instantiated_template_type_on_in_namespace_resolve ::= typename template_instantiation_arguments",
 /* 267 */ "namespace_resolve ::= instantiated_template_type_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 268 */ "namespace_resolve ::= typename_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 269 */ "namespace_resolve ::= namespace_resolve_terminal typename_on_start_of_namespace_resolve namespace_resolve_terminal",
 /* 270 */ "instantiated_template_type_on_start_of_namespace_resolve ::= typename template_instantiation_arguments",
 /* 271 */ "typename_on_start_of_namespace_resolve ::= typename",
 /* 272 */ "typename_or_instantiated_template_type ::= typename",
 /* 273 */ "typename_or_instantiated_template_type ::= typename template_instantiation_arguments",
 /* 274 */ "type_ref_one ::= type ampersand",
 /* 275 */ "type_ref_two ::= type_ref_one ampersand",
 /* 276 */ "type_ref ::= type_ref_one",
 /* 277 */ "type_ref ::= type_ref_two",
 /* 278 */ "type_or_type_ref ::= type",
 /* 279 */ "type_or_type_ref ::= type_ref",
 /* 280 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref",
 /* 281 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr multiply",
 /* 282 */ "type_or_type_ref_or_with_ptr ::= type_or_type_ref_or_with_ptr constkwd multiply",
 /* 283 */ "template_instantiation_argument_list ::= type_or_type_ref_or_with_ptr",
 /* 284 */ "template_instantiation_argument_list ::= expr_atom",
 /* 285 */ "template_instantiation_argument_list ::= template_instantiation_argument_list comma type_or_type_ref_or_with_ptr",
 /* 286 */ "template_instantiation_argument_list ::= template_instantiation_argument_list comma expr_atom",
 /* 287 */ "template_instantiation_arguments_begin ::= lesser",
 /* 288 */ "template_instantiation_arguments_end ::= greater",
 /* 289 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_arguments_end",
 /* 290 */ "template_instantiation_arguments ::= template_instantiation_arguments_begin template_instantiation_argument_list template_instantiation_arguments_end",
 /* 291 */ "builtintype ::= void",
 /* 292 */ "builtintype ::= float",
 /* 293 */ "builtintype ::= double",
 /* 294 */ "builtintype ::= long double",
 /* 295 */ "builtintype ::= char",
 /* 296 */ "builtintype ::= signed char",
 /* 297 */ "builtintype ::= unsigned char",
 /* 298 */ "builtintype ::= int",
 /* 299 */ "builtintype ::= signed int",
 /* 300 */ "builtintype ::= unsigned int",
 /* 301 */ "builtintype ::= short int",
 /* 302 */ "builtintype ::= signed short int",
 /* 303 */ "builtintype ::= unsigned short int",
 /* 304 */ "builtintype ::= long int",
 /* 305 */ "builtintype ::= signed long int",
 /* 306 */ "builtintype ::= unsigned long int",
 /* 307 */ "builtintype ::= long long int",
 /* 308 */ "builtintype ::= signed long long int",
 /* 309 */ "builtintype ::= unsigned long long int",
 /* 310 */ "builtintype ::= short",
 /* 311 */ "builtintype ::= signed short",
 /* 312 */ "builtintype ::= unsigned short",
 /* 313 */ "builtintype ::= long",
 /* 314 */ "builtintype ::= signed long",
 /* 315 */ "builtintype ::= unsigned long",
 /* 316 */ "builtintype ::= long long",
 /* 317 */ "builtintype ::= signed long long",
 /* 318 */ "builtintype ::= unsigned long long",
 /* 319 */ "unsigned ::= UNSIGNED",
 /* 320 */ "unsigned ::= UNSIGNED comment_list",
 /* 321 */ "signed ::= SIGNED",
 /* 322 */ "signed ::= SIGNED comment_list",
 /* 323 */ "long ::= LONG",
 /* 324 */ "long ::= LONG comment_list",
 /* 325 */ "short ::= SHORT",
 /* 326 */ "short ::= SHORT comment_list",
 /* 327 */ "int ::= INT",
 /* 328 */ "int ::= INT comment_list",
 /* 329 */ "char ::= CHAR",
 /* 330 */ "char ::= CHAR comment_list",
 /* 331 */ "double ::= DOUBLE",
 /* 332 */ "double ::= DOUBLE comment_list",
 /* 333 */ "float ::= FLOAT",
 /* 334 */ "float ::= FLOAT comment_list",
 /* 335 */ "void ::= VOID",
 /* 336 */ "void ::= VOID comment_list",
 /* 337 */ "greater ::= GREATER",
 /* 338 */ "greater ::= GREATER comment_list",
 /* 339 */ "comma ::= COMMA",
 /* 340 */ "comma ::= COMMA comment_list",
 /* 341 */ "lesser ::= LESSER",
 /* 342 */ "lesser ::= LESSER comment_list",
 /* 343 */ "multiply ::= MULTIPLY",
 /* 344 */ "multiply ::= MULTIPLY comment_list",
 /* 345 */ "ampersand ::= AMPERSAND",
 /* 346 */ "ampersand ::= AMPERSAND comment_list",
 /* 347 */ "constkwd ::= CONSTKWD",
 /* 348 */ "constkwd ::= CONSTKWD comment_list",
 /* 349 */ "typename ::= TYPENAME",
 /* 350 */ "typename ::= TYPENAME comment_list",
 /* 351 */ "namespace_resolve_terminal ::= NAMESPACE_RESOLVE",
 /* 352 */ "namespace_resolve_terminal ::= NAMESPACE_RESOLVE comment_list",
 /* 353 */ "leftroundbracket ::= LEFTROUNDBRACKET",
 /* 354 */ "leftroundbracket ::= LEFTROUNDBRACKET comment_list",
 /* 355 */ "rightroundbracket ::= RIGHTROUNDBRACKET",
 /* 356 */ "rightroundbracket ::= RIGHTROUNDBRACKET comment_list",
 /* 357 */ "sizeof ::= SIZEOF",
 /* 358 */ "sizeof ::= SIZEOF comment_list",
 /* 359 */ "identifier ::= IDENTIFIER",
 /* 360 */ "identifier ::= IDENTIFIER comment_list",
 /* 361 */ "preprocessor_concat ::= PREPROCESSOR_CONCAT",
 /* 362 */ "preprocessor_concat ::= PREPROCESSOR_CONCAT comment_list",
 /* 363 */ "preprocessor_stringify ::= PREPROCESSOR_STRINGIFY",
 /* 364 */ "preprocessor_stringify ::= PREPROCESSOR_STRINGIFY comment_list",
 /* 365 */ "comment_list ::= comment_list COMMENT",
 /* 366 */ "comment_list ::= COMMENT",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param block_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new block_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 4 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 2 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 4 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 2 ),
  array( 'lhs' => 141, 'rhs' => 4 ),
  array( 'lhs' => 141, 'rhs' => 4 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 3 ),
  array( 'lhs' => 146, 'rhs' => 4 ),
  array( 'lhs' => 136, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 159, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 161, 'rhs' => 3 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 2 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
  array( 'lhs' => 179, 'rhs' => 3 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 4 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 5 ),
  array( 'lhs' => 130, 'rhs' => 7 ),
  array( 'lhs' => 130, 'rhs' => 9 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 2 ),
  array( 'lhs' => 189, 'rhs' => 3 ),
  array( 'lhs' => 189, 'rhs' => 4 ),
  array( 'lhs' => 190, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 6 ),
  array( 'lhs' => 191, 'rhs' => 7 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 6 ),
  array( 'lhs' => 193, 'rhs' => 7 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 4 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 5 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 4 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 4 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 3 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 3 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 3 ),
  array( 'lhs' => 202, 'rhs' => 3 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 3 ),
  array( 'lhs' => 203, 'rhs' => 3 ),
  array( 'lhs' => 203, 'rhs' => 3 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 204, 'rhs' => 3 ),
  array( 'lhs' => 204, 'rhs' => 3 ),
  array( 'lhs' => 204, 'rhs' => 1 ),
  array( 'lhs' => 205, 'rhs' => 3 ),
  array( 'lhs' => 205, 'rhs' => 3 ),
  array( 'lhs' => 205, 'rhs' => 3 ),
  array( 'lhs' => 205, 'rhs' => 3 ),
  array( 'lhs' => 205, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 3 ),
  array( 'lhs' => 207, 'rhs' => 3 ),
  array( 'lhs' => 207, 'rhs' => 3 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 3 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 2 ),
  array( 'lhs' => 213, 'rhs' => 2 ),
  array( 'lhs' => 213, 'rhs' => 4 ),
  array( 'lhs' => 213, 'rhs' => 4 ),
  array( 'lhs' => 213, 'rhs' => 4 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 2 ),
  array( 'lhs' => 213, 'rhs' => 2 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 2 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 214, 'rhs' => 4 ),
  array( 'lhs' => 214, 'rhs' => 4 ),
  array( 'lhs' => 214, 'rhs' => 4 ),
  array( 'lhs' => 214, 'rhs' => 4 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 3 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 3 ),
  array( 'lhs' => 215, 'rhs' => 3 ),
  array( 'lhs' => 216, 'rhs' => 2 ),
  array( 'lhs' => 216, 'rhs' => 3 ),
  array( 'lhs' => 217, 'rhs' => 1 ),
  array( 'lhs' => 217, 'rhs' => 1 ),
  array( 'lhs' => 217, 'rhs' => 3 ),
  array( 'lhs' => 217, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 4 ),
  array( 'lhs' => 218, 'rhs' => 2 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 2 ),
  array( 'lhs' => 219, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 221, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 4 ),
  array( 'lhs' => 158, 'rhs' => 4 ),
  array( 'lhs' => 212, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 2 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 226, 'rhs' => 3 ),
  array( 'lhs' => 226, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 231, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 232, 'rhs' => 2 ),
  array( 'lhs' => 233, 'rhs' => 1 ),
  array( 'lhs' => 227, 'rhs' => 1 ),
  array( 'lhs' => 227, 'rhs' => 2 ),
  array( 'lhs' => 234, 'rhs' => 2 ),
  array( 'lhs' => 235, 'rhs' => 2 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 237, 'rhs' => 1 ),
  array( 'lhs' => 237, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 3 ),
  array( 'lhs' => 238, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 239, 'rhs' => 1 ),
  array( 'lhs' => 240, 'rhs' => 1 ),
  array( 'lhs' => 228, 'rhs' => 2 ),
  array( 'lhs' => 228, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 4 ),
  array( 'lhs' => 145, 'rhs' => 4 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 247, 'rhs' => 1 ),
  array( 'lhs' => 247, 'rhs' => 2 ),
  array( 'lhs' => 246, 'rhs' => 1 ),
  array( 'lhs' => 246, 'rhs' => 2 ),
  array( 'lhs' => 244, 'rhs' => 1 ),
  array( 'lhs' => 244, 'rhs' => 2 ),
  array( 'lhs' => 249, 'rhs' => 1 ),
  array( 'lhs' => 249, 'rhs' => 2 ),
  array( 'lhs' => 248, 'rhs' => 1 ),
  array( 'lhs' => 248, 'rhs' => 2 ),
  array( 'lhs' => 245, 'rhs' => 1 ),
  array( 'lhs' => 245, 'rhs' => 2 ),
  array( 'lhs' => 243, 'rhs' => 1 ),
  array( 'lhs' => 243, 'rhs' => 2 ),
  array( 'lhs' => 242, 'rhs' => 1 ),
  array( 'lhs' => 242, 'rhs' => 2 ),
  array( 'lhs' => 241, 'rhs' => 1 ),
  array( 'lhs' => 241, 'rhs' => 2 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 2 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 2 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 2 ),
  array( 'lhs' => 230, 'rhs' => 1 ),
  array( 'lhs' => 230, 'rhs' => 2 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 2 ),
  array( 'lhs' => 224, 'rhs' => 1 ),
  array( 'lhs' => 224, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 223, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 2 ),
  array( 'lhs' => 222, 'rhs' => 1 ),
  array( 'lhs' => 222, 'rhs' => 2 ),
  array( 'lhs' => 250, 'rhs' => 2 ),
  array( 'lhs' => 250, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        8 => 6,
        7 => 7,
        9 => 9,
        10 => 10,
        19 => 10,
        23 => 10,
        24 => 10,
        25 => 10,
        26 => 10,
        27 => 10,
        31 => 10,
        32 => 10,
        33 => 10,
        34 => 10,
        37 => 10,
        40 => 10,
        43 => 10,
        44 => 10,
        45 => 10,
        46 => 10,
        51 => 10,
        63 => 10,
        65 => 10,
        68 => 10,
        88 => 10,
        90 => 10,
        145 => 10,
        148 => 10,
        149 => 10,
        221 => 10,
        223 => 10,
        228 => 10,
        229 => 10,
        232 => 10,
        235 => 10,
        236 => 10,
        244 => 10,
        258 => 10,
        259 => 10,
        260 => 10,
        272 => 10,
        276 => 10,
        277 => 10,
        278 => 10,
        279 => 10,
        280 => 10,
        283 => 10,
        284 => 10,
        319 => 10,
        321 => 10,
        323 => 10,
        325 => 10,
        327 => 10,
        329 => 10,
        331 => 10,
        333 => 10,
        335 => 10,
        337 => 10,
        339 => 10,
        341 => 10,
        343 => 10,
        345 => 10,
        347 => 10,
        349 => 10,
        351 => 10,
        353 => 10,
        355 => 10,
        357 => 10,
        359 => 10,
        361 => 10,
        363 => 10,
        366 => 10,
        11 => 11,
        12 => 12,
        16 => 12,
        13 => 13,
        17 => 13,
        14 => 14,
        15 => 15,
        18 => 18,
        20 => 20,
        21 => 21,
        22 => 21,
        28 => 28,
        29 => 29,
        30 => 30,
        35 => 35,
        36 => 36,
        38 => 38,
        39 => 39,
        170 => 39,
        174 => 39,
        41 => 41,
        42 => 42,
        47 => 47,
        257 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        58 => 58,
        59 => 59,
        60 => 60,
        61 => 61,
        62 => 62,
        69 => 62,
        64 => 64,
        66 => 66,
        67 => 67,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        89 => 89,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 100,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 112,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        133 => 126,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        132 => 132,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        146 => 146,
        147 => 147,
        167 => 147,
        177 => 147,
        182 => 147,
        185 => 147,
        188 => 147,
        192 => 147,
        195 => 147,
        205 => 147,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
        168 => 168,
        169 => 169,
        171 => 171,
        172 => 172,
        173 => 173,
        175 => 175,
        176 => 176,
        178 => 178,
        179 => 179,
        180 => 180,
        181 => 181,
        183 => 183,
        184 => 184,
        186 => 186,
        187 => 187,
        189 => 189,
        190 => 190,
        191 => 191,
        193 => 193,
        194 => 193,
        196 => 196,
        197 => 197,
        198 => 198,
        199 => 199,
        200 => 200,
        201 => 201,
        202 => 202,
        203 => 203,
        204 => 204,
        206 => 206,
        207 => 206,
        208 => 208,
        209 => 209,
        210 => 210,
        211 => 211,
        212 => 212,
        213 => 213,
        214 => 214,
        215 => 215,
        216 => 216,
        217 => 217,
        218 => 218,
        219 => 219,
        220 => 220,
        222 => 222,
        224 => 224,
        225 => 224,
        226 => 226,
        227 => 227,
        230 => 230,
        231 => 230,
        233 => 233,
        234 => 234,
        237 => 237,
        238 => 238,
        239 => 239,
        241 => 239,
        242 => 239,
        243 => 239,
        240 => 240,
        245 => 245,
        246 => 246,
        247 => 247,
        248 => 247,
        249 => 249,
        250 => 249,
        251 => 249,
        252 => 249,
        253 => 253,
        254 => 254,
        255 => 255,
        256 => 256,
        261 => 261,
        262 => 262,
        263 => 263,
        264 => 264,
        265 => 265,
        266 => 266,
        267 => 267,
        268 => 267,
        269 => 269,
        270 => 270,
        271 => 271,
        273 => 273,
        274 => 274,
        275 => 275,
        281 => 281,
        282 => 282,
        285 => 285,
        286 => 286,
        287 => 287,
        288 => 288,
        289 => 289,
        290 => 290,
        291 => 291,
        292 => 292,
        293 => 293,
        294 => 294,
        295 => 295,
        296 => 296,
        297 => 297,
        298 => 298,
        299 => 299,
        300 => 300,
        301 => 301,
        302 => 302,
        303 => 303,
        304 => 304,
        305 => 305,
        306 => 306,
        307 => 307,
        308 => 308,
        309 => 309,
        310 => 310,
        311 => 311,
        312 => 312,
        313 => 313,
        314 => 314,
        315 => 315,
        316 => 316,
        317 => 317,
        318 => 318,
        320 => 320,
        322 => 322,
        324 => 324,
        326 => 326,
        328 => 328,
        330 => 330,
        332 => 332,
        334 => 334,
        336 => 336,
        338 => 338,
        340 => 340,
        342 => 342,
        344 => 344,
        346 => 346,
        348 => 348,
        350 => 350,
        352 => 352,
        354 => 354,
        356 => 356,
        358 => 358,
        360 => 360,
        362 => 362,
        364 => 364,
        365 => 365,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 88 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 4723 "langs_src/parser_cpp_language.php"
#line 104 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4729 "langs_src/parser_cpp_language.php"
#line 109 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4735 "langs_src/parser_cpp_language.php"
#line 114 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->mapper->push_anonymous_type();
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4741 "langs_src/parser_cpp_language.php"
#line 119 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('namespace_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4749 "langs_src/parser_cpp_language.php"
#line 126 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('namespace', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4755 "langs_src/parser_cpp_language.php"
#line 131 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4761 "langs_src/parser_cpp_language.php"
#line 136 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4767 "langs_src/parser_cpp_language.php"
#line 146 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4773 "langs_src/parser_cpp_language.php"
#line 153 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4778 "langs_src/parser_cpp_language.php"
#line 157 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_constructable($this->yystack[$this->yyidx + 0]->minor->value());
	$this->mapper->push_introduced_type($this->yystack[$this->yyidx + 0]->minor->value(), $this->mapper->extract_template_parameters($this->yystack[$this->yyidx + -1]->minor));
	$this->_retvalue = $this->create_node('identified_type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4786 "langs_src/parser_cpp_language.php"
#line 164 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4792 "langs_src/parser_cpp_language.php"
#line 169 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4798 "langs_src/parser_cpp_language.php"
#line 174 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4804 "langs_src/parser_cpp_language.php"
#line 179 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->mapper->push_anonymous_type($this->mapper->extract_template_parameters($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4810 "langs_src/parser_cpp_language.php"
#line 198 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4816 "langs_src/parser_cpp_language.php"
#line 207 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4823 "langs_src/parser_cpp_language.php"
#line 213 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4830 "langs_src/parser_cpp_language.php"
#line 246 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4836 "langs_src/parser_cpp_language.php"
#line 251 "langs_src/parser_cpp_language.y"
    function yy_r29(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4842 "langs_src/parser_cpp_language.php"
#line 257 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4848 "langs_src/parser_cpp_language.php"
#line 278 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4855 "langs_src/parser_cpp_language.php"
#line 284 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->mapper->try_pop_introduced_type();
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4862 "langs_src/parser_cpp_language.php"
#line 294 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4868 "langs_src/parser_cpp_language.php"
#line 301 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4873 "langs_src/parser_cpp_language.php"
#line 309 "langs_src/parser_cpp_language.y"
    function yy_r41(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4879 "langs_src/parser_cpp_language.php"
#line 314 "langs_src/parser_cpp_language.y"
    function yy_r42(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4885 "langs_src/parser_cpp_language.php"
#line 335 "langs_src/parser_cpp_language.y"
    function yy_r47(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4890 "langs_src/parser_cpp_language.php"
#line 342 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4896 "langs_src/parser_cpp_language.php"
#line 347 "langs_src/parser_cpp_language.y"
    function yy_r49(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4902 "langs_src/parser_cpp_language.php"
#line 352 "langs_src/parser_cpp_language.y"
    function yy_r50(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4908 "langs_src/parser_cpp_language.php"
#line 361 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4914 "langs_src/parser_cpp_language.php"
#line 366 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4920 "langs_src/parser_cpp_language.php"
#line 372 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('enum_definition_start', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4927 "langs_src/parser_cpp_language.php"
#line 378 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4933 "langs_src/parser_cpp_language.php"
#line 383 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4939 "langs_src/parser_cpp_language.php"
#line 388 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4945 "langs_src/parser_cpp_language.php"
#line 393 "langs_src/parser_cpp_language.y"
    function yy_r58(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4951 "langs_src/parser_cpp_language.php"
#line 398 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('enum_definition', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4957 "langs_src/parser_cpp_language.php"
#line 405 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4963 "langs_src/parser_cpp_language.php"
#line 410 "langs_src/parser_cpp_language.y"
    function yy_r61(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4969 "langs_src/parser_cpp_language.php"
#line 415 "langs_src/parser_cpp_language.y"
    function yy_r62(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('function_definition_without_type', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4975 "langs_src/parser_cpp_language.php"
#line 424 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4981 "langs_src/parser_cpp_language.php"
#line 433 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4987 "langs_src/parser_cpp_language.php"
#line 438 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('operator_overload_declaration', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4993 "langs_src/parser_cpp_language.php"
#line 455 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4999 "langs_src/parser_cpp_language.php"
#line 461 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5005 "langs_src/parser_cpp_language.php"
#line 467 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('destructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5011 "langs_src/parser_cpp_language.php"
#line 475 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('outer_constructor_name', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5018 "langs_src/parser_cpp_language.php"
#line 481 "langs_src/parser_cpp_language.y"
    function yy_r74(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, E));
    }
#line 5025 "langs_src/parser_cpp_language.php"
#line 488 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5032 "langs_src/parser_cpp_language.php"
#line 494 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->mapper->clear_lookup_namespace();
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('outer_destructor_name', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5039 "langs_src/parser_cpp_language.php"
#line 501 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5045 "langs_src/parser_cpp_language.php"
#line 507 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('constructor', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5051 "langs_src/parser_cpp_language.php"
#line 512 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5057 "langs_src/parser_cpp_language.php"
#line 517 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5063 "langs_src/parser_cpp_language.php"
#line 522 "langs_src/parser_cpp_language.y"
    function yy_r81(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5069 "langs_src/parser_cpp_language.php"
#line 530 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5075 "langs_src/parser_cpp_language.php"
#line 535 "langs_src/parser_cpp_language.y"
    function yy_r83(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5081 "langs_src/parser_cpp_language.php"
#line 540 "langs_src/parser_cpp_language.y"
    function yy_r84(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5087 "langs_src/parser_cpp_language.php"
#line 545 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5093 "langs_src/parser_cpp_language.php"
#line 550 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5099 "langs_src/parser_cpp_language.php"
#line 555 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5105 "langs_src/parser_cpp_language.php"
#line 564 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5111 "langs_src/parser_cpp_language.php"
#line 576 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5117 "langs_src/parser_cpp_language.php"
#line 581 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5123 "langs_src/parser_cpp_language.php"
#line 586 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5129 "langs_src/parser_cpp_language.php"
#line 591 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5135 "langs_src/parser_cpp_language.php"
#line 596 "langs_src/parser_cpp_language.y"
    function yy_r95(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5141 "langs_src/parser_cpp_language.php"
#line 601 "langs_src/parser_cpp_language.y"
    function yy_r96(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5147 "langs_src/parser_cpp_language.php"
#line 606 "langs_src/parser_cpp_language.y"
    function yy_r97(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5153 "langs_src/parser_cpp_language.php"
#line 611 "langs_src/parser_cpp_language.y"
    function yy_r98(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5159 "langs_src/parser_cpp_language.php"
#line 616 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5165 "langs_src/parser_cpp_language.php"
#line 621 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 5171 "langs_src/parser_cpp_language.php"
#line 631 "langs_src/parser_cpp_language.y"
    function yy_r102(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 5177 "langs_src/parser_cpp_language.php"
#line 636 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 5183 "langs_src/parser_cpp_language.php"
#line 641 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5189 "langs_src/parser_cpp_language.php"
#line 646 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5195 "langs_src/parser_cpp_language.php"
#line 658 "langs_src/parser_cpp_language.y"
    function yy_r106(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5201 "langs_src/parser_cpp_language.php"
#line 670 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5207 "langs_src/parser_cpp_language.php"
#line 683 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5213 "langs_src/parser_cpp_language.php"
#line 691 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5219 "langs_src/parser_cpp_language.php"
#line 696 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5225 "langs_src/parser_cpp_language.php"
#line 704 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5231 "langs_src/parser_cpp_language.php"
#line 711 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5237 "langs_src/parser_cpp_language.php"
#line 721 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5243 "langs_src/parser_cpp_language.php"
#line 728 "langs_src/parser_cpp_language.y"
    function yy_r115(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5249 "langs_src/parser_cpp_language.php"
#line 733 "langs_src/parser_cpp_language.y"
    function yy_r116(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5255 "langs_src/parser_cpp_language.php"
#line 738 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5261 "langs_src/parser_cpp_language.php"
#line 743 "langs_src/parser_cpp_language.y"
    function yy_r118(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5267 "langs_src/parser_cpp_language.php"
#line 748 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5273 "langs_src/parser_cpp_language.php"
#line 753 "langs_src/parser_cpp_language.y"
    function yy_r120(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5279 "langs_src/parser_cpp_language.php"
#line 758 "langs_src/parser_cpp_language.y"
    function yy_r121(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5285 "langs_src/parser_cpp_language.php"
#line 763 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5291 "langs_src/parser_cpp_language.php"
#line 768 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5297 "langs_src/parser_cpp_language.php"
#line 773 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5303 "langs_src/parser_cpp_language.php"
#line 780 "langs_src/parser_cpp_language.y"
    function yy_r125(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5309 "langs_src/parser_cpp_language.php"
#line 787 "langs_src/parser_cpp_language.y"
    function yy_r126(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5315 "langs_src/parser_cpp_language.php"
#line 792 "langs_src/parser_cpp_language.y"
    function yy_r127(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5321 "langs_src/parser_cpp_language.php"
#line 797 "langs_src/parser_cpp_language.y"
    function yy_r128(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5327 "langs_src/parser_cpp_language.php"
#line 802 "langs_src/parser_cpp_language.y"
    function yy_r129(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5333 "langs_src/parser_cpp_language.php"
#line 807 "langs_src/parser_cpp_language.y"
    function yy_r130(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5339 "langs_src/parser_cpp_language.php"
#line 812 "langs_src/parser_cpp_language.y"
    function yy_r131(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5345 "langs_src/parser_cpp_language.php"
#line 817 "langs_src/parser_cpp_language.y"
    function yy_r132(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5351 "langs_src/parser_cpp_language.php"
#line 829 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 5357 "langs_src/parser_cpp_language.php"
#line 834 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5363 "langs_src/parser_cpp_language.php"
#line 839 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5369 "langs_src/parser_cpp_language.php"
#line 846 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5375 "langs_src/parser_cpp_language.php"
#line 851 "langs_src/parser_cpp_language.y"
    function yy_r138(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('typedef_declaration', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 5382 "langs_src/parser_cpp_language.php"
#line 858 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5388 "langs_src/parser_cpp_language.php"
#line 863 "langs_src/parser_cpp_language.y"
    function yy_r140(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5394 "langs_src/parser_cpp_language.php"
#line 870 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('new_kwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5400 "langs_src/parser_cpp_language.php"
#line 875 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_array', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5406 "langs_src/parser_cpp_language.php"
#line 880 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('delete_pointer', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5412 "langs_src/parser_cpp_language.php"
#line 886 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменных", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('variable_declaration', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5418 "langs_src/parser_cpp_language.php"
#line 897 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5424 "langs_src/parser_cpp_language.php"
#line 902 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5430 "langs_src/parser_cpp_language.php"
#line 917 "langs_src/parser_cpp_language.y"
    function yy_r150(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 5437 "langs_src/parser_cpp_language.php"
#line 923 "langs_src/parser_cpp_language.y"
    function yy_r151(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5443 "langs_src/parser_cpp_language.php"
#line 928 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5449 "langs_src/parser_cpp_language.php"
#line 933 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5455 "langs_src/parser_cpp_language.php"
#line 938 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5461 "langs_src/parser_cpp_language.php"
#line 943 "langs_src/parser_cpp_language.y"
    function yy_r155(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5467 "langs_src/parser_cpp_language.php"
#line 950 "langs_src/parser_cpp_language.y"
    function yy_r156(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryxor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5473 "langs_src/parser_cpp_language.php"
#line 955 "langs_src/parser_cpp_language.y"
    function yy_r157(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryor_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5479 "langs_src/parser_cpp_language.php"
#line 960 "langs_src/parser_cpp_language.y"
    function yy_r158(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binaryand_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5485 "langs_src/parser_cpp_language.php"
#line 965 "langs_src/parser_cpp_language.y"
    function yy_r159(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5491 "langs_src/parser_cpp_language.php"
#line 970 "langs_src/parser_cpp_language.y"
    function yy_r160(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5497 "langs_src/parser_cpp_language.php"
#line 975 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulo_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5503 "langs_src/parser_cpp_language.php"
#line 980 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5509 "langs_src/parser_cpp_language.php"
#line 985 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5515 "langs_src/parser_cpp_language.php"
#line 990 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5521 "langs_src/parser_cpp_language.php"
#line 995 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5527 "langs_src/parser_cpp_language.php"
#line 1000 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5533 "langs_src/parser_cpp_language.php"
#line 1012 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5539 "langs_src/parser_cpp_language.php"
#line 1017 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5545 "langs_src/parser_cpp_language.php"
#line 1026 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_xor', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5551 "langs_src/parser_cpp_language.php"
#line 1031 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_or', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5557 "langs_src/parser_cpp_language.php"
#line 1036 "langs_src/parser_cpp_language.y"
    function yy_r173(){
	// Well, that's what you get when you mix binary and and adress taking
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_and', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5564 "langs_src/parser_cpp_language.php"
#line 1046 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_notequal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5570 "langs_src/parser_cpp_language.php"
#line 1051 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5576 "langs_src/parser_cpp_language.php"
#line 1063 "langs_src/parser_cpp_language.y"
    function yy_r178(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5582 "langs_src/parser_cpp_language.php"
#line 1068 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater_or_equal', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5588 "langs_src/parser_cpp_language.php"
#line 1073 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_greater', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5594 "langs_src/parser_cpp_language.php"
#line 1078 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_lesser', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5600 "langs_src/parser_cpp_language.php"
#line 1090 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_leftshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5606 "langs_src/parser_cpp_language.php"
#line 1095 "langs_src/parser_cpp_language.y"
    function yy_r184(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_rightshift', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5612 "langs_src/parser_cpp_language.php"
#line 1107 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_minus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5618 "langs_src/parser_cpp_language.php"
#line 1112 "langs_src/parser_cpp_language.y"
    function yy_r187(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_plus', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5624 "langs_src/parser_cpp_language.php"
#line 1124 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_modulosign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5630 "langs_src/parser_cpp_language.php"
#line 1129 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_division', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5636 "langs_src/parser_cpp_language.php"
#line 1134 "langs_src/parser_cpp_language.y"
    function yy_r191(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_multiply', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5642 "langs_src/parser_cpp_language.php"
#line 1146 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_get_property', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5648 "langs_src/parser_cpp_language.php"
#line 1163 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_take_adress', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5654 "langs_src/parser_cpp_language.php"
#line 1168 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_dereference', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5660 "langs_src/parser_cpp_language.php"
#line 1173 "langs_src/parser_cpp_language.y"
    function yy_r198(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_typecast', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5666 "langs_src/parser_cpp_language.php"
#line 1178 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_logical_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5672 "langs_src/parser_cpp_language.php"
#line 1183 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_binary_not', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5678 "langs_src/parser_cpp_language.php"
#line 1188 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_minus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5684 "langs_src/parser_cpp_language.php"
#line 1193 "langs_src/parser_cpp_language.y"
    function yy_r202(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_unary_plus', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5690 "langs_src/parser_cpp_language.php"
#line 1198 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5696 "langs_src/parser_cpp_language.php"
#line 1203 "langs_src/parser_cpp_language.y"
    function yy_r204(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prefix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5702 "langs_src/parser_cpp_language.php"
#line 1215 "langs_src/parser_cpp_language.y"
    function yy_r206(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_property_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 5708 "langs_src/parser_cpp_language.php"
#line 1225 "langs_src/parser_cpp_language.y"
    function yy_r208(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5714 "langs_src/parser_cpp_language.php"
#line 1230 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_array_access', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5720 "langs_src/parser_cpp_language.php"
#line 1235 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5726 "langs_src/parser_cpp_language.php"
#line 1240 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_function_call', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5732 "langs_src/parser_cpp_language.php"
#line 1245 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_postfix_increment', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5738 "langs_src/parser_cpp_language.php"
#line 1250 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_postfix_decrement', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5744 "langs_src/parser_cpp_language.php"
#line 1255 "langs_src/parser_cpp_language.y"
    function yy_r214(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5750 "langs_src/parser_cpp_language.php"
#line 1262 "langs_src/parser_cpp_language.y"
    function yy_r215(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 5756 "langs_src/parser_cpp_language.php"
#line 1267 "langs_src/parser_cpp_language.y"
    function yy_r216(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 5762 "langs_src/parser_cpp_language.php"
#line 1274 "langs_src/parser_cpp_language.y"
    function yy_r217(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_const_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5768 "langs_src/parser_cpp_language.php"
#line 1279 "langs_src/parser_cpp_language.y"
    function yy_r218(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_static_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5774 "langs_src/parser_cpp_language.php"
#line 1284 "langs_src/parser_cpp_language.y"
    function yy_r219(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_dynamic_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5780 "langs_src/parser_cpp_language.php"
#line 1289 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('expr_reinterpret_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5786 "langs_src/parser_cpp_language.php"
#line 1300 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue_or_assignment_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5792 "langs_src/parser_cpp_language.php"
#line 1309 "langs_src/parser_cpp_language.y"
    function yy_r224(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('assign', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5798 "langs_src/parser_cpp_language.php"
#line 1319 "langs_src/parser_cpp_language.y"
    function yy_r226(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5804 "langs_src/parser_cpp_language.php"
#line 1324 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('initialization_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5810 "langs_src/parser_cpp_language.php"
#line 1338 "langs_src/parser_cpp_language.y"
    function yy_r230(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('initialization_list_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, C));
    }
#line 5816 "langs_src/parser_cpp_language.php"
#line 1352 "langs_src/parser_cpp_language.y"
    function yy_r233(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5822 "langs_src/parser_cpp_language.php"
#line 1357 "langs_src/parser_cpp_language.y"
    function yy_r234(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%ur(именительный)"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5828 "langs_src/parser_cpp_language.php"
#line 1370 "langs_src/parser_cpp_language.y"
    function yy_r237(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5834 "langs_src/parser_cpp_language.php"
#line 1375 "langs_src/parser_cpp_language.y"
    function yy_r238(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue =  $this->create_node('lvalue', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5840 "langs_src/parser_cpp_language.php"
#line 1383 "langs_src/parser_cpp_language.y"
    function yy_r239(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5846 "langs_src/parser_cpp_language.php"
#line 1388 "langs_src/parser_cpp_language.y"
    function yy_r240(){
	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5851 "langs_src/parser_cpp_language.php"
#line 1411 "langs_src/parser_cpp_language.y"
    function yy_r245(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue =  $this->create_node('scoped_identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5857 "langs_src/parser_cpp_language.php"
#line 1417 "langs_src/parser_cpp_language.y"
    function yy_r246(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_brackets', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5863 "langs_src/parser_cpp_language.php"
#line 1422 "langs_src/parser_cpp_language.y"
    function yy_r247(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_stringify', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5869 "langs_src/parser_cpp_language.php"
#line 1432 "langs_src/parser_cpp_language.y"
    function yy_r249(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('preprocessor_concat', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5875 "langs_src/parser_cpp_language.php"
#line 1454 "langs_src/parser_cpp_language.y"
    function yy_r253(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5881 "langs_src/parser_cpp_language.php"
#line 1459 "langs_src/parser_cpp_language.y"
    function yy_r254(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5887 "langs_src/parser_cpp_language.php"
#line 1466 "langs_src/parser_cpp_language.y"
    function yy_r255(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('c_style_typecast_operator', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 5894 "langs_src/parser_cpp_language.php"
#line 1474 "langs_src/parser_cpp_language.y"
    function yy_r256(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 5900 "langs_src/parser_cpp_language.php"
#line 1495 "langs_src/parser_cpp_language.y"
    function yy_r261(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5907 "langs_src/parser_cpp_language.php"
#line 1501 "langs_src/parser_cpp_language.y"
    function yy_r262(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->create_node('scoped_type', array( $this->yystack[$this->yyidx + -1]->minor,  $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5914 "langs_src/parser_cpp_language.php"
#line 1507 "langs_src/parser_cpp_language.y"
    function yy_r263(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5920 "langs_src/parser_cpp_language.php"
#line 1512 "langs_src/parser_cpp_language.y"
    function yy_r264(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5926 "langs_src/parser_cpp_language.php"
#line 1517 "langs_src/parser_cpp_language.y"
    function yy_r265(){
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5932 "langs_src/parser_cpp_language.php"
#line 1522 "langs_src/parser_cpp_language.y"
    function yy_r266(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5939 "langs_src/parser_cpp_language.php"
#line 1528 "langs_src/parser_cpp_language.y"
    function yy_r267(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5945 "langs_src/parser_cpp_language.php"
#line 1539 "langs_src/parser_cpp_language.y"
    function yy_r269(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция разрешения видимости"));
	$this->_retvalue = $this->create_node('namespace_resolve', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5951 "langs_src/parser_cpp_language.php"
#line 1544 "langs_src/parser_cpp_language.y"
    function yy_r270(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + -1]->minor->value()));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5959 "langs_src/parser_cpp_language.php"
#line 1551 "langs_src/parser_cpp_language.y"
    function yy_r271(){
	$this->mapper->start_new_lookup_namespace();
	$this->mapper->push_lookup_entry((string)($this->yystack[$this->yyidx + 0]->minor->value()));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5966 "langs_src/parser_cpp_language.php"
#line 1563 "langs_src/parser_cpp_language.y"
    function yy_r273(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('instantiated_template_type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5972 "langs_src/parser_cpp_language.php"
#line 1571 "langs_src/parser_cpp_language.y"
    function yy_r274(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак  ссылки"));
	$this->_retvalue = $this->create_node('type_ref', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5978 "langs_src/parser_cpp_language.php"
#line 1576 "langs_src/parser_cpp_language.y"
    function yy_r275(){
	$this->yystack[$this->yyidx + -1]->minor->add_child($this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 5984 "langs_src/parser_cpp_language.php"
#line 1601 "langs_src/parser_cpp_language.y"
    function yy_r281(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5990 "langs_src/parser_cpp_language.php"
#line 1606 "langs_src/parser_cpp_language.y"
    function yy_r282(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на %1(именительный)", array("%ur(именительный)", "признак константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5996 "langs_src/parser_cpp_language.php"
#line 1621 "langs_src/parser_cpp_language.y"
    function yy_r285(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_instantiation_argument_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6002 "langs_src/parser_cpp_language.php"
#line 1626 "langs_src/parser_cpp_language.y"
    function yy_r286(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("список типов", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_with_ptr', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6008 "langs_src/parser_cpp_language.php"
#line 1631 "langs_src/parser_cpp_language.y"
    function yy_r287(){
	$this->mapper->start_new_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6014 "langs_src/parser_cpp_language.php"
#line 1636 "langs_src/parser_cpp_language.y"
    function yy_r288(){
	$this->mapper->clear_lookup_namespace();
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 6020 "langs_src/parser_cpp_language.php"
#line 1641 "langs_src/parser_cpp_language.y"
    function yy_r289(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6026 "langs_src/parser_cpp_language.php"
#line 1646 "langs_src/parser_cpp_language.y"
    function yy_r290(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов инстанцирования шаблона", array("начало списка аргументов инстанцирования шаблона", "%ur(именительный)", "конец списка аргументов инстанцирования шаблона"));
	$this->_retvalue = $this->create_node('template_instantiation_arguments', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6032 "langs_src/parser_cpp_language.php"
#line 1653 "langs_src/parser_cpp_language.y"
    function yy_r291(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя пустого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6038 "langs_src/parser_cpp_language.php"
#line 1661 "langs_src/parser_cpp_language.y"
    function yy_r292(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой одинарной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6044 "langs_src/parser_cpp_language.php"
#line 1666 "langs_src/parser_cpp_language.y"
    function yy_r293(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6050 "langs_src/parser_cpp_language.php"
#line 1671 "langs_src/parser_cpp_language.y"
    function yy_r294(){
    $this->currentrule = new block_formal_langs_description_rule("имя длинного типа c плавающей запятой двойной точности", array("признак длинного числа", "имя типа c плавающей запятой двойной точности"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6056 "langs_src/parser_cpp_language.php"
#line 1679 "langs_src/parser_cpp_language.y"
    function yy_r295(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя символьного типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6062 "langs_src/parser_cpp_language.php"
#line 1684 "langs_src/parser_cpp_language.y"
    function yy_r296(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый символьный тип", array("признак знаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6068 "langs_src/parser_cpp_language.php"
#line 1689 "langs_src/parser_cpp_language.y"
    function yy_r297(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый символьный тип", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6074 "langs_src/parser_cpp_language.php"
#line 1697 "langs_src/parser_cpp_language.y"
    function yy_r298(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6080 "langs_src/parser_cpp_language.php"
#line 1702 "langs_src/parser_cpp_language.y"
    function yy_r299(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый целый тип", array("признак знаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6086 "langs_src/parser_cpp_language.php"
#line 1707 "langs_src/parser_cpp_language.y"
    function yy_r300(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый целый тип", array("признак беззнаковости", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6092 "langs_src/parser_cpp_language.php"
#line 1712 "langs_src/parser_cpp_language.y"
    function yy_r301(){
    $this->currentrule = new block_formal_langs_description_rule("короткий целый тип", array("признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6098 "langs_src/parser_cpp_language.php"
#line 1717 "langs_src/parser_cpp_language.y"
    function yy_r302(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6104 "langs_src/parser_cpp_language.php"
#line 1722 "langs_src/parser_cpp_language.y"
    function yy_r303(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "признак короткого целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6110 "langs_src/parser_cpp_language.php"
#line 1727 "langs_src/parser_cpp_language.y"
    function yy_r304(){
    $this->currentrule = new block_formal_langs_description_rule("длинный целый тип", array("признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6116 "langs_src/parser_cpp_language.php"
#line 1732 "langs_src/parser_cpp_language.y"
    function yy_r305(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целый тип", array("признак знаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6122 "langs_src/parser_cpp_language.php"
#line 1737 "langs_src/parser_cpp_language.y"
    function yy_r306(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целый тип", array("признак беззнаковости", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6128 "langs_src/parser_cpp_language.php"
#line 1742 "langs_src/parser_cpp_language.y"
    function yy_r307(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6134 "langs_src/parser_cpp_language.php"
#line 1748 "langs_src/parser_cpp_language.y"
    function yy_r308(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6140 "langs_src/parser_cpp_language.php"
#line 1753 "langs_src/parser_cpp_language.y"
    function yy_r309(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого типа", "признак длинного целого типа", "имя целого типа"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6146 "langs_src/parser_cpp_language.php"
#line 1761 "langs_src/parser_cpp_language.y"
    function yy_r310(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6152 "langs_src/parser_cpp_language.php"
#line 1766 "langs_src/parser_cpp_language.y"
    function yy_r311(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый короткий целый тип", array("признак знаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6158 "langs_src/parser_cpp_language.php"
#line 1771 "langs_src/parser_cpp_language.y"
    function yy_r312(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый короткий целый тип", array("признак беззнаковости", "короткий целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6164 "langs_src/parser_cpp_language.php"
#line 1778 "langs_src/parser_cpp_language.y"
    function yy_r313(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6170 "langs_src/parser_cpp_language.php"
#line 1783 "langs_src/parser_cpp_language.y"
    function yy_r314(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый длинный целвый тип", array("признак знаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6176 "langs_src/parser_cpp_language.php"
#line 1788 "langs_src/parser_cpp_language.y"
    function yy_r315(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый длинный целвый тип", array("признак беззнаковости", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6182 "langs_src/parser_cpp_language.php"
#line 1795 "langs_src/parser_cpp_language.y"
    function yy_r316(){
    $this->currentrule = new block_formal_langs_description_rule("64-битный целый тип", array("признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6188 "langs_src/parser_cpp_language.php"
#line 1800 "langs_src/parser_cpp_language.y"
    function yy_r317(){
    $this->currentrule = new block_formal_langs_description_rule("знаковый 64-битный целый тип", array("признак знаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6194 "langs_src/parser_cpp_language.php"
#line 1805 "langs_src/parser_cpp_language.y"
    function yy_r318(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковый 64-битный целый тип", array("признак беззнаковости", "признак длинного целого", "длинный целый тип"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 6200 "langs_src/parser_cpp_language.php"
#line 1818 "langs_src/parser_cpp_language.y"
    function yy_r320(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('unsigned', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6206 "langs_src/parser_cpp_language.php"
#line 1827 "langs_src/parser_cpp_language.y"
    function yy_r322(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('signed', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6212 "langs_src/parser_cpp_language.php"
#line 1836 "langs_src/parser_cpp_language.y"
    function yy_r324(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('long', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6218 "langs_src/parser_cpp_language.php"
#line 1845 "langs_src/parser_cpp_language.y"
    function yy_r326(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('short', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6224 "langs_src/parser_cpp_language.php"
#line 1854 "langs_src/parser_cpp_language.y"
    function yy_r328(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('int', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6230 "langs_src/parser_cpp_language.php"
#line 1863 "langs_src/parser_cpp_language.y"
    function yy_r330(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('char', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6236 "langs_src/parser_cpp_language.php"
#line 1872 "langs_src/parser_cpp_language.y"
    function yy_r332(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('double', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6242 "langs_src/parser_cpp_language.php"
#line 1881 "langs_src/parser_cpp_language.y"
    function yy_r334(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('float', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6248 "langs_src/parser_cpp_language.php"
#line 1890 "langs_src/parser_cpp_language.y"
    function yy_r336(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('void', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6254 "langs_src/parser_cpp_language.php"
#line 1899 "langs_src/parser_cpp_language.y"
    function yy_r338(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('greater', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6260 "langs_src/parser_cpp_language.php"
#line 1908 "langs_src/parser_cpp_language.y"
    function yy_r340(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('comma', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6266 "langs_src/parser_cpp_language.php"
#line 1917 "langs_src/parser_cpp_language.y"
    function yy_r342(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('lesser', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6272 "langs_src/parser_cpp_language.php"
#line 1926 "langs_src/parser_cpp_language.y"
    function yy_r344(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('multiply', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6278 "langs_src/parser_cpp_language.php"
#line 1935 "langs_src/parser_cpp_language.y"
    function yy_r346(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('ampersand', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6284 "langs_src/parser_cpp_language.php"
#line 1944 "langs_src/parser_cpp_language.y"
    function yy_r348(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('constkwd', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6290 "langs_src/parser_cpp_language.php"
#line 1953 "langs_src/parser_cpp_language.y"
    function yy_r350(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('typename', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6296 "langs_src/parser_cpp_language.php"
#line 1962 "langs_src/parser_cpp_language.y"
    function yy_r352(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('namespace_resolve_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6302 "langs_src/parser_cpp_language.php"
#line 1971 "langs_src/parser_cpp_language.y"
    function yy_r354(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('leftroundbracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6308 "langs_src/parser_cpp_language.php"
#line 1980 "langs_src/parser_cpp_language.y"
    function yy_r356(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('rightroundbracket', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6314 "langs_src/parser_cpp_language.php"
#line 1989 "langs_src/parser_cpp_language.y"
    function yy_r358(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('sizeof', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6320 "langs_src/parser_cpp_language.php"
#line 1998 "langs_src/parser_cpp_language.y"
    function yy_r360(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('identifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6326 "langs_src/parser_cpp_language.php"
#line 2007 "langs_src/parser_cpp_language.y"
    function yy_r362(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_concat_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6332 "langs_src/parser_cpp_language.php"
#line 2016 "langs_src/parser_cpp_language.y"
    function yy_r364(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_stringify_terminal', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6338 "langs_src/parser_cpp_language.php"
#line 2025 "langs_src/parser_cpp_language.y"
    function yy_r365(){
	$this->currentrule = new block_formal_langs_description_rule("список комментариев", array("%s", "%s"));
	$this->_retvalue = $this->create_node('comment_list', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 6344 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //block_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 40 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 6489 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new block_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
