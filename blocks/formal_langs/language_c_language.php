<?php 
/**
 * Defines a simple  english language lexer for correctwriting question type.
 *
 *
 * @copyright &copy; 2011  Oleg Sychev
 * @author Oleg Sychev, Dmitriy Mamontov, Sergey Pashaev Volgograd State Technical University
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
 * @package questions
 */
require_once($CFG->dirroot.'/blocks/formal_langs/tokens_base.php');
require_once($CFG->dirroot.'/blocks/formal_langs/language_base.php');
require_once($CFG->dirroot.'/blocks/formal_langs/jlex.php');
require_once($CFG->dirroot.'/blocks/formal_langs/c_language_tokens.php');
class block_formal_langs_language_c_language extends block_formal_langs_predefined_language
{
    public function __construct() {
        parent::__construct(null,null);
    }
    public function name() {
        return 'c_language';
    }
}
function block_formal_langs_octal_to_decimal_char($matches) {
  $code = $matches[0];
  $code = octdec($code);
  return chr(intval($code));
}
function block_formal_langs_hex_to_decimal_char($matches) {
   $code = $matches[0];
   $code = hexdec($code);
   $string = '';
   if (strlen($matches[0]) == 2) {
       $string = chr(intval($code));
   }
   else {
       $string = mb_convert_encoding('&#' . intval($code) . ';', 'UTF-8', 'HTML-ENTITIES');
   }
   return $string;
}


class block_formal_langs_predefined_c_language_lexer_raw extends JLexBase  {
	const YY_BUFFER_SIZE = 512;
	const YY_F = -1;
	const YY_NO_STATE = -1;
	const YY_NOT_ACCEPT = 0;
	const YY_START = 1;
	const YY_END = 2;
	const YY_NO_ANCHOR = 4;
	const YY_BOL = 256;
	var $YY_EOF = 257;

  // @var int number of  current parsed lexeme.
  private  $counter = 0;
  private  $errors  = array();
  private function create_error($symbol) {
     $res = new block_formal_langs_lexical_error();
     $res->token_index = $this->counter;
     $a = new stdClass();
     $a->line = $this->yyline;
     $a->position = $this->yycol;
     $a->symbol = $symbol;
     $res->errormessage = get_string('lexical_error_message','block_formal_langs',$a);
     //$this->counter++;
     $this->errors[] = $res;
  }
  public function get_errors() {
     return $this->errors;
  }
  private function create_token($class,$value) {
        // create token object
        $classname = "block_formal_langs_c_language_" . $class;
        $res = new $classname(null, $class, $value, $this->return_pos(), $this->counter);
        // increase token count
        $this->counter++;
        return $res;
    }
  private function create_character($string) {
    $preprocessedstring = $this->unescapestring($string);
    return $this->create_token("character", $preprocessedstring);
  }
  private function create_string($string) {
    $preprocessedstring = $this->unescapestring($string);
    return $this->create_token("string", $preprocessedstring);
  }
  private function unescapestring($value) {
    $sourcearray = array("\\a", "\\b", "\\f", "\\n", "\\r", "\\t", "\\v","\\'","\\\"","\\\\","\\?");
    $resultarray = array("\a",  "\b",  "\f",  "\n",  "\r",  "\t",  "\v", "\'", "\"",  "\\",  "?"  );
    $preprocessedstring = str_replace($sourcearray, $resultarray, $value);
    $preprocessedstring = preg_replace_callback("/\\\\([0-7]+)/i",
                                                'block_formal_langs_octal_to_decimal_char',
                                                $preprocessedstring);
    $preprocessedstring = preg_replace_callback("/\\\\x([0-7a-fA-F]+)/i",
                                                'block_formal_langs_hex_to_decimal_char',
                                                $preprocessedstring);
    return $preprocessedstring; 
  }
  private function return_pos() {
        $begin_line = $this->yyline;
        $begin_col = $this->yycol;
        if(strpos($this->yytext(), '\n')) {
            $lines = explode("\n", $this->yytext());
            $num_lines = count($lines);
            $end_line = $begin_line + $num_lines - 1;
            $end_col = strlen($lines[$num_lines -1]);
        } else {
            $end_line = $begin_line;
            $end_col = $begin_col + strlen($this->yytext());
        }
        $res = new block_formal_langs_node_position($begin_line, $end_line, $begin_col, $end_col);
        return $res;
    }
	protected $yy_count_chars = true;
	protected $yy_count_lines = true;

	function __construct($stream) {
		parent::__construct($stream);
		$this->yy_lexical_state = self::YYINITIAL;
	}

	const YYINITIAL = 0;
	static $yy_state_dtrans = array(
		0
	);
	static $yy_acpt = array(
		/* 0 */ self::YY_NOT_ACCEPT,
		/* 1 */ self::YY_NO_ANCHOR,
		/* 2 */ self::YY_NO_ANCHOR,
		/* 3 */ self::YY_NO_ANCHOR,
		/* 4 */ self::YY_NO_ANCHOR,
		/* 5 */ self::YY_NO_ANCHOR,
		/* 6 */ self::YY_NO_ANCHOR,
		/* 7 */ self::YY_NO_ANCHOR,
		/* 8 */ self::YY_NO_ANCHOR,
		/* 9 */ self::YY_NO_ANCHOR,
		/* 10 */ self::YY_NO_ANCHOR,
		/* 11 */ self::YY_NO_ANCHOR,
		/* 12 */ self::YY_NO_ANCHOR,
		/* 13 */ self::YY_NO_ANCHOR,
		/* 14 */ self::YY_NO_ANCHOR,
		/* 15 */ self::YY_NO_ANCHOR,
		/* 16 */ self::YY_NO_ANCHOR,
		/* 17 */ self::YY_NO_ANCHOR,
		/* 18 */ self::YY_NO_ANCHOR,
		/* 19 */ self::YY_NO_ANCHOR,
		/* 20 */ self::YY_NO_ANCHOR,
		/* 21 */ self::YY_NO_ANCHOR,
		/* 22 */ self::YY_NO_ANCHOR,
		/* 23 */ self::YY_NO_ANCHOR,
		/* 24 */ self::YY_NO_ANCHOR,
		/* 25 */ self::YY_NO_ANCHOR,
		/* 26 */ self::YY_NO_ANCHOR,
		/* 27 */ self::YY_NO_ANCHOR,
		/* 28 */ self::YY_NO_ANCHOR,
		/* 29 */ self::YY_NO_ANCHOR,
		/* 30 */ self::YY_NO_ANCHOR,
		/* 31 */ self::YY_NO_ANCHOR,
		/* 32 */ self::YY_NO_ANCHOR,
		/* 33 */ self::YY_NO_ANCHOR,
		/* 34 */ self::YY_NO_ANCHOR,
		/* 35 */ self::YY_NO_ANCHOR,
		/* 36 */ self::YY_NO_ANCHOR,
		/* 37 */ self::YY_NO_ANCHOR,
		/* 38 */ self::YY_NO_ANCHOR,
		/* 39 */ self::YY_NO_ANCHOR,
		/* 40 */ self::YY_NO_ANCHOR,
		/* 41 */ self::YY_NO_ANCHOR,
		/* 42 */ self::YY_NO_ANCHOR,
		/* 43 */ self::YY_NO_ANCHOR,
		/* 44 */ self::YY_NO_ANCHOR,
		/* 45 */ self::YY_NO_ANCHOR,
		/* 46 */ self::YY_NO_ANCHOR,
		/* 47 */ self::YY_NO_ANCHOR,
		/* 48 */ self::YY_NO_ANCHOR,
		/* 49 */ self::YY_NO_ANCHOR,
		/* 50 */ self::YY_NO_ANCHOR,
		/* 51 */ self::YY_NO_ANCHOR,
		/* 52 */ self::YY_NO_ANCHOR,
		/* 53 */ self::YY_NO_ANCHOR,
		/* 54 */ self::YY_NO_ANCHOR,
		/* 55 */ self::YY_NO_ANCHOR,
		/* 56 */ self::YY_NO_ANCHOR,
		/* 57 */ self::YY_NO_ANCHOR,
		/* 58 */ self::YY_NO_ANCHOR,
		/* 59 */ self::YY_NO_ANCHOR,
		/* 60 */ self::YY_NO_ANCHOR,
		/* 61 */ self::YY_NO_ANCHOR,
		/* 62 */ self::YY_NO_ANCHOR,
		/* 63 */ self::YY_NO_ANCHOR,
		/* 64 */ self::YY_NO_ANCHOR,
		/* 65 */ self::YY_NO_ANCHOR,
		/* 66 */ self::YY_NO_ANCHOR,
		/* 67 */ self::YY_NOT_ACCEPT,
		/* 68 */ self::YY_NO_ANCHOR,
		/* 69 */ self::YY_NO_ANCHOR,
		/* 70 */ self::YY_NO_ANCHOR,
		/* 71 */ self::YY_NO_ANCHOR,
		/* 72 */ self::YY_NO_ANCHOR,
		/* 73 */ self::YY_NO_ANCHOR,
		/* 74 */ self::YY_NO_ANCHOR,
		/* 75 */ self::YY_NO_ANCHOR,
		/* 76 */ self::YY_NO_ANCHOR,
		/* 77 */ self::YY_NO_ANCHOR,
		/* 78 */ self::YY_NO_ANCHOR,
		/* 79 */ self::YY_NOT_ACCEPT,
		/* 80 */ self::YY_NO_ANCHOR,
		/* 81 */ self::YY_NO_ANCHOR,
		/* 82 */ self::YY_NO_ANCHOR,
		/* 83 */ self::YY_NO_ANCHOR,
		/* 84 */ self::YY_NO_ANCHOR,
		/* 85 */ self::YY_NO_ANCHOR,
		/* 86 */ self::YY_NOT_ACCEPT,
		/* 87 */ self::YY_NO_ANCHOR,
		/* 88 */ self::YY_NO_ANCHOR,
		/* 89 */ self::YY_NO_ANCHOR,
		/* 90 */ self::YY_NOT_ACCEPT,
		/* 91 */ self::YY_NO_ANCHOR,
		/* 92 */ self::YY_NO_ANCHOR,
		/* 93 */ self::YY_NOT_ACCEPT,
		/* 94 */ self::YY_NO_ANCHOR,
		/* 95 */ self::YY_NO_ANCHOR,
		/* 96 */ self::YY_NOT_ACCEPT,
		/* 97 */ self::YY_NO_ANCHOR,
		/* 98 */ self::YY_NO_ANCHOR,
		/* 99 */ self::YY_NOT_ACCEPT,
		/* 100 */ self::YY_NO_ANCHOR,
		/* 101 */ self::YY_NOT_ACCEPT,
		/* 102 */ self::YY_NO_ANCHOR,
		/* 103 */ self::YY_NOT_ACCEPT,
		/* 104 */ self::YY_NO_ANCHOR,
		/* 105 */ self::YY_NOT_ACCEPT,
		/* 106 */ self::YY_NO_ANCHOR,
		/* 107 */ self::YY_NOT_ACCEPT,
		/* 108 */ self::YY_NO_ANCHOR,
		/* 109 */ self::YY_NOT_ACCEPT,
		/* 110 */ self::YY_NO_ANCHOR,
		/* 111 */ self::YY_NOT_ACCEPT,
		/* 112 */ self::YY_NO_ANCHOR,
		/* 113 */ self::YY_NOT_ACCEPT,
		/* 114 */ self::YY_NO_ANCHOR,
		/* 115 */ self::YY_NOT_ACCEPT,
		/* 116 */ self::YY_NO_ANCHOR,
		/* 117 */ self::YY_NOT_ACCEPT,
		/* 118 */ self::YY_NO_ANCHOR,
		/* 119 */ self::YY_NOT_ACCEPT,
		/* 120 */ self::YY_NO_ANCHOR,
		/* 121 */ self::YY_NOT_ACCEPT,
		/* 122 */ self::YY_NO_ANCHOR,
		/* 123 */ self::YY_NOT_ACCEPT,
		/* 124 */ self::YY_NO_ANCHOR,
		/* 125 */ self::YY_NOT_ACCEPT,
		/* 126 */ self::YY_NO_ANCHOR,
		/* 127 */ self::YY_NOT_ACCEPT,
		/* 128 */ self::YY_NO_ANCHOR,
		/* 129 */ self::YY_NOT_ACCEPT,
		/* 130 */ self::YY_NO_ANCHOR,
		/* 131 */ self::YY_NOT_ACCEPT,
		/* 132 */ self::YY_NOT_ACCEPT,
		/* 133 */ self::YY_NOT_ACCEPT,
		/* 134 */ self::YY_NOT_ACCEPT,
		/* 135 */ self::YY_NOT_ACCEPT,
		/* 136 */ self::YY_NOT_ACCEPT,
		/* 137 */ self::YY_NOT_ACCEPT,
		/* 138 */ self::YY_NOT_ACCEPT,
		/* 139 */ self::YY_NOT_ACCEPT,
		/* 140 */ self::YY_NOT_ACCEPT,
		/* 141 */ self::YY_NOT_ACCEPT,
		/* 142 */ self::YY_NOT_ACCEPT,
		/* 143 */ self::YY_NOT_ACCEPT,
		/* 144 */ self::YY_NOT_ACCEPT,
		/* 145 */ self::YY_NOT_ACCEPT,
		/* 146 */ self::YY_NOT_ACCEPT,
		/* 147 */ self::YY_NOT_ACCEPT,
		/* 148 */ self::YY_NOT_ACCEPT,
		/* 149 */ self::YY_NOT_ACCEPT,
		/* 150 */ self::YY_NOT_ACCEPT,
		/* 151 */ self::YY_NOT_ACCEPT,
		/* 152 */ self::YY_NO_ANCHOR,
		/* 153 */ self::YY_NO_ANCHOR,
		/* 154 */ self::YY_NO_ANCHOR,
		/* 155 */ self::YY_NOT_ACCEPT,
		/* 156 */ self::YY_NOT_ACCEPT,
		/* 157 */ self::YY_NO_ANCHOR,
		/* 158 */ self::YY_NO_ANCHOR,
		/* 159 */ self::YY_NO_ANCHOR,
		/* 160 */ self::YY_NO_ANCHOR,
		/* 161 */ self::YY_NO_ANCHOR,
		/* 162 */ self::YY_NO_ANCHOR,
		/* 163 */ self::YY_NO_ANCHOR,
		/* 164 */ self::YY_NO_ANCHOR,
		/* 165 */ self::YY_NO_ANCHOR,
		/* 166 */ self::YY_NO_ANCHOR,
		/* 167 */ self::YY_NO_ANCHOR,
		/* 168 */ self::YY_NO_ANCHOR,
		/* 169 */ self::YY_NO_ANCHOR,
		/* 170 */ self::YY_NO_ANCHOR,
		/* 171 */ self::YY_NO_ANCHOR,
		/* 172 */ self::YY_NO_ANCHOR,
		/* 173 */ self::YY_NO_ANCHOR,
		/* 174 */ self::YY_NO_ANCHOR,
		/* 175 */ self::YY_NO_ANCHOR,
		/* 176 */ self::YY_NO_ANCHOR,
		/* 177 */ self::YY_NO_ANCHOR,
		/* 178 */ self::YY_NO_ANCHOR,
		/* 179 */ self::YY_NO_ANCHOR,
		/* 180 */ self::YY_NO_ANCHOR,
		/* 181 */ self::YY_NO_ANCHOR,
		/* 182 */ self::YY_NO_ANCHOR,
		/* 183 */ self::YY_NO_ANCHOR,
		/* 184 */ self::YY_NO_ANCHOR,
		/* 185 */ self::YY_NO_ANCHOR,
		/* 186 */ self::YY_NO_ANCHOR,
		/* 187 */ self::YY_NO_ANCHOR,
		/* 188 */ self::YY_NO_ANCHOR,
		/* 189 */ self::YY_NO_ANCHOR,
		/* 190 */ self::YY_NO_ANCHOR,
		/* 191 */ self::YY_NO_ANCHOR,
		/* 192 */ self::YY_NO_ANCHOR,
		/* 193 */ self::YY_NO_ANCHOR,
		/* 194 */ self::YY_NO_ANCHOR,
		/* 195 */ self::YY_NO_ANCHOR,
		/* 196 */ self::YY_NO_ANCHOR,
		/* 197 */ self::YY_NO_ANCHOR,
		/* 198 */ self::YY_NO_ANCHOR,
		/* 199 */ self::YY_NO_ANCHOR,
		/* 200 */ self::YY_NO_ANCHOR,
		/* 201 */ self::YY_NO_ANCHOR,
		/* 202 */ self::YY_NO_ANCHOR,
		/* 203 */ self::YY_NO_ANCHOR,
		/* 204 */ self::YY_NO_ANCHOR,
		/* 205 */ self::YY_NO_ANCHOR,
		/* 206 */ self::YY_NO_ANCHOR,
		/* 207 */ self::YY_NO_ANCHOR,
		/* 208 */ self::YY_NO_ANCHOR,
		/* 209 */ self::YY_NO_ANCHOR,
		/* 210 */ self::YY_NO_ANCHOR,
		/* 211 */ self::YY_NO_ANCHOR,
		/* 212 */ self::YY_NO_ANCHOR,
		/* 213 */ self::YY_NO_ANCHOR,
		/* 214 */ self::YY_NO_ANCHOR,
		/* 215 */ self::YY_NO_ANCHOR,
		/* 216 */ self::YY_NO_ANCHOR,
		/* 217 */ self::YY_NO_ANCHOR,
		/* 218 */ self::YY_NO_ANCHOR,
		/* 219 */ self::YY_NO_ANCHOR,
		/* 220 */ self::YY_NO_ANCHOR,
		/* 221 */ self::YY_NO_ANCHOR,
		/* 222 */ self::YY_NO_ANCHOR,
		/* 223 */ self::YY_NO_ANCHOR,
		/* 224 */ self::YY_NO_ANCHOR,
		/* 225 */ self::YY_NO_ANCHOR,
		/* 226 */ self::YY_NO_ANCHOR,
		/* 227 */ self::YY_NO_ANCHOR
	);
		static $yy_cmap = array(
 40, 40, 40, 40, 40, 40, 40, 40, 40, 66, 5, 40, 66, 3, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 38, 54, 41, 37, 40, 50, 51, 42,
 60, 61, 2, 49, 58, 45, 47, 1, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 59, 55,
 39, 48, 4, 65, 40, 34, 34, 34, 34, 44, 46, 30, 30, 30, 30, 30, 36, 30, 30, 30,
 30, 30, 30, 30, 30, 35, 30, 30, 33, 30, 30, 62, 43, 63, 52, 30, 40, 6, 10, 14,
 18, 12, 19, 23, 26, 17, 30, 13, 20, 21, 16, 9, 28, 30, 11, 15, 8, 7, 29, 25,
 22, 27, 24, 56, 53, 57, 64, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 0, 0,);

		static $yy_rmap = array(
 0, 1, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 1, 1, 1, 12, 1, 1,
 1, 1, 1, 1, 1, 1, 13, 1, 14, 15, 16, 17, 18, 1, 1, 1, 1, 19, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 20, 21, 22, 1, 1, 1, 1, 1, 1, 14,
 1, 1, 1, 1, 1, 1, 23, 24, 25, 26, 27, 1, 1, 1, 1, 1, 1, 28, 29, 30,
 31, 32, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 33, 43, 44, 39, 45, 46, 47,
 48, 49, 50, 51, 52, 28, 53, 54, 55, 29, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 23, 97, 14, 98, 99, 100, 101, 14, 102,
 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
 125, 143, 144, 145, 146, 147, 148, 149, 150, 146, 151, 152, 153, 154, 155, 156, 157, 14, 158, 159,
 160, 161, 162, 163, 164, 165, 166, 167,);

		static $yy_nxt = array(
array(
 1, 2, 68, -1, 80, 3, 4, 207, 215, 217, 219, 220, 221, 217, 222, 223, 217, 69, 81, 152,
 224, 217, 217, 225, 217, 226, 217, 217, 217, 227, 217, 5, 70, 217, 217, 217, 88, 6, 3, 87,
 71, 83, 89, 71, 217, 91, 217, 7, 8, 94, 97, 9, 10, 11, 12, 13, 14, 15, 16, 17,
 18, 19, 20, 21, 22, 23, 3,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 67, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 157, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1,
 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 82, 82, -1, -1, -1,
 -1, -1, -1, -1, 86, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1, -1, 101, 103, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 183, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 121, -1, -1, -1, -1, -1, -1, 72,
 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, -1, -1, -1, 72, -1, -1, -1,
 -1, -1, -1, -1, 121, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1,
 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 31, -1, -1, 73, 73, -1, -1, -1,
 -1, -1, -1, -1, 86, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131, -1, -1, -1, -1, -1, -1, 74,
 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, -1, -1, -1, 74, -1, -1, -1,
 -1, -1, -1, -1, 131, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75,
 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1, -1, -1, 75, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 51, 76, -1, -1, 51, -1, 51, -1, 51, -1, -1, -1, 51, 51,
 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 51, -1, 51, 76, 76, -1, -1, -1,
 -1, -1, -1, -1, 51, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 151, 151, 151, -1, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 66, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151,
),
array(
 -1, 115, 115, -1, 115, -1, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
 115, 115, 115, 115, 115, 115, 115,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 92, 217, 217, 28,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1,
 82, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, 31, 31, 90, -1, 82, 82, -1, -1, -1,
 -1, -1, -1, -1, 86, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, 54, 105, 107, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, 105, 105, 105, 105, 105, 105,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
 117, 117, 117, 117, 117, 117, 117,
),
array(
 -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 29, 217, 217, 171, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, -1, 105, 107, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, 105, 105, 105, 105, 105, 105,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72,
 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, -1, -1, -1, 72, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74,
 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 85, -1, -1, -1, 74, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, 119, -1, -1, -1, 119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32,
 -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, 20,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, 93, 96, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
 109, 109, -1, 111, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
 109, 109, 109, 109, 109, 109, 109,
),
array(
 -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, 51, -1, 51, -1, 51, -1, -1, -1, 51, 51,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 51, -1, 51, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, 51, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, 35, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 49, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 39, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 28, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 153, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, -1, -1,
 125, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 153, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, 52,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 49, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 49, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 28, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, 77, 105, 107, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
 105, 105, 105, 105, 105, 105, 105,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 49, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 59, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 153, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 153, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, 132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 59, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, 133, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
 117, 117, 117, 117, 117, 117, 117,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 28, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 28, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, 134, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 28, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 28,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136, -1, 137, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 59, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 49, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 155,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 59,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 85, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, 140, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 142, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 143, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 85, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, 145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 147, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148, 149,
 -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 150, 150, 150, -1, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150,
),
array(
 -1, 150, 150, 150, 65, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 95, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 172, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 153, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 144, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, 151, 151, 151, -1, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 154, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 216, 217, 176, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 208, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 177, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 178, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 218, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 98, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 100, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 179, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 180, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 102, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 181, 217, 217, 217, 217, 210, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 182, 211, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 212, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 184,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 185, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 104, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 106, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 108, 217, 217,
 213, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 110, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 112, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 189, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 189, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 191, 217, 217, 217, 217, 217, 217, 114, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 192, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 194, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 197, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 198, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 92, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 116, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 200, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 201, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 118, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 214, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 202, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 120, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 122, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 108, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 124, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 126, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 128, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 203, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 204, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 130, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 206, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 114, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 186, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 95, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 100, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 159, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 188, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 193, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 195, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 196, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 199, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 205, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 160, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 187, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 190, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 161, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 162, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 163, 217, 217, 217,
 164, 217, 165, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 164, 217, 217, 166, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 167, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 168, 217, 217, 217, 217, 217, 217, 217, 217, 169, 217, 217,
 217, 217, 217, 217, 217, 170, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 173, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 174, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 209, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
array(
 -1, -1, -1, -1, -1, -1, 217, 217, 217, 175, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 158, 158, 217, 217, 217, 217, -1, -1, -1,
 -1, -1, -1, -1, 217, -1, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 -1, -1, -1, -1, -1, -1, -1,
),
);

	public function /*Yytoken*/ next_token ()
 {
		$yy_anchor = self::YY_NO_ANCHOR;
		$yy_state = self::$yy_state_dtrans[$this->yy_lexical_state];
		$yy_next_state = self::YY_NO_STATE;
		$yy_last_accept_state = self::YY_NO_STATE;
		$yy_initial = true;

		$this->yy_mark_start();
		$yy_this_accept = self::$yy_acpt[$yy_state];
		if (self::YY_NOT_ACCEPT != $yy_this_accept) {
			$yy_last_accept_state = $yy_state;
			$this->yy_mark_end();
		}
		while (true) {
			if ($yy_initial && $this->yy_at_bol) $yy_lookahead = self::YY_BOL;
			else $yy_lookahead = $this->yy_advance();
			$yy_next_state = self::$yy_nxt[self::$yy_rmap[$yy_state]][self::$yy_cmap[$yy_lookahead]];
			if ($this->YY_EOF == $yy_lookahead && true == $yy_initial) {
				return null;
			}
			if (self::YY_F != $yy_next_state) {
				$yy_state = $yy_next_state;
				$yy_initial = false;
				$yy_this_accept = self::$yy_acpt[$yy_state];
				if (self::YY_NOT_ACCEPT != $yy_this_accept) {
					$yy_last_accept_state = $yy_state;
					$this->yy_mark_end();
				}
			}
			else {
				if (self::YY_NO_STATE == $yy_last_accept_state) {
					throw new Exception("Lexical Error: Unmatched Input.");
				}
				else {
					$yy_anchor = self::$yy_acpt[$yy_last_accept_state];
					if (0 != (self::YY_END & $yy_anchor)) {
						$this->yy_move_end();
					}
					$this->yy_to_mark();
					switch ($yy_last_accept_state) {
						case 1:
							
						case -2:
							break;
						case 2:
							{ return $this->create_token("operators",$this->yytext()); }
						case -3:
							break;
						case 3:
							{  }
						case -4:
							break;
						case 4:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -5:
							break;
						case 5:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -6:
							break;
						case 6:
							{ $this->create_error($this->yytext()); return $this->create_token("unknown",$this->yytext());}
						case -7:
							break;
						case 7:
							{ return $this->create_token("operators",$this->yytext()); }
						case -8:
							break;
						case 8:
							{ return $this->create_token("operators",$this->yytext()); }
						case -9:
							break;
						case 9:
							{ return $this->create_token("operators",$this->yytext()); }
						case -10:
							break;
						case 10:
							{ return $this->create_token("operators",$this->yytext()); }
						case -11:
							break;
						case 11:
							{ return $this->create_token("operators",$this->yytext()); }
						case -12:
							break;
						case 12:
							{ return $this->create_token("operators",$this->yytext()); }
						case -13:
							break;
						case 13:
							{ return $this->create_token("semicolon",$this->yytext()); }
						case -14:
							break;
						case 14:
							{ return $this->create_token("brackets","{"); }
						case -15:
							break;
						case 15:
							{ return $this->create_token("brackets","}"); }
						case -16:
							break;
						case 16:
							{ return $this->create_token("comma",$this->yytext()); }
						case -17:
							break;
						case 17:
							{ return $this->create_token("colon",$this->yytext()); }
						case -18:
							break;
						case 18:
							{ return $this->create_token("brackets",$this->yytext()); }
						case -19:
							break;
						case 19:
							{ return $this->create_token("brackets",$this->yytext()); }
						case -20:
							break;
						case 20:
							{ return $this->create_token("brackets","["); }
						case -21:
							break;
						case 21:
							{ return $this->create_token("brackets","]"); }
						case -22:
							break;
						case 22:
							{ return $this->create_token("operators",$this->yytext()); }
						case -23:
							break;
						case 23:
							{ return $this->create_token("question_mark",$this->yytext()); }
						case -24:
							break;
						case 24:
							{ return $this->create_token("operators",$this->yytext()); }
						case -25:
							break;
						case 25:
							{ return $this->create_token("operators",$this->yytext()); }
						case -26:
							break;
						case 26:
							{ return $this->create_token("operators",$this->yytext()); }
						case -27:
							break;
						case 27:
							{ return $this->create_token("operators",$this->yytext()); }
						case -28:
							break;
						case 28:
							{ return $this->create_token("keyword",$this->yytext()); }
						case -29:
							break;
						case 29:
							{ return $this->create_token("keyword",$this->yytext()); }
						case -30:
							break;
						case 30:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -31:
							break;
						case 31:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -32:
							break;
						case 32:
							{ return $this->create_token("operators",$this->yytext()); }
						case -33:
							break;
						case 33:
							{ return $this->create_token("operators",$this->yytext()); }
						case -34:
							break;
						case 34:
							{ return $this->create_token("operators",$this->yytext()); }
						case -35:
							break;
						case 35:
							{ return $this->create_token("operators",$this->yytext()); }
						case -36:
							break;
						case 36:
							{ return $this->create_token("operators",$this->yytext()); }
						case -37:
							break;
						case 37:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -38:
							break;
						case 38:
							{ return $this->create_token("operators",$this->yytext()); }
						case -39:
							break;
						case 39:
							{ return $this->create_token("operators",$this->yytext()); }
						case -40:
							break;
						case 40:
							{ return $this->create_token("operators",$this->yytext()); }
						case -41:
							break;
						case 41:
							{ return $this->create_token("operators",$this->yytext()); }
						case -42:
							break;
						case 42:
							{ return $this->create_token("operators",$this->yytext()); }
						case -43:
							break;
						case 43:
							{ return $this->create_token("operators",$this->yytext()); }
						case -44:
							break;
						case 44:
							{ return $this->create_token("operators",$this->yytext()); }
						case -45:
							break;
						case 45:
							{ return $this->create_token("operators",$this->yytext()); }
						case -46:
							break;
						case 46:
							{ return $this->create_token("operators",$this->yytext()); }
						case -47:
							break;
						case 47:
							{ return $this->create_token("operators",$this->yytext()); }
						case -48:
							break;
						case 48:
							{ return $this->create_token("operators",$this->yytext()); }
						case -49:
							break;
						case 49:
							{ return $this->create_token("typename",$this->yytext()); }
						case -50:
							break;
						case 50:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -51:
							break;
						case 51:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -52:
							break;
						case 52:
							{ return $this->create_token("preprocessor",$this->yytext()); }
						case -53:
							break;
						case 53:
							{ return $this->create_token("operators",$this->yytext()); }
						case -54:
							break;
						case 54:
							{ return $this->create_string($this->yytext()); }
						case -55:
							break;
						case 55:
							{ return $this->create_character($this->yytext()); }
						case -56:
							break;
						case 56:
							{ return $this->create_token("ellipsis",$this->yytext()); }
						case -57:
							break;
						case 57:
							{ return $this->create_token("singleline_comment",$this->yytext()); }
						case -58:
							break;
						case 58:
							{ return $this->create_token("multiline_comment",$this->yytext()); }
						case -59:
							break;
						case 59:
							{ return $this->create_token("keyword",$this->yytext()); }
						case -60:
							break;
						case 60:
							{ return $this->create_token("preprocessor",$this->yytext()); }
						case -61:
							break;
						case 61:
							{ return $this->create_token("preprocessor",$this->yytext()); }
						case -62:
							break;
						case 62:
							{ return $this->create_token("preprocessor",$this->yytext()); }
						case -63:
							break;
						case 63:
							{ return $this->create_token("preprocessor",$this->yytext()); }
						case -64:
							break;
						case 64:
							{ return $this->create_token("preprocessor",$this->yytext()); }
						case -65:
							break;
						case 65:
							{ return $this->create_token("preprocessor",$this->yytext()); }
						case -66:
							break;
						case 66:
							{ return $this->create_token("preprocessor",$this->yytext()); }
						case -67:
							break;
						case 68:
							{ return $this->create_token("operators",$this->yytext()); }
						case -68:
							break;
						case 69:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -69:
							break;
						case 70:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -70:
							break;
						case 71:
							{ $this->create_error($this->yytext()); return $this->create_token("unknown",$this->yytext());}
						case -71:
							break;
						case 72:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -72:
							break;
						case 73:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -73:
							break;
						case 74:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -74:
							break;
						case 75:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -75:
							break;
						case 76:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -76:
							break;
						case 77:
							{ return $this->create_string($this->yytext()); }
						case -77:
							break;
						case 78:
							{ return $this->create_character($this->yytext()); }
						case -78:
							break;
						case 80:
							{ return $this->create_token("operators",$this->yytext()); }
						case -79:
							break;
						case 81:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -80:
							break;
						case 82:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -81:
							break;
						case 83:
							{ $this->create_error($this->yytext()); return $this->create_token("unknown",$this->yytext());}
						case -82:
							break;
						case 84:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -83:
							break;
						case 85:
							{ return $this->create_token("numeric",$this->yytext()); }
						case -84:
							break;
						case 87:
							{ return $this->create_token("operators",$this->yytext()); }
						case -85:
							break;
						case 88:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -86:
							break;
						case 89:
							{ $this->create_error($this->yytext()); return $this->create_token("unknown",$this->yytext());}
						case -87:
							break;
						case 91:
							{ return $this->create_token("operators",$this->yytext()); }
						case -88:
							break;
						case 92:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -89:
							break;
						case 94:
							{ return $this->create_token("operators",$this->yytext()); }
						case -90:
							break;
						case 95:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -91:
							break;
						case 97:
							{ return $this->create_token("operators",$this->yytext()); }
						case -92:
							break;
						case 98:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -93:
							break;
						case 100:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -94:
							break;
						case 102:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -95:
							break;
						case 104:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -96:
							break;
						case 106:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -97:
							break;
						case 108:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -98:
							break;
						case 110:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -99:
							break;
						case 112:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -100:
							break;
						case 114:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -101:
							break;
						case 116:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -102:
							break;
						case 118:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -103:
							break;
						case 120:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -104:
							break;
						case 122:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -105:
							break;
						case 124:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -106:
							break;
						case 126:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -107:
							break;
						case 128:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -108:
							break;
						case 130:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -109:
							break;
						case 152:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -110:
							break;
						case 153:
							{ return $this->create_token("keyword",$this->yytext()); }
						case -111:
							break;
						case 154:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -112:
							break;
						case 157:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -113:
							break;
						case 158:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -114:
							break;
						case 159:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -115:
							break;
						case 160:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -116:
							break;
						case 161:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -117:
							break;
						case 162:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -118:
							break;
						case 163:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -119:
							break;
						case 164:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -120:
							break;
						case 165:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -121:
							break;
						case 166:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -122:
							break;
						case 167:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -123:
							break;
						case 168:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -124:
							break;
						case 169:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -125:
							break;
						case 170:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -126:
							break;
						case 171:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -127:
							break;
						case 172:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -128:
							break;
						case 173:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -129:
							break;
						case 174:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -130:
							break;
						case 175:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -131:
							break;
						case 176:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -132:
							break;
						case 177:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -133:
							break;
						case 178:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -134:
							break;
						case 179:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -135:
							break;
						case 180:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -136:
							break;
						case 181:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -137:
							break;
						case 182:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -138:
							break;
						case 183:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -139:
							break;
						case 184:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -140:
							break;
						case 185:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -141:
							break;
						case 186:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -142:
							break;
						case 187:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -143:
							break;
						case 188:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -144:
							break;
						case 189:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -145:
							break;
						case 190:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -146:
							break;
						case 191:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -147:
							break;
						case 192:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -148:
							break;
						case 193:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -149:
							break;
						case 194:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -150:
							break;
						case 195:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -151:
							break;
						case 196:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -152:
							break;
						case 197:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -153:
							break;
						case 198:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -154:
							break;
						case 199:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -155:
							break;
						case 200:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -156:
							break;
						case 201:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -157:
							break;
						case 202:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -158:
							break;
						case 203:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -159:
							break;
						case 204:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -160:
							break;
						case 205:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -161:
							break;
						case 206:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -162:
							break;
						case 207:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -163:
							break;
						case 208:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -164:
							break;
						case 209:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -165:
							break;
						case 210:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -166:
							break;
						case 211:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -167:
							break;
						case 212:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -168:
							break;
						case 213:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -169:
							break;
						case 214:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -170:
							break;
						case 215:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -171:
							break;
						case 216:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -172:
							break;
						case 217:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -173:
							break;
						case 218:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -174:
							break;
						case 219:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -175:
							break;
						case 220:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -176:
							break;
						case 221:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -177:
							break;
						case 222:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -178:
							break;
						case 223:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -179:
							break;
						case 224:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -180:
							break;
						case 225:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -181:
							break;
						case 226:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -182:
							break;
						case 227:
							{ return $this->create_token("identifier",$this->yytext()); }
						case -183:
							break;
						default:
						$this->yy_error('INTERNAL',false);
					case -1:
					}
					$yy_initial = true;
					$yy_state = self::$yy_state_dtrans[$this->yy_lexical_state];
					$yy_next_state = self::YY_NO_STATE;
					$yy_last_accept_state = self::YY_NO_STATE;
					$this->yy_mark_start();
					$yy_this_accept = self::$yy_acpt[$yy_state];
					if (self::YY_NOT_ACCEPT != $yy_this_accept) {
						$yy_last_accept_state = $yy_state;
						$this->yy_mark_end();
					}
				}
			}
		}
	}
}
